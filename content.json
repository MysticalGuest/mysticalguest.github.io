{"pages":[{"title":"","text":"google-site-verification: google77a7c80af0d0da78.html","link":"/google77a7c80af0d0da78.html"},{"title":"","text":"友链 我的CSDN博客 我的博客园 申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://mysteryguest.gitee.io/img/shadow.jpg 网站名称：Longing(MysteryGuest的博客) 网站地址：https://mysteryguest.gitee.io 网站简介：后端开发，技术分享","link":"/friend/index.html"},{"title":"","text":"个人简介生日&ensp;&emsp;&emsp;09 Jan 1999 E-mail&ensp;&emsp;mysticalguest@163.com 英语&ensp;&emsp;&emsp;CET-6 在校大学生，致力于搬砖，想搬好每一块砖 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 职业技能 Java Maven Jsp Spring Thymeleaf HTML Javascript Vue 教育经历 &emsp;西北大学 &emsp;2017 - 2021 | 软件工程 个人作品闲时基于SpringBoot和JSP开发的宾馆管理系统 运用SSM框架开发的宾馆管理系统 Python大作业，基于Tkinter的餐厅信息管理系统 本站推荐索引 博客主题相关 Hexo迁移 ICARUS主题美化 技术知识点 Java笔记文档 数据结构进阶实训 计划2020计划 2020.01.09 2020-GOALS [ ] 考研 [x] 坚持完善博客","link":"/about/index.html"}],"posts":[{"title":"数据结构进阶实训一 位运算，优化算法","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目112对于一个字节（8bit)的无符号整型变量求其二进制表示中“1”的个数。要求算法的执行效率尽可能高。 1.1 算法设计思想 用户直接输入一个8位无符号整型常数，并进行用户输入的校验，如果不满足条件，提示用户重新输入，直到输入正确； 将十进制转换为二进制； 持续下面循环8次： 将二进制数模2，结果为1，计数器加1，然后二进制数右移一位； 循环结束，1的个数为计数器值。 1.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;stdio.h&gt;#include&lt;conio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;void main(){ printf(\"Please enter an 8-bit unsigned integer constant:\"); char array[8]; scanf(\"%s\", array); int len = strlen(array); // 判断用户输入是否是8位无符号整型常量 // 并判断用户输入是否为二进制 // 如果长度不为8,或不是二进制数,则重新输入 while(len!=8 || strspn(array, \"01\")!=len){ printf(\"Your input does not meet the conditions!\\n \\ Please enter an 8-bit unsigned integer constant as required:\"); scanf(\"%s\", array); len = strlen(array); } int arrayToInt = strtol(array, NULL, 2); //十进制转二进制函数的声明 int transfer(int x); int i=0, num=0; for(i; i&lt;len; i++){ if(transfer(arrayToInt)%2 == 1) num++; arrayToInt=arrayToInt&gt;&gt;1; } printf(\"The number of \\\"1\\\" in its binary representation is: %d.\\n\", num); printf(\"The program will continue to run, press any key to close it.\"); getch();}int transfer(int x){ int i=0; int binary = 0b0; for(i ; i&lt;x ; i++){ binary++; } return binary;} 1.3 运行情况截图 题目21给定一个整数N，N！末尾会有多少个0呢？编写算法计算给定的N！末尾有多少个0？ 2.1 算法设计思想 一个数的阶乘末尾有多少0，即判断这个数除以10的余数是否为0，如果为0，则末尾是0。 2.2 源代码 1234567while(factorial&gt;0){ if(factorial%10==0) numOfZero++; else break; factorial = factorial / 10;} 2.3 运行情况截图 题目31求N!的二进制表示中最低位的1的位置。 3.1 算法设计思想 初始化计数器为0； 先把n!化为二进制表示的形式，再把其二进制形式模2，如果结果为0，将其二进制形式右移一位，并且计数器加1； 循环上面的操作，直到模2结果为1，结束循环，计数器即为最后结果。 3.2 源代码 1234567891011121314151617181920212223242526int convert(int x){ // 十进制转二进制 int binary=0b0, i=0; for(i; i&lt;x; i++){ binary++; } return binary;}void main(){ int n,factorial=1, i=1, numOfZero=0; printf(\"Please enter an integer and the program will calculate its factorial:\"); scanf(\"%d\", &amp;n); for(i ; i&lt;=n; i++){ // 求阶乘 factorial *= i; } printf(\"The factorial of n is %d\\n\", factorial); int binary = convert(factorial); while(1){ // 求位置 numOfZero++; if(binary%2==1) break; binary = binary&gt;&gt;1; } printf(\"When representing n! In binary, \\ the position of the lowest bit 1 is (from right to left): %d\\n\", numOfZero);} 3.3 运行情况截图 题目41对于一个由N个整数组成的数组，设计算法（程序），求出该数组中的最大值和最小值。 4.1 算法设计思想 先判断数组的前两个值，将小的赋给min，将大的赋给max； 循环从数组的下标2开始，将数组下标为2的值记为num，如果num小于min，则将num赋值给min，反之则不变； 如果num大于max，则将num赋值给max，反之则不变； 直到循环结束，max则为最大值，min为最小值。 4.2 源代码 123456789101112131415161718192021222324252627void main(){ int random, num[20], i=0, max, min; printf(\"Give an array of 20 integers:\\n\"); for(i; i&lt;20; i++){ // 使用随机数初始化数组 random = rand()%100; num[i] = random; printf(\"%d \", num[i]); } if(num[0]&lt;num[1]){ max=num[1]; min=num[0]; } else{ max=num[0]; min=num[1]; } i=2; // 从2开始比较 for(i; i&lt;20; i++){ if(num[i]&gt;max) max=num[i]; if(num[i]&lt;min) min=num[i]; } printf(\"\\nThe maximum value of the array is: %d\", max); printf(\"\\nThe minimum value of the array is: %d\\n\", min); system(\"pause\");} 4.3 运行情况截图 题目51快速找出一个数组中所有满足条件的的两个数。（条件：这两个数的和等于一个给定的值sum.）。 5.1 算法设计思想 从第1个数开始循环与后面的数相加，判断结果如果等于给定值sum就输出这两个值； 然后从第2个数开始循环与后面的数相加，以此循环直到把数组遍历完。 5.2 源代码 123456789101112131415161718192021void main(){ int sum=100 int num[20]={41, 67, 34, 0, 69, 24, 78, 58, 62, 64, 5, 45, 81, 27, 61, 91, 95, 42, 27, 36}; printf(\"Give an array of 20 integers:\\n\"); int i=0, j; for(i; i&lt;20; i++){ printf(\"%d \", num[i]); } printf(\"\\n\"); i=0; for(i; i&lt;20; i++){ int add=num[i]; j= i+1; for(j; j&lt;20; j++){ if(add+num[j]==sum){ printf(\"The sum of the two numbers found is 100, which are: %d and %d.\\n\", add, num[j]); } } } system(\"pause\");} 5.3 运行情况截图","link":"/C/f291a0ed.html"},{"title":"数据结构进阶实训七 链表，数组","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123判断两个链表是否相交？ - 给定两个单链表，判断两个单链表是否相交？ - 假设两个单链表均没有环 1.1 算法设计思想 如果链表有交点，那么他们一定有共同后缀，转化为共同后缀问题 1.2 源代码 12345678910111213141516171819202122LinkList commonSuffix(LinkList L1, LinkList L2){ Node *p, *q; int len1, len2; len1=listlen(L1); len2=listlen(L2); if(lastChar(L1) != lastChar(L2)){ return NULL; } else{ for(p=L1; len1&gt;len2; len1--){ p=p-&gt;next; } for(q=L2; len2&gt;len1; len2--){ q=q-&gt;next; } while(p-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }} 1.3 运行情况截图 题目2123456连续子数组的最大和。输入一个整形数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O（n） - 例如输入数组为（1、-2、3、10、-4、7、2、-5） - 和最大的子数组为（ 3、10、-4、7、2 ） - 该子数组的和为18 2.1 算法设计思想 将第一个元素默认最大值，往后遍历，并相加；如果此时和sum小于当前元素，就舍弃之前的元素；如果当前sum大于记录的max值，将max值改为sum；直到遍历结束数组所有元素 2.2 源代码 1234567891011121314151617181920212223242526int MaxSum(int a[], int size, int *s, int *e){ if(a == NULL || size == 0){ //非法输入 return -1; } int sum = 0;//初始和为0 int i = 0; int max = a[i];//最大值最初必为数组第一个元素 for(i; i &lt; size; i++){ sum = sum + a[i];//遍历一个元素，累加一次 if(sum &lt; a[i]){//如果加上当前元素之后的和比当前元素还小，则舍弃之前的元素，从当前元素开始累加 *s = i; sum = a[i]; } //如果加上当前元素之后的和比当前元素大 //说明可以继续累加 //如果当前和比最大值大，则更新最大值为当前和 //否则，不做更新 if(sum &gt; max){ *e = i; max = sum; } } return max;} 2.3 运行情况截图 题目31234数组中的逆序对。在数组中的两个数字，如果前面的数字大于后面的数字，则这两个数字组成一个逆序对。 - 输入一个数组，输出逆序对、并求出这个数组中出现的逆序对的总数 - 例如：数组中元素{7，5，6，4}，一共有5个逆序对分别是（7,6）、（7,5）（7,4）、（6,4）、（5,4） 3.1 算法设计思想 利用归并的思想；在排序交换元素的时候就输出这两数，就是逆序对，并用计数器记录 3.2 源代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#define MAX 32767int merge(int *array, int p,int q,int r) { //归并array[p...q] 与 array[q+1...r] int tempSum=0; int n1 = q-p+1; int n2 = r-q; int* left = NULL; int* right = NULL; int i, j, k, l; left = ( int *)malloc(sizeof(int) * (n1+1)); right = ( int *)malloc(sizeof(int) * (n2+1)); for(i=0; i&lt;n1; i++) left[i] = array[p+i]; for(j=0; j&lt;n2; j++) right[j] = array[q+1+j]; left[n1] = MAX; //哨兵，避免检查每一部分是否为空 right[n2] = MAX; i=0; j=0; for(k=p; k&lt;=r; k++) { if(left[i] &lt;= right[j]) { array[k] = left[i]; i++; } else { if(array[k]&gt;right[j]){ l=k+1; for(l; l&lt;n1; l++) printf(\"(%d, %d)\\t\", array[l], right[j]); } printf(\"(%d, %d)\\t\", left[i], right[j]); array[k] = right[j]; j++; tempSum += n1 - i; } } return tempSum;}int mergeSort(int *array, int start, int end ) { int sum=0; if(start &lt; end) { int mid = (start + end) /2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid+1, end); sum += merge(array,start,mid,end); } return sum;} 3.3 运行情况截图","link":"/C/a435736a.html"},{"title":"数据结构进阶实训三 字符串，数组","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11234实现将一个字符串中的每个空格字符换成“%20”。 - 例如：输入“We are happy.”, 则输出: - “We%20are%happy.”要求在时间复杂度O（n）,空间复杂度O（1）下完成。假设存放字符串的数组空间足够大。 1.1 算法设计思想 前提假设存放字符串的数组空间足够大； 第一次，遍历，计算出字符串长度，和替换后字符串长度； i从原字符串末尾出发，j从新字符串末尾出发，遇到空格就替换为“%20”。 1.2 源代码 12345678910111213141516171819202122232425char str[100] = \"We are happy.\"; // 假设空间足够大int length=0, blank=0, i, j;while(str[length]!='\\0'){ printf(\"%c\", str[length]); if(str[length]==' '){ blank++; } length++;}length += 2 * blank;i=length-2*blank;j=length;while(i&gt;=0 &amp;&amp; j&gt;i){ if(str[i]==' '){ str[j--]='0'; str[j--]='2'; str[j--]='%'; } else{ str[j--]=str[i]; } i--;} 1.3 运行情况截图 题目21234数组中出现次数超过一半的数字已知数组中有一个数字其出现的次数超过了数组长度的一半，请找出这个数组。要求： - 高效 - 分析时空效率 2.1 算法设计思想 一个数字出现的次数超过了数组的一半，那么将其排序后，称为有序数列，中间的元素即为所求。 2.2 源代码 1234567891011121314151617void sort(int a[], int length){ int i, j, min, temp; for(i=0; i&lt;length; i++){ min=i; for(j=i; j&lt;length; j++){ if(a[min]&gt;a[j]) min=j; } if(min!=i){ temp=a[min]; a[min]=a[i]; a[i]=temp; } }}printf(\"%d\\n\", array[length/2]); 2.3 运行情况截图 题目31234已知数组中的n个正数，找出其中最小的k个数。要求： - 高效 - 分析时空效率 3.1 算法设计思想 先将数组从小到大排序； 即可顺序打印出前k个数，即为数组中最小的k个数。 时间复杂度为O(n)，空间复杂度为O(1)。 3.2 源代码 12345678910111213141516171819202122void sort(int a[], int length){ int i, j, min, temp; for(i=0; i&lt;length; i++){ min=i; for(j=i; j&lt;length; j++){ if(a[min]&gt;a[j]) min=j; } if(min!=i){ temp=a[min]; a[min]=a[i]; a[i]=temp; } }}printf(\"\\nEnter the value k and output the smallest k number among them, k = \");scanf(\"%d\", &amp;k);printf(\"The smallest %d number in the array is: \\n\", k);for(i=0; i&lt;k; i++){ printf(\"%d\\t\", array[i]);} 3.3 运行情况截图","link":"/C/11cf87f8.html"},{"title":"数据结构进阶实训二 顺序表","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11234输入数字n,按顺序打印输出从1到最大的n位十进制数。比如输入3，则打印出1,2,3，一直到最大的3位数999。 - 要考虑若n很大，我们求最大的n位数用int 或long long 也可能会溢出； - 考虑大数问题； - 提示：关于大数的表示和存储：用字符数组(取值为数字型字符)来表达大数 1.1 算法设计思想 这题主要解决大数问题。我用字符串来解决大数问题。那么字符串中所有字符都是数字；首先动态分配字符串空间为（n+1）*char，字符串最后要有一个结束符’\\0’，初始化其他位为0；然后每一次为字符串表示的数字加1，再打印出来；方法print()会遍历字符串，直到遇到第一个非0字符后，打印后面的字符；关键方法printRecursively()，每10个数，对具体位数加1，然后进位，递归。 1.2 源代码 1234567891011121314151617181920212223void printRecursively(char *number, int n, int index){ int i; if(index == n){ print(number, n); return; } for(i = 0; i&lt;10; i++){ number[index] = i + '0'; // printf(\"NUMBER: %s\\n\", number); printRecursively(number, n, index + 1); }}void printToMaxOfNDigits(int n){ if (n &lt;= 0) return; char *number = (char *)malloc((n+1)*sizeof(char)); memset(number, '0', (n+1)*sizeof(char)); // 在一段内存块中填充某个给定的值,初始化为0 number[n] = '\\0'; printRecursively(number, n, 0); free(number);} 1.3 运行情况截图 题目2123456已知一个顺序表L（整数）实现一个函数将调整顺序表中的数字顺序，使得所有奇数位于表L的前半部分，所有偶数位于数组的后半部分。 - 如果把题目改成把顺序表中的数按照大小分为两部分，负数都在非负数的前面，该怎么做？再定义一个函数？？ - 或者再改为：把顺序表中的数分为两部分， 能被3整除的数放在前面，不能被3整除的数放在后面；再定义一个函数？？ - 是否有更好的办法？增加代码的可扩展性。 2.1 算法设计思想 定义一个规则rule方法，根据用户输入，确定排序规则，增加代码复用性；三种排序规则思想一样：（1）start=0从顺序表头开始往后，end从尾开始往前，start遇到偶数停止，end遇到奇数停止，交换下标为start和下标为end的元素，然后继续前进；（2）start=0从顺序表头开始往后，end从尾开始往前，start遇到正数停止，end遇到负数停止，交换下标为start和下标为end的元素，然后继续前进；（3）start=0从顺序表头开始往后，end从尾开始往前，start遇到不能被3整除的数停止，end遇到能被3整除的数停止，交换下标为start和下标为end的元素，然后继续前进。 2.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114/*宏定义*/#define MAXSIZE 30//宏定义布尔类型#define BOOL int#define TRUE 1#define FALSE 0typedef int ElemType; /*顺序表中存放整型元素*/typedef struct{ ElemType elem[MAXSIZE]; int last;}SeqList;/*函数声明*/void initList(SeqList *L);void printList(SeqList L);BOOL rule(int elem, int select);void sortList(SeqList *L, SeqList *L1, int select);void main(){ SeqList La, Lb; Lb.last=-1; // 初始化Lb int select; initList(&amp;La); // 给出一个顺序表La printf(\"Give a sequence table: \\nLa = \"); printList(La); /* 给出下列几种排序规则: 奇数在前，偶数在后; 负数在前，非负数在后; 能被3整除的数在前面，不能被3整除的数在后面. */ printf(\"\\nGive the following sorting rules: \\ \\n1.Odd number first, even number behind;\\ \\n2.Negative numbers first, non-negative numbers last;\\ \\n3.Numbers divisible by 3 are in the front, \\ and numbers that are not divisible by 3 are in the back.\\ \\nPlease select the sorting rule you want and enter the rule number:\"); scanf(\"%d\", &amp;select); while(select != 1 &amp;&amp; select != 2 &amp;&amp; select != 3){ printf(\"Please reselect: \"); scanf(\"%d\", &amp;select); } sortList(&amp;La, &amp;Lb, select); printf(\"The adjusted sequence table is: \\n\"); printList(Lb); system(\"pause\");}/*函数定义*/void initList(SeqList *L){ L-&gt;last=-1; int i=0; for(i; i&lt;MAXSIZE; i++){ L-&gt;elem[i]=rand()%100 - 50; } L-&gt;last=MAXSIZE-1;}void printList(SeqList L){ int i; printf(\"(\"); for(i=0; i&lt;=L.last; i++) printf(\"%d \", L.elem[i]); printf(\")\\n\");}void sortList(SeqList *L, SeqList *L1, int select){ int i=0, end=L-&gt;last, start=0; for(i; i&lt;=L-&gt;last; i++){ if( rule(L-&gt;elem[i], select) == TRUE){ // 偶数尾插法 L1-&gt;elem[end] = L-&gt;elem[i]; end--; } else{ // 奇数前插法 L1-&gt;elem[start] = L-&gt;elem[i]; start++; } } L1-&gt;last=L-&gt;last;}BOOL rule(int elem, int select){ switch (select) { case 1: if(elem%2==0) return TRUE; return FALSE; break; case 2: if(elem&gt;=0) return TRUE; return FALSE; break; case 3: if(elem%3!=0) return TRUE; return FALSE; break; default: return FALSE; break; }} 2.3 运行情况截图 题目31给定一个整数数组，删除相邻的重复数字，结果数组中不能存在任何相邻的重复数字。 3.1 算法设计思想 将数组存入顺序表；遍历顺序表，将下标为i和下标i+1的元素比较如果相等，进行判断：如果下标为i和下标i+2的元素相等，所有元素往前移动1位；如果下标为i和下标i+2的元素不相等，所有元素往前移动2位；持续上述循环，结束的标志是遍历顺序表，没有相邻相同元素就结束循环。 3.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839while(flag==1){ if(L.last==0) // 代表顺序表中只有一个元素 break; if(L.elem[i]==L.elem[j]){ if(L.elem[i]==L.elem[j+1]){ // 判断是否3数相连 for(k=i; k&lt;L.last; k++){ L.elem[k]=L.elem[k+1]; // 所有元素前移1位 } L.last = L.last-1; } else{ // 不是3数相连，那就是2数相连 for(k=i; k&lt;L.last-1; k++){ L.elem[k]=L.elem[k+2]; // 所有元素前移2位 } L.last = L.last-2; if(j&gt;L.last){ i=0; j=1; } } } if(j==L.last){ for(k=0; k&lt;L.last; k++){ if(L.elem[k]==L.elem[k+1]){ flag=1; break; } else flag=0; } i=-1; j=0; } i++; j++;} 3.3 运行情况截图 题目4123已知顺序表L（数组表示即可），编写一个时间复杂度O(n)，空间复杂度为O（1）的算法将表L中所有值为x 的元素删除。 - 表中元素无序。 4.1 算法设计思想 遍历顺序表，将顺序表a的元素赋给顺序表b，遇到要删除的元素就跳过。 4.2 源代码 12345678910111213void deleteList(SeqList *LA, SeqList *LB, int n){ int count=0, i=0, j=0; for(i; i&lt;LA-&gt;last+1; i++){ if(LA-&gt;elem[i]==n){ count++; // 记录删除元素的个数 } else{ LB-&gt;elem[j] = LA-&gt;elem[i]; j++; } } LB-&gt;last = LA-&gt;last-count;} 4.3 运行情况截图 题目51234567将n 个整数存入顺序表L，实现将L中的整数序列循环左移p(0&lt;p&lt;n)个位置，即将L中的数据序列(x0, x1, ... , xp-1, xp, xp+1, ... , xn-1)变换为(xp, xp+1, ... , xn-1, x0, x1, ... , xp-1) - 类似的实现循环右移K位； - 要求：时间复杂度为O(n)。空间复杂度为S(1)。 5.1 算法设计思想 将下标0到p的元素逆置；将下标p+1到n 的元素逆置；最后将整个顺序表逆置得到最终结果。 5.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960void main(){ SeqList L = {{1,2,3,4,5,6,7,8,9,10},10}; int n; int temp; char direction; printf(\"Give a sequence table: \\n\"); printlist(L); printf(\"Please enter a positive integer n to cycle through the sequence: \"); scanf(\"%d\", &amp;n); getchar(); // 吃掉回车 printf(\"Please select the direction of movement (L for left, R for right): \"); while(direction!='R' &amp;&amp; direction!='L'){ scanf(\"%c\", &amp;direction); getchar(); if(direction=='L'){ n = n%L.last; } else if(direction=='R'){ // 右移n格就是左移L.last-n格 n = L.last - n%L.last; } else{ printf(\"Wrong input, please re-enter: \"); } } int i = 0, j = n-1; //将子表(X0,X1...,Xp-1)逆序为(Xp-1,...,X1,X0) reverse(&amp;L, i, j); //将子表(Xp,Xp+1,...,Xn-1)逆序为(Xn-1,...,Xp+1,Xp) i = n; j = L.last-1; reverse(&amp;L, i, j); //将整张表(Xp-1,...,X1,X0,Xn-1,...,Xp+1,Xp)逆序为(Xp,Xp+1,...,Xn-1,X0,X1...,Xp-1) i = 0; j = L.last-1; reverse(&amp;L, i, j); printf(\"The sequence table after moving is: \\n\"); printlist(L); system(\"pause\");}void reverse(SeqList *L,int i, int j){ int temp; while(i &lt; j){ temp = L-&gt;elem[i]; L-&gt;elem[i] = L-&gt;elem[j]; L-&gt;elem[j] = temp; ++i; --j; }} 5.3 运行情况截图","link":"/C/bdf9602c.html"},{"title":"数据结构进阶实训九 二叉树的应用","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目112345建二叉树二叉链表存储 - 扩展的先序序列（之前采用的方法） 此次要求：已知两个遍历序列建二叉树（先/中，后/中） - 其先、中序遍历序列分别存放在两个数组pre[]和inorder[]中。 - 其中、后序遍历序列分别存放在两个数组inorder[]和post中。 1.1 算法设计思想 两种建树的思想相同，都是分治的思想；通过前序遍历，第一个元素就是树的根节点；然后在重建左子树，找到左子树的根节点，重建右子树，找到右子树的根节点，递归下去；中序+后续遍历重建树也是如此；后续序列的最后一个元素就是树的根节点。 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;stdio.h&gt;#include&lt;Windows.h&gt;typedef char ElemType;typedef struct Node{ ElemType elem; struct Node *LChild; struct Node *RChild;}BiTNode, *BiTree;// 前序+中序重建二叉树void ReBuildByPreAndInOrder(char *prelist, char *inlist, int len, BiTree *bt){ if(!prelist || !inlist || len&lt;=0 ) //空树 return; int i; // 找到根结点在中序遍历中的位置 for(i = 0; i &lt; len; i++){ if(inlist[i] == prelist[0]) break; } if(i&gt;=len) return; // 初始化根结点 *bt = (BiTNode*)malloc(sizeof(BiTNode)); if(!bt) // 申请失败 return; (*bt)-&gt;LChild = (*bt)-&gt;RChild = NULL; (*bt)-&gt;elem = prelist[0]; // 重建左子树 ReBuildByPreAndInOrder(prelist+1, inlist, i, &amp;(*bt)-&gt;LChild); // 重建右子树 ReBuildByPreAndInOrder(prelist+i+1, inlist+i+1, len-i-1, &amp;(*bt)-&gt;RChild);}// 中序+后序重建二叉树void ReBuildByInAndPostOrder(char *inlist,char *postlist, int len, BiTree *bt){ if(!inlist || !postlist || len&lt;=0 ) //空树 return; int i; // 找到根结点在中序遍历中的位置 for(i = 0; i &lt; len; i++){ if(inlist[i] == postlist[len-1]) break; } if(i&gt;=len) return; // 初始化根结点 *bt = (BiTNode*)malloc(sizeof(BiTNode)); if(!bt) return; (*bt)-&gt;LChild = (*bt)-&gt;RChild = NULL; (*bt)-&gt;elem = postlist[len-1]; //重建左子树 ReBuildByInAndPostOrder(inlist, postlist, i, &amp;(*bt)-&gt;LChild); //重建右子树 ReBuildByInAndPostOrder(inlist+i+1, postlist+i, len-i-1, &amp;(*bt)-&gt;RChild);}void PrintTree(BiTree bt,int nLayer){ int i; if(bt==NULL) return; PrintTree(bt-&gt;RChild,nLayer+1); for(i=0;i&lt;nLayer;i++) printf(\" \"); printf(\"%c\\n\", bt-&gt;elem); PrintTree(bt-&gt;LChild,nLayer+1);}void main(){ char pre[7]={'A', 'B', 'D', 'E', 'C', 'F', 'G'}, inorder1[7] = {'D', 'B', 'E', 'A', 'F', 'C', 'G'}, inorder2[9] = {'G', 'D', 'H', 'B', 'A', 'E', 'C', 'I', 'F'}, post[9] = {'G', 'H', 'D', 'B', 'E', 'I', 'F', 'C', 'A'}; int i=0; /* 前序+中序重建二叉树 */ printf(\"Give the preorder and midorder traversal of a binary tree: \\nPreorder = \"); for(i=0; i&lt;7; i++){ printf(\"%c \", pre[i]); } printf(\"\\nMidorder = \"); for(i=0; i&lt;7; i++){ printf(\"%c \", inorder1[i]); } BiTree T1=NULL; ReBuildByPreAndInOrder(pre, inorder1, 7, &amp;T1); printf(\"\\nThe binary tree constructed by two traversal sequences is: \\n\"); PrintTree(T1, 1); /* 前序+中序重建二叉树 */ /* 中序+后序重建二叉树 */ printf(\"Give the midorder and postorder traversal of a binary tree: \\nMidorder = \"); for(i=0; i&lt;9; i++){ printf(\"%c \", inorder2[i]); } printf(\"\\nPostorder = \"); for(i=0; i&lt;9; i++){ printf(\"%c \", post[i]); } BiTree T2=NULL; ReBuildByInAndPostOrder(inorder2, post, 9, &amp;T2); printf(\"\\nThe binary tree constructed by two traversal sequences is: \\n\"); PrintTree(T2, 1); /* 中序+后序重建二叉树 */ system(\"pause\");} 1.3 运行情况截图 题目2123求二叉树中值为x的节点所在的层号。二叉树bt采用二叉链表存储；设计一个算法level（bt,x）求二叉树中值为x的节点所在的层号 2.1 算法设计思想 在求二叉树深度算法的基础上改进算法；在含有目标节点的子树上查找，到达目标节点即结束递归 2.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// 算法1int layer(BiTree bt, char x){ int cot = 0; if(bt==NULL) return cot; else if(bt-&gt;elem==x){ cot = 1; return cot; } else{ // printf(\"layer(bt-&gt;LChild, x): %d\\n\", layer(bt-&gt;LChild, x)); if(layer(bt-&gt;LChild, x)){ cot = layer(bt-&gt;LChild, x)+1; return cot; } // printf(\"layer(bt-&gt;RChild, x): %d\\n\", layer(bt-&gt;RChild, x)); if(layer(bt-&gt;RChild, x)){ cot = layer(bt-&gt;RChild, x)+1; return cot; } } return cot;}// 算法2int find_node_level(BiTree bt, char x, int h){ if (bt == NULL) return 0; else if (bt-&gt;elem == x) return h; else{ int l = find_node_level(bt-&gt;LChild, x, h+1); if (l != 0) return l; else return find_node_level(bt-&gt;RChild, x, h+1); }}// 算法3void level_in_x(BiTree BT,char x,int level){ if (BT == NULL){ return ; } if(BT-&gt;elem == x){ printf(\"x in %d\",level); } level++; printf(\"1:%d----\\n\", level); level_in_x(BT-&gt;LChild,x,level); printf(\"2:%d----\\n\", level); level_in_x(BT-&gt;RChild,x,level); printf(\"3:%d----\\n\", level); level--;} 2.3 运行情况截图 题目3123求二叉树的宽度。利用二叉树层次遍历求二叉树的宽度；二叉树的宽度即二叉树同层结点数的最大值 3.1 算法设计思想 我利用一个足够大的全局数组来记录遍历过程中的二叉树宽度；利用一个变量max来记录最大宽度，即为所求；求宽度的函数依然采用的是先序遍历递归的思想，加一个形参k，对应width数组下标，记录当前深度，来传给子层信息；如果当前深度k的节点不为空，那么width[k]++，来记录宽度；max为宽度最大值 3.2 源代码 1234567891011121314#define size 100int width[size];int max=0;void MaxWidth(BiTree T,int k){ if(T==NULL) return; width[k]++; if(max&lt;width[k]) max=width[k]; MaxWidth(T-&gt;LChild, k+1); MaxWidth(T-&gt;RChild, k+1);} 3.3 运行情况截图 题目412345678二叉树bt采用二叉链表存储，设计算法实现采用括号表示法输出该二叉树。 A / \\ B C / / \\ D E F \\ G A(B(D(,G)),C(E,F)) 4.1 算法设计思想 把题目中的括号表示法A(B(D(,G)),C(E,F))，去掉括号变为：ABDGCEF这种写法不是我们熟悉的先序遍历吗！所以我就在二叉树先序遍历算法的基础上改进算法； a.在节点的左右子树不为空时输出“（”；b.当节点右子树不为空时输出“，”；c.在节点的左右子树不为空时输出“）” 4.2 源代码 12345678910111213void Brackets(BiTree T){ if (T==NULL) return; printf(\"%c\", T-&gt;elem); if(T-&gt;LChild!=NULL||T-&gt;RChild!=NULL) printf(\"( \"); Brackets(T-&gt;LChild); if(T-&gt;RChild!=NULL) printf(\", \", T-&gt;elem); Brackets(T-&gt;RChild); if(T-&gt;LChild!=NULL||T-&gt;RChild!=NULL) printf(\" )\");} 4.3 运行情况截图 题目51234求二叉树的路径长度。二叉树二叉链表存储二叉树的路径长度即：二叉树中所有结点的路径长度之和。（结点的路径长度即：从根到结点的分支数） 5.1 算法设计思想 路径长度即为分支数之和；根据二叉树的性质；每个节点的头部都有一个分支，除了根节点；所以分支数之和就是二叉树节点数-1；那么采用递归的方法求得节点数，就可以求得路劲长度了 5.2 源代码 123456789int Node(BiTree T){ if (T==NULL) return 0; else{ return 1 + Node(T-&gt;LChild) + Node(T-&gt;RChild); }}printf(\"The path length of this binary tree is: %d\\n\", Node(T)-1); 5.3 运行情况截图","link":"/C/e805524c.html"},{"title":"数据结构进阶实训五 栈与递归","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123假设算术表达式只包含“+”、“-”、“*”、“/”，正整数和括号的合法数学表达式。根据算符优先关系， - 将算术表达式的中缀表示法转换为后缀表示法。 - 对得到的后缀表达式进行求值 1.1 算法设计思想 1.1.1 转后缀表达式： 从左到右扫描每一个字符。如果扫描到的字符是操作数（如a、b等），就直接输出这些操作数。 如果扫描到的字符是一个操作符，分三种情况：（1）如果堆栈是空的，直接将操作符存储到堆栈中（pushCStack it）（2）如果该操作符的优先级大于堆栈出口的操作符，就直接将操作符存储到堆栈中（pushCStack it）（3）如果该操作符的优先级低于堆栈出口的操作符，就将堆栈出口的操作符导出（popCStack it）,直到该操作符的优先级大于堆栈顶端的操作符。将扫描到的操作符导入到堆栈中（pushCStack） 如果遇到的操作符是左括号”（”，就直接将该操作符输出到堆栈当中。该操作符只有在遇到右括号“ )”的时候移除。这是一个特殊符号该特殊处理。 如果扫描到的操作符是右括号“ ”，将堆栈中的操作符导出（popCStack）到output中输出，直到遇见左括号“（”。将堆栈中的左括号移出堆栈（popCStack ）。继续扫描下一个字符。 如果输入的中缀表达式已经扫描完了，但是堆栈中仍然存在操作符的时候，我们应该讲堆栈中的操作符导出并输入到output 当中。 1.1.3 求值 后缀表达式求值的算法是:遍历后缀表达式，如果遇到运算数，那么运算数入栈如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数，计算运算结果，然后将结果入栈最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案 1.2 源代码define StackSize 50#define INFINITY 32768// 定义运算符栈typedef struct{ char elem[StackSize]; int top;}SeqCStack;void InitCStack(SeqCStack *S){ S-&gt;top=-1;}void pushCStack(SeqCStack *S, char operator){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;elem[S-&gt;top] = operator; return ; }}void popCStack(SeqCStack *S, char *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;elem[S-&gt;top]; S-&gt;top--; return ; }}char getCStackTop(SeqCStack S){ if(S.top == -1){ // 栈空 return '#'; } else{ return S.elem[S.top]; }}void traverse(SeqCStack S){ int i=0; while(i &lt;= S.top){ printf(\"%c \", S.elem[i++]); } printf(\"\\n\");}// 定义运算数栈typedef struct{ int data[StackSize]; int top;}SeqNStack;void InitNStack(SeqNStack *S){ S-&gt;top=-1;}void pushNStack(SeqNStack *S, int num){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;data[S-&gt;top] = num; return ; }}void popNStack(SeqNStack *S, int *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;data[S-&gt;top]; S-&gt;top--; return ; }}int getNStackTop(SeqNStack S){ if(S.top == -1){ // 栈空 return INFINITY; } else{ return S.data[S.top]; }}char compare(char operator, char top){ if(top == '#') // 空栈，操作符直接进栈 return '&gt;'; else if(operator==')' &amp;&amp; top=='(') return '='; else if(top=='(') return '&gt;'; else if(operator=='+') // 如果操作符是'+', 无论栈顶元素是什么, '+'优先级都小 return '&lt;'; else if(operator=='-') return '&lt;'; else if(operator=='*' &amp;&amp; top=='+') return '&gt;'; else if(operator=='*' &amp;&amp; top=='-') return '&gt;'; else if(operator=='*' &amp;&amp; top=='*') return '&lt;'; else if(operator=='*' &amp;&amp; top=='/') return '&lt;'; else if(operator=='*' &amp;&amp; top=='(') return '&lt;'; else if(operator=='/' &amp;&amp; top=='+') return '&gt;'; else if(operator=='/' &amp;&amp; top=='-') return '&gt;'; else if(operator=='/' &amp;&amp; top=='*') return '&lt;'; else if(operator=='/' &amp;&amp; top=='(') return '&lt;'; else if(operator=='(') return '&gt;'; else if(operator==')') return '&lt;';}int caculate(int left, int right, char c){ int re = 0; switch (c){ case '+': re = left + right; break; case '-': re = left - right; break; case '*': re = left * right; break; case '/': re = left / right; break; default: break; } return re;}void main(){ SeqCStack OS, SuffixExp; SeqNStack NS; /* 初始化运算符栈 */ InitCStack(&amp;OS); /* 初始化运算数栈 */ InitNStack(&amp;NS); /* 初始后缀表达式栈 */ InitCStack(&amp;SuffixExp); char exp[] = {'5', '+', '2', '*', '(', '1', '+', '6', ')', '-', '8', '/', '2', '\\0'}; printf(\"Infix expression is: %s\\n\", exp); char suffixstr[50], temp; int i = 0, tempNum; while (exp[i]!='\\0'){ if(isdigit(exp[i])){ // 如果是数字直接进后缀表达式栈 pushCStack(&amp;SuffixExp, exp[i]); // printf(\"num------%c\\n\", exp[i]); i++; } else{ // printf(\"char------\\n\"); // printf(\"compare----%c\\n\", compare(exp[i], getCStackTop(OS))); switch(compare(exp[i], getCStackTop(OS))){ case '&gt;': pushCStack(&amp;OS, exp[i]); // printf(\"case1 &gt;---%c\\n\", exp[i]); i++; break; case '=': popCStack(&amp;OS, &amp;temp); // 脱括号 // printf(\"case2 =---%c\\n\", temp); i++; break; case '&lt;': while(compare(exp[i], getCStackTop(OS))=='&lt;'){ // printf(\"case3 &lt;---%c\\n\", exp[i]); // printf(\"case3 getCStackTop %c\\n\", getCStackTop(OS)); popCStack(&amp;OS, &amp;temp); // printf(\"case3 after getCStackTop %c\\n\", getCStackTop(OS)); pushCStack(&amp;SuffixExp, temp); } // if(exp[i]!=')'){i++;} break; } } } /* 最后把栈中剩余的运算符依次弹栈打印 */ while(getCStackTop(OS)!='#'){ popCStack(&amp;OS, &amp;temp); pushCStack(&amp;SuffixExp, temp); } traverse(SuffixExp); for(i=SuffixExp.top; i&gt;=0; i--){ popCStack(&amp;SuffixExp, &amp;temp); suffixstr[i] = temp; } printf(\"Infix expression to suffix expression is: %s\\n\", suffixstr); /* 后缀表达式求值的算法是: 遍历后缀表达式， 如果遇到运算数，那么运算数入栈 如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数， 计算运算结果，然后将结果入栈。 最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案 */ char *p=suffixstr; while (*p != '\\0'){ if (isdigit(*p)){ pushNStack(&amp;NS, *p-'0'); } else{ popNStack(&amp;NS, &amp;tempNum); int rightNum = tempNum; // printf(\"rightNum:::%d\\n\", rightNum); // free(temp); popNStack(&amp;NS, &amp;tempNum); int leftNum = tempNum; // free(temp); int result = caculate(leftNum, rightNum, *p); // printf(\"caculate result----%d\\n\", result); pushNStack(&amp;NS, result); } p++; } printf(\"result: %d\\n\", getNStackTop(NS)); system(\"pause\");} 1.3 运行情况截图 题目21设L为带头结点的单链表，实现从尾到头反向输出链表中每个结点的值。（递归思想） 2.1 算法设计思想 递归语句在打印之前就可以了 2.2 源代码 123456void printReversely(LinkList L){ if(L-&gt;next!=NULL){ printReversely(L-&gt;next); printf(\"%c \", L-&gt;next-&gt;data); }} 2.3 运行情况截图 题目312345一只青蛙一次可以跳上1级台阶，也可以跳上2级。编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？ - 若条件改为： 一只青蛙一次可以跳上1级台阶，也可以跳上2级，也可以跳上3级，...，也可以跳上n级。 编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？ 3.1 算法设计思想 Q： 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 A： f(n) = f(n-1)+f(n-2)+…+f(1)f(n-1) = f(n-2)+ f(n-3)…+f(1)两式相减，得到f(n) = 2*f(n-1) 3.2 源代码 1234567891011121314151617181920int Jump(int i, int n) { //表示当前台阶数大于总台阶数，很显然这种情况不符合，走不通，记为 0 if (i &gt; n) { return 0; } //表示当前台阶数正好等于总的台阶数，那么这种情况符合，记为 1 if (i == n) { return 1; } return Jump(i + 1, n) + Jump(i + 2, n);}int JumpN(int num){ if (num == 1){ return 1; } else{ return 2*JumpN(num-1); }} 3.3 运行情况截图 题目4123用一个2X1的小矩形横着或竖着去覆盖更大的矩形。如下图 - 具体：用8个2X1小矩形横着或竖着去覆盖2X8的大矩形，覆盖方法有多少种？ - 编写代码求用2X1小矩形横着或竖着去覆盖2Xn的大矩形。输出总共有多少种覆盖方法 4.1 算法设计思想 当n=1时，覆盖方法有1种；当n=2时，覆盖方法有2种；当n=3时，覆盖方法有2+1=3种；当n=4时，覆盖方法有3+2=5种；按照规律就转化成了斐波那契数列问题 4.2 源代码 1234567891011int Cover(int n){ if(n&lt;=0){ return 0; } else if(n==1||n==2){ return n; } else{ return Cover(n-1) + Cover(n-2); }} 4.3 运行情况截图 题目5123借助自定义栈以非递归形式求解汉诺塔问题（n,a,b,c）；即将n个盘子从起始塔座a通过辅助塔座b移动到目标塔座c,并保证每个移动符合汉诺塔问题的要求 5.1 算法设计思想 利用递归的思想，用栈来处理；比如n=3时，转化的问题是：先要移动A塔座上面2个盘子到B塔座，这个操作进栈后续处理；然后移动A塔座上面最后一个大盘子到C塔座，这个操作进栈后续处理；最后再移动B塔座上最后两个盘子到C塔座；一直访问栈，如果栈顶处理的盘子数不是1，就在把操作细分，进栈；直到盘子数为1，移动盘子；直到栈为空 5.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182// 定义汉诺塔数据typedef struct{ char A; char B; char C; int n;}HanoiData;// 定义栈typedef struct{ HanoiData elem[StackSize]; int top;}SeqStack;void InitStack(SeqStack *S){ S-&gt;top=-1;}void push(SeqStack *S, HanoiData hd){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;elem[S-&gt;top] = hd; return ; }}void pop(SeqStack *S, HanoiData *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;elem[S-&gt;top]; S-&gt;top--; return ; }}// HanoiData getTop(SeqStack S){// if(S.top == -1){ // 栈空// return ;// }// else{// return S.elem[S.top];// }// }void move1(int n,char A,char B,char C){ if(n==1){ printf(\"%c--&gt;%c\\n\",A,C); } else{ move1(n-1,A,C,B); move1(1,A,B,C); move1(n-1,B,A,C); } }void hanoi(int n){ SeqStack S; InitStack(&amp;S); HanoiData h = {'A', 'B', 'C', n}; push(&amp;S,h);//初始栈 // hanoi_data x;//用来保存出栈的n,A,B,C while(S.top!=-1){ pop(&amp;S, &amp;h);//出栈并用x带回 if(h.n==1){ printf(\"%c--&gt;%c\\n\",h.A,h.C);//打印出移动方案 } else{ HanoiData h1 = {h.B, h.A, h.C, h.n-1}; push(&amp;S,h1); HanoiData h2 = {h.A, h.B, h.C, 1}; push(&amp;S,h2); HanoiData h3 = {h.A, h.C, h.B, h.n-1}; push(&amp;S,h3); } }} 5.3 运行情况截图","link":"/C/5e7c9252.html"},{"title":"数据结构进阶实训八 数组，规律","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123荷兰国旗现有n个红蓝白三种不同颜色的小球，乱序排列在一起；请通过两两交换任意两个球，使得从左到右的球依次：红球、白球、蓝球 1.1 算法设计思想 把题目理解为这样的问题：一个循环，把红色球和剩余的球交换，那么红球就排序好了，就是两两交换问题；另一个循环，把剩下没排序好的白球和蓝球也排序好，也是两两交换；程序的时间复杂度取决于长度取决于第一个循环，O(n) 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#define RED 0#define WHITE 1#define BLUE 2void swap(int *p, int *q){ int temp; temp = *p; *p = *q; *q = temp;}void sort(int array[], int start, int end, int collor){ int i=start, j=end; while(i &lt; j){ while(array[i]==collor){ i++; } while(array[j]!=collor){ j--; } swap(&amp;array[i], &amp;array[j]); i++; }}void main(){ int ball[20]={1,2,2,0,1,0,1,2,0,0,0,1,2,1,0,1,2,0,0,1}; int i, num_red=0; printf(\"There are 20 red, blue and white balls in three different colors, \\ arranged together in disorder:\\n\"); for(i=0; i&lt;20; i++){ if(ball[i]==RED){ num_red++; printf(\"Red \"); } if(ball[i]==WHITE) printf(\"White \"); if(ball[i]==BLUE) printf(\"Blue \"); } printf(\"\\n\"); sort(ball, 0, 20, RED); // 把红色球排好序 sort(ball, num_red, 20, WHITE); // 把白色球排好序 printf(\"\\nAfter sorting: \\n\"); for(i=0; i&lt;20; i++){ if(ball[i]==RED) printf(\"Red \"); if(ball[i]==WHITE) printf(\"White \"); if(ball[i]==BLUE) printf(\"Blue \"); } printf(\"\\n\");} 1.3 运行情况截图 题目21234完美洗牌算法有一个长度为2n的数组{a1,a2,a3,…an,b1,b2,b3, …bn},希望“排序”后，变为{a1, b1, a2, b2, a3, b3,…an, bn}。要求：尽可能高效。能否在时间复杂度为O(n)，空间复杂度为O（1）的解法 2.1 算法设计思想 依次考察每个位置的变化规律a1: 0 -&gt; 不变a2: 1 -&gt; 2a3: 2 -&gt; 4a4: 3 -&gt; 6…an: n-1 -&gt; 2n-2b1: n -&gt; 1b2: n+1 -&gt; 3b3: n+2 -&gt; 5…bn-1: 2n-2 -&gt; 2n-3bn: 2n-1 -&gt; 不变可以得出下标的变化规律：j=(i * 2) % (n2 -1)所以将值赋给辅助数组即可 2.2 源代码 1234567891011void perfect_shuffle(char *a[],int n) { int n2 = n * 2, i, j; char *b[20]; for (i = 1; i &lt; n2-1; i++) { j=(i * 2) % (n2 -1); b[j] = a[i]; } for (i = 1; i &lt; n2-1; i++) { a[i] = b[i]; }} 2.3 运行情况截图 题目312345买票找零问题在一场激烈的球赛开始之前，售票工作正在紧张地进行中，每张球票为50元。现有2n个人排队购票，其中有n个人手持50元的钞票，另外的n个人手持100元的钞票，假设开始售票时，售票处没有零钱。要求：问这2n个人有多少种排队方式，不至于使售票处出现找不开钱的局面呢 3.1 算法设计思想 找规律递推的方法；要求持50元n人，100元n人，多少种排队方式，那么排在最后的一定是持100元的人，所以和持50元n人，100元n-1人的排队方式相同；发现规律，持50元n-1人，100元n-1人和持50元n-1人，100元n-2人的排队方式相同；所以这就可以从最小的1开始求了，然后累加到n，得到最后结果 3.2 源代码 123456789101112131415161718#define N 100int arrange(int n){ int array[N][N]; int i, j; // 当100元和50元人数不相等，100元0人，则只有1中解决方案 for(i=0; i&lt;n; i++){ array[i][0]=1; } // 若50元人数小于100元人数，则没有解决方案 // 则二维数组的上三角的值都为0，不用初始化赋值 // 开始递推，填满下三角矩阵数组 for(i=1; i&lt;=n; i++){ for(j=0; j&lt;=i; j++) array[i][j]=array[i-1][j]+array[i][j-1]; } return array[n][n];} 3.3 运行情况截图","link":"/C/76c419b4.html"},{"title":"数据结构进阶实训六 多维数组","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123我们把只包含因子2,3,5的数称为丑数。求从小到大的第1500个丑数。 -例如：6,8都是丑数，但14不是丑数，因为它包含因子7.习惯上我们把1当做丑数。 -编写尽可能高效的算法。提示：（可以用空间换时间） 1.1 算法设计思想 准备一个数组，初始化第1个丑数的下标0，值1；然后1X2得到2，就是第2个丑数；然后1X3得到3，就是第3个丑数；不能直接1X5就是第4个丑数，因为还有一个丑数2X2=4；所以难点就是判断中间丑数，然后存储在数组中；往下循环；然后1X5得到5，就是第5个丑数 1.2 源代码 1234567891011121314151617181920212223int min_num(int n1,int n2,int n3){ int min=(n1&lt;n2)?n1:n2; min=(min&lt;n3)?min:n3; return min;}void solution(long int array[]){ int i; int t2=0;//记录M2的下标 int t3=0; int t5=0; for(i=1; i&lt;1500; i++){ while(array[t2]*2&lt;=array[i-1])//查找到新的M2，即乘以2后第一个大于M的数 t2++; while(array[t3]*3&lt;=array[i-1]) t3++; while(array[t5]*5&lt;=array[i-1]) t5++; int min=min_num(array[t2]*2, array[t3]*3, array[t5]*5); array[i]=min; }} 1.3 运行情况截图 题目21顺时针打印矩阵 2.1 算法设计思想 针对一般矩阵，先顺时针打印最外部一圈，那么这个矩阵去掉外部一圈，内部也是一个小矩阵；按照这样的规律，依次打印最外部一圈就可以了 2.2 源代码 1234567891011121314151617181920212223void PrintMatrix(int (*num)[4], int col, int row, int layer){ int i; int new_col = col - layer; int new_row = row - layer; for(i=layer; i&lt;new_col; i++){ // 从左至右打印第一行 printf(\"%d \", num[layer][i]); } if(new_row&gt;layer){ for(i=layer+1; i&lt;new_row; i++){ // 从上至下打印最右一列 printf(\"%d \", num[i][new_row-1]); } } if(new_col-1&gt;layer &amp;&amp; new_row-1&gt;layer){ for(i=new_col-2; i&gt;=layer; i--){ // 从右至左打印最后一行 printf(\"%d \", num[new_col-1][i]); } } if(new_col-1&gt;layer &amp;&amp; new_row-1&gt;layer+1){ for(i=new_row-2; i&gt;layer; i--){ // 从下至上打印最左一列 printf(\"%d \", num[i][layer]); } }} 2.3 运行情况截图 题目3123设二维数组B[0..m-1][0..n-1]的数据在行、列方向上都按从小到大的顺序有序，且x在B中存在。试设计一个算法，找出x在B数组中的位置i,j。要求比较的次数不超过m+n 3.1 算法设计思想 第一个循环（最多4次）： 将要定位的元素与每一行的最后一个元素比较，如果小于等于最后一个元素就结束循环，此时的i值就是元素的行坐标； 第二次循环（最多5次）： 将要定位的元素与每一列的所有元素比较，如果小于等于这个值，就结束循环，此时的j值就是元素的列坐标 3.2 源代码 123456789int matrix[4][5] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}, i, j;for(i=0; i&lt;4; i++){ // 定位行坐标i if(obj &lt;= matrix[i][4]) break;}for(j=0; j&lt;5; j++){ // 定位列坐标j if(obj &lt;= matrix[i][j]) break;} 3.3 运行情况截图","link":"/C/c0d1e0cd.html"},{"title":"数据结构进阶实训十 二叉排序树","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目112判断二叉树是否为正则二叉树。 - 正则二叉树的定义：指在二叉树中不存在度为1的分支点。 1.1 算法设计思想 利用二叉树遍历递归的思想；先判断当前节点是否正则；然后递归判断该节点的左右子树。 1.2 源代码 1234567891011// 1代表是正则二叉树，0代表不是int IsRegular(BiTree T){ if(T==NULL) return 1; else if(T-&gt;LChild==NULL ^ T-&gt;RChild==NULL) return 0; else{ IsRegular(T-&gt;LChild); IsRegular(T-&gt;RChild); }} 1.3 运行情况截图 题目21判断二叉树是否为完全二叉树？ 2.1 算法设计思想 一个树是否为完全二叉树，每个节点有以下4中情况： 1234情况一： 情况二： 情况三： 情况四： A A A A / \\ / \\ / \\ / \\B C B NULL NULL B NULL NULL 规律是： （1）如果当前访问的节点的左右孩子是情况三，说明不是完全二叉树，直接返回false； （2）如果当前访问的节点的左右孩子是情况1，继续访问其他节点； （3）如果当前访问的节点的左右孩子是情况2或者情况4，那么我们定义一个状态（接下来访问的所有节点必须全部是叶子节点）。只要遇到情况2或者情况4，这个状态就开启了。 算法就是层次遍历所有节点并做判断。 2.2 源代码 1234567891011121314151617181920212223242526BOOL IsCBT(BiTree bt){ if(bt==NULL) // 空树 return TRUE; BOOL leaf = FALSE; SeqQueue Q; BiTree p; InitQueue(&amp;Q); EnterQueue(&amp;Q, bt); while(!IsEmpty(Q)){ DeleteQueue(&amp;Q, &amp;p); if(p-&gt;LChild==NULL &amp;&amp; p-&gt;RChild!=NULL) // 情况3: 当前节点有右孩子，没有左孩子 return FALSE; //上述的状态已经发生，但是当前访问到的节点不是叶节点（有左孩子或者右孩子） if(leaf &amp;&amp; (p-&gt;LChild!=NULL||p-&gt;RChild!=NULL)) return FALSE; if(p-&gt;LChild!=NULL) //左孩子不为空，加入到队列中去 EnterQueue(&amp;Q, p-&gt;LChild); if(p-&gt;RChild!=NULL) //右孩子不为空，加入到队列中去 EnterQueue(&amp;Q, p-&gt;RChild); //这个if语句就是判断状态是否要发生 if((p-&gt;LChild!=NULL &amp;&amp; p-&gt;RChild==NULL)||(p-&gt;LChild==NULL &amp;&amp; p-&gt;RChild==NULL)) leaf=TRUE; } return TRUE;} 2.3 运行情况截图 题目3123456二叉树二叉链表存储，结点数据域的值为整数，且取值各不相同。编写代码判断该二叉树是否为二叉排序树。二叉排序树，又称二叉查找树。它或者是一颗空树，或者是具有下列性质的二叉树。 - 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； - 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； - 它的的左、右子树也分别为二叉排序树。 3.1 算法设计思想 由于二叉排序树的中序遍历得到的是一个单调递增的序列； 所以根据这个想法，我们可以中序遍历这个二叉树，将得到的序列存入temp数组； 通过检验temp数组的单调递增性来判断这个二叉树是否为二叉排序树。 3.2 源代码 123456789101112131415161718192021#define N 100int temp[N];int i = 0;void inorder(BiTree root){ if(root == NULL) return; if(root-&gt;LChild != NULL) inorder(root-&gt;LChild); temp[i++] = root-&gt;data; if(root-&gt;RChild != NULL) inorder(root-&gt;RChild);}int ISBST(int temp[], int k){ int flag=0; for(int i=1; i&lt;k; i++) if(temp[i]&lt;temp[i-1]) return 0; return 1;} 3.3 运行情况截图 题目4123二叉树二叉链表存储，结点数据域的值为整数，且取值各不相同。编写代码判断该二叉排序树是否为平衡二叉排序树。 - 平衡二叉树，是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。 4.1 算法设计思想 通过平衡二叉树的定义可以将判断平衡二叉树的条件分为以下2个： （1）首先是一颗二叉排序树； （2）每个节点的左右子树的高度差至多为1； 基于以上两个条件写两个方法； 第一个条件思想和上一题一样，判断二叉排序树； 第二个条件通过递归判断每个节点的左右子树高度； 将两个条件返回值综合，就可以判断出。 4.2 源代码 12345678910111213141516171819202122232425262728293031323334int Deep(BiTree bt){ int ld=0,rd=0; if(bt){ ld=Deep(bt-&gt;LChild)+1; rd=Deep(bt-&gt;RChild)+1; } return ld &gt;= rd?ld:rd;}BiTree pre=NULL;BOOL ISAVL(BiTree root){ int lcd=0,rcd=0; if(root!=NULL){ int l = ISAVL(root-&gt;LChild); // printf(\"pre: %d\\n\", pre-&gt;data); lcd=Deep(root-&gt;LChild); // 左子树的深度 rcd=Deep(root-&gt;RChild); // 右子树的深度 // printf(\"Deep(root-&gt;LChild): %d\\n\", Deep(root-&gt;LChild)); // printf(\"Deep(root-&gt;RChild): %d\\n\", Deep(root-&gt;RChild)); // printf(\"root: %d\\n\", root-&gt;data); if(abs(lcd-rcd)&gt;1){ // 条件1:每一个节点的左子树和右子树的高度差至多等于1 return FALSE; } if(pre!=NULL){ if(pre-&gt;data &gt; root-&gt;data){ // 条件2:中序遍历的前驱节点大于后面节点的值,就不是平衡二叉树 return FALSE; } } pre=root; int r = ISAVL(root-&gt;RChild); return l &amp;&amp; r; } return TRUE;} 4.3 运行情况截图 题目51编写代码完成：输入一棵二叉树，输出它的镜像。 5.1 算法设计思想 利用二叉树遍历递归的思想； 先交换左右子树； 然后分别镜像左右子树。 5.2 源代码 12345678910111213141516void swap(BiTree *node1, BiTree *node2){ BiTree temp; temp = *node1; *node1=*node2; *node2=temp;}void Mirror(BiTree *bt){ if((*bt)==NULL) return; swap(&amp;((*bt)-&gt;LChild), &amp;((*bt)-&gt;RChild)); Mirror(&amp;((*bt)-&gt;LChild)); Mirror(&amp;((*bt)-&gt;RChild));} 5.3 运行情况截图 题目6123输入：一个整数和一棵二叉树（树中结点的数据值为int）；输出：二叉树中结点值的和为输入的的整数的所有路径。路径的定义：从树的根结点开始往下一直到叶子结点形成的，称为一条路径。 6.1 算法设计思想 用先序遍历的方式访问节点，使用栈数组ResultStack存储满足条件的路径，使用栈SeqStack存储当前路径节点。 遍历二叉树的过程：按先序遍历顺序访问每一个节点，访问每个结点时，将结点添加到SeqStack中。 如果当前结点是叶子结点，则判断当前路径是否是符合条件的路径，符合条件的路径存入到栈数组ResultStack； 如果当前结点不是叶子结点，则递归当前节点的左右子节点。 6.2 源代码 123456789101112131415161718192021SeqStack ResultStack[10];int i=0;void SumPath(BiTree bt, SeqStack *S, int value){ BiTree p; Push(S, bt); if(bt){ if(!bt-&gt;LChild &amp;&amp; !bt-&gt;LChild){ if(value == bt-&gt;data){ ResultStack[i] = *S; i++; } } else{ SumPath(bt-&gt;LChild, S, value-bt-&gt;data); SumPath(bt-&gt;RChild, S, value-bt-&gt;data); } if(!IsEmpty(*S)) Pop(S, &amp;p); }} 6.3 运行情况截图 题目7123输入：一个整数数组，判断该数组是否为某二叉排序树的后序遍历序列；输出：若是，则返回true，若不是，则返回false； 假设该数组中的任何两个数值都互不相同。 7.1 算法设计思想 后续遍历中，最后一个数字是根结点，将数组中的数字分为两部分： 第一部分是左子树的值，它的值都比根结点小； 另一部分是右子树的值，它的值都比根结点大； 后续遍历（5,7,6,9,11,10,8）的最后一个结点是8，所以在这个数组中，5,7,6都比8小时该数的左子树；而9,11,10都比8大，是该树的右子树。 我们以同样的方法来分析其左子树和右子树5,7,6，其中6将左子树分为5和7两部分；10将右子树9和11分为两部分。所以这个序列就是一个后续遍历序列。但是（7,4,5,6）就不是它的一个后续遍历序列。因为6大于7，所以也就是说7,4,5都是其右子树，但是很不幸还有4比6小，所以不可能是一个后续遍历。 7.2 源代码 12345678910111213141516171819202122BOOL VerifySequenceOfBST(int *array,int length){ if(array==NULL || length&lt;=0) return FALSE; int root=array[length-1]; int i=0; //左子树的结点小于根节点； for(;i&lt;length-1;i++){ if(array[i]&gt;root) break; //找完了全部的左子树的序列； } int j=i;//右子树的结点大于根结点； for(;j&lt;length-1;j++){ if(array[j]&lt;root) return FALSE; } BOOL left=TRUE; if(i&gt;0) left=VerifySequenceOfBST(array,i); BOOL right=TRUE; if(j&lt;length-1) right=VerifySequenceOfBST(array+i,length-i-1); return left &amp;&amp; right;} 7.3 运行情况截图","link":"/C/d6f9e419.html"},{"title":"数据结构进阶实训十一 树","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code C语言中文网 题目11建立树的孩子兄弟表示法存储 1.1 算法设计思想 孩子兄弟表示法：任意一棵树，它的节点的第一个孩子如果存在就是唯一的，它的右兄弟存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟 给定一颗树，可以找到唯一的一颗二叉树与之对应，因此，可以用一颗二叉树来表示一颗树的结构。如图： 123456789101112131415 A A /​ / | \\ B / \\​ B C D E C \\ \\ / \\ | F D /E F G G /​ / | \\ H \\​ H I J I \\​ J 和二叉树建树的方法相同，递归的思想，先建立左子树，左子树建立完（即遇到结束标志字符’#’），退层建立右子树。 所以按照将树转化为二叉树，然后输入先序序列来建这棵树。 1.2 源代码 123456789101112131415161718192021#define ElemType chartypedef struct CSNode{ ElemType data; struct CSNode *firstchild, *nextsibling;}CSNode, *CSTree;// eg. ABE#F##C#DGH#I#J#####void CreatCSTree(CSTree *t){ ElemType ch; scanf(\"%c\", &amp;ch); if(ch=='#') { (*t)=NULL; } else { (*t)=(CSTree)malloc(sizeof(CSNode)); (*t)-&gt;data=ch; CreatCSTree(&amp;((*t)-&gt;firstchild)); CreatCSTree(&amp;((*t)-&gt;nextsibling)); }} 1.3 运行情况截图 题目21在树的孩子兄弟表示法下，求取树T的高度。 2.1 算法设计思想 既然我们可以将树转化为孩子兄弟表示法，这种方法用二叉链表的形式实现，那么我们考虑用求二叉树深度的方法来求树的深度。 区别在于，孩子兄弟表示法中每个节点的右子树是这个节点的兄弟，在原树中并不占深度，所以只需修改算法的求右子树高度的部分即可。 2.2 源代码 123456789// eg. ABE#F##C#DGH#I#J#####int depth(CSTree t){ if(t){ int fd = depth(t-&gt;firstchild)+1; int nd = depth(t-&gt;nextsibling); return fd&gt;nd? fd:nd; }} 2.3 运行情况截图 题目31树采用孩子兄弟表示法存储。 fch data nsib level 12345678910编写算法，将树中所有结点层次值置入每个结点的level域，并要求由根开始逐层输出树中的各条边；边的输出格式为（ki,kj） 示例 A 转化为 A / | \\ 孩子兄弟表示 / B C D B / \\ | / \\ E F G E C \\ / \\ F G D 3.1 算法设计思想 要输出树中各边，存在边，即两节点在树中是父子关系 在孩子兄弟表示法中，就是与这个节点的左孩子节点，和左孩子节点的所有右孩子节点有边， 所以一个递归打印当前节点和左孩子构成的边，另一个递归打印当前节点与其左孩子的所有右孩子节点所构成的边。 3.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#define ElemType chartypedef struct CSNode{ ElemType data; struct CSNode *firstchild, *nextsibling; int level;}CSNode, *CSTree;// eg. ABE#F##CG##D###CSTree T;int layer(CSTree t, char x){ int cot = 0; if(t==NULL) return cot; else if(t-&gt;data==x){ cot = 1; return cot; } else{ if(layer(t-&gt;firstchild, x)){ cot = layer(t-&gt;firstchild, x)+1; return cot; } if(layer(t-&gt;nextsibling, x)){ cot = layer(t-&gt;nextsibling, x); return cot; } } return cot;}void CreatCSTree(CSTree *t){ ElemType ch; scanf(\"%c\", &amp;ch); if(ch=='#') { (*t)=NULL; } else { (*t)=(CSTree)malloc(sizeof(CSNode)); (*t)-&gt;data=ch; (*t)-&gt;level=layer(T, ch); CreatCSTree(&amp;((*t)-&gt;firstchild)); CreatCSTree(&amp;((*t)-&gt;nextsibling)); }}void borderNextSibling(CSTree t, CSTree nt){ printf(\"%c%c, \", t-&gt;data, nt-&gt;data); if(nt-&gt;nextsibling) borderNextSibling(t, nt-&gt;nextsibling);}void border(CSTree t){ if(t){ if(t-&gt;firstchild){ printf(\"%c%c, \", t-&gt;data, t-&gt;firstchild-&gt;data); if(t-&gt;firstchild-&gt;nextsibling) borderNextSibling(t, t-&gt;firstchild-&gt;nextsibling); } border(t-&gt;firstchild); border(t-&gt;nextsibling); }} 3.3 运行情况截图 题目41234567891011已知树采用孩子兄弟表示法表示试编写算法按如下的凹入方式打印树。 示例 A A / | \\ B B C D E / \\ | F E F G C G D利用树的先序遍历完成；细化访问visit（）操作：先打空格，在输出结点；打印输出的空格数目和结点所在的层次号有关。 4.1 算法设计思想 首先不考虑前面的每个元素前面的空格，得到打印序列是ABEFCGD，发现这是孩子兄弟表示法的前序遍历结果，然后利用上面第二题的算法获得每个元素的层号，然后打印空格，就可以实现凹入方式打印这棵树了。 4.2 源代码 12345678910111213141516171819202122232425262728293031323334CSTree T; // 全局变量// eg. ABE#F##CG##D###int layer(CSTree t, char x){ int cot = 0; if(t==NULL) return cot; else if(t-&gt;data==x){ cot = 1; return cot; } else{ if(layer(t-&gt;firstchild, x)){ cot = layer(t-&gt;firstchild, x)+1; return cot; } if(layer(t-&gt;nextsibling, x)){ cot = layer(t-&gt;nextsibling, x); return cot; } } return cot;}void visit(CSTree t){ int i; if(t){ for(i=1; i&lt;layer(T, t-&gt;data); i++) printf(\" \"); printf(\"%c\\n\", t-&gt;data); visit(t-&gt;firstchild); visit(t-&gt;nextsibling); }} 4.3 运行情况截图","link":"/C/ef7d5777.html"},{"title":"数据结构进阶实训十三 图的应用","text":"数据结构进阶实训课程笔记和算法练习 Source Code C语言中文网 题目1123判断给定的图G是否是连通图。若连通，则输出该生成树。若不连通，则输出其所有的连通子图（生成森林） - 图G分别采用邻接矩阵或邻接表存储表示 - 实现在该两种存储表示方法下的上述操作 1.1 算法设计思想 深度优先搜索算法的改进。 如果一次深度优先搜索没有把所有顶点遍历完，即visited数组有false值，那么就可以证明图不是连通的。 1.2 源代码 12345678910111213141516171819202122232425262728293031323334353637// 邻接矩阵void Judge(MGraph G, bool *b){ printf(\"The spanning tree or forest of this graph is: \"); int v; //将用做标记的visit数组初始化为false for( v = 0; v &lt; G.vexnum; ++v){ visited[v] = false; } DFS( G, 0); //从任意一点遍历，这里从下标为0的点开始 for( v = 1; v &lt; G.vexnum; v++){ if(!visited[v]){ DFS( G, v); *b = false; printf(\" | \"); } } *b = true;}//邻接表void JudgeAdjList(ALGraph *g, bool *b){ printf(\"The spanning tree or forest of this graph is: \"); int i; int visited[MAX_VERtEX_NUM]; for(i=0;i&lt;g-&gt;vexnum;i++){ visited[i]=0; } DFSAdjList(g, 0, visited); for(i=1;i&lt;g-&gt;vexnum;i++){ if(!visited[i]){ printf(\" | \"); DFSAdjList(g, i, visited); *b = false; } } *b = true;} 1.3 运行情况截图 题目21无向图G（不带权值）采用邻接表结构，试设计一个算法，求图G中从顶点u到顶点v的最短路径。 2.1 算法设计思想 运用Dijkstra(迪杰斯特拉)算法的思想。 visit[]：这个数组用来标记结点的访问与否，如果该结点被访问，则为1，如果该结点还没有访问，则为0； distance[]：这个数组用来记录当前从v到各个顶点的最短路径长度，算法的核心思想就是通过不断修改这个表实现。 先遍历直达源顶点的所有顶点，距离记为1，置visit[]已访问； 后面遍历所有其他未访问的顶点，更新distance[]数组。 1234567 实例 1 / \\ 0 2 / \\ 3 4程序将以此图作为输入 2.2 源代码 123456789101112131415161718192021222324252627282930313233void Dijkstra(ALGraph G, int s, int t){//求 s 到 t 的最短路径 int i, j; int visit[MAX_VERTEX_NUM]; int distance[MAX_VERTEX_NUM]; //从 s 到各点的距离 for(i=0; i&lt;G.vexnum; i++){ distance[i]=INFINITY; visit[i]=false; } distance[s]=0; visit[s]=1; ArcNode *p=G.vertices[s].firstarc; while(p){ //先把距离源点距离最近的顶点都遍历完 if(!visit[p-&gt;adjvex]){ distance[p-&gt;adjvex]=1; visit[p-&gt;adjvex]=1; //当前顶点已访问 } p=p-&gt;nextarc; } for(i=0; i&lt;G.vexnum; i++){ //再求其他顶点 if(!visit[G.vertices[i].data]){ p=G.vertices[i].firstarc; //未访问的节点 while(p){ if(distance[p-&gt;adjvex]&lt;INFINITY){ distance[G.vertices[i].data]=distance[p-&gt;adjvex]+1; } p=p-&gt;nextarc; } } }} 2.3 运行情况截图 题目31无向图G（不带权值）采用邻接表表示，试设计一个算法，输出从顶点Vi到顶点Vj的所有简单路径。 3.1 算法设计思想 利用递归算法，从起始点出发，分别递归遍历它的所有顶点，将遍历过的顶点访问数组置false，并将节点记录进path数组，当遇到目标加点将path数组中顶点全部输出，即为简单路径。 1234567 实例 0 / \\ 1 2 \\ / 3程序将以此图作为输入 3.2 源代码 1234567891011121314151617181920212223int path[MAX_VERTEX_NUM];path[0]=start; //记录源点void findAllSimplePath(ALGraph G, int start, int end, int path[], int i){ ArcNode *p; int j, n; visited[start]=1; // 记录已近访问过这个顶点 p=G.vertices[start].firstarc; while (p){ n=p-&gt;adjvex; if(n==end){ //找到一个路径 path[i+1] = end; for(j=0; j&lt;=i+1; j++) printf(\"%-3d\", path[j]); printf(\"\\n\"); } else if(!visited[n]){ //改点未被遍历 path[i+1]=n;//存入路径 findAllSimplePath(G, n, end, path, i+1); // 递归 } p=p-&gt;nextarc; }} 3.3 运行情况截图 题目41图G采用邻接表表示，试设计一个算法，求无向连通图G中距离顶点v最远的一个顶点。 4.1 算法设计思想 同题目2的算法思想，既然用Dijkstra算法求出了所有一个点到其他所有顶点的路径，那么取distance数组中的最大值即为最远顶点。 4.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940int Dijkstra(ALGraph G, int s){ int i, j; int visit[MAX_VERTEX_NUM]; int distance[MAX_VERTEX_NUM]; //从 s 到各点的距离 for(i=0; i&lt;G.vexnum; i++){ distance[i]=INFINITY; visit[i]=false; } distance[s]=0; visit[s]=1; ArcNode *p=G.vertices[s].firstarc; while(p){ //先把距离源点距离最近的顶点都遍历完 if(!visit[p-&gt;adjvex]){ distance[p-&gt;adjvex]=1; visit[p-&gt;adjvex]=1; //当前顶点已访问 } p=p-&gt;nextarc; } for(i=0; i&lt;G.vexnum; i++){ //再求其他顶点 if(!visit[G.vertices[i].data]){ p=G.vertices[i].firstarc; //未访问的节点 while(p){ if(distance[p-&gt;adjvex]&lt;INFINITY){ distance[G.vertices[i].data]=distance[p-&gt;adjvex]+1; } p=p-&gt;nextarc; } } } int max=0; //最远顶点的位置 for(i=1; i&lt;G.vexnum; i++){ if(distance[max]&lt;distance[i]) max=i; } return max;} 4.3 运行情况截图","link":"/C/f84f2508.html"},{"title":"数据结构进阶实训四 链表","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11给定一个单链表L，L为头指针，判断该链表内是否局部存在环？ 1.1 算法设计思想 使用快慢指针判断单链表是否存在环。 使用slow、fast 2个指针，slow慢指针每次向前走1步，fast快指针每次向前走2步，若存在环的话，必定存在某个时候 slow = fast 快慢指针相遇。 返回值为1：存在环 返回值为0：不存在环 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657typedef struct Node { int data; struct Node *next;}Node, *LinkList;void InitLinkList(LinkList *L) { *L = (LinkList)malloc(sizeof(Node)); (*L)-&gt;next = NULL; Node *r=*L, *s, *temp; int i=0; while(i&lt;10){ s=(Node*)malloc(sizeof(Node)); s-&gt;data=i; r-&gt;next=s; s-&gt;next=NULL; if(i==4){ // 记住一个元素,以助后面成环 temp=r; } r=s; i++; } r-&gt;next=temp; // 成环}int IsLoopLinkList(LinkList list){ //空指针 if(list == NULL){ return 0; } //只有头结点,没有元素 if(list-&gt;next == NULL){ return 0; } Node* slow = list; Node* fast = list; int loc = 0; while (1){ if(fast-&gt;next == NULL){ //快指针 到底链表尾结点说明 没有环，此时slow 指向中间结点 return 0; } else{ if (fast-&gt;next != NULL &amp;&amp; fast-&gt;next-&gt;next != NULL){ fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; } else{ fast = fast-&gt;next; } } //某个时刻 快慢指针相遇，说明此处存在环！ if(slow == fast){ return 1; } } return 0;} 1.3 运行情况截图 题目21234找到单链表中倒数第k个结点。找出解决方法要求：尽可能高效例如：一个链表有6个结点，（1,2,3,4,5,6）这个链表的倒数第3个结点是：值为4的结点 2.1 算法设计思想 先遍历获得链表长度listlen(L)； 然后计算得出倒数第k个节点的正数位置，也就是listlen(L)-k+1； 遍历到listlen(L)-k+1的节点，然后输出 2.2 源代码 12345678910111213141516/* 求链表长度 */int listlen(LinkList L){ int len=0; Node *head=L; while(head-&gt;next!=NULL){ len++; head=head-&gt;next; } return len;}// mainscanf(\"%d\", &amp;k);for(i=0; i&lt;listlen(L)-k+1; i++){ p=p-&gt;next;} 2.3 运行情况截图 题目312在O(1)时间删除单链表结点；给定单链表L及其中一个结点地址p,定义一个函数实现在O(1)时间删除该结点。 3.1 算法设计思想 将节点p的下一个节点的值赋给p；p的后继指向p的后继的后继；然后free掉p的后继 3.2 源代码 12345678910111213141516171819202122232425void InitLinkList(LinkList *L, LinkList *temp) { *L = (LinkList)malloc(sizeof(Node)); (*L)-&gt;next = NULL; Node *r=*L, *s; int i=0; while(i&lt;10){ s=(Node*)malloc(sizeof(Node)); s-&gt;data=i; r-&gt;next=s; s-&gt;next=NULL; if(i==5){ // 记住一个节点地址 *temp=r; } r=s; i++; }}// mainInitLinkList(&amp;L, &amp;p);s=p-&gt;next;p-&gt;data = s-&gt;data;p-&gt;next=s-&gt;next;free(s); 3.3 运行情况截图 题目4123假定用带头结点的单链表保存单词，当两个单词有相同的后缀时，则可共享相同的后缀存储空间，例如：loading和being。 - 设计一个高效的算法，找出str1和str2的共同后缀的起始位置。（可能有也可能没有。） - 分析算法的时空效率 4.1 算法设计思想 分别获得链表str1和str2的长度；移动长度较长的链表的头指针，使得两指针的起始位置相同；然后同时往后移动，遇到相同地址的节点即为共同后缀的起始位置 4.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657LinkList reverse(LinkList L){ if(L-&gt;next == NULL || L-&gt;next-&gt;next == NULL) { return L; /*链表为空或只有一个元素则直接返回*/ } Node *r, *p = L-&gt;next, *q = L-&gt;next-&gt;next; while(q != NULL){ r = q-&gt;next; q-&gt;next = p; p = q; q = r; } /*此时q指向原始链表最后一个元素，也是逆转后的链表的表头元素*/ L-&gt;next-&gt;next = NULL; /*设置链表尾*/ L-&gt;next = p; /*调整链表头*/ return L;}LinkList commonSuffix1(LinkList L1, LinkList L2){ Node *p, *q; int len1, len2; len1=listlen(L1); len2=listlen(L2); if(lastNode(L1) != lastNode(L2)){ return NULL; } else{ for(p=L1; len1&gt;len2; len1--){ p=p-&gt;next; } for(q=L2; len2&gt;len1; len2--){ q=q-&gt;next; } while(p-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }}LinkList commonSuffix2(LinkList L1, LinkList L2){ Node *p=L1, *q=L2; if(L1-&gt;next == NULL || L2-&gt;next == NULL){ // 空，直接返回 return NULL; } // else if(L1-&gt;next != L2-&gt;next){ // 这里的第一个元素,是原来的最后一个元素 // return NULL; // 不相等直接返回 // } else{ while(p-&gt;next != NULL &amp;&amp; q-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }} 4.3 运行情况截图","link":"/C/1403ce23.html"},{"title":"树的要点归纳","text":"数据结构第六章要点归纳 1.树的基础知识点1.1 树的相关概念 结点拥有的子树数称为节点的度（Degree）。 度为0的结点称为叶结点（Leaf）或终端结点；度不为0的结点称为非终端结点或分支节点。 除根节点之外，分支节点也称为内部结点。 树的度是树内部各结点的度的最大值。 如果将树中结点的各子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。 森林是$m(m \\geq 0)$棵互不相交的树的集合。 1.2 树的存储结构 双亲表示法 孩子表示法 孩子兄弟表示法 1.3 二叉树的相关概念 斜树：所有的结点都只有左子树的二叉树叫左斜树。所有结点都只有右子树的二叉树叫右斜树。这二者统称为斜树。 满二叉树：在一颗二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。 完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号为$i(1 \\leq i \\leq n)$的节点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。 完全二叉树的特点： ​ （1）叶子结点只能出现在最下两层。 ​ （2）最下层的叶子一定集中在左部连续位置。 ​ （3）倒数二层，若有叶子结点，一定都在右部连续位置。 ​ （4）如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。 ​ （5）同样结点数的二叉树，完全二叉树的深度最小。 1.4 二叉树的存储结构 顺序存储结构 二叉链表 2.二叉树5个基本性质及灵活应用 二叉树的定义：二叉树(Binary Tree)是n(n≥0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根节点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。 2.1 性质1在二叉树的第i层上至多有$2^{i-1}$个结点（$i \\geq 1$）。 2.2 性质2深度为k的二叉树至多有$2^k-1$个结点（$k \\geq1$）。 2.3 性质3对任何一棵二叉树T，如果其终端结点数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。 2.4 性质4具有n个结点的完全二叉树的深度为$\\lfloor log_2{n} \\rfloor +1$ （$\\lfloor x \\rfloor$表示不大于x的最大整数）。 2.5 性质5如果对一棵有$n$个结点的完全二叉树（其深度为$\\lfloor log_2{n} \\rfloor +1$）的结点按层序编号（从第1层到第$\\lfloor log_2{n} \\rfloor+1$层，每层从左到右），对任一结点$i(1 \\leq i \\leq n)$有： 如果$i=1$，则节点$i$是二叉树的根，无双亲；如果$i \\geq 1$，则其双亲是节点$\\lfloor \\frac{i}{2} \\rfloor$。 如果$2i &gt; n$，则结点$i$无左孩子（结点i为叶子节点）；否则其左孩子是结点$2i$。 如果$2i+1 &gt; n$，则结点$i$无右孩子；否则其右孩子是结点$2i+1$。 3.二叉树遍历（基础知识掌握） 二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。 3.1 前、中、后序遍历3.2 二叉树的建立3.3 线索二叉树3.3.1 对于一个有$n$个结点的二叉链表，每个结点有指向左右孩子的两个指针域，所以一共是$2n$个指针域。而$n$个结点的二叉树一共有$n-1$条分支线数，也就是说，其实是存在$2n-(n-1) =n+1$个空指针域。 12345678 A / \\ B C / \\ / \\ D E F G / \\ /H I J 图3-1 3.3.2 如上图，中序遍历得到HDIBJEAFCG这样的字符，可以知道，结点I的前驱是D，后继是B，结点F的前驱是A，后继是C。 3.3.3 指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树(Threaded Binary Tree)。 3.3.4 其实线索二叉树，等于是把一棵二叉树转变成了一个双向链表，这样对我们的插入删除结点都带来了方便。 3.3.5 对二叉树以某种次序遍历使其变为线索二叉树的过程称做是线索化。 3.3.6 在每个节点再增设两个标志域ltag和rtag，只存放0或1数字的布尔型变量，其占用的内存空间要小于像lchild和rchild的指针变量。结点结构如下： lchild ltag data rtag rchild 其中： ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。 rtag为0时指向该结点的右孩子，为1时指向该结点的后继。 因此对于图3-1的二叉链表图可以修改为图3-2的样子。 12345678 0A0 / \\ 0B0 0C0 / \\ / \\ 0D0 0E1 1F1 1G1 / \\ /1H1 1I1 1J1 图3-2 3.4 线索二叉树结构实现 线索化的过程就是在遍历的过程中修改空指针的过程。 中序遍历线索化的递归函数代码如下： 12345678910111213141516171819BiThrTree pre; /* 全局变量，始终指向刚刚访问过的节点 *//* 中序遍历进行中序线索化 */void InThreading(BiThrTree p){ if(p){ InThreading(p-&gt;lchild); /* 递归左子树线索化 */ if(!p-&gt;lchild){ /* 没有左孩子 */ p-&gt;LTag=Thread; /* 前驱线索 */ p-&gt;lchild=pre; /* 左孩子指针指向前驱 */ } if(!pre-&gt;rchild){ /* 前驱没有右孩子 */ p-&gt;RTag=Thread; /* 后继线索 */ p-&gt;rchild=p; /* 前驱右孩子指针指向后继（当前结点p） */ } pre=p; /* 保持pre指向p的前驱 */ InThreading(p-&gt;rchild); /* 递归右子树线索化 */ }} 有了线索二叉树后，我们对它进行遍历时发现，其实就等于是操作一个双向链表结构。 和双向链表结构一样，在二叉树线索链表上添加一个头结点，如图3-3所示，并另其lchild域的指针指向二叉树的根节点（图中的a），其rchild域的指针指向中序遍历时访问的最后一个结点（图中的b）。 反之，令中序序列中的第一个结点H的lchild域指针和最后一个结点的rchild域指针均指向头结点。这样定义的好处就是我们既可以从第一个节点起顺后继进行遍历，也可以从最后一个结点起顺前驱进行遍历。 12345678910 头指针-&gt;| |0#1| | a/ | 0A0 | / \\ |b 0B0 0C0 | / \\ / \\| 0D0 0E1 1F1 1G1 / \\ /1H1 1I1 1J1 图3-3 遍历代码如下： 1234567891011121314151617/* T指向头结点，头结点左链lchild指向根节点，头结点右键rchild指向中序遍历的 *//* 最后一个结点。中序遍历二叉线索链表表示的二叉树T */Status InOrderTraverse_Thr(BiThrTree T){ BiThrTree p; p = T-&gt;lchild; /* p指向根结点 */ while(p != T){ /* 空树或遍历结束时，p==T */ while(p-&gt;LTag==Link) /* 当LTag==0时循环到中序序列第一个结点 */ p = p-&gt;lchild; printf(\"%c\", p-&gt;data); /* 显示结点数据，可以更改为其他对结点操作 */ while(p-&gt;RTag==Thread &amp;&amp; p-&gt;rchild!=T){ p = p-&gt;rchild; printf(\"%c\", p-&gt;data); } p = p-&gt;rchild; /* p进至其右子树根 */ } return OK;} 相当于是一个链表的扫描，所以时间复杂度为O(n)。 如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择。 4.二叉树遍历算法应用算法都在二叉树的应用和二叉排序树噢！ 5.树遍历算法应用 树转换为二叉树 森林转换为二叉树 二叉树转换为树 二叉树转换为森林 5.1 树的遍历两种方式 一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树。 另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点。 比如图5-1中的树，它的先根遍历序列为ABEFCDG，后根遍历序列为EFBCGDA。 123456 A / | \\ B C D / \\ /E F G 图5-1 5.2 森林的遍历两种方式 前序遍历：先访问森林中第一棵树的根结点，然后再依次先根遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林。比如图5-2中的森林，前序遍历序列的结果就是ABCDEFGHJI。 123456 A E G / | \\ | / \\B C D F H I | J 图5-2 后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。比如图5-2中的森林，后序遍历序列的结果就是BCDAFEJHIG。","link":"/C/16509.html"},{"title":"数据结构进阶实训十二 图的存储结构","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code 1.图的定义 图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V, E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。 对于图的定义，需要注意的几个地方： 线性表中把数据元素叫元素，树中将数据元素叫结点，图中将数据元素称之为顶点（Vertex）。 线性表中可以没有数据元素，称之为空表。树中可以没有结点，叫做空树。但在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调顶点集合V有穷非空。 线性表中，相邻的元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。 1.1 各种图定义 无向边：若顶点v_i到v_j之间的边没有方向，则称这条边为无向边（Edge），用无序偶对(v_i, v_j)来表示。 无向图：图中任意两顶点之间的边都是无向边。 有向图：若从顶点v_i到v_j之间的边有方向，则称这条边为有向边（Edge），也称为弧（Arc）。用有序偶来表示，v_i称为弧尾（Tail），v_j称为弧头（Head）。 有向图：图中任意两个顶点之间的边都是有向边。 在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。即不存在自环和重复边。 无向完全图：在无向图中，如果任意两顶点之间都存在边。含有n个顶点的无向完全图有\\frac{n*(n-1)}{2}条边。 有向完全图：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧。含有n个顶点的有向完全图有n*(n-1)条边。 有很少条边或弧的图称为稀疏图反之称之为稠密图。 有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做权（Weight）。这种带权的图通常称为网（Network）。 假设有两个图G=(V, \\{E\\})和G^`=(V^`, \\{E^`\\})，如果V^`\\subseteq V且E^`\\subseteq E，则称G^`为G的子图（Subgraph）。 1.2 连通图相关术语 在无向图G中，如果从顶点v到顶点v^`有路径，则称v和v^`是连通的。如果对于图中任意两个顶点v_i、v_j \\in E，v_i和v_j都是连通的，则称G是连通图（Connected Graph）。 无向图中的极大连通子图称为连通分量。 在有向图G中，如果对于每一对v_i、v_j \\in V、v_i\\ne v_j，从v_i到v_j和从v_j到v_i都存在路径，则称G是强连通图。有向图中的极大强连通子图称做有向图的强连通分量。 一个连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边。 如果一个有向图恰有一个顶点的入度为0，其余顶点的入度均为1，则是一棵有向树。 一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。 2.图的存储结构图的存储方式一般有两类，用边的集合方式有邻接矩阵，用链式方式有邻接链表、十字链表、邻接多重表、边集数组等。 2.1 邻接矩阵图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。 代码实现： 123456789typedef char VertexType; /* 顶点类型应由用户定义 */typedef int EdgeType; /* 边上的权值类型应由用户定义 */#define MAXVEX 100 /* 最大顶点树，应由用户定义 */#define INFINITY 65535 /* 用65535来代表无穷大 */typedef struct{ VertexType vexs[MAXVEX]; /* 顶点表 */ EdgeType arc[MAXVEX][MAXVEX]; /* 邻接矩阵，可看作表 */ int numVertexes, numEdges; /* 图中当前的顶点数和边数 */}MGraph; 无向网图的创建代码： 1234567891011121314151617/* 建立无向图的邻接矩阵表示 */void CreateMGraph(MGraph *G){ int i, j, k, w; printf(\"输入顶点数和边数： \\n\"); scanf(\"%d%d\", &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges); /* 输入顶点数和边数 */ for(i = 0; i&lt;G-&gt;numVertexes; i++) /* 读入顶点信息，建立顶点表 */ scanf(&amp;G-&gt;vexs[i]); for(i = 0; i&lt;G-&gt;numVertexes; i++) for(j = 0; j&lt;G-&gt;numVertexes; j++) G-&gt;arc[i][j] = INFINITY; /* 邻接矩阵初始化 */ for(k = 0; k&lt;G-&gt;numEdges; k++){ /* 读入numEdges条边，建立邻接矩阵 */ printf(\"输入边(vi, vj)上的下标i，下标j和权w: \\n\"); scanf(\"%d%d%d\", &amp;i, &amp;j, &amp;w); /* 输入边（vi, vj）上的权w */ G-&gt;arc[i][j]=w; G-&gt;arc[j][i]=G-&gt;arc[i][j]; /* 因为是无向图，矩阵对称 */ }} 从代码中可以得到，n个顶点和e条边的无向网图的创建，时间复杂度为O(n+n^2+e)，其中对邻接矩阵Garc的初始化耗费了O(n^2)的时间。 2.2 邻接表数组与链表相结合的存储方法称为邻接表（Adjacency List）。图中顶点用一个一维数组存储，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。 代码实现： 123456789101112131415161718typedef char VertexType; /* 顶点类型由用户定义 */typedef int EdgeType; /* 边上的权值类型应由用户定义 */typedef struct EdgeNode{ /* 边表结点 */ int adjvex; /* 邻接点域，存储该顶点对应的下标 */ EdgeType weight; /* 用于存储权值，对于非网图可以不需要 */ struct EdgeNode *next; /* 链域，指向下一个邻接点 */}EdgeNode;typedef struct VertexNode{ /* 顶点表节点 */ VertexType data; /* 顶点域 */ EdgeNode *firstedge; /* 边表头指针 */}VertexNode, AdjList[MAXVEX];typedef struct{ AdjList adjList; int numVertexes, numEdges; /* 图中当前顶点数和边数 */}GraphAdjList; 无向图的邻接表创建代码如下： 123456789101112131415161718192021222324/* 建立图的邻接表结构 */void CreateALGraph(GraphAdjList *G){ int i, j, k; EdgeNode *e; printf(\"输入顶点数和边数： \\n\"); scanf(\"%d%d\", &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges); /* 输入顶点数和边数 */ for(i=0; i&lt;G-&gt;numVertexes; i++){ /* 读入顶点信息，建立顶点表 */ scanf(&amp;G-&gt;adjList[i].data); /* 输入顶点信息 */ G-&gt;adjList[i].firstedge=NULL; /* 将边表置为空表 */ } for(k=0; k&lt;G-&gt;numEdges; k++){ /* 建立边表 */ printf(\"输入边(vi, vj)上的顶点序号：\\n\"); scanf(\"%d%d\", &amp;i, &amp;j); /* 输入边(vi, vj)上的顶点序号 */ e=(EdgeNode *)malloc(sizeof(EdgeNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=j; /* 邻接序号为j */ e-&gt;next=G-&gt;adjList[i].firstedge; /* 将e指针指向当前顶点指向的结点 */ G-&gt;adjList[i].firstedge=e; /* 将当前顶点的指针指向e */ e=(EdgeNode *)malloc(sizeof(EdgeNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=i; /* 邻接序号为i */ e-&gt;next=G-&gt;adjList[j].firstedge; /* 将e指针指向当前顶点指向的结点 */ G-&gt;adjList[j].firstedge=e; /* 将当前顶点的指针指向e */ }} 这里采用头插法来建立两顶点间关系，对于n个顶点e条边来说，很容易得出算法的时间复杂度是O(n+e)。 2.3 图的基本操作 为实现遍历必须设置访问标志数组，以防止走回路或未访问到。 图的遍历规律有两种：深度优先遍历DFS和广度优先遍历BFS。可用邻接矩阵和邻接表实现。 DFS算法是以递归技术为支持，BFS算法是以队列技术为支持。 2.4 图的应用图的遍历算法是图应用的重要基础。求解生成树、最小生成树、连通分量、拓扑排序、关键路径、单源最短路径及所有顶点之间的最短路径的重要算法应用。 3.建立图的邻接矩阵存储3.1 有向图，无向图，有向网，无向网 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#define MAX_VERtEX_NUM 20 //顶点的最大个数#define VRType int //表示顶点之间的关系的变量类型#define InfoType char //存储弧或者边额外信息的指针变量类型#define VertexType int //图中顶点的数据类型typedef enum{DG=1,DN=2,UDG=3,UDN=4}GraphKind; //枚举图的 4 种类型typedef struct { VRType adj; //对于无权图，用 1 或 0 表示是否相邻；对于带权图，直接为权值。 InfoType *info; //弧或边额外含有的信息指针}ArcCell, AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];typedef struct { VertexType vexs[MAX_VERtEX_NUM]; //存储图中顶点数据 AdjMatrix arcs; //二维数组，记录顶点之间的关系 int vexnum, arcnum; //记录图的顶点数和弧（边）数 GraphKind kind; //记录图的种类}MGraph;//根据顶点本身数据，判断出顶点在二维数组中的位置int LocateVex(MGraph * G,VertexType v){ int i=0; //遍历一维数组，找到变量v for (; i&lt;G-&gt;vexnum; i++) { if (G-&gt;vexs[i]==v) { break; } } //如果找不到，输出提示语句，返回-1 if (i&gt;G-&gt;vexnum) { printf(\"no such vertex.\\n\"); return -1; } return i;}//构造有向图void CreateDG(MGraph *G){ //输入图含有的顶点数和弧的个数 printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\",&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum)); //依次输入顶点本身的数据 printf(\"Please enter all vertices: \"); for (int i=0; i&lt;G-&gt;vexnum; i++) { scanf(\"%d\",&amp;(G-&gt;vexs[i])); } //初始化二维矩阵，全部归0，指针指向NULL for (int i=0; i&lt;G-&gt;vexnum; i++) { for (int j=0; j&lt;G-&gt;vexnum; j++) { G-&gt;arcs[i][j].adj=0; G-&gt;arcs[i][j].info=NULL; } } //在二维数组中添加弧的数据 for (int i=0; i&lt;G-&gt;arcnum; i++) { int v1,v2; //输入弧头和弧尾 printf(\"Enter arc head and arc tail: \"); scanf(\"%d%d\", &amp;v1, &amp;v2); //确定顶点位置 int n=LocateVex(G, v1); int m=LocateVex(G, v2); //排除错误数据 if (m==-1 ||n==-1) { printf(\"no this vertex\\n\"); return; } //将正确的弧的数据加入二维数组 G-&gt;arcs[n][m].adj=1; }}//构造无向图void CreateDN(MGraph *G){ printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\", &amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum)); printf(\"Please enter all vertices: \"); for (int i=0; i&lt;G-&gt;vexnum; i++) { scanf(\"%d\", &amp;(G-&gt;vexs[i])); } for (int i=0; i&lt;G-&gt;vexnum; i++) { for (int j=0; j&lt;G-&gt;vexnum; j++) { G-&gt;arcs[i][j].adj=0; G-&gt;arcs[i][j].info=NULL; } } for (int i=0; i&lt;G-&gt;arcnum; i++) { int v1,v2; printf(\"Enter the subscript i and j on the side (vi, vj):\"); scanf(\"%d%d\", &amp;v1,&amp;v2); int n=LocateVex(G, v1); int m=LocateVex(G, v2); if (m==-1 ||n==-1) { printf(\"no this vertex\\n\"); return; } G-&gt;arcs[n][m].adj=1; G-&gt;arcs[m][n].adj=1; //无向图的二阶矩阵沿主对角线对称 }}//构造有向网，和有向图不同的是二阶矩阵中存储的是权值。void CreateUDG(MGraph *G){ printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\",&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum)); printf(\"Please enter all vertices: \"); for (int i=0; i&lt;G-&gt;vexnum; i++) { scanf(\"%d\",&amp;(G-&gt;vexs[i])); } for (int i=0; i&lt;G-&gt;vexnum; i++) { for (int j=0; j&lt;G-&gt;vexnum; j++) { G-&gt;arcs[i][j].adj=0; G-&gt;arcs[i][j].info=NULL; } } for (int i=0; i&lt;G-&gt;arcnum; i++) { int v1,v2,w; printf(\"Enter the arc head, arc tail and the weight of this edge: \"); scanf(\"%d%d%d\",&amp;v1,&amp;v2,&amp;w); int n=LocateVex(G, v1); int m=LocateVex(G, v2); if (m==-1 ||n==-1) { printf(\"no this vertex\\n\"); return; } G-&gt;arcs[n][m].adj=w; }}//构造无向网。和无向图唯一的区别就是二阶矩阵中存储的是权值void CreateUDN(MGraph* G){ printf(\"Enter the number of vertices and edges: \"); scanf(\"%d,%d\",&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum)); printf(\"Please enter all vertices: \"); for (int i=0; i&lt;G-&gt;vexnum; i++) { scanf(\"%d\",&amp;(G-&gt;vexs[i])); } for (int i=0; i&lt;G-&gt;vexnum; i++) { for (int j=0; j&lt;G-&gt;vexnum; j++) { G-&gt;arcs[i][j].adj=0; G-&gt;arcs[i][j].info=NULL; } } for (int i=0; i&lt;G-&gt;arcnum; i++) { int v1,v2,w; printf(\"Enter the two vertices of the edge and the weight of this edge: \"); scanf(\"%d%d%d\",&amp;v1,&amp;v2,&amp;w); int m=LocateVex(G, v1); int n=LocateVex(G, v2); if (m==-1 ||n==-1) { printf(\"no this vertex\\n\"); return; } G-&gt;arcs[n][m].adj=w; G-&gt;arcs[m][n].adj=w; //矩阵对称 }} 4.邻接矩阵的深度和广度优先搜索12345678写出上述建立图的深度和广度优先搜索序列。 示例 v1 / \\ v2 v3 / \\ / v4 -- v5程序运行将以这个图作为输入。 4.1 算法设计思想 深度优先搜索 深度优先搜索的过程类似于树的先序遍历 所谓深度优先搜索，是从图中的一个顶点出发，每次遍历当前访问顶点的临界点，一直到访问的顶点没有未被访问过的临界点为止。然后采用依次回退的方式，查看来的路上每一个顶点是否有其它未被访问的临界点。访问完成后，判断图中的顶点是否已经全部遍历完成，如果没有，以未访问的顶点为起始点，重复上述过程。 深度优先搜索是一个不断回溯的过程。 广度优先搜索 广度优先搜索类似于树的层次遍历 从图中的某一顶点出发，遍历每一个顶点时，依次遍历其所有的邻接点，然后再从这些邻接点出发，同样依次访问它们的邻接点。按照此过程，直到图中所有被访问过的顶点的邻接点都被访问到。 最后还需要做的操作就是查看图中是否存在尚未被访问的顶点，若有，则以该顶点为起始点，重复上述遍历的过程。 4.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119typedef enum{false,true}bool; //定义bool型常量bool visited[MAX_VERtEX_NUM]; //设置全局数组，记录标记顶点是否被访问过typedef struct Queue{ //广度优先搜索的实现需要借助队列 VertexType data; struct Queue * next;}Queue;int FirstAdjVex(MGraph G,int v){ //查找与数组下标为v的顶点之间有边的顶点，返回它在数组中的下标 for(int i = 0; i&lt;G.vexnum; i++){ if( G.arcs[v][i].adj ){ return i; } } return -1;}int NextAdjVex(MGraph G,int v,int w){ //从前一个访问位置w的下一个位置开始，查找之间有边的顶点 for(int i = w+1; i&lt;G.vexnum; i++){ if(G.arcs[v][i].adj){ return i; } } return -1;}void visitVex(MGraph G, int v){ printf(\"%d \",G.vexs[v]);}void DFS(MGraph G,int v){ visited[v] = true;//标记为true visitVex( G, v); //访问第v 个顶点 //从该顶点的第一个边开始，一直到最后一个边，对处于边另一端的顶点调用DFS函数 for(int w = FirstAdjVex(G,v); w&gt;=0; w = NextAdjVex(G,v,w)){ //如果该顶点的标记位false，证明未被访问，调用深度优先搜索函数 if(!visited[w]){ DFS(G,w); } }}//深度优先搜索void DFSTraverse(MGraph G){ int v; //将用做标记的visit数组初始化为false for( v = 0; v &lt; G.vexnum; ++v){ visited[v] = false; } //对于每个标记为false的顶点调用深度优先搜索函数 for( v = 0; v &lt; G.vexnum; v++){ //如果该顶点的标记位为false，则调用深度优先搜索函数 if(!visited[v]){ DFS( G, v); } }}/* 队列操作 *///初始化队列void InitQueue(Queue ** Q){ (*Q)=(Queue*)malloc(sizeof(Queue)); (*Q)-&gt;next=NULL;}//顶点元素v进队列void EnQueue(Queue **Q,VertexType v){ Queue * element=(Queue*)malloc(sizeof(Queue)); element-&gt;data=v; element-&gt;next = NULL; Queue * temp=(*Q); while (temp-&gt;next!=NULL) { temp=temp-&gt;next; } temp-&gt;next=element;}//队头元素出队列void DeQueue(Queue **Q,int *u){ (*u)=(*Q)-&gt;next-&gt;data; (*Q)-&gt;next=(*Q)-&gt;next-&gt;next;}//判断队列是否为空bool QueueEmpty(Queue *Q){ if (Q-&gt;next==NULL) { return true; } return false;}//广度优先搜索void BFSTraverse(MGraph G){ int v; //将用做标记的visit数组初始化为false for( v = 0; v &lt; G.vexnum; ++v){ visited[v] = false; } //对于每个标记为false的顶点调用深度优先搜索函数 Queue * Q; InitQueue(&amp;Q); for( v = 0; v &lt; G.vexnum; v++){ if(!visited[v]){ visited[v]=true; visitVex(G, v); EnQueue(&amp;Q, G.vexs[v]); while (!QueueEmpty(Q)) { int u; DeQueue(&amp;Q, &amp;u); u=LocateVex(&amp;G, u); for (int w=FirstAdjVex(G, u); w&gt;=0; w=NextAdjVex(G, u, w)) { if (!visited[w]) { visited[w]=true; visitVex(G, w); EnQueue(&amp;Q, G.vexs[w]); } } } } }} 4.3 运行情况截图以下演示的是图采用邻接矩阵存储结构的有向图和无向图的建立。 5.建立图的邻接表存储5.1 有向图，无向图，有向网，无向网123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#define MAX_VERTEX_NUM 20//最大顶点个数#define VertexType int//顶点数据的类型#define InfoType int//图中弧或者边包含的信息的类型typedef enum{DG=1,DN=2,UDG=3,UDN=4}GraphKind; //枚举图的 4 种类型typedef enum{false,true}bool; //定义bool型常量typedef struct ArcNode{ int adjvex;//邻接点在数组中的位置下标 struct ArcNode * nextarc;//指向下一个邻接点的指针 int weight; //权值 InfoType * info;//信息域}ArcNode;typedef struct VNode{ VertexType data;//顶点的数据域 ArcNode * firstarc;//指向邻接点的指针}VNode, AdjList[MAX_VERTEX_NUM];//存储各链表头结点的数组typedef struct { AdjList vertices;//图中顶点的数组 int vexnum,arcnum;//记录图中顶点数和边或弧数 GraphKind kind;//记录图的种类}ALGraph;/* 建立有向图图的邻接表结构 */void CreateDGALGraph(ALGraph *G){ int i, j, k; ArcNode *e; printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\", &amp;G-&gt;vexnum, &amp;G-&gt;arcnum); /* 输入顶点数和边数 */ printf(\"Please enter all vertices: \"); for(i=0; i&lt;G-&gt;vexnum; i++){ /* 读入顶点信息，建立顶点表 */ scanf(\"%d\", &amp;G-&gt;vertices[i].data); /* 输入顶点信息 */ G-&gt;vertices[i].firstarc=NULL; /* 将边表置为空表 */ } for(k=0; k&lt;G-&gt;arcnum; k++){ /* 建立边表 */ printf(\"Enter the vertex number on the edge (vi, vj): \"); scanf(\"%d%d\", &amp;i, &amp;j); /* 输入边(vi, vj)上的顶点序号 */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=j; /* 邻接序号为j */ /* 头插法 */ e-&gt;nextarc=G-&gt;vertices[i].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[i].firstarc=e; /* 将当前顶点的指针指向e */ }}/* 建立无向图图的邻接表结构 */void CreateDNALGraph(ALGraph *G){ int i, j, k; ArcNode *e; printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\", &amp;G-&gt;vexnum, &amp;G-&gt;arcnum); /* 输入顶点数和边数 */ printf(\"Please enter all vertices: \"); for(i=0; i&lt;G-&gt;vexnum; i++){ /* 读入顶点信息，建立顶点表 */ scanf(\"%d\", &amp;G-&gt;vertices[i].data); /* 输入顶点信息 */ G-&gt;vertices[i].firstarc=NULL; /* 将边表置为空表 */ } for(k=0; k&lt;G-&gt;arcnum; k++){ /* 建立边表 */ printf(\"Enter the vertex number on the edge (vi, vj): \"); scanf(\"%d%d\", &amp;i, &amp;j); /* 输入边(vi, vj)上的顶点序号 */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=j; /* 邻接序号为j */ /* 头插法 */ e-&gt;nextarc=G-&gt;vertices[i].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[i].firstarc=e; /* 将当前顶点的指针指向e */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=i; /* 邻接序号为i */ e-&gt;nextarc=G-&gt;vertices[j].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[j].firstarc=e; /* 将当前顶点的指针指向e */ }}/* 建立有向网的邻接表结构 */void CreateUDGALGraph(ALGraph *G){ int i, j, k, w; ArcNode *e; printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\", &amp;G-&gt;vexnum, &amp;G-&gt;arcnum); /* 输入顶点数和边数 */ printf(\"Please enter all vertices: \"); for(i=0; i&lt;G-&gt;vexnum; i++){ /* 读入顶点信息，建立顶点表 */ scanf(\"%d\", &amp;G-&gt;vertices[i].data); /* 输入顶点信息 */ G-&gt;vertices[i].firstarc=NULL; /* 将边表置为空表 */ } for(k=0; k&lt;G-&gt;arcnum; k++){ /* 建立边表 */ printf(\"Enter the arc head, arc tail and the weight of this edge: \"); scanf(\"%d%d%d\", &amp;i, &amp;j, &amp;w); /* 输入边(vi, vj)上的顶点序号 */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=j; /* 邻接序号为j */ e-&gt;weight=w; /* 头插法 */ e-&gt;nextarc=G-&gt;vertices[i].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[i].firstarc=e; /* 将当前顶点的指针指向e */ }}/* 建立无向网的邻接表结构 */void CreateUDNALGraph(ALGraph *G){ int i, j, k, w; ArcNode *e; printf(\"Enter the number of vertices and edges: \"); scanf(\"%d%d\", &amp;G-&gt;vexnum, &amp;G-&gt;arcnum); /* 输入顶点数和边数 */ printf(\"Please enter all vertices: \"); for(i=0; i&lt;G-&gt;vexnum; i++){ /* 读入顶点信息，建立顶点表 */ scanf(\"%d\", &amp;G-&gt;vertices[i].data); /* 输入顶点信息 */ G-&gt;vertices[i].firstarc=NULL; /* 将边表置为空表 */ } for(k=0; k&lt;G-&gt;arcnum; k++){ /* 建立边表 */ printf(\"Enter the arc head, arc tail and the weight of this edge: \"); scanf(\"%d%d%d\", &amp;i, &amp;j, &amp;w); /* 输入边(vi, vj)上的顶点序号 */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=j; /* 邻接序号为j */ e-&gt;weight=w; /* 头插法 */ e-&gt;nextarc=G-&gt;vertices[i].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[i].firstarc=e; /* 将当前顶点的指针指向e */ e=(ArcNode *)malloc(sizeof(ArcNode)); /* 向内存申请空间 *//* 生成边表结点 */ e-&gt;adjvex=i; /* 邻接序号为i */ e-&gt;weight=w; e-&gt;nextarc=G-&gt;vertices[j].firstarc; /* 将e指针指向当前顶点指向的结点 */ G-&gt;vertices[j].firstarc=e; /* 将当前顶点的指针指向e */ }} 6.邻接表的广度和深度优先搜索123456写出上述建立图的深度和广度优先搜索序列。 示例 v0 / \\ v1 -- v2程序运行将以这个图作为输入。 6.1 源代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//DFS遍历void DFS(ALGraph *g,int i,int *visited){ ArcNode *p; visited[i]=1; printf(\"%d \",g-&gt;vertices[i].data); p=g-&gt;vertices[i].firstarc; while( p ){ if(!visited[p-&gt;adjvex]){ DFS(g,p-&gt;adjvex,visited); } p=p-&gt;nextarc; }}void TraDFS(ALGraph *g){ int i; int visited[MAX_VERTEX_NUM]; for(i=0;i&lt;g-&gt;vexnum;i++){ visited[i]=0; } for(i=0;i&lt;g-&gt;vexnum;i++){ if(!visited[i]){ DFS(g,i,visited); } }}//BFS遍历void TraBFS(ALGraph *g){ int i,j; Queue *q; int visited[MAX_VERTEX_NUM]; for(i=0; i&lt;g-&gt;vexnum; i++){ visited[i]=0; } InitQueue(&amp;q); for(i=0; i&lt;g-&gt;vexnum;i++){ if(!visited[i]){ printf(\"%d \",g-&gt;vertices[i].data); visited[i]=1; EnQueue(&amp;q, i); while(!QueueEmpty(q)){ DeQueue(&amp;q,&amp;i); ArcNode *p = g-&gt;vertices[i].firstarc; while( p ){ if(!visited[p-&gt;adjvex]){ printf(\"%d \",g-&gt;vertices[p-&gt;adjvex].data); visited[p-&gt;adjvex]=1; EnQueue(&amp;q,p-&gt;adjvex); } p=p-&gt;nextarc; } } } }} 6.2 运行截图以下演示的是图采用邻接表存储结构的无向图和有向网的建立。","link":"/C/815609fd.html"},{"title":"Hexo之SEO优化","text":"SEO（Search Engine Optimization），即搜索引擎优化。简单来说，SEO就是您可以使用提升网站排名的所有方法的总称，SEO用于确保您的网站及其内容在搜索引擎结果页面（SERP）上的可见性。 验证网站验证自己的网站，让博客被搜索引擎找到，查看博客是否被收入。 在谷歌或者百度的搜索链接中，使用以下格式可以直接搜索自己的域名， 如果能搜索到就说明已经被收录，反之则没有。可以直接搜索自己的域名，或者加一些关键词来更好地判断，例如： 1site: https://mysticalguest.github.io/ 提交博客网站若未被搜索引擎收录，则需进行以下配置，首先要让搜索引擎先验证我们对网站的所有权，两个搜索引擎提交的入口分别为：Google Search Console和百度站长平台 首先介绍谷歌 当然需要登录谷歌账号，然后访问出现以下界面。选择第二个，输入博客的网址。 点击继续，弹出以下对话框。点击下载这个指定文件即可。 处理这个html文件 有多种验证方式，这里推荐 HTML 文件上传方式。下载 HTML 验证文件，拷贝到 ../sources/ 文件夹下，为了使 hexo 不处理这两个验证文件，并且不生成关于这两个文件的 sitemap，我们需要打开验证文件，在最上面添加以下代码，html变为： 1234layout: false---google-site-verification: google************.html 然后执行 hexo 部署命令 123hexo cleanhexo ghexo d 回到刚才的页面点击继续，完成验证 然后介绍百度 输入博客网址，选择属性，验证网站 如何添加标签验证 根据自己的主题情况选择，可以直接写在jsx文件中；我是写在了我的主题的配置文件_config.yml中： 1234567891011121314151617181920212223242526272829# Page metadata configurationshead: ... # https://hexo.io/docs/helpers.html#open-graph open_graph: # Page title (og:title) (optional) # You should leave this blank for most of the time title: ... # Structured data of the page # https://developers.google.com/search/docs/guides/intro-structured-data structured_data: # Page title (optional) # You should leave this blank for most of the time title: ... # Additional HTML meta tags in an array meta: # Meta tag specified in &lt;attribute&gt;=&lt;value&gt; style # E.g., name=theme-color;content=#123456 =&gt; # &lt;meta name=\"theme-color\" content=\"#123456\"&gt;= # - '' - # baidu SEO name=baidu-site-verification;content=code-kyGo8s2mM1 # URL or path to the website's RSS atom.xml rss: /atom.xml ...... 然后执行 hexo 部署命令 123hexo cleanhexo ghexo d 最后返回验证页面，就可以查看验证是否通过了 生成SitemapSitemap即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据 安装sitemap生成插件12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 编辑配置文件站点目录下的_config.yml，添加以下字段，直接放在最末就可以了 12345#hexo sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 向百度提交直接向百度交sitemap.xml，登录 百度站长平台，点击 资源提交下的普通收录，在 资源提交中选择 sitemap标签，输入自己的域名加 baidusitemap.xml 即可，之后可查看 url 提取是否成功。 由于 GitHub 屏蔽了百度的爬虫，即使提交成功，百度知道这里有可供抓取的链接，也不一定能抓取成功。 首先我们先检测一下百度爬虫是否可以抓取网页。在百度站长平台数据统计下的抓取诊断 中，选择PC UA点击抓取 , 查看抓取状态， 如果显示 抓取失败， 则需要进一步的配置。我的直接抓取成功了。 添加robots.txtrobots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。 在 source 目录下增加 rebots.txt 文件，网站生成后在网站的根目录（站点目录/public/）下。 123456789101112131415User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://你的域名/sitemap.xmlSitemap: https://你的域名/baidusitemap.xml Allow表示允许被访问的，Disallow是不允许的意思。注意后面两个Sitemap就是网站地图了。而网站地图前面说了是给爬虫用的。这里配置在robots中。 验证robots文件 向谷歌提交向谷歌提交 sitemap 比较简单，登录 Google Search Console ，选择已经验证过的站点，在站点地图 中，可看到 添加新的站点地图，添加 sitemap.xml 的链接即可，谷歌效率较高，一般当天或者第二天就能收到结果吧。如图： 结果，等到第二天百度还没有结果，谷歌已经有了结果： Url持久化我们可以发现hexo默认生成的文章地址路径是{网站名称／年／月／日／文章名称}。 这种链接对搜索爬虫是很不友好的，第一它的url结构超过了三层，太深了。下面我推荐一种方式： 1npm install hexo-abbrlink --save 根目录下配置_config.yml 123456789# permalink: :year/:month/:day/:title/# 可选 permalink: abbrlink 短链接模式# permalink: :title.html #文章的url 如 http://localhost:4000/theme/博客源码分享.html# permalink: posts/:abbrlink/ #文章的永久链接# permalink: posts/:abbrlink.html 如：http://localhost:4000/post/article.htmlpermalink: :category/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 之后部署一下，就看到你的链接变成了这样： 添加 nofollow 标签给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。 有意者可以查看noopener与之区别。 无论主题的区别，在footer.*文件中做如下修改： 12&lt;a ... rel=\"noopener\"&gt;Hexo&lt;/a&gt;&amp;nbsp;&amp;&amp;nbsp;&lt;a ... target=\"_blank\" rel=\"noopener\"&gt;Icarus&lt;/a&gt; 改为： 12&lt;a ... rel=\"noopener nofollow\"&gt;Hexo&lt;/a&gt;&amp;nbsp;&amp;&amp;nbsp;&lt;a ... target=\"_blank\" rel=\"noopener nofollow\"&gt;Icarus&lt;/a&gt;","link":"/Hexo/32054.html"},{"title":"ElasticSearch入门","text":"1、ElasticSearch介绍 1.1 引言 在海量数据中执行搜索功能时，如果使用MSQL，效率太低。 如果关键字输入的不准确一样可以搜索到想要的数据。 将搜索关键字，以高亮字体展示（购物网站）。 1.2 ES的介绍ES是一个使用Java语言并且基于lucence编写的搜索引擎框架，他提供了分布式的全文搜索功能，提供了一个统一的基于RESTful风格的WEB接口。官方文档 lucence：一个搜索引擎底层，官方网站，apache旗下的顶级项目，直接使用成本太高，所以采用ES实现功能。 分布式：突出ES的横向扩展能力。 全文检索：将一段词语进行分词，并将分出的单个词语统一的放在一个分词库中，在搜索时，根据关键字取分词库中检索，找到匹配的内容（倒排索引）。 比如：淘宝搜索“壳手机”，将其分解为“壳”、“手机”、“手”等；将目标“…苹果手机壳…”也这样分解。（全文检索） RESTful风格的WEB接口：操作ES，只需要发送一个http请求，并且根据请求方式的不同，携带参数的不同，执行相应的功能。 应用广泛：WIKI，Github，Gold Man用ES每天维护将近10TB数据。 1.3 ES的由来你知道的, 为了搜索… 回忆时光 许多年前，一个刚结婚的名叫 Shay Banon 的失业开发者，跟着他的妻子去了伦敦，他的妻子在那里学习厨师。 在寻找一个赚钱的工作的时候，为了给他的妻子做一个食谱搜索引擎，他开始使用 Lucene 的一个早期版本。 直接使用 Lucene 是很难的，因此 Shay 开始做一个抽象层，Java 开发者使用它可以很简单的给他们的程序添加搜索功能。 他发布了他的第一个开源项目 Compass。 后来 Shay 获得了一份工作，主要是高性能，分布式环境下的内存数据网格。这个对于高性能，实时，分布式搜索引擎的需求尤为突出， 他决定重写 Compass，把它变为一个独立的服务并取名 Elasticsearch。 第一个公开版本在2010年2月发布，从此以后，Elasticsearch 已经成为了 Github 上最活跃的项目之一，他拥有超过300名 contributors(目前736名 contributors )。 一家公司已经开始围绕 Elasticsearch 提供商业服务，并开发新的特性，但是，Elasticsearch 将永远开源并对所有人可用。 据说，Shay 的妻子还在等着她的食谱搜索引擎… 1.4 ES和Slor Solr在查询死数据时，速度比ES快。但是数据如果是改变的，Solr查询速度会降低很多，ES的查询速度没有变化。 Solr搭建集群依赖ZooKeeper来帮助管理，ES本身就支持集群的搭建，不需要第三方的介入。 Solr出现早，最开始Solr的社区很火爆，针对国内文档少；ES出现后，国内社区火爆程度 上升，ES的文档非常健全。 ES对云计算和大数据支持很好 1.5 倒排索引 拿到数据的过程分两步：（关键字：“好编程“，分词为”好“和”编程“） query：根据输入的关键字，去分词库中检索内容；结果：1,2,3 fetch：根据在分词库中检索到的id，直接拉取指定数据；结果：“1：你好”，“2：编程”和“3：你好编程” 将存放的数据以一定的方式进行分词，并将分词的内容存放到一个单独的分词库中。 当用户取查询数据时，会将用户的查询关键字进行分词。 然后去分词库中匹配内容，最终得到数据的id标识 根据id标识去存放数据的位置拉去指定数据 2、安装2.1 安装docker-composeDocker安装方法 2.2.1 安装方法1，使用pip 安装pip需要先安装epel-release包 1$ yum -y install -y epel-release 安装pip 1$ yum install -y python-pip 检查python和pip版本 12$ python -V # 3+$ pip -V # 20+ 若不满足上述条件 pip升级 1$ pip install --upgrade pip -ihttp://pypi.douban.com/simple --trusted-host pypi.douban.com 升级python2到python3 1234567891011# 下载$ wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz# 解压源码包$ tar -zxvf Python-3.7.0.tgz# 创建安装目录$ mkdir /usr/local/python3$ cd Python-3.7.0/# 安装到指定目录$ ./configure --prefix=/usr/local/python3# 编译$ make &amp;&amp; make install 设置软链接全局使用python3 1234$ cd /usr/local/python3$ ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3$ ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3$ ln -s /usr/local/bin/pip3 /usr/bin/pip 验证版本 1234$ python3 -VPython 3.7.0$ pip -vpip 20.2.2 from /usr/local/python3/lib/python3.7/site-packages/pip (python 3.7) 可以使用下述命令来查看软链接设置 1$ ls -al /usr/bin | grep python 升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件： 1234$ vi /usr/bin/yum将 #!/usr/bin/python 改为 #!/usr/bin/python2.7$ vi /usr/libexec/urlgrabber-ext-down将 #!/usr/bin/python 改为 #!/usr/bin/python2.7 指定安装源，安装docker-compose 1$ pip install -i https://pypi.tuna.tsinghua.edu.cn/simple docker-compose 查看docker-compose的版本 12$ docker-compose -vdocker-compose version 1.24.0, build 0aa5906 2.1.2 安装方法2，离线安装（推荐）Github发行版本，下载docker-compose-Linux-x86_64，推荐一个软件Motrix，加快下载速度，将下载文件命名为docker-compose。 上传到服务器并移动到/usr/local/bin/： 1$ mv docker-compose /usr/local/bin/ 添加可执行权限 1$ chmod +x /usr/local/bin/docker-compose 查看docker-compose版本 12$ docker-compose -vdocker-compose version 1.26.2, build eefe0d31 2.2 安装ElasticSearch&amp;KibanaDocker镜像工厂，分别搜索“elasticsearch”和“kibana”，选取“社区镜像”作为来源，找到“library/elasticsearch”和“library/kibana”，版本同一。 Kibana是为Elasticsearch设计的开源分析和可视化平台。 在指定文件夹下： 1$ vi docker-compose.yml 并复制下面内容到docker-compose.yml文件 123456789101112131415161718version: \"3.1\"services: elasticsearch: image: daocloud.io/library/elasticsearch:6.5.4 restart: always container_name: elasticsearch ports: - 9200:9200 kibana: image: daocloud.io/library/kibana:6.5.4 restart: always container_name: kibana ports: - 5601:5601 environment: - elasticsearch_url=ip:9200 # 此处ip为自己对应主机地址 depends_on: - elasticsearch 运行 1$ docker-compose up -d 查看日志 1$ docker-compose logs -f 浏览器查看，成功 浏览http://192.168.6.33:9200/： 浏览http://192.168.6.33:5601 2.3 安装IK分词器Es默认的分词器对中文的支持是不友好的，Github下载地址，版本还是要统一。 还是使用docker安装： 查看es容器的CONTAINER ID，进入es容器内部： 12[root@localhost docker_elasticsearch]# docker exec -it &lt;CONTAINER ID&gt; bash[root@fddcec4fe9e7 elasticsearch]# 进入bin目录，执行bin目录下的脚本文件： 1$ cd bin IK分词器对于es来说就是一个插件： 123$ ./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/ elasticsearch-analysis-ik-6.5.4.zip 由于在容器内安装IK分词器，如果把容器down掉，这个IK分词器就没了，重启就可以了 记得重启es容器，分词器才会生效，重启es就可以了： 1$ docker restart &lt;CONTAINER ID&gt; 在Kibana中测试，使用GitHub推荐方法；在Dev Tool中： 12345POST _analyze{ \"analyzer\": \"ik_max_word\", \"text\":\"我是Java工程师.你呢?\"} 得到输出“ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960{ \"tokens\" : [ { \"token\" : \"我\", \"start_offset\" : 0, \"end_offset\" : 1, \"type\" : \"CN_CHAR\", \"position\" : 0 }, { \"token\" : \"是\", \"start_offset\" : 1, \"end_offset\" : 2, \"type\" : \"CN_CHAR\", \"position\" : 1 }, { \"token\" : \"java\", \"start_offset\" : 2, \"end_offset\" : 6, \"type\" : \"ENGLISH\", \"position\" : 2 }, { \"token\" : \"工程师\", \"start_offset\" : 6, \"end_offset\" : 9, \"type\" : \"CN_WORD\", \"position\" : 3 }, { \"token\" : \"工程\", \"start_offset\" : 6, \"end_offset\" : 8, \"type\" : \"CN_WORD\", \"position\" : 4 }, { \"token\" : \"师\", \"start_offset\" : 8, \"end_offset\" : 9, \"type\" : \"CN_CHAR\", \"position\" : 5 }, { \"token\" : \"你\", \"start_offset\" : 10, \"end_offset\" : 11, \"type\" : \"CN_CHAR\", \"position\" : 6 }, { \"token\" : \"呢\", \"start_offset\" : 11, \"end_offset\" : 12, \"type\" : \"CN_CHAR\", \"position\" : 7 } ]}","link":"/ElasticSearch/36460.html"},{"title":"Hexo博客迁移","text":"Hexo用户指南 - 博客迁移GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。 解决类似问题 创建Git分支将Hexo博客迁移到其它电脑换了电脑如何使用hexo继续写博客 我整理了网上的方法并根据自己的实际情况总结出了我的解决方法 操作步骤1.基础配置电脑的基础配置还是要有的，比如： Git客户端NodeJS生成SSH密钥等 2.源文件拷贝Hexo博客系统中影响迁移的只有一部分文件和文件夹，所以只需要备份它们即可 文件（夹） 说明 scaffolds/ 博客文章的模版 source/ 所有博客文章，以及about、tags、categories等page themes/ 网站的主题所在文件夹 .gitignore 在push时需要忽略的文件和文件夹 _config.yml 站点配置文件 package.json 依赖包的名称和版本号 我们要做的就是通过各种方式备份这些文件和文件夹，比如说以下两种静态备份方式： 1.通过U盘或移动硬盘保存2.通过网盘保存 3.本地配置 3.1 创建目录 创建一个名为&quot;自己的git用户名.github.io&quot;的文件夹（推荐用这个用户名以免后面遇到问题）， 3.2 初始化 Hexo 1$ hexo init 3.3 初始化git本地仓库 1$ git init 3.4 复制文件到指定目录 把备份过的文件和文件夹都复制到hexo文件夹下完成后hexo的目录结构应该如下123456789101112.deploy_git.gitnode_modulespublicscaffoldsscourcethemes.gitignore_config.ymldb.jsonpackage.jsonpackage-lock.json 4.测试1$ hexo s 这时候浏览器基本可以看到博客了。 5.部署发布文章12345678910// 清除缓存 网页正常情况下可以忽略此条命令$ hexo clean// 生成静态网页$ hexo g // 开始部署$ hexo d$ hexo g -d","link":"/Hexo/b97fcdf6.html"},{"title":"电子商务课程复习","text":"第1章 计算机、Internet与Visual C#简介 课后习题1.1 填空题 计算机只能直接理解其本身的机器语言，这种语言是由1和0构成的。 计算机处理数据时由一组指令控制，这组指令称为计算机程序。 本章介绍的3种语言是机器语言、汇编语言和高级语言。 将高级语言程序变成机器语言程序称为编译器。 Visual Studio是开发C#程序的集成开发环境（IDE）。 C语言是作为UNIX操作系统的开发语言而著称的。 Web服务分别用XML和SOAP在Internet上标记和发送消息。 2.2 判断题（更正过的） UML主要用于设计面向对象系统。 C#是面向对象语言。 C#是多个.NET语言之一（还有Visual Basic与Visual C++）。 面向对象编程（针对事情）是比过程式编程更自然的建模方式。 计算机只能直接理解其机器语言。 MSIL是公共中间格式，不管原.NET语言是什么，所有.NET程序都要编译成这种格式。 .NET框架可以移植到非Windows平台 第2章 Visual C# 2008 Express简介课后习题2.1 填空题 可视化编程技术可以创建GUI而不用编写任何代码。 方案是一个或多个工程，一起形成Visual C#程序。 自动隐藏特性在鼠标指针移到窗口区外时隐藏窗口。 工具提示在鼠标指针放到图标上时显示。 Solution Explorer窗口可以浏览方案文件。 加号框表示Solution Explorer中的树可以展开。 属性窗口的属性按字母顺序或类别排序 窗体的Text属性指定窗体标题栏中显示的文本。 工具栏可以直观地将控件加进窗体中。 用动态帮助根据当前上下文显示相关帮助文章。 TextAlign属性指定文本在卷标边界中的对齐方式。 2.2 判断题（更正过的） 标题栏显示IDE的方式。 图钉图标切换，自动隐藏，而X框关闭窗口。 工具栏图标表示各种菜单命令。 工具箱包括表示控件的图标。 窗体有标题栏，卷标没有（但有卷标文本）。 控制属性可以用属性窗口修改。 图形框通常显示图形。 Visual C#文件扩展名为.cs。 窗体背景颜色用BackColor属性设置。 第3章 C#程序简介简单程序： 12345678910111213//console.WriteLine()和console.Write()区别在于最后是否有换行。using System;public class Welcome { public static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); //使用formating Console.WriteLine(\"{0}\\n{1}\",\"Welcome to\", \"C# Programming!\"); //读入加转换 Convert.ToInt32(Console.ReadLine()); //输出指定长度,如果需要在左侧则使用{0，-20}表示 Console.WriteLine(\"{0,4}{1,20:C}\", year, acc ount); }} 课后习题3.1 填空题 左花括号（ { ）开始方法体，右花括号（ } ）结束方法体。 每条语句以分号结束。 if是决策语句。 单行注释以//开始。 空行、空格和制表符称为空白符，新行符也是空白符。 关键字保留给C#使用。 C#程序从Main方法开始执行。 方法Console.WriteLine()和Console.Write()在控制台窗口显示信息。 3.2 判断题（更正过的） 注释不在程序执行时导致操作，而是建档程序和改进其可读性。 C#是大小写相关的，所以number和NuMbEr是不同变量。 求余运算符（%）也可以在C#中处理非整数算子。 *、/和%同一优先级，而+和-低一级。 第4章 类与对象简介Main是个特殊方法，在程序执行时自动调用，但大多数方法并不自动调用。 习惯上，方法名从大写字母开始，后续单词首字母大写。 get和set方法的使用： 1234567891011121314151617181920212223242526272829303132using System;public class GradeBook{ private string courseName; public GradeBook(string name) { CourseName = name; } // 之后直接使用CourseName获取到其变量 public string CourseName { get { return courseName; } set { courseName = value } } /*更好的get和set方法： *public string CourseName{get; set;} *称为：自实现属性 *直接写出来，声明+实现一起出现 */ public void DisplayMessage() { Console.WriteLine(\"Hello\\n{0}\", CourseName) }} Main方法 12345678using System;public class GradeBookTest{ public static void Main(String[] args) { GradeBook myGradeBook = new GradeBook(); }} 让Main方法执行程序的关键部分是static关键字，表示这个Main方法是静态方法，调用是不必先创建这个类的对象。 可以在需要时声明新的类类型，因此C#称为可扩展语言。 关于using指令注意上面的程序，这个指令告诉编译器程序使用System名字空间中的类，如Console类。默认情况下，GradeBook类和GradeBookTest类在相同名字空间，一个类使用同一名字空间的另一个类，不需要using指令。 没有显式放进一个名字空间的类隐式放进全局名字空口。 实际上也可以不用using指令，使用类的完全限定类名，包括完全名字空间和类名，System.Console.WriteLine(); GradeBook类带实例变量与属性GradeBook类的每个实例包含每个实例变量的一个副本。 访问修饰符public与private用private声明的变量与方法只能在声明这个方法的类中访问。 用private声明的实例变量称为信息隐藏。在GradeBook类中，属性CourseName操纵实例变量courseName。 设置与读取专用实例变量、属性属性（Property） 是类（class）、结构（structure）和接口（interface）的命名（named）成员。类或结构中的成员变量或方法称为 域（Field）。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用 访问器（accessors） 让私有域的值可被读写或操作。 尽管可以定义get和set方法，但C#属性更方便。 上面程序GradeBook类中的CourseName就是属性。属性声明可以有get访问函数、set访问函数或两者皆有。 定义属性后，可以在代码中像变量一样使用。可以用赋值运算符对属性赋值，其执行属性set函数代码。 get和set访问方法1String name = gradeBook.CourseName; 用户不能直接操纵实例变量courseName，因为它是专用的。 1gradeBook.CourseBook = \"OS\"; 这时文本“OS”传入隐式参数value，执行set访问方法。注意value在set访问方法中隐式声明和初始化，在set方法体中声明局部变量value会发生编译错误。set方法完成任务后不返回任何数据。 声明顺序不做要求。 在公用属性中，get方法可以是公用的，set方法可以是专用的。 值类型与引用类型C#语言的类型分为两类——值类型与引用类型。C#的简单类型都是值类型。值类型的变量（如int）只包含这个类型的值。例如：int count = 7表示：int类型的变量count，只能包含像7这样的整数。 引用类型的变量（也称为引用）包含存储变量所引用数据的内存地址。这个变量在程序中称为引用一个对象。即引用类型（GradeBook）的变量（gradeBook）包含该类型对象的引用（内存地址）。 引用类型实例变量默认初始化为null。string是个引用类型实例变量。 值为null的字符串变量不是空串。空串表示””或string.Empty。null表示引用的不是对象。空串是不含字符的string对象。 用构造函数初始化对象默认情况下，编译器在没有显式提供构造函数的类中提供一个没有变元的默认构造方法，因此任何类都有函数。默认构造方法不修改实例变量的默认值。如果声明类的任何构造函数，则C#不对这个类创建默认构造函数。 构造函数名必须与类名相同。与方法不同，构造函数不指定返回类型（连void也没有）。 浮点数与decimal类型float、double和decimal可以在内存中存储实数。float和double类型称为浮点类型，它们与decimal的主要区别在于：decimal变量精确存储有限范围的实数，而浮点数只存储实数的近似值，但取值范围大得多。 简单类型 有效位 float 单精度浮点数 7 double 双精度浮点数 15~16 精度是float的2倍 decimal 28~29 7.33M或7.33m 需要double变量2倍内存 整数直接赋值给上面3种类型，隐式转换成这些类型。 格式项{0:C}将数据格式化为金额值：$3.3 课后习题4.1 填空题 房子的蓝图就像对象的类。 运算符new创建关键字右边所指定的对象。 默认情况下，没有显式在名字空间中声明的类隐式放在全局名字空间。 类的每个对象维护属性复制时，表示属性的字段也称为实例变量。 Convert方法ToDecimal返回decimal值。 Console方法ReadLine读取字符，直到遇到新行符，然后用string返回这些字符（不包含新行符）。 对于自实现属性，编译器自动生成专用实例变量及其get与set方法。 4.2 判断题 方法和属性体用左右花括号定界。 实例变量默认初始化，局部变量不是。 源代码中的实数值称为浮点数直接输，默认类型为float。 第5章 控制语句：第一部分算法解决问题的过程（procedure）称为算法（algorithm），包括： 执行的操作（action） 执行的操作的顺序（order） 伪代码伪代码是人为的非正式语言，帮助程序员开发算法。 控制结构程序中的语句按编写的顺序一条一条地执行，称为顺序执行。 指定下一个执行的语句不是紧邻其后的语句，这称为控制转移。 结构化编程更清晰、更易调试与修改并且不容易出错。 研究表明，所有程序都可以只用三种控制结构，即顺序结构、选择结构和重复结构。 顺序结构是C#内置的，除非另外指定，计算机总是按编写的顺序一条一条地执行。 选择结构有三种，称为选择语句。 if语句称为单选择语句，if…else语句称为双选择语句，switch语句称为多选择语句。 C#提供四种重复结构，称为重复语句（也称为迭代语句或循环），重复语句有while、do…while、for与foreach。 控制语句小结：C#只有三种控制语句，分别是顺序结构、选择结构（三种）和重复语句（四种）。 C#提供条件运算符（? :），可以代替if…else语句。是C#中唯一的三元运算符（ternary operator），操作数和条件运算符一起形成条件表达式（conditional expression）。 垂悬else问题：C#编译器总是将else与最接近的if相关联，除非用花括号指定。（就近原则） 放在花括号中的一组语句称为块。 简单类型间的显式和隐式转换 123double average;int total,gradeCounter;average = (double)total / gradeCounter; 这里使用double类型转换符称为显式转换，这是的计算式浮点数除以整数，要保证操作数的数据类型一致，C#将int操作数提升为double（提升操作，也称为隐式转换）。 C#支持复合赋值运算符 分别为：+=，-=，*=，/=和%= 也支持自增自减，前置和后置 C#也是强类型语言，即要求所有变量都具有类型。 课后习题5.1 填空题 将一组指令重复特定次数称为计数器控制或确定重复。 事先不知道一组指令的重复次数，可以用标记（记号，标志或哑元）值终止重复。 5.2 判断题 指定计算机程序执行语句的顺序称为程序控制。 第6章 控制语句：第二部分for循环语句 1234for( int counter = 1; counter &lt;= 10; counter++, total += counter ){ statement/empty statement;} switch多选择语句 12345678910switch(grade / 10){ case 9: case 10: ++aCount; break; default: ++bCount; break;} break语句 continue语句在循环结构中执行时跳过该结构体的其余语句，进入下一轮循环。 逻辑运算符有&amp;&amp;（条件与）、||（条件或）、&amp;（布尔逻辑与）、|（布尔逻辑或）、^（布尔逻辑异或）和!（逻辑非）。 只有逻辑非是一元运算符。 短路求值： 1(gender == 'F') &amp;&amp; (++age &gt;= 65) 将在gender不等于“F”时立即停止（整个表达式为假）。 布尔逻辑（&amp;和|）不进行短路求值，所以如果用布尔表达式++age&gt;=会执行，age值会发生改变。 课后习题6.1 填空题 通常，for语句用于计数器控制循环，while语句用于标记控制循环。 6.2 判断题 switch选择结构的每个case中可以使用break语句退出当前case结构，也可以使用return语句。 第7章 方法详述分治法（divide and conquer）：经验表明，要开发和维护大程序，最好的办法是从更容易管理的小块和小组件开始。 C#代码包装代码包装的三种常见途径是方法、类和名字空间。 方法（函数、过程）可以将程序模块化，用户定义方法。分治，复用。 静态方法，静态变量和Math类所有Math方法都是静态的。 1Console.WriteLine( Math.Sqrt( a + b * c ) ) 静态常量 12Math.PIMath.E 这些变量在Math类中声明，修饰符为public与const。任何用关键字const声明的变量都是常量，声明之后不能改变数值。 前面提到，属性的变量也称为实例变量，类的每个对象在内存中有这个变量的不同实例。但静态变量，类的每个对象在内存中没有这个变量的不同实例。类的对象包含静态变量时，这个类的所有对象共享静态变量的同一备份。 为什么Main方法声明为static？ 123public static void Main(string args[]){ ...} Main方法声明为static是执行环境可以调用Main方法而不必创建类的实例。 string args[]可以省略，public也可以省略，void也可替换为int 用字符串接合组装字符串 C#中生成string对象时可以用运算符+（或复合赋值运算符+=）将小字符串组装成大字符串。 12double result = 9.35000;Console.WriteLine(\"Maximum is: \" + result); 控制台输出为：Maximum is: 9.35 布尔值也会隐式转换成string。 关于方法的声明与使用可以用三种方式调用方法。 方法调用堆栈云激活记录堆栈是后进先出（LIFO）数据结构。 程序调用方法是，被调的方法要知道如何放回调用者，因此把调用者的返回地址压入程序执行堆栈（也称方法调用堆栈）。 程序执行堆栈还包含程序执行期间每个方法调用使用的局部变量。这个数据存放成程序执行堆栈的一部分，称为方法调用的激活记录( activation record)或堆栈帧( stack frame)。进行方法调用时，这个方法调用的激活记录压进程序执行堆栈。方法返回调用者时，这个方法调用的激活记录出栈，程序不再知道这些局部变量。如果局部变量保存对象引用，是具有该对象引用的程序中唯一变量，则包含这个局部变量的激活记录出栈时，程序不能再访问这个对象，最终会在“内存回收”时从内存中删除。当然，计算机的内存量有限,因此只能用一定量的内存存储程序执行堆栈中的激活记录。如果发生的方法调用太多，程序执行堆栈无法存储其激活记录,则会发生堆栈溢出错误。 变元提升与类型转换方法调用的另一个重要特性是变元提升——隐式地将变元值变成方法参数所需要的类型。 1Console.WriteLine( Math.Sqrt( 4 ) ); 虽然Sqrt方法要求double变元，但也可以使用整型值，打印数值2.0。方法声明的参数表使C#将int值4转换成double值4.0，然后传入Sqrt方法。 隐式转换要求满足升级规则，否则必须显式转换。 所有简单类型都可以隐式转换为object类型。 .NET框架类库许多预定义类组成相关类的名字空间。名字空间组成.NET框架类库（即FCL）。 1using System; 程序可以使用System名字空间的类名，不必用完全限定名。 C#的一个强大之处是FCL的名字空间中有许多类。 随机数生成可以用随机数生成器对象产生随机byte、int与double值。 123456789Random randomNumbers = new Random();// Next方法产生值：0&lt;=randomValue&lt;=+2147483646int randomValue = randomNumber.Next();// 返回0、1、2、3、4、5。变元6称为比例因子，表示Next要产生的数值的个数int randomValue = randomNumber.Next( 6 );// 返回1、2、3、4、5、6int randomValue = 1 + randomNumber.Next( 6 );// 返回1、2、3、4、5、6int randomValue = randomNumber.Next( 1, 7 ); Next返回的值实际上是伪随机数——通过复杂数学计算产生的数值序列。用当前时间作为种子。 比例缩放与移动随机数12返回2、5、8、11、14int number = 2 + 3 * randomNumber.Next( 5 ) 随机数可重复性与测试/调试要保证运行和调试是随机数一致 1Random randomNumbers = new Random( seedValue ); seedValue变元（int类型）提供随机数计算的种子。如果每次使用相同的seedValue，则Random对象产生相同的随机数列。 案例12345678private enum Status { CONTINUE, WON, LOST }private enum DiceNames{ SNAKE_EYES = 2, ... TREY = 3} 声明作用域 参数声明的作用域是声明所在的方法体。 局部变量声明的作用域从声明点开始，到声明所在块结束为此。 for语句首部初始化部分出现的局部变量声明的作用域是for语句体和首部的其他表达式。 类的方法、属性、字段的作用域是整个类体。这就使类的非静态方法与属性可以使用类的任何方法、属性、字段，不管声明顺序如何。同样，静态属性与方法可以使用类的任何静态成员。 方法重载一个类中可以声明同名方法，只要其参数集不同（参数个数、类型和顺序），称为方法重载。 区别重载方法 编译器根据签名区别重载方法，签名是方法名和参数个数、类型与顺序地组合。 重载方法的返回类型 123456789public int Square( int x ){ return x * x;}public double Square( int y ){ return y * y;} 上面2个方法签名相同，返回值类型不同，会产生编译错误。 递归12345678public static long Factorial( long number ){ // base case if(number &lt;= 1) return 1; else return number * Factorial( number -1 );} 按值与按引用传递变元参数声明中使用关键字ref可以按引用将变量传递给方法——被调方法可以修改调用者的原变量。ref关键字用于调用方法中已经初始化的变量。 在参数前面加上关键字out可以建立输出参数，告诉编译器这个变元按引用传入被调方法，被调方法对调用者的原变量赋值。如果方法中没有在每个执行路径上对输出参数赋值，则编译器报错。 一个方法只能通过return语句向调用者返回一个值，但指定多个输出参数（ref或out）可以返回多个值。 123456789101112131415161718public void ReferenceAndOutParameters(){ int y = 5; // initialize y to 5 int z; // declare z, but does not initilize it SquareRef(ref y); SquareOut(out z);}void SquareRef(ref int x){ x = x * x;}void SquareOut(out int x){ x = 10;} 课后习题7.1 填空题 数据只能从堆栈顶增加和取出。 将控制从被调方法返回调用者的三种方法是：return，return expression或方法右花括号处 程序执行堆栈包含程序执行期间每次调用方法时局部变量的内存。这个数据存放在程序执行堆栈中，称为方法调用的活动记录或堆栈顶。 第8章 数组前面说过，类型可以分为两类——值类型和引用类型。数组是引用类型。 我们通常意义上的数组实际上是内存中数组实例的引用。 数组的元素可以是值类型或引用类型。 123456789a=5;b=6;// 索引应为非负整数或整型表达式c[a + b] +=2;// 将元素c[11]加2// 用数组的Length属性确定数组长度// 注意数组的Length属性不能改变，因为它没有set方法c.Length 数组索引值应为int、uint、long、ulong类型或可以隐式升级为这些类型的值。 声明与创建数组 12345int[] array1 = new int[12];string[] array2;array2 = new string[12];// 每个元素接收默认值, 数组简单类型元素为0, 布尔元素为false, 引用为null 改变数组长度 虽然数组是定长实体，但可以用静态Array方法Resize改变数组长度。这个方法创建指定长度的新数组，将原数组内容复制到新数组，并将收到的变量设置为引用新数组的第一个。 12int[] array3 = new int[5];Array.Resize( ref array3, 10 ); 如果新数组比旧数组小，则后面的内容被截尾。 使用数组初始化器 逗号分隔的表达式清单（称为初始化清单），放在花括号中： 1int[] array4 = { 10, 20, 30, 40, 50}; 编译器遇到包括初始化清单的数组声明时，首先计算清单中的初始化器个数，确定数组长度，然后在“幕后”建立相应的new操作。 声明常量全部用大写字母。 用数组元素作为计数器 1234567891011121314151617using System;public class RollDie{ public static void Main( string[] args ) { Random randomNumbers = new Random(); int[] frequency = new int[ 7 ]; for(int roll = 1; roll &lt;= 6000; roll++) ++frequency[ randomNumber.Next(1, 7) ]; Console.writeLine(\"{0}{1, 10}\", \"Face\", \"Frequency\"); for(int face = 1; face &lt; frequency.Length; face++) Console.writeLine(\"{0, 4}{1, 10}\", face, frequency[face]); }} 运行结果： 1234567Face Frequency 1 956 2 981 3 1001 4 1030 5 1035 6 997 foreach语句 foreach语句只能访问数组元素，不能修改元素。否则编译错误。 隐式类型局部变量 C#提供了隐式类型局部变量特性，是编译器可以根据变量初始化值类型推出局部变量的类型。 123var 7; // 编译器推出变量x类型为int，因为编译器认为7之类的整数是int类型var -123.45; // doublevar array5 = new[] (32, 27, 64, 18, 95, 14); 将数组与数组元素传入方法 指定不带方括号的数组名。 12345678910// 方法声明void ModifyArray(double[] a){ ...}// 方法调用语句double[] array6 = new double[24];ModifyArray( array6 );// 接收double数组的引用, a与array6是相同对象 按值与按引用传递数组 C#中“存储”数组之类对象的变量并不实际存储对象本身，而是存储对象的引用（即存储对象的计算机内存地址）。 多维数组二维的多维数组也称为数值表，把信息放在行和列中。 c#支持两种二维数组——矩形数组和齿状数组。 矩形数组 1int[ , ] array7 = { {1, 2}, {3, 4} } 编译器在每行的初始化器个数不同时产生一个错误，因为矩形数组的每一行要长度相同。 齿状数组 12345int[][] jagged = { new int[] {1,2}, new int[] {3}, new int[] {4, 5, 6}}; 数组jagged本身是三个元素的数组，各引用一个int值的一维数组。 注意矩形数组与齿状数组的数组生成表达式差别。jagged数组后面是两组方括号，表示这是个int数组的数组。在数组初始化器中，C#要求用new关键字创建每一行的数组对象。 用数组生成表达式创建二维数组 123456789int[,] array8;array8 = new int[3, 4]; // 3行4列// 齿状数组不能如此int[][] array9 = new int[2][5]; // error// 而是int[][] a;a = new int[2][]; // 2行a[0] = new int[5];a[1] = new int[3]; 游长变元表（Variable-length argument lists） 可以创建接收任意个变元的方法。 一维数组型变元前面加上关键字params在方法参数表中，表示这个方法接收任意个变元，类型为数组元素类型。params修饰符的这个用法只能在参数表最后一个项目中出现。 12345678910111213141516171819public static double Average(params double[] numbers){ double total = 0.0; foreach(double d in numbers) total += d; return total / numbers.Length;}public static void Main(String[] args){ double d1 = 10.0; double d2 = 10.0; double d3 = 10.0; Console.WriteLine( Average(d1, d2) ); // 15.0 Console.WriteLine( Average(d1, d2, d3) ); // 20.0} 使用命令行变元 12345678910public class ArgTest{ public static void Main(String[] args) { if(args.Length == 0) Console.WriteLine(\"The number of arg is 0!\"); else foreach(var arg in args) Console.WriteLine(arg); }} 使用： 1234$ ArgTest.exe 1 2 3123 课后习题8.1 填空题 清单与数值表可以存放在数组中。 命令行变元存放在strings数组，通常称args中。 第9章 LINQ与泛型集合简介一组预包装数据结构——.NET框架集合类。 LINQ（language Integrated Query，语言集成查询表达式）。利用LINQ可以编写与SQL查询相识的查询表达式，从各种数据源，不限于数据库，还有数组和list驱动信息，选择符合一组条件的元素，称为筛选。 声明式编程：LINQ指定的不是读取结果所要的步骤，而是所选元素要满足的条件。 指定式编程：指定执行任务所有的步骤，面向对象是指示式编程的子集。 1234567891011121314151617181920212223242526272829303132333435363738394041using System;using System.Linq;using System.Collections.Generic;class LINQWithArray{ public static void Main(string[] args) { int[] values = {2, 9, 5, 0, 3, 7, 1, 4, 8, 5}; var filtered = from value in values where value &gt; 4 select value; Display(filtered); // 9 5 7 8 5 var sorted = from value in values orderby value select value; Display(sorted); // 0 1 2 3 4 5 7 8 9 var sortedAndfiltered = from value in values where value &gt; 4 orderby value // orderby value desending 都是降序 select value; // Display(sortedAndfiltered); // 9 8 7 5 5 } // IEnumerable&lt;int&gt;是个接口，描述的对象可迭代 public static void Display(IEnumerable&lt;int&gt; results) { foreach(var element in results) Console.WriteLine(\" {0}\", element); }} 用泛型方法显示LINQ查询结果 泛型方法，指定一个类型参数表。 1234567891011public static void Display&lt;T&gt;(IEnumerable&lt;T&gt; results){ foreach(T element in results) Console.WriteLine(element);}Employee[] employees;int[] array;Display(employees);Display(array); T是类型变元的占位符。调用泛型方法时，编译器根据调用中的变元指定每个类型表示的类型。 T可以在参数表和方法体中多次出现，也可以作为返回值。 集合简介.NET框架类库提供了几个类（称为集合），可以存储相关对象集合。 123456789101112using System;using System.Collection.Generic;public class ListCollection{ List&lt;string&gt; items = new List&lt;string&gt;(); items.Add(\"red\"); items.Insert(0, \"yellow\"); // yellow, red items.Add(\"yellow\"); // yellow, red, yellow items.Remove(\"yellow\"); // red, yellow} 用LINQ查询泛型集合12345678910111213141516171819202122232425262728293031using System;using System.Linq;using System.Collection.Generic;public class LINQListCollection{ List&lt;string&gt; items = new List&lt;string&gt;(); items.Add(\"aQua\"); items.Add(\"RusT\"); items.Add(\"yElLow\"); items.Add(\"rEd\"); // List&lt;string&gt; items = new List&lt;string&gt;{\"aQua\", \"RusT\", \"yElLow\", \"rEd\"}; var startWithR = from item in items let uppercasedString = item.ToUpper() where uppercasedString.StartsWith(\"R\") orderby uppercasedString select uppercasedString; foreach(var item in startWithR) Console.Write(\"{0} \", item); // RED RUST items.Add(\"rUby\"); items.Add(\"SaFfRon\"); foreach(var item in startWithR) Console.Write(\"{0} \", item); // RED RUBY RUST } 注意查询只创建一次，但对结果迭代得到两个不同的列表。这里演示了LINQ的延迟执行——查询只在访问结果时才执行，而不是在定义查询时执行。一次创建，多次执行，数据改变，返回结果。 课后习题9.1 填空题 集合类专门用于存储对象组和提供组织、存储与读取对象的方法。 第10章 再论类与对象1string.Format(\"{0:D2}:{1:D2}:{2:D2}\", hour, minute, second); Format()返回格式化字符串，而不是在控制台显示。 用this引用访问当前对象成员每个对象都可以用关键字this引用自己。调用特点对象的非静态方法时，方法体隐式用关键字this引用这个对象的实例变量和其他成员。 1234567891011121314151617181920public class SimpleTime{ private int hour; public SimpleTime(int hour) { this.hour = hour; } public string BuildString() { this.ToString(); ToString(); } public string ToString() { reutrn string.Format(\"0:D2\", this.hour); }} 索引器类可以用关键字this定义属性式的类成员，称为索引器，可以像数组一样用索引访问元素清单。索引器的好处是可以定义整数索引和非整数索引。 索引器在类中像属性一样定义，用关键字this定义，不能用static修饰。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class Box{ private string[] names = {\"length\", \"width\", \"height\"}; private double[] dimensions = new double[3]; public Box(double length, double width, double heght) { dimensions[0] = length; dimensions[1] = width; dimensions[2] = height; } public double this[int index] { get { if( (index&lt;0) || (index&gt;=dimensions.Length) ) return -1; else return dimensions[index]; } set { if( (index&gt;=0) || (index&lt;dimensions.Length) ) dimensions[index] = vlaue; } } public double this[string name] { get { int i=0; while((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i])) ++i; return (i == naems.Length) ? -1 : dimensions[i]; } set { int i=0; while((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i])) ++i; if(i != names.Length) dimensions[i] = value; } }} BoxTest.cs 123456789101112131415public class BoxTest{ public static void Main(String[] args) { Box box = new Box(30, 30 ,30); // box[0] 30 // box[1] 30 // box[2] 30 box[0]=10; box[\"width\"]=20; // box[0] 10 // box[1] 20 // box[2] 30 }} 索引器可以重载。 重载构造函数12345678910111213141516171819202122232425262728293031323334353637383940public class Time{ private int hour; private int minute; public Time() : this(0, 0, 0){} public Time(int h) : this(h, 0, 0){} public Time(int h, int m) { SetTime(h ,m); } public Time(Time time) : this(time.Hour, time.Minute){} public SetTime(int h, int m) { Hour = h; Minute = m; } public int Hour { get { return hour; } // 这个类外不能使用set方法 private set { hour = ((value&gt;=0 &amp;&amp; value&lt;24) ? value : 0); } } public int Minute { ... }} 这里的this引用用法称为构造函数初始化器，易维护。 默认与无参数构造函数注意上面Time无参构造函数，显式初始化Time对象，为每个参数传递三个参数0。如果省略无参构造函数，则无法用表达式new Time()创建对象，会发生编译错误。 合成类可以引用其他类的对象，作为成员。这个功能称为合成，也称为“有”（has-a）关系。 Employee类中引用其他对象 123456public class Employee{ private Date birthDate; private Date hireDate; ...} 内存回收与析构函数Garbage Collection and Destructors 如果管理资源的对象失去所有引用，而还没有显式释放资源，则程序不能再访问和释放这个资源。这就产生了资源泄露。 公共语言运行环境（CLR）进行自动内存管理，用内存回收单元（Garbage Collection）释放对象不再需要的内存，其他对象可以使用这个内存。 对象失去所有引用时，成为可析构对象。每个对象有个特殊成员，称为析构函数。 析构函数由内存回收单元调用，在内存回收单元释放对象内存之前用于进行对象的终止整理工作。 静态类成员static Class Members 某些情况下，类的所有对象要共享某个变量的一个副本。这时就要使用静态变量。静态变量表示类信息，类的所有对象共享同一数据。静态变量的作用域是类体。 类的公用静态成员访问方法：类名和点号运算符Math.PI； 类的专用静态成员只能通过类的方法和属性访问。 如果没有Employee类的对象，则成员count任然可以引用，弹药通过静态属性Count，如Employee.CountC#的字符串对象创建后不能修改。 声明为静态的方法不能直接访问非静态类成员，因为即使类对象不存在，也可以调用静态方法。静态方法也不能使用this引用，this引用要引用特定类对象。 只读实例变量readonly Instance Variables C#提供了readonly关键字，可以指定对象的实例变量不能修改，想修改会发生错误。 构造函数可以多次对readonly实例变量赋值。 声明为const的成员要在编译时赋值，常量成员的值不能在编译时确定要用readonly关键字声明。如果构造函数不初始化readonly声明的成员，则编译器产生一个警告。 123456789public class Increment{ private readonly int INCREMENT; public Increment(int incrementValue) { INCREMENT = incrementValue; }} 软件复用性Software Reusability 类库，快速程序开发（RAD），FCL，CLR 数据抽象与封装Data Abstraction and Encapsulation 信息隐藏：类通常对类的客户隐藏其实现细节。 数据抽象：描述类的功能而不管其实现细节。 int、double与char类的类型，还有队列都是抽象数据类型（ADT）。抽象数据类型（ADT）实际上包含两个概念，即数据表达和该数据允许的操作。 internal Access目前为止我们所定义的类，只能用两个访问修饰符声明：public与internal。顶级类。C#支持嵌套类——定义在其他类中的类。除了public与internal，类还可以声明为private或protected。如果类声明没有访问修饰符，默认internal访问。声明为internal的方法。实例变量和其他成员可以让同一汇编中的所有代码访问，而其他汇编中的代码则不行。同一汇编中，internal相当于public。 Class View and Object Browser使用Class View窗口 使用Object Browser 对象初始化器Object Initializers 创建对象并在同一语句中将其属性初始化。 123456789class ObjectInitialzerTest{ static void Main(string[] args) { Time aTime = new Time{Hour=14, Minutre=145, Second=12}; Time anotherTime = new Time{Minute=45}; }} 代理delegate代理对象保存一个方法的引用。代理可以把方法看成数据，通过代理可以将方法赋值给一个变量，将这个方法与其他方法相互传递。 代理类型只是描述一组具有特定参数和特定返回类型的方法。 12345678910111213141516171819202122232425262728293031323334353637383940414243using System;using System.Collections.Generic;class Delegates{ // 委托一个接收int并返回布尔值的函数 public delegate bool NumberPredicate(int number); static void Main(string[] args) { int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 ,10}; // 创建NumberPredicate委托类型的实例 NumberPredicate evenPredicate = IsEven; List&lt;int&gt; evenNumbers = FilterArray(numbers, evenPredicate); // evenNumber: 2 4 6 8 10 List&lt;int&gt; oddNumbers = FilterArray(numbers, IsOdd); // oddNumber: 1 3 5 7 9 private static list&lt;int&gt; FilterArray(int[] intArray, NumberPredicate predicate) { List&lt;int&gt; result = new List&lt;int&gt;(); foreach(int item in inArray) { if(predicate(item)) result.Add(item); } return result; } private static bool IsEven(int number) { return (number%2 == 0); } private static bool IsOdd(int number) { return (number%2 == 1); } }} 由于IsEven方法的签名与NumberPredicate代理的签名匹配，因此可以用NumberPredicate类型的变量引用IsEven方法。 Lambda Expressionslambda表达式首先是个参数表。 123456789101112131415161718192021222324252627282930313233343536using System;using System.Collections.Generic;class Lambda{ public delegate bool NumberPredicate(int number); static void Main(string[] args) { int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 ,10}; NumberPredicate evenPredicate = number =&gt; (number%2 == 0); evenPredicate(4); // True List&lt;int&gt; evenNumbers = FilterArray(numbers, evenPredicate); // evenNumber: 2 4 6 8 10 List&lt;int&gt; oddNumbers = FilterArray(numbers, (int number) =&gt; (number%2 == 1)); // evenNumber: 1 3 5 7 9 List&lt;int&gt; numberOver5 = FilterArray(numbers, number =&gt; {return number&gt;5; } ); // 6 7 8 9 10 private static list&lt;int&gt; FilterArray(int[] intArray, NumberPredicate predicate) { List&lt;int&gt; result = new List&lt;int&gt;(); foreach(int item in inArray) { if(predicate(item)) result.Add(item); } return result; } }} 参数表后面是lambda运算符（=&gt;，读作go to）和一个表示函数体的表达式。 没有指定返回类型，返回类型可以从返回值或代理的返回值推定。 同样，lambda表达式定义的方法要与代理类型定义的方法有相同签名。 匿名类型Anonymous Types可以创建简单类，用于存储数据，不必编写类定义。 匿名类型的属性都是公用和不可变的。匿名类型是只读的，创建对象之后不能修改属性值。 12345678910111213141516using System;using System.Collections.Generic;class Lambda{ public delegate bool NumberPredicate(int number); static void Main(string[] args) { var bob1 = new {Name = \"Bob Smith\", Age = 37}; bob.ToString(); // {Name = Bob Smith, Age = 37} var bob2 = new {Name = \"Bob Smith\", Age = 37}; bob1.Equals(bob2); // True // 两者属性值相同，声明顺序相同 }} LINQ中的匿名类型 123var names = from e in employees select new {e.FirstName, Last = e.LastName}; 课后习题10.1 填空题 最低权限原则要求代码只能分配完成指定任务所需的访问量。 编译器将类库工程监理在所谓动态链接库的汇编中。 10.2 判断题 lambda表达式必须返回一个值。 第11章 面向对象编程：继承基类和派生类Base Classes and Derived Classes 继承形成了树状层次结构。 并非每个类关系都是继承关系。“有”关系，类的成员是其他类对象的引用。 protected成员protected介于公用与专用之间，基类的protected成员可以让基类成员和派生类成员访问。所有非专用基类成员在派生类中保持原访问修饰符。 基类和派生类的关系C#中除object以外的每个类都扩展现有类。object是唯一没有基类的类。 123456789// CommissionEmployee类显式扩展（继承自）object类（FCL中的System.Object）public class CommissionEmployee : object{ ... public override string ToString() { ... }} 构造函数不继承，但隐式调用object类的构造函数。 1234567891011121314151617public class BaseCommissionEmployee : CommissionEmployee{ private decimal baseSalary; // 构造函数初始化器和关键字base调用基类构造函数 public BaseCommissionEmployee(string name, decimal sales, decimal salary): base(name, sales) { BaseSalary = salary; } public decimal BaseSalary{get; set} public virtual decimal Earnings() { ... }} 关键字virtual与abstract表示派生类中可以覆盖基类方法。 使用父类private实例变量 12345678public class BaseCommissionEmployee : CommissionEmployee{ ... public override decimal Earnings() { return BaseSalary + base.Earnings(); }} 派生类的构造函数Constructors in Derived Classes 派生类构造函数在执行自己的任务之前要显示（通过base引用和构造函数初始化器）或隐式（调用基类默认构造函数或无参构造函数）调用直接基类的构造函数。链中最后一个调用的构造函数总是object类的构造函数。 继承和软件工程Software Engineering with Inheritance Object类 第12章 多态、接口与运算符重载多态举例程序通过基类变量调用方法时，发生多态——执行时，根据引用对象的类型调用这个方法的正确派生类版本。 程序通过向下转换技术显式将基类引用转换为派生类类型，程序可以调用基类中没有的派生类方法。 123456789101112public class PolymorphismTest{ public static void Main(string[] args) { BaseCommissionEmployee baseCommissionEmployee = new BaseCommissionEmployee(\"Bob\", 5000, 300); CommissionEmployee commissionEmployee = baseCommissionEmployee; CommissionEmployee.ToString(); CommissionEmployee.Earnings(); }} 抽象类与方法定义不实例化为任何对象的类，抽象类。抽象基类。 抽象类用关键字abstract声明。抽象类通常包含一个或几个抽象方法。 抽象属性声明形式如下： 12345public abstract int property{ get; set;} 构造函数和静态方法不能声明为abstract。派生类不能覆盖静态方法。 不能实例化抽象基类的对象，但可以用抽象基类声明变量，保存这些抽象类派生的任何具体类的对象引用。程序通常用这种变量多态操纵派生类对象。可以用抽象基类名调用抽象基类中声明的静态方法。 as运算符进行向下转换 1var employee = currentEmployee as BaseCommissionEmployee; sealed方法与类基类中声明为sealed的方法不能在派生类中覆盖，声明为static和private的方法隐含sealed，因为派生类中不能覆盖（但派生类可以声明与基类中专用方法同名的新方法）。同时声明override与sealed的派生方法可以覆盖基类方法。 声明为sealed的类不能作为基类（不能扩展）。 创建与使用接口Creating and Using Interfaces 接口定义和标准化人与系统交互的方式。 软件对象也是通过接口通信。 所有接口成员隐式声明为public与abstract。 每个接口可以扩展一个或多个其他接口。 实现这个接口的具体类要声明接口中指定了签名的每个接口成员。实现接口而不实现其所有成员的类是个抽象类，要声明为abstract，每个未实现的接口成员要包含一个abstract声明。 和公用抽象类一样，接口通常为公用类型，因此通常在单独文件中声明，文件名与接口名相同，文件扩展名为.cs。 声明接口IPayable 12345// IPayable.cspublic interface IPayable{ decimal GetPaymentAmount();} 创建Invoice类 123456789// Invoice.cspublic class Invoice : IPayable{ ... public decimal GetPaymentAmount() { ... }} 修改Employee类，实现IPayable接口 1234567// Employee.cspublic abstract class Employee : IPayable{ public string Name {get; private set;} ... public abstract decimal GetPaymentAmount();} .NET框架类库公共接口 运算符重载使运算符适用于类对象，这个过程称为运算符重载。 123456789101112131415161718192021222324252627282930313233343536// ComplexNumber.cspublic class ComplexNumber{ public double Real {get; private set;} public double Imaginary {get; private set;} public ComplexNumber(double a, double b) { Real = a; Imaginary = b; } public override string ToString() { return string.Format( \"{0} {1} {2}i\", Real, (Imaginary &lt; 0 ? \"-\":\"+\"), Math.Abs(Imaginary)) } public static ComplexNumber operator +(ComplexNumber x, ComplexNumber y) { reutrn new ComplexNumber(x.Real+y.Real, x.Imaginary+y.Imaginary); }}// OperatorOverloading.cspublic class ComplexTest{ public static void Main(string[] args) { ComplexNumber x, y; x = new ComplexNumber(2, 4); y = new ComplexNumber(4, -2); x+y; // (2+4i)+(4-2i)=(6+2i) }} 第13章 异常处理异常就是程序执行期间发生的问题。 异常处理使应用程序能够解决异常。异常处理可实现清晰，健壮和更多容错的程序。 异常处理概述Exception Handling Overview 程序员可以决定处理任何异常——所有异常，某种类型的所有异常或相关类型的所有异常。 例子：除数为0不用异常处理其他信息（称为堆栈跟踪）显示异常名称和导致异常的执行路径。 堆栈跟踪中的每一行“ at”都表示发生异常时正在执行的特定方法中的一行代码。该信息说明异常的起源，以及达到该点之前进行了哪些方法调用。 当Convert方法ToInt32接收到不代表有效整数的字符串时，将发生FormatException。即使发生异常并且已打印堆栈跟踪，程序也可能继续执行。在这种情况下，应用程序可能会产生错误的结果。 使用异常处理123456789101112131415161718192021222324252627282930313233343536373839404142// DivideByZeroTest.csusing System;using System.Windows.Forms;namespace DivideByZeroTest{ public partial class DivideByZeroTestForm : Form { public DivideByZeroTestForm() { InitializeComponent(); } // 从用户那里获得2个整数 // 将分子除以分母 private void divideButton_click(object sender, EventArgs e) { outputLabel.Text = \"\"; // 清除标签OutputLabel try { int numerator = Convert.ToInt32( numeratorTextBox.Text ); int denominator = Convert.ToInt32( denominatorTextBox.Text ); int result = numerator / denominator; outputLabel.Text = result.ToString(); } catch(FormatException) { MessageBox.Show( \"You must enter two integers.\", \"Invalid Number Format\", MessageBoxButtons.OK, MessageBoxIcon.Error ); } catch ( DivideByZeroException divideByZeroExceptionParameter ) { MessageBox.Show( divideByZeroExceptionParameter.Message, \"Attempted to Divide by Zero\", MessageBoxButtons.OK, MessageBoxIcon.Error ); } } }} 另一种有效的方法： Int32.TryParse方法将字符串转换为int值。该方法需要两个参数-一个是要解析的字符串，另一个是要将转换后的值存储在其中的变量。如果成功解析了字符串，则该方法返回true。如果无法转换字符串，则将值0分配给第二个参数。 Enclosing Code in a try Block（用try块界定代码） try块包含可能引发异常的代码以及发生异常时被跳过的代码。 catch块至多只能有一个参数。 Catching Exceptions（捕获异常） 当try块中发生异常时，相应的catch块将捕获该异常并进行处理。一个try块之后必须至少有一个catch块。catch块指定一个异常参数，该参数表示catch块可以处理的异常。catch块也可以不指定异常类型或标识符，这种catch块（称为通用catch子句），捕获所有异常类型。 未捕获异常 未捕获的异常（或未处理的异常）是没有匹配的catch块的异常。 Termination Model of Exception Handling（异常处理的终止模型） 当程序或CLR中调用的方法检测到问题时，该方法或CLR会引发异常。发生异常的点称为抛出点。如果try块中发生异常，则try块立即终止，程序控制将立即转移到后面第一个异常参数类型与所有抛出类型匹配的catch块中。处理异常后，程序控制在最后一个catch块之后恢复。这称为异常处理的终止模型 .NET Exception层次C#中的异常处理机制只能抛出和捕获Exception类（命名空间System）及其派生类的对象。 其他.NET语言（如C++）引发的异常可以通过常规catch子句捕获。 SystemException类 Exception类是.NET异常类层次结构的基类。从Exception派生的一个最重要的类是SystemException。CLR产生SystemException，可以在程序执行期间的任何时候发生。 如果程序尝试访问超出范围的数组索引，则CLR会引发IndexOutOfRangeException类型的异常。尝试使用空引用会导致NullReferenceException。 catch块可以使用基类类型来捕获相关异常的层次结构。指定异常类型参数的catch块可以捕获所有异常。仅当基类和所有派生类的处理行为相同时，此技术才有意义。 确定方法抛出什么异常（Determining Which Exceptions a Method Throws） finally块程序经常动态地请求和释放资源。操作系统通常会阻止多个程序处理文件。因此，该程序应关闭文件（即释放资源），以便其他程序可以使用它。如果未关闭文件，则会发生资源泄漏。 处理资源时经常会发生异常。无论程序是否遇到异常，该程序都应在不再需要该文件时将其关闭。C#提供了finally块，无论是否发生异常，该块都可以保证执行。这使得finally块非常适合从相应的try块中释放资源。 try块中的局部变量无法在相应的finally块中访问，因此必须在try块之前声明必须在两者中访问的变量。 using语句 1234using(ExampleObject e = new ExampleObject()){ e.SomeMethod{};} 可以简化取得资源、在try块中使用资源和在相应finally中释放资源的代码。文件处理程序，保证文件不再使用时正确关闭。 using语句代码等效于 1234567891011{ ExampleObject e = new ExampleObject(); try{ e.SomeMethod(); } finally { if ( e != null ) ( ( IDisposable ) e ).Dispose(); }} Exception Properties 类Exception的属性用于制定错误消息，指示捕获到的异常。属性Message存储与Exception对象关联的错误消息。属性StackTrace包含一个表示方法调用堆栈的字符串 发生异常时，程序员可能会使用其他错误消息或指示新的异常类型。原始异常对象存储在InnerException属性中。 类异常提供其他属性： HelpLink指定描述问题的帮助文件的位置。 Source指定引起异常的应用程序或对象的名称。 TargetSite指定异常发生的方法。 最近调用的方法出现在堆栈的顶部。第一种方法（Main）出现在底部。 StackTrace表示抛出点处方法调用堆栈的状态。内部异常信息包括内部异常堆栈跟踪。 用户定义异常类（User-Defined Exception Classes）用户定义的异常类应直接或间接从名称空间System的Exception类派生。 用户定义的异常应定义三个构造函数： 无参数构造函数 接收字符串参数的构造函数（错误消息） 接收字符串参数和Exception参数的构造函数（错误消息和内部异常对象） 第14章 图形用户界面概念：第一部分图形用户界面（GUI）允许用户在视觉上与程序进行交互。 GUI控件是可以在屏幕上显示信息或使用户能够与应用程序交互的对象。 Windows FormsForm是出现在计算机桌面上的图形元素； 它可以是对话框，窗口或MDI窗口。组件是实现IComponent接口的类的实例，该接口定义了组件必须实现的行为，例如如何加载组件。诸如按钮或标签的控件在运行时具有图形表示。","link":"/CSharp/60953.html"},{"title":"Icarus主题美化","text":"Icarus用户指南 - 主题美化Icarus的主题样式编码文件为themes/icarus/layout/layout.jsx。此文件定义了站点全局的样式设置。本文详细介绍了本主题针对文章分类的详细配置说明。 自定义 Icarus 主题 主题默认是三列排列，第一列是个人信息，第二列是文章的简介或者内容，第三列是标签云等组件。 在首页的时候阅读体验也很好，但是在文章页面查看全文的时候就感觉文章内容显示有些太少。 于是打算在文章页面隐藏掉右边的侧边栏。 我想应该是我用的icarus主题版本是3+，网上都是2+版本的教程，没有找到对应教程。 于是就自己阅读源码自己解决了问题。 默认配置也基本能用了，但是有一个痛点就是，阅读模式文章宽度太短了，还是根据个人习惯做下配置。 解决方案 1. 首先找到了控制侧边栏的代码文件在 ../themes/icarus/layout/layout.jsx 源码为(版本差别，大同小异)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const { Component } = require('inferno');const classname = require('hexo-component-inferno/lib/util/classname');const Head = require('./common/head');const Navbar = require('./common/navbar');const Widgets = require('./common/widgets');const Footer = require('./common/footer');const Scripts = require('./common/scripts');const Search = require('./common/search');module.exports = class extends Component { render() { const { env, site, config, page, helper, body } = this.props; const language = page.lang || page.language || config.language; const columnCount = Widgets.getColumnCount(config.widgets); return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=\"section\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"columns\"&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;; }}; 三栏分别为：（从第24行开始） 12345678&lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; // 中 1&lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; // 左 1&lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; //右 2. 那能不能逻辑改为只有主页才显示右边侧栏呢？ 我从源码中分析到，函数返回return的就是样式页面。既然找到了这3栏，我可以通过改变返回值，就可以达到控制主体样式的目的。 所以加一个判断语句即可： 12345678if(page.path==='index.html'){ // index.html即主页面 // 返回3栏 return '...';}else{ // 返回2栏，改变宽度即可 return '...';} 上面代码只会在主页面显示3栏，后续博主我在使用的过程中发现有且只有主页面是3栏；换页、分类页等页面就会变成2栏！ 因为我们的代码只为主页面返回3栏！ 后来在读源码后，找到了解决方法：在 ../themes/icarus/layout/layout.jsx 文件中第16行添加如下代码：12console.log(\"Page\", page);console.log(\"Page.path: \", page.path);这样就可以查看页面具体信息；控制台执行hexo g -d后，会出现以下信息；由于每个page信息可能会很多，尤其是博客文章内容过多，就会使page包含的信息过多，会使控制台信息溢出；所以我只选择其中一个较短的信息展示如下： 2.1 page信息12345678910111213Page: { base: 'tags/Hexo/', total: 1, current: 1, current_url: 'tags/Hexo/', posts: _Query { data: [ [_Document], [_Document] ], length: 2 }, prev: 0, prev_link: '', next: 0, next_link: '', tag: 'Hexo', path: 'tags/Hexo/index.html', lang: 'en', canonical_path: 'tags/Hexo/index.html' } 2.2 page.path信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354ubuntu~/github/mysticalguest.github.io$ hexo g -dInferno is in development mode.INFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===INFO === Checking the configuration file ===INFO === Registering Hexo extensions ===INFO Start processingINFO Files loaded in 6.76 sPage.path: 2020/06/18/ICARUS主题美化/Page.path: 2020/06/17/数据结构进阶实训八/Page.path: 2020/06/17/数据结构进阶实训五/Page.path: 2020/06/17/数据结构进阶实训二/Page.path: 2020/06/17/数据结构进阶实训一/Page.path: 2020/06/17/数据结构进阶实训六/Page.path: 2020/06/17/数据结构进阶实训七/Page.path: 2020/06/16/Java笔记文档2/Page.path: 2020/06/16/Java笔记文档1/Page.path: 2020/06/15/数据结构进阶实训三/Page.path: 2020/06/15/数据结构进阶实训四/Page.path: 2020/06/14/hello-world/Page.path: archives/index.htmlPage.path: archives/page/2/index.htmlPage.path: archives/2020/index.htmlPage.path: archives/2020/page/2/index.htmlPage.path: archives/2020/06/index.htmlPage.path: archives/2020/06/page/2/index.htmlPage.path: categories/配置/index.htmlPage.path: categories/Document-Compile/index.htmlPage.path: categories/主题/index.htmlPage.path: categories/算法/index.htmlPage.path: index.htmlPage.path: page/2/index.htmlPage.path: tags/Hexo/index.htmlPage.path: tags/Java/index.htmlPage.path: tags/C/index.htmlPage.path: categories/index.htmlPage.path: tags/index.htmlINFO 0 files generated in 3.37 sINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...位于分支 master无文件要提交，干净的工作区分支 'master' 设置为跟踪来自 'git@github.com:*/*.git' 的远程分支 'master'。Everything up-to-dateINFO Deploy done: git 从控制台打印出的信息，可以明显看出每个页面的详细路径信息；所以我们想要那些页面3栏都可以；12345678910var path = /\\Sindex.html/; if(page.path==='index.html' || path.test(page.path)){ // 返回3栏 return '...';}else{ // 返回2栏，改变宽度即可 return '...';} 这里我利用正则表达式，将非博客文章页面都设为3栏显示，大家可根据自己喜好自行对想要的页面设置指定栏数。 3. 其他修改逻辑 +表示添加代码，没有标记表示代码不做修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// 从16行开始修改代码+ if(page.path==='index.html'){ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=\"section\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"columns\"&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;;+ }+ else{+ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt;+ &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt;+ &lt;body class={`is-${columnCount}-column`}&gt;+ &lt;Navbar config={config} helper={helper} page={page} /&gt;+ &lt;section class=\"section\"&gt;+ &lt;div class=\"container\"&gt;+ &lt;div class=\"columns\"&gt;+ &lt;div class={classname({+ column: true,+ 'order-2': true,+ 'column-main': true,+ 'is-12': columnCount === 1,+ 'is-8-tablet is-8-desktop is-10-widescreen': columnCount === 2+ })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt;+ &lt;Widgets site={site} config={config}helper={helper} page={page} position={'left'}/&gt;+ &lt;/div&gt;+ &lt;/div&gt;+ &lt;/section&gt;+ &lt;Footer config={config} helper={helper} /&gt;+ &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt;+ &lt;Search config={config} helper={helper} /&gt;+ &lt;/body&gt;+ &lt;/html&gt;;+ } 好啦，大工告成！ 其中只有两处代码改动较大，让我们来看看吧！ 我们只是修改了栏数，但每一栏的宽度没有改变，这里更关注的是文章栏的宽度。具体修改代码下： 1234// 渲染相应栏的标签，只添加‘中’和‘左’// 根据自己的喜好可以选择任意组合，‘中’和‘右’也可以// 第45行'is-8-tablet is-8-desktop is-10-widescreen': columnCount === 2 即将原来的 is-8-widescreen修改为is-10-widescreen。 4. 下面详细解释一下代码 icarus 可以设置资料、toc、归档等等插件在文章的左侧或者右侧。也就是说，包括插件和文章在内，列数在1~3列不等： 无插件的时候，为1列；插件统一在左侧或右侧时，为2列；插件左、右侧都有时，为3列。Bulma 引擎将屏幕横向分为12份，所有元素按照自己的需求使用即可。 通过 layout或widget.jsx 文件，我们可以看到，对于插件而言： 如果屏幕分为2列，则插件的宽度为 is-4-widescreen，也即是4/12=33.33%的宽度；如果屏幕分为3列，则插件的宽度为 is-3-widescreen，也即是3/12=25%的宽度，两列插件占了50%宽。同样的，layout.jsx 文件针对文章也做了宽度限制： 如果屏幕分为1列，则文章的宽度为 is-12，也即是12/12=100%的宽度；如果屏幕分为2列，则文章的宽度为 is-8-widescreen，也即是8/12=66.66%的宽度；如果屏幕分为3列，则文章的宽度为 is-6-widescreen，也即是6/12=50%的宽度。 那么调整插件宽度的方法也就差不多想出来啦！","link":"/Hexo/a7bf86bc.html"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/Hexo/4a17b156.html"},{"title":"华为面经","text":"收到面试邀约后该怎么做？我参考了尚硅谷雷老师的博客，他的B站ID是“黎曼的猜想”。通过他的经验的指导，并结合我的面试实际情况，为面试准备了许多说辞。 面试前准备当收到面试通知后，通过如下准备可以大大提升面试成功率。 知己知彼，百战不殆。即使侥幸面试成，亦可防止压工资。 其实公司肯花时间让你去面试，前提条件一定是通过了你的简历，一定发现你和公司的匹配点，也就是说，一定是有录用意向的。 在技术面试的时间段里（最长1个小时，并且可能有多伦技面），尽可能地展现优势。 至于通过技术面试后，业务主管、项目经理或人事的面试一般是过滤特别差的，比如考察团队协作能力和沟通表达能力等，这对大家来说应该都不是问题。 敲重点！ 至少定出2天的准备时间 一定要再次阅读公司的职位要求 就类似于考试，一定是先审题嘛，然后再做相应的准备。 比如，我报的西安华为21届秋季校招，第一意向部门传送与接入产品线，第二意向部门云核心网产品线，领域都是通用软件开发工程师。 岗位职责 在这里，你将从事IT应用层软件、分布式云化软件、互联网软件等的设计开发，可以采用敏捷、Devops、开源等先进的软件设计开发模式，接触最前沿的产品和软件技术，成为大容量高并发技术的专家；你将参与华为产品的软件研发工作，包括但不限于：（1）完成从客户需求到软件产品定义、架构设计、开发实现、再到上线运营维护等产品生命周期中的各个环节；（2）创造性解决产品在实现过程中的技术难题，应用前沿技术提升产品的核心竞争力，如分布式系统、性能调优、可靠性、数据库等；（3）有机会参与业界前沿技术研究和规划，参与开源社区运作，与全球专家一起工作、交流，构建华为在业界影响力。 岗位要求 1、计算机、软件、通信等相关专业本科及以上学历；2、热爱编程，基础扎实，熟悉掌握但不限于JAVA/C++/C/Python/JS/HTML/GO等编程语言中的一种或数种，有良好的编程习惯；3、具备独立工作能力和解决问题的能力、善于沟通，乐于合作，热衷新技术，善于总结分享，喜欢动手实践；4、对数据结构、算法有一定了解；5、优选条件：（1）熟悉TCP/IP协议及互联网常见应用和协议的原理；（2）有IT应用软件、互联网软件、IOS/安卓等相关产品开发经验，不满足于课堂所学，在校期间积极参加校内外软件编程大赛或积极参于编程开源社区组织；（3）熟悉JS/AS/AJAX/HTML5/CSS等前端开发技术。 能从中挖掘出如下的技能需求点： 专业性要求： 基础扎实 熟悉TCP/IP协议及互联网常见应用和协议的原理 编程大赛 其实在投简历前，就可以根据不同公司的不同要求对简历进行微调，这样获得该岗位的面试机会更大。 准备项目描述的说辞面试环节中的项目介绍必要环节 这里介绍些项目描述的要点： 业务需求一笔带过，项目背景，工期人数等寥寥几句，面试官不关心的。就可以这样介绍： 大二在软通动力实训的过程中接触了SpringBoot，由于我家有个亲戚开了个私人宾馆，就萌生了开发一个宾馆的Web应用的想法。然后我一个人在大二暑假花了3个月的时间用SpringBoot做一个宾馆信息管理系统，面向的用户就是宾馆的前台，可以简化管理宾馆的业务过程。 结合项目实际需求，介绍项目用到的技术，比如上面“岗位要求”描述中，要求有“开发经验，熟悉一些前端知识等”，可以这样介绍： 在这个项目里，开发用户界面要到模板引擎，比如JSP和Thymeleaf，就必须了解前端知识嘛，所以我还学习并用到了许多前端框架，比如EasyUI、Bootstrap、Ajax和axios等，甚至还接触过Vue。 注意：这里仅仅是介绍项目，结合功能点说出技术即可，一定要思路清晰。 再结合项目，说些招聘方需要的非技术的要求 在这个项目中，我用到了MVC设计模式，在项目的开发过程中去学习，遇到问题我首先会在网络上寻找解决方案，然后再去和同学商量，或是我在Java学习的微信群里，不乏工作经验丰富的人，我也会去问他们解决方案。过一定时间我也会再回顾代码，优化代码逻辑，减少代码量等。 如果有，说下项目中的亮点，比如用到了一些比较好的技术。 官方推荐模板渲染引擎Thymeleaf，语法更灵活 MyBatis框架，SQL语句更灵活，实现更简单 缓存 String对象的优化 这个项目对数据库性能和内存性能要求比较高，所以我用到了Oracle调优技术和JVM内存优化技术，此外，我们还用到了大数据分析工具对计费模式做了优化。 准备好说辞，能给面试官留下思路清晰，技术匹配的印象。 如果运用到项目的技术和要求不匹配，但可以在了解的基础上说出来，整理一下说辞即可。但通过后面的问题，面试官发现你根本不了解，性质就变了。 在准备项目说辞的时候，可以尽量和职位要求靠，但你说的每个技术点，稍后面试官都会问的。如果某个技术点没有掌握，其实问题不大，面试官不会要求十全十美。 一定得准备项目描述里提到的技术在介绍项目时，吸引面试官把注意力集中到你提到的技术点上。这些技术大多也是岗位要求的技术。 结合项目点明技术。 准备亮点话题亮点话题多多益善 对于Java高级开发而言，可以准备以下话题： 虚拟内存优化 数据库性能优化 分布式高并发架构 一些热门组件，比如redis、nginx等 大数据方向的用法？ Java core（比如集合或多线程）方面的底层实现代码 Spring系列（比如IOC、AOP、MVC、SpringBoot、SpringCloud）方面的底层实现代码 要准备到什么程度： 最好结合项目实际说出真的用过这些技术 最好往性能调优方面靠 通过准备，大家可以主导面试官提问，否则面试官开始天马行空地问问题，大家薄弱点被暴露的机会就有可能大大增加。 刷题手撕代码啊，远程的话，就是用本地IDE，然后共享屏幕，不要紧张对自己代码不自信。 面试中的表现软实力面试官只有当确认候选人在责任心和团队协作能力方面没问题，才会把你招进公司。面试官会通过（1）问问题的方式；（2）通过回答问题的方式和说话的语气；来确认。 所以大家面试的过程中： 交流时尽量目视面试官，谈吐清晰，语速不急不缓，说话果断，语气不卑不亢，别太僵硬 适当微笑，点头互动 积极回答问题，如果没听清问题，及时主动询问 不急不燥，从容应对“压力测试” 放松心态 当觉得自己不行的时候，就走在这个斑马线上，你就是一个行人。 上面这些都是我二面之前做的准备。 二面完后总结一面自我介绍嘛，基本信息，实习实践经历比赛，虽然简历上有。 开始看机试的题 我是没有想到的，依次回顾当时的机试题，我当时是8月12号参加的华为西北校招机试，距离面试这天已经1个月了吧，有些没有印象，只说出了一题的大概思路，觉得自己没有表现好。当时的题及我写的代码都以放在我的GitHub上，大家可以参考，并不都是AC。 项目 问我做过的项目给他展示，我是直接共享屏幕展示，他会问我如何实现，他也会指出我项目里出现的问题。和我讨论，大家把握说话方式，不要太拘束即可。还会展示数据库，问数据库中各个表的实现和意义，问我了为什么密码是明文没有加密，这是我第二个感觉表现不好的地方。 然后就手撕代码 当时机试，有两题没写出来，他就从里面挑了一道题让我写，当时没有思路，最后又写出来了，觉得挺幸运，不过写代码过程中出现了写小插曲，这是我第三个感觉表现不好的地方。 结束 大概聊得就这么多，最后问我有什么问题想问他，我也没有问题。 二面一面结束10分钟后就会出结果，前2面安排挺紧凑的相隔30分钟吧，会换面试官的。轮到我就比较凑巧，刚好到饭点，我一面面完群里就通知大家可以去吃饭了。 吃完饭会来，等了一会儿，1点30分开始。还是自我介绍，基本信息，实习实践经历比赛，虽然简历上有。 项目 然后他提了个功能，问我实现思路，感觉也没有达到他的要求 结合项目，给出场景 问我有没有什么想法？我说出了大概思路，感觉也没有达到他的要求 B树系列问题 B树，B+树为什么比二叉树等效率高？特点是什么？我之前通过MySQL了解的B+树，现在已经没啥印象了，就也没有回答的很顺利。 数据结构，排序 问快速排序、归并排序和堆排序的时间复杂度，有没有了解比这些排序更快的，还有他们的稳定性。 结束 大概聊得就这么多，最后问我有什么问题想问他，我也没有问题。 专业主管面试职业规划（人生规划）：最重要的就是找对职业方向 1、自我分析阶段 兴趣分析： 我应聘的岗位是通用软件开发，我也向HR了解过情况，我的意向工作就是Java开发。我热爱Java，我从大二接触到这门语言就开始了，Java是我接触到的第二门编程语言，第一门面向对象的编程语言，我喜欢他的规范和严谨。所以我会主动努力地去学习Java及其相关的框架，比如Spring。 性格分析： 大学期间我参与过比较多的项目，做过开发，也做过项目组长，做过项目汇报，我都可以适应这些角色，开发不用说我是喜欢的，项目组长的话，主要负责协调组内成员，规划好项目进度，也会帮助和鼓励组员开发。我觉得我的性格比较活泼比较负责，我每次参与开发完成项目都很有成就感和满足感，会有冲动向同学们汇报展示。 优缺点分析： 优点：做事比较负责，认真，有上进心，肯吃苦 缺点：比较在意他人的看法 2、职业分析规划 毕业之后找到自己心仪的工作，认真完成工作，抽时间学习专业知识技能，向前辈和同事学习经验。因为自己要学的东西还很多，积淀一段时间后，想着在工作中职位向上晋升，不断积累经验。 网上翻到一篇博客【面试经验】三轮面试拿到华为Offer 问我为什么选择华为，我说我想去大城市闯荡，华为有很大的平台可以供我们年轻人发挥。然后主管问有没有人推荐你选华为，或者你是怎么了解华为的。这些问题我都是心里面有答案的，因为我邻居就有在华为工作的，所以我稍微了解华为，也有人力挺我要去华为发展，这些都是这个问题的答案。 接下来就是压力面试，问我如果你和你同学一起进入华为，发现你的工资比同学低个几千元，你该怎么办，你会不会心理不平衡？我说我会弄明白我为什么会比别人低，然后努力工作，改正一些缺点，争取在业务上超过他们。业务主管说在华为刚进去不要在乎你比别人少几千，以后都是年薪几十万，几百万的，那几千元算什么，刚进去的两个人，几年以后可能待遇截然不同。 接着又问我如果你有一项技术只有你一个人会，是你的独门秘诀，现在又需要，你会不会把他教给其他人。我直接说不会，因为这是吃饭的家伙。业务主管笑了笑说虽然这是我不想得到的答案，但是你诚实，在华为大家都是有技术互相交流的，大家都倾其所有的完成项目，这样项目就能轻松的完成，然后一些奖励大家一起分，这样多开心。接着又问我，如果我是业务主管，给5个不同方向的人打等级，打绩效成绩该怎么打。这个我答的比较好，因为要看团队合作能力，看他在完成工作的同时还为团队带来了哪些利益，因为华为是狼道盛行的团队，特别讲究团队合作。 聊完这些压力面以后，面试官问我有没有问题要问他。我就顺便问了一个我这个方向的进入华为能不能直接上手，对不对口。你进来以后也会跟着师傅学习，慢慢上手项目，开始融入团队完成项目，到后来一个人负责一个项目。三轮面试差不多就结束了，第三轮面试大概35分钟左右，这个还是比较轻松的。 这里要注意的是，三轮面试的时候，如果业务主管问你地点的问题，那你就要小心了，如果说给你深圳你去不去，你说不去的话，可能第三轮你就会倒下。当然了很多同学没有被问到这个问题，关于地点问题倒在三轮的，我们学院大概两个人。（当你面试完华为以后，恭喜你，你的面试经验已经非常成熟了。你再去面试其他公司，你就会发现很轻松，基本都不需要准备，级别绝对不是一个level，因为华为的面试官带你把项目都仔仔细细的过了一遍，华为三轮面试的那两个小时绝对成为你人生中宝贵的财富） 面试完三轮以后等通知，说一个星期后给结果。19号面试的同学，有大部分都撑完了三轮面试，20号面试的同学最后只有2个撑到了第三轮。然后面试完以后，第二天就有三轮面试的结果了，我是录用排序中，有的同学倒下了，显示面试不通过。苦苦等了一个星期，然后HR说可能国庆之后给结果。在家里过了一个国庆后。大概11号的时候，有人收到签约短信了，那波人是第一批被捞上来了，网络能源产品线电源岗只有我同门被捞了，因为他研究方向就是逆变器，十分对口，面试也很顺利，薪资待遇开的20k。我们专业，面试其他部门的第一批被捞的都是开的20k，价格都一样。过了几天，华为第二批开始捞人，我被捞出来了，16号南研所签约，签两方（华为的两方可以毁约，没有违约金），第二批的待遇稍微差一点只有19k，计算方法就是19*（14-16），签完两方，拿到了华为的聘书，我就回学校了。后来听说第三批只有18k了。 最后再说一下我去了哪里吧，最后我选择了江苏电网（某市供电公司）。主要原因是签了承诺书，不允许毁约电网，再加上家里人不同意我去华为，怕我身体吃不消。签完电网刚开始三天我还状态良好，后来慢慢的有些后悔，觉得我这性格的更适合华为，我喜欢奋斗干出一番事业，年轻人不能怕吃苦。然后同学对我进行了一波开导，再加上家里人不同意去华为，最后我还是坚定的选择了国家电网。其实选择哪有什么后悔不后悔，你进去以后踏实干活，干出成绩来，有所成就，你就会觉得当初的选择多么的对。如果你整天浑水摸鱼，一事无成，这样你就会觉得当初为什么选择了它，而没选择另一者。所以为了以后不留遗憾，今后也会努力工作，带着华为那种拼搏的精神进入电网，踏实干活。最后我们学院大概4个签约了华为公司，都选择了上海。最后衷心的祝愿在华为拼搏的这些同学，你们带着东大电气人的梦想，勇敢新世界，拖着世界往前走，虽然在华为拼搏的路上没有我，但梦想与你们跟随。 三面依然是自我介绍，充分准备一下。 专业：软件工程 对软件工程的理解，工程化开发软件项目…自我感觉还行 软件工程中最重要的是什么？为什么？ 需求分析，软件开发的开端 最有成就感的事 最遗憾的事 未来规划 了解华为的企业文化吗 总体觉得面试华为收获不少，拿不拿得到Offer另说。前两面挺虚的，但三面还好，等待通知吧！","link":"/Interview/25291.html"},{"title":"笔试和面经","text":"面试Java研发实习生所做的知识准备，及以后的积累 面试MindCoord过程邮件通知时间也挺准（2021/4/20 – 15:10-15:25, UTC+8），我大概15:08进腾讯会议的，里面只有我一个人。到了10分钟会进来一个小姐姐，确认身份后，会问你对公司的了解，也没有自我介绍。说完自己的了解后，她会以很快且口齿清楚的方式快速介绍MindCoord公司的一些情况。介绍完就开始问问题了，题量和时间都是有限的，如果思考一会儿还是回答不出，就会跳过。下面是我印象中所有问题（不分先后）： 技术类问题 进程和线程 什么是Java深拷贝和浅拷贝 Java基本数据类型，枚举（穷举？），除了基本类型，其他叫什么类型（引用类型） 编程遇到的错误类型，除0是什么错误类型（RuntimeException） Java四种引用类型 finally的用法，fianl的用法 创建多线程的方法（这里问的就是线程创建的方法！！我就只以为是单线程！！） Spring的设计模式 静态方法能不能调用非静态方法，并说明（不能！！我以为能） 数据库的范式（），并详细说一下第一范式 什么是索引，为什么有索引，优点及缺点 非技术类问题 平时娱乐去哪些场所，消费如何 工作中不喜欢和什么样的人合作 对于工作中任务较多，压力较大，怎么看的 总结面试都是Java基础，MindCoord是美国的一个创业公司，国内信息很少，我也是从官网上收集的信息。 MindCoord Inc. 是一家成立于美国波士顿的新科技企业,拥有自由、开放、包容、多元的全球化团队,囊括了来自世界各地的智慧人才。公司致力于为所有人提供更简单的虚拟空间创作方案,业务涵盖VR、AR、XR等虚拟成像领域,旗下拥有3D动画快速制作短视频APP——PortalHiker、HereFounder等软件产品和机器宠物等硬件产品。我们欢迎想挑战全新领域的科技人才一同加入,在未知的道路上尽情探索,享受发明创造的乐趣。 产品 3D广告：我们通过桌面软件PortalHiker为AR内容制作解决方案提供帮助，该软件可以帮助企业产生可在其网站和移动应用程序上使用的交互式AR体验。 PortalHiker是3D和AR内容制作应用程序，既是内容创建引擎又是3D / AR内容社交媒体。作为在移动设备上生成3D内容的最简单方法，PortalHiker允许用户通过将虚拟元素与现实世界相结合来创建和共享他们的创造力。 在各个平台的视频游戏中插入无干扰的品牌广告，为游戏开发人员提供了通过其游戏获利的可能性。 使用增强现实技术来训练患有帕金森氏病的患者再次行走。 技术 捕捉运动：以人为中心的计算机视觉的基础是机器看到和理解人的运动的能力。3D / AR体验或虚拟实时流的形式制作动画内容。将易用性和性能作为重中之重的原因。 3D内容编辑器：生成3D和AR内容。 3D检视器：我们基于网络的3D查看器可在网站上高质量显示3D内容。 规划 每日一个Java学习视频 每日刷题，力扣，牛客等 Java基础基础语法 自动类型提升 结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。 1byte/char/short--&gt;int--&gt;long--&gt;float-&gt;double 特别的：当byte、char、short三种类型的变量做运算时，结果为int型。String特殊 四种引用类型 强引用（StrongReference） 强引用可以直接访问目标对象。 强引用所指向的对象在任何时候都不会被系统回收。JVM宁愿抛出OOM异常，也不会回收强引用所指向的对象。 可能导致内存泄露？ 软引用（SoftReference） 一个持有软引用的对象不会被JVM很快回收，JVM会根据当前堆的使用情况来判断何时回收。当堆使用率临近阈值时，才会回收软引用的对象。因此，软引用可以用于实现对内存敏感的高速缓存。 弱引用（WeakReference） 在系统GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。 虚引用（PhantomReference） 一个持有虚引用的对象，和没有引用几乎是一样的，随时可能被垃圾回收器回收。当试图通过虚引用的get()方法取得强引用时，总是会失败。并且，虚引用必须和引用队列一起使用，它的作用在于跟踪垃圾回收过程。 Java GC 介绍 Java在JVM虚拟机上增加了垃圾回收（GC）机制，用以在合适的时间触发垃圾回收，将不需要的内存空间回收释放，避免无限制的内存增长导致的OOM。 如何判断一个对象需要被回收 引用计数 Java在GC时会看这个对象是否与其他引用有关联，如果存在引用关系则表示这个对象还有用，不能被回收，如果不存在引用关系则可基本定性为可被回收的对象。优点：效率高；缺点：无法解决循环引用的问题。 可达性分析 为了解决循环引用的问题，Java采用了可达性分析的方式，主要是通过Roots对象作为起点进行搜索，搜索的路径被称为“引用链”，当一个对象到Roots没有任何引用链相连的时，证明此对象不可用，当然被判定为不可达的对象不一定就会成为可回收对象。被判定为不可达的对象要成为可回收对象必须至少经历两次标记过程，如果在这两次标记过程中仍然没有逃脱成为可回收对象的可能性，则基本上就会成为可回收对象。能够被回收其实主要看finalize()方法有没有与引用链上的对象关联，如果在finalize()方法中有关联则自救成功，该对象不可被回收，反之如果没有关联则成功被二次标记，就可以称为要被回收的垃圾了。 Roots对象 虚拟机栈中引用的对象？ 方法区中类静态属性引用的对象？ 本地方法栈引用的对象？ 4种引用类型 线程 sleep方法与wait方法的区别 wait：此方法来自于Object类，必须由锁对象进行调用（不是任意对象调用） 注意： 锁对象需要在哪里存在？锁对象必须在同步中出现。 同步方法的锁对象默认就是字节码对象。 sleep：此方法来自于Thread类，是Thread类的静态方法，可以类名加点调用 wait方法： 空参数：会让线程进入无限等待状态，进入了无限等待状态后，必须由（其他线程的）notify方法对其进行唤醒。 有参数：效果和sleep类似 区别：wait方法在等待的过程中，释放锁对象；sleep方法在休眠的过程中不会释放锁对象。 ConcurrentHashMap与HashMap底层数据结构 JDK1.7中HashMap由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。 JDK1.8中HashMap由数组+链表/红黑树组成，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。转为红黑树后，链表的结构仍然会存在，通过next属性维持，红黑树节点在进行操作时都会维护链表的结构。 原理 如何实现扩容：初始容量16和加载因子0.75。每次扩容都为原来的两倍。当达到其容量的3/4时，会自动进行扩容，如初始为16，存储第12个元素时，这时候会扩容为32，同时，这时需要创建一张新表，将原表的数据移到新表，可以看resize()和transfer()方法。表？Entry[] newTable = new Entry[newCapacity]; 如何实现存取：HashMap存取时，都需要计算当前key应该对应Entry[]数组哪个元素，通过调用hash()方法，得到hash值，再调用indexFor()得到Entry[]数组下标。如果有两个相同的结果，如果hash相同且key对象为同一个，则为同一个对象，直接在该位置替换原对象；否则为不同对象，这时候发生碰撞了，我们通过链表来存储，可以分析createEntry()方法。 JDK1.7中ConcurrentHashMap由分段数组+链表组成。ConcurrentHashMap是由Segment数据结构和HashEntry数据结构组成。 JDK1.8中ConcurrentHashMap取消了Segment分段锁，采用CAS算法和synchronized来保证并发安全。数据结构跟HashMap1.8的结构类似， 是数组+链表/红黑树。（jdk1.6以后对synchronized锁做了很多优化，比如偏向锁、轻量级锁、自旋锁、锁消除、锁粗化等） 如何实现同步： HashEntry用于存储键值对数据，HashEntry内部类里的value ，以及链表next都是volatile修饰的，能保证获取时的可见性。 Segment数组中的每个元素包含一个HashEntry数组，HashEntry数组中的每个元素是一个链表结构的元素。Segment数组的每个元素各守护着一个HashEntry数组中的素有元素。当对HashEntry数组的数据进行修改时，必须首先获得对应的Segment数组元素的锁。 JDK1.7时实现线程安全的方式：首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问，提高并发访问率。 JDK1.8时实现线程安全的方式：synchronized只锁定当前链表或者红黑树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。 volatile和synchronized区别 线程安全性包括两个方面：可见性，原子性。 volatile轻量级，只能修饰变量；只保证数据的可见性，不能用来同步，多个线程并发访问volatile修饰的变量不会阻塞。 synchronized重量级，可以修饰类、方法、代码段；保证可见性和原子性，多个线程争取synchronized锁对象时，会出现阻塞。 多线程访问这个方法（类方法）就存在线程不安全的问题 指令重排 11没看 数据库六大范式（Normal form）关系数据库中的关系是满足一定要求的，满足不同程度要求的称为不同的范式。满足最低要求的称为第一范式，简称1NF；在第一范式的基础上满足进一步要求的称为第二范式，简称2NF，其余范式以此类推。一般来说，数据库只需满足第三范式就行了。 对于各范式之间有如下关系：1NF\\supset2NF\\supset3NF\\supset BCNF\\supset4NF\\supset5NF 第一范式 定义：属于第一范式关系的所有属性都不可再分，即数据项不可分。 理解：1NF强调数据表的原子性，是其他范式的基础 举例： 12| 商品 ||名称|数量| 上表将商品这一数据项又划分为名称和数量两个数据项，不符合1NF。应改为如下表所示： 1|商品名称|商品数量| 但日常生活中仅用第一范式来规范表格是远远不够的，依然会存在数据冗余过大、删除异常、插入异常、修改异常的问题，此时就需要引入规范化概念，将其转化为更标准化的表格，减少数据依赖。 规范化：一个低一级的关系模式通过模式分解可以转化为若干个高一级范式的关系模式的集合，这个过程叫做规范化。 第二范式 候选码：若关系中的某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码。若一个关系中有多个候选码，则选定其中一个为主码。 主属性：所有候选码的属性称为主属性。不包含在任何候选码中的属性称为非主属性或非码属性。 函数依赖：设R(U)是属性集U上的关系模式，X、Y是U的子集。若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称Y函数依赖于X或X函数确定Y。 X\\rightarrow Y \\ \\ Y函数依赖于X 完全函数依赖： 设R(U)是属性集U上的关系模式，X、Y是U的子集。如果Y函数依赖于X，且对于X的任何一个真子集X’，都有Y不函数依赖于X’，则称Y对X完全函数依赖。记作：如果Y函数依赖于X，但Y不完全函数依赖于X，则称Y对X部分函数依赖。 X\\stackrel{F}{\\longrightarrow} Y \\quad\\quad\\quad\\quad Y对X完全函数依赖X\\stackrel{P}{\\longrightarrow} Y \\quad\\quad\\quad\\quad Y对X部分函数依赖 定义：若某关系R属于第一范式，且每一个非主属性完全函数依赖于任何一个候选码，则关系R属于第二范式。 理解：第二范式是指每个表必须有一个（有且仅有一个）数据项作为主键（primary key），其他数据项与关键字或者主键一一对应，即其他数据项完全依赖于关键字或主键。由此可知单主属性的关系均属于第二范式。 第三范式 定义：非主属性既不传递依赖于码，也不部分依赖于码。 传递函数依赖的概念：在R(U)中，若X\\rightarrow Y,Y\\nrightarrow X,Y\\rightarrow Z，Z不属于Y，则称Z对X传递函数依赖。记作X \\stackrel{传递}{\\longrightarrow}Z 。 理解：第三范式要求在满足第二范式的基础上，任何非主属性**不依赖于*其他非主属性，即在第二范式的基础上，消除了传递依赖*。 BC范式（巴斯-科德范式） 定义：关系模式R(U,F)中，若每一个决定因素都包含码，则R(U,F)属于BCFN。 理解：根据定义我们可以得到结论，一个满足BC范式的关系模式有 所有非主属性对每一个码都是完全函数依赖 所有主属性对每一个不包含它的码也是完全函数依赖 没有任何属性完全函数依赖于非码的任何一组属性 举例：有关系模式C(Cno, Cname, Pcno)，Cno, Cname, Pcno依次表示课程号、课程名、先修课。可知关系C只有一个码Cno，且没有任何属性对Cno部分函数依赖或传递函数依赖，所以关系C属于第三范式，同时Cno是C中的唯一决定因素，所以C也属于BC范式。 第四范式 定义：限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。 理解：显然一个关系模式是4NF，则必为BCNF。也就是说，当一个表中的非主属性互相独立时（3NF），这些非主属性不应该有多值，若有多值就违反了4NF。 第五范式（完美范式） 第五范式有以下要求： 必须满足第四范式 表必须可以分解为较小的表，除非那些表在逻辑上拥有与原始表相同的主键。 第五范式是在第四范式的基础上做的进一步规范化。第四范式处理的是相互独立的多值情况，而第五范式则处理相互依赖的多值情况。 关系模式关系模式是对关系的描述，或者说二维表的表头，设有关系R，属性A1、A2、A3，则表示为R(A1,A2,A3)，关系数据库中的关系模式是型，关系的值。 什么是关系？ 关系实质上是一张二维表，并满足以下条件： 列不可分性（1NF） 行列无序性（交换列的前后顺序不影响关系模型的语义表达） 实体完整性（唯一） 属性：二维表中的每一列称为属性 值域（域）：属性的取值范围 元组（记录）：二维表中的一行数据。 关系模式可用五元组表示 R(U,D,Dom,F)，其中R：表示关系名，U：表示属性集合，D为U中属性对应域的集合（数据域？），Dom：表示属性域，F：表示函数依赖。 关系模型完整性约束 实体完整性 参照完整性 用户自定义完整性 索引 定义：索引是定义在数据库表基础之上，有助于无需检查所有记录而快速定位所需记录的一种辅助存储结构，由一系列存储在磁盘上的索引项组成，每一种索引项由索引字段和行指针构成。 优点： 提高查询效率 通过创建唯一索引，可以保证数据库中每一行数据的唯一性 在使用分组和排序子句进行数据检索时，可以减少查询中分组和排序的时间 缺点： 创建索引和维护索引耗费时间，且时间随数据量增大而增大 占用物理内存，如果建立聚簇索引，所需空间更大 在对表中的数据进行增删改时需要耗费较多的时间，因为索引也要动态地维护 概念： 聚簇索引：将数据存储与索引放到一块，找到索引也就找到了数据，主文件按照对应字段排序存储，索引文件无重复排序存储。 非聚簇索引：将数据存储于索引分开存储，索引结构的叶子节点指向了数据的对应行，主文件并没有按照对应字段排序存储，索引文件有重复排序存储。 索引用于快速找出在某个列中有一特定值的行。不使用索引，MySQL必须从第1条记录开始然后读完整个表直到找出相关的行，还需要考虑每次读入数据页的IO开销。 大多数情况下都（默认）采用B树来构建索引。只是空间列类型的索引使用R-树，并且MEMORY表还支持hash索引。B树是平衡多叉树，每个节点存放多少个值取决于值所占的空间，这与每一张数据页存放多少条记录与记录信息量有关同理。节点中的值是以非降序进行排列的，节点中的值总是小于等于指向它的结点中的值。 MySQL使用B树构造索引的情况下，是由叶子指向具体的页和记录的。并且一个叶子有一个指针指向下一个叶子。 使用索引时需要注意： 只对WHERE和ORDER BY需要查询的字段设置索引，避免无意义的硬盘开销 组合索引支持前缀索引 更新表的时候，如增删记录，MySQL会自动更新索引，保持树的平衡；因此更多的索引意味着更多的维护成本 索引分四类： index：普通的索引，数据可以重复 fulltext：全文索引，用来对大表的文本域(char，varchar，text)进行索引。语法和普通索引一样 unique：唯一索引，唯一索引，要求所有记录都唯一 primary key：主键索引，也就是在唯一索引的基础上相应的列必须为主键 组合索引 为什么要使用联合索引？ 减少开销：建立一个组合索引(A,B,C)，实际相当于建立了(A),(A,B),(A,B,C)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。但对于大量数据的表，使用组合索引会大大减小开销！ 覆盖索引：如果有查询操作，可以直接通过遍历索引取数据，无需查询表，这会减少随机IO操作。减少随机操作是DBA主要优化策略。 效率高：多条件筛选数据。 使用方法： 最左原则（带头大哥不能死，中间兄弟不能断）：从前往后依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用。上面的组合索引可以支持(A),(A,B),(A,B,C)三种组合进行查找。两个或更多个列上的索引被称作复合索引。 乐观锁和悲观锁 悲观锁 总是假设最坏的情况，每次当前线程去拿数据的时候都认为其他线程会修改，所以每次在拿数据的时候都会上锁，这样其他线程想拿这个数据就会阻塞直到其他线程拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。 乐观锁 总是假设最好的情况，每次当前线程去拿数据的时候都认为其他线程不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间其他线程有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。 两种锁的使用场景 两种锁各有优缺点，不可认为一种好于另一种，乐观锁适用于写比较少的情况下（多读少写场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适（多写场景）。 乐观锁常见的两种实现方式 版本号机制 一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。 CAS算法（compare and swap，比较与交换） 有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数 需要读写的变量值 V 进行比较的值 A 拟写入的新值 B 当且仅当 V 的值等于A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。 乐观锁的缺点 ABA问题：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 “ABA”问题。 JDK 1.5以后的AtomicStampedReference类就提供了此种能力，其中的 compareAndSet 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。 循环时间长开销大：自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline），使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。 只能保证一个共享变量的原子操作：CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。 数据库事务特性（Transaction） 事务 定义：所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。 四个特点ACID： 原子性Atomicity 一致性Consistency 隔离性Isolation 耐久性Durability 原子性 定义：原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。 12345678begin transaction select ... from ...; ...; update account set ... where ...; if Error then rollback else commit 分析：在事务中的增删改查语句，要么都执行，要么就都不执行。 解决方法：在DBMS中，默认情况下一条SQL就是一个单独事务，事务是自动提交的。只有显式地使用start transaction开启一个事务，才能将一个代码块放在事务中执行。保障事务的原子性是DBMS的责任，为此许多数据源采用日志机制。例如，SQL Server使用一个预写事务日志，在将数据提交到实际数据页面前，先写在事务日志上。 一致性 定义：一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。 解决方法：保障事务的一致性，可以从以下两个层面入手 数据库机制层面 在一个事务执行之前和之后，数据会符合你设置的约束（唯一约束，外键约束，Check约束等）和触发器设置。这一点是由SQL SERVER进行保证的。比如转账，则可以使用CHECK约束两个账户之和等于2000来达到一致性目的。 业务层面 对于业务层面来说，一致性是保持业务的一致性。这个业务一致性需要由开发人员进行保证。当然，很多业务方面的一致性，也可以通过转移到数据库机制层面进行保证。 隔离性 定义：多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。（Java多线程锁对象） 分析：这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。 当多个事务并发时，SQL Server利用加锁和阻塞来保证事务之间不同等级的隔离性。一般情况下，完全的隔离性是不现实的，完全的隔离性要求数据库同一时间只执行一条事务，这样会严重影响性能。想要理解SQL Server中对于隔离性的保障，首先要了解并发事务之间是如何干扰的。 事务之间的互相影响：脏读，不可重复读，幻读，丢失更新。 脏读：一个事务读取了另一个事务未提交的数据，而这个数据是有可能回滚的。 不可重复读：在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。 幻读（虚读）：当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。 丢失更新：两个事务同时读取同一条记录，A先修改记录，B也修改记录（B是不知道A修改过），B提交数据后B的修改结果覆盖了A的修改结果。 理解SQL SERVER中的隔离级别 数据库的事务隔离级别（TRANSACTION ISOLATION LEVEL）是一个数据库上很基本的一个概念。为什么会有事务隔离级别，SQL Server上实现了哪些事务隔离级别？事务隔离级别的前提是一个多用户、多进程、多线程的并发系统，在这个系统中为了保证数据的一致性和完整性，我们引入了事务隔离级别这个概念，对一个单用户、单线程的应用来说则不存在这个问题。 为了避免上述几种事务之间的影响，SQL Server通过设置不同的隔离级别来进行不同程度的避免。因为高的隔离等级意味着更多的锁，从而牺牲性能。所以这个选项开放给了用户根据具体的需求进行设置。不过默认的隔离级别Read Commited符合了多数的实际需求。 SQL Server隔离事务之间的影响是通过锁来实现的，通过阻塞来阻止上述影响。不同的隔离级别是通过加不同的锁，造成阻塞来实现的，所以会以付出性能作为代价；安全级别越高，处理效率越低；安全级别越低，效率高。 使用方法： 1SET TRANSACTIONISOLATION LEVEL REPEATABLE READ 隔离级别 脏读 不可重复读 幻读 丢失更新 并发模型 更新冲突检测 内容 未提交读：Read Uncommited 是 是 是 是 悲观 否 在读数据时不会检查或使用任何锁。因此，在这种隔离级别中可能读取到没有提交的数据 已提交读：Read commited 否 是 是 是 悲观 否 只读取提交的数据并等待其他事务释放排他锁。读数据的共享锁在读操作完成后立即释放。已提交读是SQL Server的默认隔离级别 可重复读：Repeatable Read 否 否 是 否 悲观 否 像已提交读级别那样读数据，但会保持共享锁直到事务结束 可串行读：Serializable 否 否 否 否 悲观 否 工作方式类似于可重复读。但它不仅会锁定受影响的数据，还会锁定这个范围。这就阻止了新数据插入查询所涉及的范围 持久性 定义：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。即使出现了任何事故比如断电等，事务一旦提交，则持久化保存在数据库中。 SQL SERVER通过write-ahead transaction log来保证持久性。write-ahead transaction log的意思是，事务中对数据库的改变在写入到数据库之前，首先写入到事务日志中。而事务日志是按照顺序排号的（LSN）。当数据库崩溃或者服务器断点时，重启动SQL SERVER，SQL SERVER首先会检查日志顺序号，将本应对数据库做更改而未做的部分持久化到数据库，从而保证了持久性。 总结： 事务的（ACID）特性是由关系数据库管理系统（RDBMS，数据库系统）来实现的。数据库管理系统采用日志来保证事务的原子性、一致性和持久性。日志记录了事务对数据库所做的更新，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的更新，使数据库退回到执行事务前的初始状态。 数据库管理系统采用锁机制来实现事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。 计算机网络 TCP和UDP的区别 TCP UDP 可靠性 可靠 不可靠 思想 面向字节流 面向报文 拥塞控制 慢启动、快速恢复、拥塞避免 不提供拥塞控制 双工性 全双工 一对一、多对一、一对多、多对多 效率 传输效率低 传输效率高 应用场景 准确率要求高，效率要求低 效率要求高，准确率要求低 HTTPS握手过程 HTTPS简介 HTTP：直接通过明文在浏览器和服务器之间传递信息 HTTPS：Hypertext Transfer Protocol Secure，超文本传输安全协议。采用对称加密和非对称加密结合的方式来保护浏览器和服务端之间的通信安全。 对称加密算法加密数据+非对称加密算法交换密钥+数字证书验证身份=安全 HTTP是运行在TCP层之上的，而HTTPS则是在HTTP和TCP层之间多加了一个SSL/TSL层，SSL层向上提供加密和解密的服务，对 HTTP来说是透明的。 Secure Socket Layer，安全套接字层。TLS（Transport Layer Security）安全网络传输协议。HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。 对称加密与非对称加密 定义：加密和解密都使用同一种算法的加密方法，称之为对称加密。加密和解密使用不同的算法，则为非对称加密。 分析：对称加密需要一把钥匙就够了。非对称加密算法需要两把钥匙，公钥和私钥，它们是一对。用公钥加密的密文只能用相应的私钥解开，用私钥加密的密文只能用相应的公钥解开。其中，公钥是公开的，私钥是不对外公开的。 对比：两者的主要区别在于密钥的长度不同，长度越长，相应的加/解密花费的时间就会更长，对称加密使用的密钥长度会短一些。SSL结合了这两种加密算法的优点，利用非对称加密算法来协商生成对称加密的密钥，然后之后就用对称加密来进行通信。 握手过程（关于HTTP的三次握手，其实就是使用三次TCP握手确认建立一个HTTP连接） 客户端提交HTTPS请求 服务器响应客户，并把服务器公钥发送给客户端 客户端验证公钥的有效性 客户端验证有效后，会生成一个会话密钥（一个随机数） 客户端用服务器公钥加密这个会话密钥后，发送给服务器 服务器收到公钥加密的密钥后，用私钥解密，获取会话密钥 客户端与服务器利用会话密钥对传输数据进行对称加密通信 下图为HTTPS加密请求（一次握手）过程 CA证书 CA（Certificate Authority）是负责管理和签发证书的第三方权威机构，是所有行业和公众都信任的、认可的。 CA证书，就是CA颁发的证书，可用于验证网站是否可信（针对HTTPS）、验证某文件是否可信（是否被篡改）等，也可以用一个证书来证明另一个证书是真实可信，最顶级的证书称为根证书。除了根证书（自己证明自己是可靠），其它证书都要依靠上一级的证书，来证明自己。 HTTPS和HTTP的区别 HTTPS协议需要到CA申请证书或自制证书。 HTTP的信息是明文传输，HTTPS则是具有安全性的SSL加密。 HTTP是直接与TCP进行数据传输，而HTTPS是经过一层SSL（OSI表示层），用的端口也不一样，前者是80（需要国内备案），后者是443。 HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。 注意 HTTPS报文在被包装成TCP报文的时候完成加密的过程，无论是HTTPS的header域也好，body域也罢都是会被加密的。 当使用tcpdump或者wireshark之类的TCP层工具抓包，获取是加密的内容，而如果用应用层抓包，使用Charels(Mac)、Fildder(Windows)抓包工具，那当然看到是明文的。 HTTPS一般使用的加密与HASH算法如下： 非对称加密算法：RSA，DSA/DSS 对称加密算法：AES，RC4，3DES HASH算法：MD5，SHA1，SHA256 设计模式单例模式在应用这个模式时，单例对象的类必须保证只有一个实例存在，整个系统只能使用一个对象实例。 优点：不会频繁地创建和销毁对象，浪费系统资源。 使用场景：IO 、数据库连接、Redis 连接等。 简单工厂模式简单工厂模式又叫静态工厂方法模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建，不需要管它内部的具体实现，只要告诉它需求即可得到对应想要的产品实例。 抽象工厂模式抽象工厂模式是在简单工厂的基础上将未来可能需要修改的代码抽象出来，通过继承的方式让子类去做决定。抽象工厂里只声明方法，具体的实现交给子类（子工厂）去实现，这个时候再有新增品类的需求，只需要新创建代码即可。 软件设计的“开闭原则”？ 观察者模式观察者模式是定义对象间的一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。 装饰器模式装饰器模式是指动态地给一个对象增加一些额外的功能，同时又不改变其结构。 适配器模式适配器模式是将一个类的接口变成客户端所期望的另一种接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作。 Spring中都使用的设计模式 代理模式：在AOP中使用 单例模式：bean默认是单例模式 模板方法模式：JDBCTemplate 工厂模式：BeanFactory 观察者模式：Spring事件驱动模型就是观察者模式很经典的一个应用 适配器模式：SpringMVC中用到适配器模式适配Controller 中邮消费金融有限公司笔试中邮在5月8号发了笔试的邀请，点击网址直接做题，应该是自动用邮箱登录的，现在回忆起来笔试大概分4部分，单选，多选，填空，问答，给了90分钟，但我用了不到30分钟就做完了。题目涉及Java基础，多线程，问答有问线程池？最后一个问答好像是从足够多的日志中拿n条日志，如何快速和低内存拿到？我也是随便想到就答了。 面试12号打电话通知，13号发邮件，14号早上9:30手机多面APP，两人面试我一个。 3分钟自我介绍，我就介绍了基本情况，花了不到30秒感觉 做过Springboot，那你说说负责什么模块，用到了什么技术，事务处理机制，Springboot IOC？ 好像Springboot也不会，来说说Java基础，线程创建方法，聊聊线程池，线程安全 List和LinkedList区别，Map和List区别，Map排序？ TCL40分钟54道Java选择题。基础题，暴露问题基础薄弱。 标识符：就是给类、接口、方法、变量、常量等起名字时使用的字符序列。 0.6333属于float还是double。 数组是对象吗。 线程，Thread的方法getPriority()，stop()?有这些方法吗？ 权限修饰符，接口可以用什么修饰符？抽象类、方法，abstract可以修饰哪些？ 对称加密算法，非对称加密算法。 Linux常用命令 查看日志文件后100行 1tail -f -n 100 日志文件名","link":"/Interview/48d83c99.html"},{"title":"管理GitHub个人资料README","text":"管理您的个人资料README 最近看到一个Github主页添加个人资料，觉得挺不错，就想着也弄一个，就像下图一样，其实并不麻烦。 GitHub提供了这样的服务，官方文档，我也是在官方文档找到的详细教程。以下大多都是翻译版，还有一些个人建议和踩坑经验，我挑出其中最重要的部分分享。 关于您的个人资料README您可以将自述文件添加到您的GitHub个人资料中，以向其他人介绍您自己。 您可以通过创建个人资料README与GitHub社区上有关您自己的信息。 GitHub在个人资料页面顶部显示您的个人资料README。 您可以决定在个人资料README中包含哪些信息，因此可以完全控制自己在GitHub上的展示方式。以下是一些访问者在您的个人资料README中可能发现有趣，有趣或有用的信息示例。 “关于我”部分描述了您的工作和兴趣 您引以为豪的贡献以及这些贡献的背景 在您所参与的社区中获得帮助的指南 您可以使用GitHub Flavored Markdown设置文本格式，并在个人资料README中包含表情符号，图像和GIF。有关更多信息，请参阅“在GitHub上编写和格式化入门”。 先决条件如果满足以下所有条件，则GitHub将在您的个人资料页面上显示您的个人资料README。 您已经创建了一个名称与您的GitHub用户名相匹配的存储库。 该存储库是公共（Public）的。 存储库的根目录中包含一个名为README.md的文件（初始化创建即可，不需要克隆到本地）。 README.md文件包含任何内容。 当你创建仓库的时候，将仓库名命名为mysticalguest，下面就会出现提示： 您发现了一个秘密！ MysticalGuest / MysticalGuest是一个“特殊”存储库，可用于将README.md添加到您的GitHub个人资料中。确保它是公开的，并使用自述文件对其进行初始化以开始使用。 其他仓库不会出现这样的提示。说明是成功的。 注意：如果您在2020年7月之前创建了一个与用户名相同名称的公共存储库，则GitHub不会在您的个人资料上自动显示该存储库的自述文件。您可以通过转到GitHub.com上的存储库并单击“共享到配置文件”，手动将存储库的自述文件共享到您的配置文件。（这个不用管了，因为7月之后很方便，一旦仓库创建成功，GitHub个人主页就会显示了！） 下面就开始在线编辑这个仓库下的README.md文件即可： 编辑GitHub提供了强大的在线编辑器，还可以预览。我的编辑： 12345678910111213141516171819202122232425### Welcome！👋 + **My Github Blog.[https://mysticalguest.github.io](https://mysticalguest.github.io/)**+ **My Gitee Blog.[https://mysteryguest.gitee.io](https://mysteryguest.gitee.io/)**+ **My CSDN Blog.[https://blog.csdn.net/etherealsymbol](https://blog.csdn.net/etherealsymbol/)**+ **My CNBlogs Blog.[https://www.cnblogs.com/mysteryguest](https://www.cnblogs.com/mysteryguest/)**- 🔭 I’m currently working on java source code...- 🌱 I’m currently learning Java, MySQL, Spring, Redis, Elasticsearch...- 📫 How to reach me: mysticalguest@163.com&lt;!--**MysticalGuest/mysticalguest** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.Here are some ideas to get you started:- 🔭 I’m currently working on ...- 🌱 I’m currently learning ...- 👯 I’m looking to collaborate on ...- 🤔 I’m looking for help with ...- 💬 Ask me about ...- 📫 How to reach me: ...- 😄 Pronouns: ...- ⚡ Fun fact: ...--&gt; 编辑完成Commit Changes即可，刷新主页。 成功，就是这么简单！ 删除个人资料README如果满足以下任何条件，则从您的GitHub个人资料中删除个人资料README： 自述文件为空或不存在。 该存储库是私有的。 存储库名称不再与您的用户名匹配。 选择的方法取决于您的需求，但是如果不确定，我们建议将存储库设为私有。 有关如何将存储库设为私有的步骤，请参阅“更改存储库的可见性”。","link":"/GitHub/55476.html"},{"title":"常用","text":"常用Mathjax语法 显示 命令 显示 命令 小于（\\lt） \\lt 大于（\\gt） \\gt 小于等于（\\le） \\le 大于等于（\\ge） \\ge 不等于（\\ne） \\ne \\sim \\sim 加减（\\pm） \\pm \\alpha \\alpha 右箭头（\\to,\\rightarrow） \\to, \\rightrrow 左箭头（\\leftarrow） \\leftarrow 括号、方程组 123456$$out...\\begin{cases}...\\\\...\\\\...\\\\\\end{cases}$$ 显示为 out...\\begin{cases} ...\\\\ ...\\\\ ...\\\\ \\end{cases}","link":"/GitHub/6eb7acd3.html"},{"title":"Java及JVM简介","text":"1、前言1.1 你是否也遇到过这些问题? 运行着的线上系统突然卡死，系统无法访问，甚至直接OOM（Out Of Memory）! 想解决线上 JVM GC（ JVM垃圾回收 ）问题，但却无从下手。 新项目上线，对各种JVM参数设置一脸茫然，直接默认吧，然后就错了。 每次面试之前都要重新背一遍J的一些原理概念性的东西，然而面试官却经常问你在实际项目中如何调优JVM参数，如何解决GC、OOM等问题，一脸懵逼。 我们通常都是学习基础的技能，在此基础上学习更复杂的功能。 1.2 开发人员如何看待上层框架 一些有一定工作经验的开发人员，打心眼儿里觉得SSM、微服务等上层技术才是重点，基础技术并不重要，这其实是一种本末倒置的“病态“。 如果我们把核心类库的 API 比做数学公式的话，那么 Java 虚拟机的知识就好比公式的推导过程 计算机系统体系对我们来说越来越远，在不了解底层实现方式的前提下，通过高级语言很容易编写程序代码。但事实上计算机并不认识高级语言。 1.3 架构师每天都在思考什么? 应该如何让我的系统更快? 如何避免系统出现瓶颈? 1.4 知乎上有条帖子：应该如何看招聘信息，直通年薪50万+? 参与现有系统的性能优化，重构，保证平台性能和稳定性 根据业务场景和需求，决定技术方向，做技术选型 能够独立架构和设计海量数据下高并发分布式解决方案，满足功能和非功能需求 解决各类潜在系统风险，核心功能的架构与代码编写 分析系统瓶颈，解决各种疑难杂症,性能调优等 1.5 为什么要学JVM？ 面试的需要：入职BATJ（京东）、T（头条）MD（滴滴）、P（拼多多）K（快手）Q（趣头条）等一线大厂不光关注技术的广度，更关注技术的深度，JVM技术是大厂面试的必备技能，掌握越深越好 中高级程序员、架构师必备技能：架构师每天都在思考如何让我的系统更快，如何避免系统出现性能瓶颈。单纯的依靠物理机不足以解决问题，分析系统性能、调优系统瓶颈离不了对JVM中内存、垃圾回收、字节码指令、性能监控工具、调优参数的熟练掌握。 精进技术、极客（好奇与行动）追求：JVM是Java生态的核心价值的体现，垃圾回收算法、JIT（ just in time 的缩写，也就是即时编译编译器，AOT：提前编译器）、底层原理值得每个程序员去探索。同时，JVM作为跨语言的平台，对于深入理解Scala、Kotlin、JavaScript、Jython、Groovy也很有帮助。Java最前沿最成熟垃圾回收算法。 1.6 Java vs C++以C语言代表的语言是高级语言的开端了，Java借鉴了C和C++的有点，并摈弃其缺点；缺点主要就是内存动态分配和垃圾收集技术。 分配内存想要再次使用就要垃圾回收，否则就成一次性内存了。对于C语言来说，就需要程序员自己分配内存自己回收；Java是自动管理内存的。对于自动管理内存的弊端就是不了解Java内部的内存结构和工作机制，对于项目调优就没办法了，理解为黑盒？心中胆怯，没底？ 垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发的效率，但是，垃圾收集也不是万能的，懂得JVM内部的内存结构、工作机制，是设计高扩展性应用和诊断运行时问题的基础，也是Java工程师进阶的必备能力。 2、Java及JVM简介栈管运行，堆管存储？Java半解释型，半编译型语言？ Java虚拟机官方文档下载 TIOBE语言热度排行榜 2.1 Java生态圈Java是目前应用最为广泛的软件开发平台之一。随着Java以及Java社区的不断壮大，Java也早已不再是简简单单的一门计算机语言了,它更是一个平台、一种文化、一个社区。 作为一个平台，Java虚拟机扮演着举足轻重的作用。 Groovy、 Scala、 JRuby、Kot]in等都是Java平台的一部分 作为一种文化，Java几乎成为了“开源”的代名词 第三方开源软件和框架。如 Tomcat、 struts, My Batis, Spring等。 就连UDK和JM自身也有不少开源的实现,如 OpenJDK、 Harmony（开源的JVM） 作为一个社区，Java拥有全世界最多的技术拥护者和开源社区支持，有数不清的论坛和资料。从桌面应用软件、嵌入式开发到企业级应用、后台服务器、中间件，都可以看到Java的身影。其应用形式之复杂、参与人数之众多也令人咋舌 2.2 Java：跨平台的语言 2.3 JVM虚拟机规范The Java Virtual Machine Specification, Java SE 8 Edition Java虚拟机是Java平台的基石。 它是技术的组成部分，负责硬件和操作系统的独立性，编译代码的小巧大小以及保护用户免受恶意程序攻击的能力。 编译代码的小巧（小尺寸）：在一个程序中用到了基本数据类型和类，在编译字节码文件时对应一个常量池，运行的时候对应运行常量池，通过常量指向，避免去字节码文件加载大量数据和类，以保证字节码文件的小尺寸， 2.4 JVM：跨语言的平台Java：跨平台的语言 不仅可以执行Java程序，其他语言也是可以的。只需保证各自的编译器编译出的字节码文件遵循Java虚拟机规范即可。在Java虚拟机的编译器中运行。 三大并行难题：CPU、OS、编译器。 随着Java7的正式发布，Java虚拟机的设计者们通过JSR-292规范基本实现在Java虚拟机平台上运行非Java语言编写的程序。 Java虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，它只关心“字节码”文件。也就是说Java虚拟机拥有语言无关性，并不会单纯地与Java语言“终身绑定”，只要其他编程语言的编译结果满足并包含Java虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。 The Java Virtual Machine Specification, Java SE 8 Edition 为了安全起见，Java虚拟机对类文件中的代码施加了严格的语法和结构约束。 但是，Java虚拟机可以托管任何具有可用有效类文件表示的功能的语言。 受通用的独立于机器的平台的吸引，其他语言的实现者可以将Java虚拟机作为其语言的交付工具。 Java不是最强大的语言，但是JVM是最强大的虚拟机。 2.5 字节码 我们平时说的java字节码，指的是用java语言编译成的字节码。准确的说任何能在JVM平台上执行的字节码格式都是一样的。所以应该统称为JVM字节码。 不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的JVM上运行。 Java 虚拟机与Java 语言并没有必然的联系，它只与特定的二进制文件格式——Class文件格式所关联，Class文件中包含了Java虚拟机指令集（或者称为字节码、 Bytecodes）和符号表，还有一些其他辅助信息。 2.6 多语言混合编程 Java平台上的多语言混合编程正成为主流，通过特定领域的语言去解决特定领域的问题是当前软件干发应对日趋复杂的项目需求的一个方向。 试想一下，在一个项目之中，并行处理用Clojure语言编写，展示层使用JRuby/Rails，中间层则是Java，每个应用层都将使用不同的编程语言来完成，而且，接口对每一层的开发者都是透明的，各种语言之间的交互不存在任何困难，就像使用自己语言的原生API一样方便，因为它们最终都运行在一个虚拟机之上。 对这些运行于Java虚拟机之上、Java之外的语言，来自系统级的、底层的支持正在迅速增强，以JSR-292为核心的一系列项目和功能改进（如Da Vinci machine项目、 Nashorn引擎、 Invoke Dynamic指令、java.lang.invoke包等），推动Java虚拟机从“Java语言的虚拟机”向“多语言虚拟机”的方向发展。 3、Java发展的重大事件 1990年，在Sun计算机公司中，由 Patrick Naughton、 Mikesheridan及James Gosling领导的小组 Green Team，开发出的新的程序语言，命名为oak，后期命名为Java 1995年，Sun正式发布Java和 HotJava产品，Java首次公开亮相。 1996年1月23日 Sun Microsystems发布了JDK1.0。 1998年，JDK1.2版木发布。同时，sun发布了JSP/ Servlet、EJB规范，以及将Java分成了J2EE（企业级应用）、J2SE（桌面级应用）和J2ME（移动端）。这表明了Java开始向企业、桌面应用和移动设备应用3大领域挺进。 2000年，JDK1.3发布， Java Hotspot Virtual Machine正式发布，成为Java的默认虚拟机。 2002年，JDK1.4发布，古老的 Classic虚拟机退出历史舞台，同期微软.NET发布 2003年年底，Java平台的 Scala正式发布，同年 Groovy也加入了Java阵营。 2004年，JDK1.5发布。同时JDK1.5改名为 JavaSE5.0。 2006年，JDK6发布。同年，Java开源并建立了 OpenJDK。顺理成章，Hotspot虚拟机也成为了 OpenJDK中的默认虚拟机。 2007年，Java平台迎来了新伙伴Clojure。 2008年，Oracle收购了BEA，得到了JRockit虚拟机。 2009年，Twitter宣布把后台大部分程序从Ruby迁移到 Scala，这是Java平台的又一次大规模应用。 2010年，Oracle收购了Sun，获得Java商标和最具价值的 Hotspot虚拟机，JCP组织管理Java语言，但Oracle话语权比较重。此时，Oracle拥有市场占用率最高的两款虚拟机Hot Spot和 JRockit，并计划在未来对它们进行整合：Hotrockit 2011年，JDK7发布。在JDK1.7u4中，正式启用了新的垃圾回收器G1。 2014年，算是整合了上述两款虚拟机Hotrockit，从JavaSE8.0后 2017年，JDK9发布。将G1设置为默认GC，替代CMS。同年，IBM的J9开源，形成了现在的 Open J9社区 2018年，Android的Java侵权案判决，Google赔偿Oracle计88亿美元。同年，OracLe宣告 JavaEE成为历史名词，JDBC、JMS、servlet赠予Eclipse基金会。同年，JDK11发布，LTS版本的JDK，发布革命性的ZGC，调整JDK授权许可 2019年，JDK12发布，加入RedHat领导开发的 Shenandoah GC 在JDK11之前，OracleJDK中还会存在一些 OpenJDK中没有的、闭源的功能。但在JDK11中，我们可以认为 OpenJDK和 oracleJDK代码实质上已经完全一致的程度。主要是基于的协议不同，OpenJDK基于OPL协议，OracleJDK基于OPN协议。OpenJDK维护期半年，过了就更新下一版本，OracleJDK持续维护3年 4、虚拟机与Java虚拟机4.1 虚拟机 所谓虚拟机( Virtual Machine)，就是一台虚拟的计算机它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。 大名鼎鼎的 Visual Box，VMware就属于系统虚拟机，它们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台。 程序虚拟机的典型代表就是Java虚拟机，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令。 无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。 4.2 Java虚拟机 Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。 JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即时编译器。 Java技术的核心就是Java虚拟机（JVM，Java Virtual Machine）因为所有的Java程序都运行在Java虚拟机内部。 作用： Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。 特点 一次编译，到处运行 自动内存管理 自动垃圾回收功能 5、JVM的位置 JⅥM是运行在操作系统之上的，它与硬件没有直接的交互。不同操作系统的JVM是有区别的。 6、JVM的整体结构 HotSpot VM是目前市面上高性能虚拟机的代表作之一。 它采用解释器与即时编译器并存的架构。 在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++程序一较高下的地步。 将图示结构分为上中下层： 上层：入口是字节码文件，通过装载器加载到内存中，生成class对象； 中层：有对应class的实例了；多线程共享方法区和堆，虚拟机栈（Java栈），本地方法栈和程序计数器是每个线程独有的。 下层：有“后端编译器”，将高级语言翻译为机器语言 7、Java代码执行流程 关于上图中Java编译器（“前端”编译器）的细节不用过多关注，除非涉及开发一门语言；在这个过程中任何一个过程失败，都不能正确生成字节码文件。字节码文件也是跨平台的 “解析执行”和“编译执行“模块相当于执行引擎，”解析执行“保证响应时间，逐行对字节码解释执行，反复执行的代码称为”热点代码“，“编译执行”有个二次编译，第一编译为字节码的热点代码，将其缓存起来，下次直接调用，转换为机器指令。 8、JVM的架构模型Java编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构。HotSpot是基于栈的架构。 8.1 具体来说：这两种架构之间的区别： 基于栈式架构的特点 设计和实现更简单，适用于资源受限的系统；（方法，入栈出栈？实现简单） 避开了寄存器的分配难题：使用零地址（无地址，只有操作数）指令方式分配。（栈的结构？栈顶元素？不需要知道地址？不麻烦） 指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现。 不需要硬件支持，可移植性更好，更好实现跨平台。（栈与内存交互） 基于寄存器架构的特点 典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。 指令集架构则完全依赖硬件，可移植性差 性能优秀和执行更高效 花费更少的指令去完成一项操作。 在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主方水洋 8.2 示例123456789public class StackStructureTest { public static void main(String[] args) { // int i = 1+2; int i = 3; int j = 4; int k = i+j; }} 编译运行后，会在项目的out文件夹下生成字节码文件： 在“chapter01”下打开cmd执行下面语句进行反编译： 1$ javap -v StackStructureTest.class 输出：（基于栈的计算流程（以Java虚拟机为例）） 1234567891011121314151617181920212223242526272829303132333435363738394041424344... #23 = Utf8 java/lang/Object{ public com.chapter01.StackStructureTest(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\"&lt;init&gt;\":()V 4: return LineNumberTable: line 3: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcom/chapter01/StackStructureTest; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=4, args_size=1 0: iconst_3 // 定义常量3 1: istore_1 // 1是操作数栈的索引位置，将上面常量保存到索引为1的操作数栈中 2: iconst_4 3: istore_2 4: iload_1 // 将索引1加载进来 5: iload_2 // 加载索引2 6: iadd // 求和操作 7: istore_3 // 将结果存到索引为3的操作数栈中 8: return // 8行，寄存器的话 LineNumberTable: line 7: 0 line 8: 2 line 9: 4 line 10: 8 LocalVariableTable: Start Length Slot Name Signature 0 9 0 args [Ljava/lang/String; 2 7 1 i I 4 5 2 j I 8 1 3 k I}SourceFile: \"StackStructureTest.java\" 而基于寄存器的计算流程： 12mov eax,2 //将eax寄存器的值设为1add eax,3 //使eax寄存器的值加3 8.3 总结由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。 时至今日，尽管嵌入式平台已经不是Java程序的主流运行平台了（准确来说应该是HotSpot VM的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？ 栈：跨平台性、指令集小、指令多；执行性能比寄存器差 9、JVM的生命周期9.1 虚拟机的启动Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。 自定义的类通过系统类加载器加载，继承自Object，Object需要被引导类加载器加载，Object并不是初始类，一个简单类的执行就需要加载很多类，此时JVM启动 9.2 虚拟机的执行 一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。 程序开始执行时他才运行，程序结束时他就停止。 1234567891011121314151617public class StackStructureTest { public static void main(String[] args) { // int i = 1+2; int i = 3; int j = 4; int k = i+j; try { Thread.sleep(6000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"hello\"); }} 运行，趁还没有结束，在cmd中输入： 1234567891011$ jps // 打印当前执行程序中的进程22272 StackStructureTest // 22272端口号2254824164 RemoteMavenServer3622024 Launcher21388 Jps // JVM就退出了$ jps // 结束后2254824164 RemoteMavenServer363188 Jps22024 Launcher 执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。 9.3 虚拟机的退出有如下的几种情况： 程序正常执行结束 程序在执行过程中遇到了异常（没有处理的异常）或错误而异常终止 由于操作系统用现错误而导致Java虚拟机进程终止 某线程调用Runtime类或system类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。 第6节运行时数据区，就是运行时环境，对应的类就是java.lang.Runtime，这个类是单例的 除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。 10、JVM发展历程10.1 Sun Classic VM 早在1996年Java1.0版本的时候，Sun公司发布了一款名为sun classic VM的Java虚拟机，它同时也是世界上第一款商用Java虚拟机，JDK1.4时完全被淘汰。 这款虚拟机内部只提供解释器。 现在还有及时编译器，因此效率比较低，而及时编译器会把热点代码缓存起来，那么以后使用热点代码的时候，效率就比较高。提升效率就要用JIT编译器。 如果使用JIT编译器，就需要进行外挂。但是一旦使用了JIT编译器，JIT就会接管虚拟机的执行系统。解释器就不再工作。解释器和编译器不能配合工作。 解释器响应快，编译器寻找热点代码，不用解释器逐行编译。如果只使用高性能编译器，响应时间慢，加上逐行编译指令，就会使程序启动时响应时间过长（卡顿）。其实现今的Java虚拟机的执行速度以不亚于C，更形象地例子，解释器相当于步行，命令响即出发，编译器相当于坐公交车，命令响等公交或转车，两者配合更优。 现在hotspot内置了此虚拟机。 10.2 Exact VM 为了解决上一个虚拟机问题，jdk1.2时，sun提供了此虚拟机。 Exact Memory Management：准确式内存管理 也可以叫Non-Conservative/Accurate Memory Management 虚拟机可以知道内存中某个位置的数据具体是什么类型。| 具备现代高性能虚拟机的维形 热点探测（寻找出热点代码进行缓存） 编译器与解释器混合工作模式 只在solaris平台短暂使用，其他平台上还是classic vm，英雄气短，终被Hotspot虚拟机替换 10.3 HotSpot VM HotSpot历史 最初由一家名为“Longview Technologies”的小公司设计 1997年，此公司被sun收购；2009年，Sun公司被甲骨文收购。 JDK1.3时，HotSpot VM成为默认虚拟机 目前Hotspot占有绝对的市场地位，称霸武林。 不管是现在仍在广泛使用的JDK6，还是使用比例较多的JDK8中，默认的虚拟机都是HotSpot Sun/oracle JDK和openJDK的默认虚拟机 因此本课程中默认介绍的虚拟机都是HotSpot，相关机制也主要是指HotSpot的Gc机制。（比如其他两个商用虚机都没有方法区的概念） 从服务器、桌面到移动端、嵌入式都有应用。 名称中的HotSpot指的就是它的热点代码探测技术。 通过计数器找到最具编译价值代码，触发即时编译或栈上替换 通过编译器与解释器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡 10.4 JRockit 专注于服务器端应用 它可以不太关注程序启动速度，因此JRockit内部不包含解析器实现，全部代码都靠即时编译器编译后执行。 大量的行业基准测试显示，JRockit JVM是世界上最快的JVM。 使用JRockit产品，客户已经体验到了显著的性能提高（一些超过了70%）和硬件成本的减少（达50%）。 优势：全面的Java运行时解决方案组合 JRockit面向延迟敏感型应用的解决方案JRockit Real Time提供以毫秒或微秒级的JVM响应时间，适合财务、军事指挥、电信网络的需要 MissionControl服务套件，它是一组以极低的开销来监控、管理和分析生产环境中的应用程序的工具。 官网JMC，监控内存泄露。 原属BEA公司，2008年，JRockit被oracle收购。 oracle表达了整合两大优秀虚拟机的工作，大致在JDK8中完成。整合的方式是在HotSpot的基础上，移植JRockit的优秀特性。 高斯林（Java之父）：目前就职于谷歌，研究人工智能和水下机器人 10.5 IBM的J9 全称：IBM Technology for Java Virtual Machine，简称IT4J，内部代号：J9 市场定位与HotSpot接近，服务器端、桌面应用、嵌入式等多用途VM广泛用于IBM的各种Java产品。 目前，有影响力的三大商用虚拟机之一，也号称是世界上最快的Java虚拟机。 2017年左右，IBM发布了开源J9VM，命名为openJ9，交给EClipse基金会管理，也称为Eclipse OpenJ9 10.6 KVM和CDC / CLDC Hotspot oracle在Java ME产品线上的两款虚拟机为：CDC/CLDC HotSpot Implementation VM KVM（Kilobyte）是CLDC-HI早期产品目前移动领域地位尴尬，智能机被Android和ioS二分天下。 KVM简单、轻量、高度可移植，面向更低端的设备上还维持自己的一片市场 智能控制器、传感器 老人手机、经济欠发达地区的功能手机 所有的虚拟机的原则：一次编译，到处运行。 10.7 Azul VM 前面三大“高性能Java虚拟机”使用在通用硬件平台上 这里Azul VW和BEA Liquid VM是与特定硬件平台绑定、软硬件配合的专有虚拟机 高性能Java虚拟机中的战斗机。 Azul VM是Azul Systems公司在HotSpot基础上进行大量改进，运行于Azul Systems公司的专有硬件Vega系统上的ava虚拟机。 每个Azul VM实例都可以管理至少数十个CPU和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的GC时间的垃圾收集器、专有硬件优化的线程调度等优秀特性。 2010年，Azul Systems公司开始从硬件转向软件，发布了自己的Zing JVM，可以在通用x86平台上提供接近于Vega系统的特性。 10.8 Liquid VM 高性能Java虚拟机中的战斗机。 BEA公司开发的，直接运行在自家Hypervisor系统上Liquid VM即是现在的JRockit VE（Virtual Edition）， Liquid VM即是现在的 JRockit VE（Virtual Edition）。Liquid VM不需要操作系统的支持，或者说它自己本身实现了一个专用操作系统的必要功能，如线程调度、文件系统、网络支持等。 随着JRockit虚拟机终止开发，Liquid vM项目也停止了。 10. 9Apache Marmony Apache也曾经推出过与JDK1.5和JDK1.6兼容的Java运行平台Apache Harmony。 它是IBM和Intel联合开发的开源JVM，受到同样开源的OpenJDK的压制，Sun坚决不让Harmony获得JCP认证，最终于2011年退役，IBM转而参与OpenJDK 虽然目前并没有Apache Harmony被大规模商用的案例，但是它的Java类库代码吸纳进了Android SDK。 10.10 Micorsoft JVM 微软为了在IE3浏览器中支持Java Applets，开发了Microsoft JVM。 只能在window平台下运行。但确是当时Windows下性能最好的Java VM。 1997年，sun以侵犯商标、不正当竞争罪名指控微软成功，赔了sun很多钱。微软windowsXP SP3中抹掉了其VM。现在windows上安装的jdk都是HotSpot。 10.11 Taobao JVM 由Ali JVM团队发布。阿里，国内使用Java最强大的公司，覆盖云计算、金融、物流、电商等众多领域，需要解决高并发、高可用、分布式的复合问题。有大量的开源产品。 基于OpenJDK开发了自己的定制版本AlibabaJDK，简称AJDK。是整个阿里Java体系的基石。 基于OpenJDK Hotspot VM发布的国内第一个优化、深度定制且开源的高性能服务器版Java虚拟机。 创新的GCIH（GC invisible heap）技术实现了off-heap，即将生命周期较长的Java对象从heap中移到heap之外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。 GCIH中的对象还能够在多个Java虚拟机进程中实现共享 使用crc32指令实现JVM intrinsic降低JNI的调用开销 PMU hardware的Java profiling tool和诊断协助功能 针对大数据场景的ZenGc taobao vm应用在阿里产品上性能高，硬件严重依赖intel的cpu，损失了兼容性，但提高了性能 目前已经在淘宝、天猫上线，把Oracle官方JVM版本全部替换了。 10.12 Dalvik VM 谷歌开发的，应用于Android系统，并在Android2.2中提供了JIT，发展迅猛。 Dalvik VM只能称作虚拟机，而不能称作“Java虚拟机”，它没有遵循 Java虚拟机规范 不能直接执行Java的Class文件 基于寄存器架构，不是jvm的栈架构。 执行的是编译以后的dex（Dalvik Executable）文件。执行效率比较高。 它执行的dex（Dalvik Executable）文件可以通过class文件转化而来，使用Java语法编写应用程序，可以直接使用大部分的Java API等。 Android 5.0使用支持提前编译（Ahead of Time Compilation，AOT）的ART VM替换Dalvik VM。 10.13 Graal VM 2018年4月，Oracle Labs公开了Graal VM，号称 “Run Programs Faster Anywhere“，勃勃野心。与1995年java的”write once，run anywhere”遥相呼应。 Graa VM在HotSpot VM基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言” 的运行平台使用。语言包括：Java、Scala、Groovy、Kotlin；C、C++、Javascript、Ruby、Python、R等 支持不同语言中混用对方的接口和对象，支持这些语言使用已经编写好的本地库文件 工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被Graal VM接受的中间表示。Graal VM提供Truffle工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。 如果说HotSpot有一天真的被取代，Graal VM希望最大。但是Java的软件生态没有丝毫变化。 10.14 总结具体JVM的内存结构，其实取决于其实现，不同厂商的JVM，或者同一厂商发布的不同版本，都有可能存在一定差异。主要以oracle HotSpot VM为默认虚拟机。","link":"/Java/6688.html"},{"title":"Java基础","text":"Java development notes document Source Code 关键字汇总 访问控制 修饰符 程序控制 错误处理 基本类型 变量引用 包相关 保留字 private class for try boolean new package const protected abstract break catch byte super import go default（缺省） extends continue finally char this public implements do throw short void interface while throws int null final if long true strictfp else float false static switch double synchronized case transient default volatile instanceof native return enum assert final关键字 修饰常量，可以放在方法体里面 修饰类，不能被继承 修饰方法，子类不能重写这个方法 修饰参数，这个参数不能被修改，如果这个参数是类对象，可以调用该对象的set方法 transientJava序列化Java序列化就是把一个对象保存到一个文件或字节流中去，反序列化就是在适当的时候把这个文件再转化成原来的对象使用。 序列化和反序列化最主要的作用有： 在进程下次启动时读取上次保存的对象的信息，例如读取session内容； 在不同的进程之间传递数据； 在分布式应用系统中传递数据？ Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。 将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。 整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。 类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。 在实际开发过程中，会遇到这样的问题，某个类的有些属性需要序列化，而其他属性不需要被序列化；例如：如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。 总之，java 的transient关键字为我们提供了便利，只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。 transient使用 一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。 transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类成员变量，想用transient修饰，则该类需要实现Serializable接口。 被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化 transient细节被transient关键字修饰的变量真的不能被序列化吗？ 在Java中，对象的序列化可以通过实现两种接口来实现，若实现的是Serializable接口，则所有的序列化将会自动进行，若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指定所要序列化的变量，这与是否被transient修饰无关。 Externalizable接口继承了Serializable接口，用来在序列化时手动地把需要的对象信息进行序列化。 strictfp关键字关键字strictfp是strict float point的缩写，指的是精确浮点，是用来确保浮点数运算的准确性。 JVM在执行浮点数运算时，如果没有指定strictfp关键字，此时计算结果可能会不精确，而且计算结果在不同平台或厂商的虚拟机上会有不同的结果，导致意想不到的错误。 而一旦使用了strictfp来声明一个类、接口或者方法，那么在所声明的范围内，Java编译器以及运行环境会完全依照IEEE二进制浮点数算术标准来执行，在这个关键字声明的范围内所有浮点数的计算都是精确的。 需要注意的是，当一个类被strictfp修饰时，所有方法都会自动被strictfp修饰。strictfp可以保证浮点数运算的精确性，而且在不同的硬件平台会有一致的运行结果。 异常类型部分异常类的依赖图 Throwable\\begin{cases} Error\\begin{cases} VirtualMachineError\\begin{cases} StackOverflowError\\\\ OutOfMemoryError\\\\...\\\\ \\end{cases}\\\\ ThreadDeath\\\\...\\\\ \\end{cases}\\\\ Exception\\begin{cases} IOException\\begin{cases} EOFException\\\\ FileNotFoundException\\\\...\\\\ \\end{cases}\\\\ RuntimeException\\begin{cases} IndexOutOfBoundsException\\\\ ArithmeticException\\\\NullPointerException\\\\...\\\\ \\end{cases}\\\\...\\\\ \\end{cases}\\\\ \\end{cases} 自己也可以自定义异常实现。 Throwable有两个子类，Error和Exception。 其中Error是错误，对于所有的编译时期的错误以及系统错误都是通过Error抛出的。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。在 Java中，错误通过Error的子类描述。 Error的出现表示运行应用程序中较严重问题。必须解决，处理方式：只能抛出。 Exception，是另外一个非常重要的异常子类。它规定的异常是程序本身可以处理的异常。异常和错误的区别是，异常是可以被处理的，而错误是没法处理的。 Checked Exception 可检查的异常，这是编码时非常常用的，所有checked exception都是需要在代码中处理的。它们的发生是可以预测的，正常的一种情况，可以合理的处理。比如IOException，或者一些自定义的异常。除了RuntimeException及其子类以外，都是checked exception。 Unchecked Exception RuntimeException及其子类都是unchecked exception。比如NPE空指针异常，除数为0的算数异常ArithmeticException等等，这种异常是运行时发生，无法预先捕捉处理的。Error也是unchecked exception，也是无法预先处理的。 为什么要创建自己的异常？ 当Java内置的异常都不能明确的说明异常情况的时候，需要创建自己的异常。 throw和throws的区别? throw后面跟异常对象，throws异常类名 throw后面跟一个对象，throw后面跟多个类名 throw在方法内部使用，throws在方法签名上使用","link":"/Java/6625286c.html"},{"title":"Java中main方法参数String[] args的使用","text":"Java development notes document Source Code 一、Java规定 main方法参数必须为字符串数组(String [ ])，变量名可以随意，通常使用args即是arguments（”参数”的复数形式）的缩写。 1.Main方法12345public static void main(String[] args) {}public static void main(String args[]) {} 两种写法都是一样的，都表示字符串数组args，其中args只是普通变量名，可以随意定义（前提是符合变量名规则） 2.思考讨论2.1 不按Java规定 123456public class TestDemo { public static void main(String args) { // 将 String[] 改为 String System.out.println(\"Test!\"); }} 如果按照上面代码进行编码，那就不能被系统识别为主方法；系统就会提示类似如下错误：Error: Main method not found in the file, please define the main method as: public static void main(String[] args) 2.2 同名main方法如果已经有正确main方法，再有同名的main方法就是方法重载了。 1234567public static void main(String[] args){ // 正确标准完美的main方法}public static void main(String args){ // 方法重载} 2.3 回归正题：参数String[] args的作用参数String[] args的作用就是可以在main方法运行前将参数传入main方法中。 从控制台，输入编译执行命令时传参数。例如下面代码： 123456public class TestMain { public static void main(String[] args) { for(int i=0; i&lt;args.length; i++) System.out.println(args[i]); }} 但是此时args[]并没有赋值，我们需要从控制台命令行进行赋值，就像这样： 所以在命令行中使用String[] args即传入参数的使用为： 1java java_file_name arg1 arg2 arg3 ... 2.4 eclipse举例在Eclipse使用String[] args 步骤一：选择运行中的Run Configurations… 步骤二：左边选中Java Application下的TestMain，右边选中选项卡中的Arguments，输入参数，每个参数空格隔开，点击Run即可 控制台结果 二、解决的问题 在CMD上运行java文件时出现错误：找不到或者无法加载主类的问题。 1.解决方案1.1 首先写一个测试文件 12345public class TestDemo { public static void main(String args[]) { System.out.println(\"Run successfully!\"); }} 2.通过cmd编译如下2.1 通过命令：1javac TestDemo.java 将其编译成字节码文件。要运行一段Java源码，必须先将源码转换为class文件，class文件就是编译器编译之后供虚拟机解释执行的二进制字节码文件。 2.2 通过命令：1java TestDemo 将其运行，并打印输出结果。 从图中可以看出，在这种情况下编译是正常的。 3. 那么，我们修改刚开始的代码在首行加入在java中最常见的package关键字。如下： 1234567package CourseExercise;public class TestDemo { public static void main(String args[]) { System.out.println(\"Run successfully!\"); }} 3.1 通过命令：1javac TestDemo.java 将其编译成字节码文件 在编译成字节码文件时，是没有问题的。也就是说，在当前文件目录下，可以成class文件。好的，继续往下进行。 3.2 通过命令：1java TestDemo 尝试将其运行，并打印输出结果。 这个时候就会报错了。提示错误：找不到或无法加载主类。很明显，这个错误是由于在代码首行加入了package CourseExercise;造成的。 4. 那么，遇到这种问题该怎么解决呢方法如下： 4.1 通过命令：1javac -d . TestDemo.java 将目标文件编译成class文件。 说明： -d ：表示生成目录，设置编译生成的class文件保存路径，路径与定义的包名和层次相关。 . ：表示在当前目录中生成。 #### 4.2 通过命令： 123java CourseExercise/TestDemo# 或者java CourseExercise.TestDemo 来运行程序。 4.3 通过命令：javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。 一般常用的是-v -l -c三个选项： 123456# 不仅会输出行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息javap -v ***.class# 会输出行号和本地变量表信息javap -l# 会对当前class字节码进行反编译生成汇编代码javap -c 将class文件中的字节码转换为字节码指令： 1javap -verbose TestDemo.class 对字节码进行反汇编 将TestDemo.java文件改为： 1234567891011public class TestDemo { public static void main(String args[]) { int a=1; int b=99; int c=a; a=b; b=c; System.out.println(\"Run successfully!\"); }} 执行： 1javap -c -l TestDemo.class 分析结果： 1234567891011121314151617181920212223242526272829303132333435363738394041424344D:\\GitHub\\OPP-Java\\CourseExercise&gt;javap -c -l TestDemo.classCompiled from \"TestDemo.java\"public class CourseExercise.TestDemo { # 默认的构造方法，在构造方法执行时主要完成一些初始化操作，包括一些成员变量的初始化赋值等操作 public CourseExercise.TestDemo(); Code: 0: aload_0 # 从本地变量表中加载索引为0的变量的值，也即this的引用，压入栈 # 出栈，调用java/lang/Object.\"&lt;init&gt;\":()V # 初始化对象，就是this指定的对象的init()方法完成初始化 1: invokespecial #1 // Method java/lang/Object.\"&lt;init&gt;\":()V 4: return # 指令与代码行数的偏移对应关系，每一行第一个数字对应代码行数 # 第二个数字对应前面code中指令前面的数字 LineNumberTable: line 3: 0 public static void main(java.lang.String[]); Code: 0: iconst_1 # 将常量1，压入到操作数栈 1: istore_1 2: bipush 99 4: istore_2 5: iload_1 6: istore_3 7: iload_2 8: istore_1 9: iload_3 10: istore_2 # 11到16对应System.out.println(\"Run successfully!\"); 11: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 14: ldc #3 // String Run successfully! 16: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 19: return LineNumberTable: line 6: 0 line 7: 2 line 9: 5 line 10: 7 line 11: 9 line 13: 11 line 14: 19}D:\\GitHub\\OPP-Java\\CourseExercise&gt; 三、力扣最小栈问题，两个栈栈顶元素比较 12345// 错误方法this.minStack.peek()==this.stack.peek(); // 始终返回false// 正确方法int num = this.minStack.peek();num==this.minStack.peek();","link":"/Java/b0484ec1.html"},{"title":"机器学习导论","text":"Introduction to Machine Learning 第一章 绪论1.1 什么是机器学习Arthur Samuel定义的机器学习：在没有明确设置的情况下，使计算机具有学习能力的研究领域。 Tom Mitchell定义的机器学习：一个适当的学习问题定义如下：计算机程序从经验E中学习，解决某一任务T进行某一性能度量P，通过P测试在T上的表现因经验E而提高。 最主要的两类学习算法：监督学习和无监督学习。 监督学习：我们会教计算机做某件事情； 无监督学习：我们让计算机自己学习； 机器学习方法在大型数据库中的应用称为数据挖掘（data mining）。 机器学习不仅仅是数据库方面的问题，他也是人工智能的组成部分。机器学习还可以帮助我们解决视觉、语音识别以及机器人方面的许多问题。 1.2 机器学习的应用实例1.2.1 学习关联性购物篮分析：发现顾客所购商品之间的关联性；打包策略。 关联规则，P(chips|beer)=0.7，定义规则，购买啤酒的顾客中有70%的人也买了薯片。 1.2.2 分类信用评分，客户属性及其风险性的关联性。 分类：低风险客户和高风险客户。客户信息作为分类器的输入，分类器的任务是将输入指派到其中的一个类。 规则的用途是预测。 模式识别方面的应用：光学字符识别（OCR），即从字符图像识别字符编码。 人脸识别输入的是人脸，类是需要识别的人，并且学习程序应当学习人脸图像与身份识别之间的关联性。这个问题比OCR更困难，原因是人脸会有更多的类，输入图像也更大一些，并且人脸是三维的，不同的姿势和光线等都会导致图像的显著变化。 对于医学诊断（medical diagnosis），输入是关于患者的信息，而类是疾病。输人包括患者的年龄、性别、既往病史、目前症状等。 在语音识别（speech recognition），输入是语音，类是可以读出的词汇。这里要学习的是从语音信号到某种语言的词汇的关联性。由于年龄、性别或口音方面的差异，不同的人对于相同词汇的读音不同，这使得语音识别问题相当困难。语音识别的另一个特点是其输入信号是时态的（temporal），词汇作为音素的序列实时读出，而且有些词汇的读音会较长一些。一种语音识别的新方法涉及利用照相机记录口唇动作，作为语音识别的补充信息源。这需要传感器融合（sensor fusion）技术，集成来自不同形态的输入，即集成声音和视频信号。 机器学习，自然语言处理，垃圾邮件过滤，机器翻译 生物测定学（biometrics）使用人的生理和行为特征来识别或认证人的身份，需要集成来自不同形态的输人。生理特征的例子是面部图像、指纹、虹膜和手掌；行为特征的例子是签字的力度、嗓音、步态和击键。 从数据中学习规则也为知识抽取提供了可能性。风险识别。 机器学习还可以进行压缩。用规则拟合数据，得到比数据更简单的解释，存储空间更好，计算更少。 离群点检测，即发现那些不遵守规则的例外实例。 1.2.3 回归回归（regression）问题：预测二手车价格的系统。输入是影响车价的属性信息：品牌、车龄、发动机性能等，输出是车的价格，这种输出为数值的问题。 调查交易情况，收集训练数据，机器学习程序用一个函数拟合这些数据来学习x的函数y。 回归和分类均为监督学习（supervised learning）问题，其中输入x和输出y给定，任务是学习从输入到输出的映射。参数模型，判别式函数，误差最小，非线性函数。 回归的另一个例子是对移动机器人的导航。例如，自动汽车导航。其中输出是每次转动车轮的角度，使得汽车前进而不会撞到障碍物或偏离车道。这种情况下，输入由汽车上的传感器（如视频相机、GPS等）提供。训练数据可以通过监视和记录驾驶员的动作收集。 假设造一个焙炒咖啡的机器，该机器有多个影响咖啡品质的输入：各种温度、时间、咖啡豆种类等配置。针对不同的输入配置进行大量试验，并测量测量咖啡的品质。为寻求最优配置，我们拟合一个联系这些输入和咖啡品质的回归模型，并在当前模型的最优样本附近选择一些新的点，以便寻找更好的配置。我们抽取这些点，检测咖啡的品质，将它们加入训练数据，并拟合新的模型。这通常被称为响应面设计（response surface design）。 1.2.4 非监督学习监督学习，目标是学习从输入到输出的映射关系，输出的正确值已经由指导者提供。非监督学习中却没有这样的指导者,，只有输入数据。目标是发现输入数据中的规律。输入空间存在着某种结构，使得特定的模式比其他模式更常出现，而我们希望知道哪些经常发生，哪些不经常发生。在统计学中，这称为密度估计（density estimation）。 密度估计的一种方法是聚类（clustering），其目标是发现输入数据的簇或分组。对于拥有老客户数据的公司，客户数据包括客户的个人统计信息，及其以前与公司的交易，公司也许想知道其客户的分布，搞清楚什么类型的客户会频繁出现。这种情况下，聚类模型会将属性相似的客户分派到相同的分组，为公司提供其客户的自然分组；这称作客户市场划分(customer segmentation)。一旦找出了这样的分组，公司就可能做出一些决策，比如对不同分组的客户提供特别的服务和产品等；这称作客户关系管理（customer relationship management）。这样的分组也可以用于识别”离群点”，即那些不同于其他客户的客户。这可能意味着一块新的市场，公司可以进一步开发。 聚类的有趣应用是图像压缩。图像被量化。主色调。 文档聚类，相似的文档分组。 机器学习方法还应用于生物信息学。计算机科学在分子生物学的应用领域之一就是比对，即序列匹配。很多模板串进行匹配问题。聚类用于学习结构域。 1.2.5 增强学习在某些应用中，系统的输出是动作的序列。在这种情况下，单个的动作并不重要，重要的是策略，即达到目标的正确动作的序列。不存在中间状态中最好动作这种概念。如果一个动作是好的策略的组成部分，那么该动作就是好的。这种情况下，机器学习程序就应当能够评估策略的好坏程度，并从以往好的动作序列中学习，以便能够产生策略。这种学习方法称为增强学习（reinforcement learning）算法。 游戏是一个很好的例子。在游戏中，单个移动本身并不重要，正确的移动序列才是重要的。如果一个移动是一个好的游戏策略的一部分，则它就是好的。游戏是人工智能和机器学习的重要研究领域，这是因为游戏容易描述，但又很难玩好。像国际象棋，规则少量几条，但非常复杂，因为在每种状态下都有大量可行的移动，并且每局又都包含有大量的移动。一旦有了能够学习如何玩好游戏的好算法，我们也可以将这些算法用在具有更显著经济效益的领域。 用于在某种环境下搜寻目标位置的机器人导航是增强学习的另一个应用领域。在任何时候，机器人都能够朝着多个方向之一移动。经过多次的试运行，机器人应当学到正确的动作序列，尽可能快地从某一初始状态到达目标状态，并且不会撞到任何障碍物。致使增强学习难度增加的一个因素是系统具有不可靠和不完整的感知信息。例如，装备视频照相机的机器人就得不到完整的信息，因此该机器人总是处于部分可观测状态，并且应当将这种不确定性考虑在内。一个任务还可能需要多智能主体的并行操作，这些智能主体将相互作用并协同操作，以便完成一个共同的目标。 第二章 监督学习2.1 由实例学习类学习，实例，被测人，涵盖目标分类的描述，预测。类识别器的输入，训练数据绘制在二维空间上，专家谈论和分析数据，确定范围，假设类集合。训练集，经验误差，预测值，预期值，泛化问题。假设，诱导类。 上海交大张志华机器学习计算，统计，信息论，算法，控制论，最优化 机器学习=矩阵+优化+算法+统计 回归问题，数据，预测估计， 吴恩达机器学习网页排序，图像识别，邮件过滤， 监督学习数据集，包括正确答案，给出更多正确答案，回归问题，数值的连续输出 分类问题，预测一个离散值的输出，可能两个以上的输出值 无穷多的特征，向量机 无监督学习数据集无任何标签，聚类算法，新闻专题，计算机集群，现在octave中建立模型，然后再迁移到其他编程语言。 模型描述监督学习是如何工作的，预测房价，每个例子都有一个“正确答案”，也是回归问题的例子，回归是指我们预测一个具体的数值输出。 另一个监督学习常见的例子是分类问题，我们用它来预测离散值输出。做判断。 M：样本输入量，训练样本的数量，样本容量。 x：输入值，特征 y：输出变量，预测的目标变量 (x, y)表示一个训练样本 (x^{(i)},y^{(i)})表示第i个训练样本 向算法提供房价的训练集，算法输出的假设函数，作用是：把房子的大小作为输入变量，h是一个引导从x得到y的函数。 决定怎么表示这个假设函数h。 表示假设函数：h_\\theta =\\theta_0+\\theta_1 x 函数的作用是预测y是关于x的线性函数，线性是学习的基础。一元线性回归模型（单变量线性回归） 代价函数零弄清楚如何把最有可能的直线与我们的数据相拟合，\\theta_i称为模型参数，如何选择这两个参数值\\theta_0和\\theta_i，不同的参数值 \\to 不同的假设 \\to 不同的假设函数； 使h(x)，输入x时，我们预测的值最接近该样本对应的y值的参数\\theta_0,\\theta_1 给出标准的定义，在线性回归中，我们要解决的是一个最小化问题，所以要写出\\theta_0,\\theta_1的最小化，式子及其小？h(x)与y之间的差异要小，减少假设的输出与房子真实价格之间的差的平方。 对所有训练样本进行一个求和，对i=1到i=M的样本，将对假设进行预测得到的结果，此时输入是第i号房子的面积，将第i号对应的预测结果，减去第i号房子的实际价格所得的差的平方相加得到总和。\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2，尽量减少这个值，也就是预测值和实际值的差的平方，误差和，或者说预测价格和实际卖出价格的差的平方。\\frac{1}{M}\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2，减少平均误差，表示关于\\theta_0和\\theta_1的最小化过程，找到\\theta_0和\\theta_1，使这个值最小，转化为目标函数。\\frac{1}{2M}\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2，加\\frac{1}{2}是因为后面平方求导多出2 定义一个代价函数，J(\\theta_0,\\theta_1)=\\frac{1}{2M}\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2，对于函数J(\\theta_0,\\theta_1)求最小值，常用（对大多数合理），平方误差函数，平方误差代价函数，MSE（mean squared error，均方差）， 对于回归问题，是个合理的选择，其他代价函数也可 一 Hypothesis：h_\\theta(x)=\\theta_0+\\theta_1x Parameters：\\theta_0,\\theta_1 Cost Function：J(\\theta_0,\\theta_1)=\\frac{1}{2M}\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2 Goal：\\underbrace{minimize}_{\\theta_0,\\theta_1} J(\\theta_0,\\theta_1)，二次函数？ simplified Hypothesis：h_\\theta(x)=\\theta_1x Parameters：\\theta_1 Cost Function：J(\\theta_1)=\\frac{1}{2M}\\sum_{i=1}^M[h_\\theta(x^{(i)})-y^{(i)}]^2 Goal：\\underbrace{minimize}_{\\theta_1} J(\\theta_1) 使代价函数可视化，学习算法的优化目标 二代价函数的作用，等高线图，等高图像，代价函数图形化，加入\\theta_0,\\theta_1，碗状3维图，碗状曲面，代价函数的形状，从\\theta_0,\\theta_1所在平面截取，即得到等高线图，以后更复杂，更高维 2.5 梯度下降一种算法，梯度下降法（Gradient descent algorithm），常用，可以将代价函数J最小化，应用于线性回归及机器学习的众多领域，最小化其他函数 Have some fuction J(\\theta_0,\\theta_1) Want \\underbrace{min}_{\\theta_0,\\theta_1} J(\\theta_0,\\theta_1) Outline： Start with some \\theta_0,\\theta_1（将其初始化都设为0，\\theta_0=0,\\theta_1=0）有时也会初始化为其他值 Keep changing \\theta_0,\\theta_1 reduce J(\\theta_0,\\theta_1) until we hopefully end up at a minimun（最小值，局部最小值） 更一般化的问题，\\theta_0,\\theta_1,...,\\theta_n 从红色高峰尽快走下山，周围方向，直到收敛至局部最低点 算法特点：不同出发点，到达不同局部最优处 背后的数学原理：（梯度算法的定义） repeat until convergence（收敛）{ ​ \\theta_j:=\\theta_j-\\alpha\\frac{\\delta}{\\delta\\theta_j}J(\\theta_0,\\theta_1)\\ (for\\ j=0\\ and\\ j=1) } :=表示赋值，a=b真值判定，\\alpha是被称为学习率的数字，用来控制梯度下降时，我们迈出多大的步子，\\alpha越大，梯度下降很迅速 correct：Simultaneous update更新参数 temp0:=\\theta_0-\\alpha\\frac{\\delta}{\\delta\\theta_0}J(\\theta_0,\\theta_1)temp1:=\\theta_1-\\alpha\\frac{\\delta}{\\delta\\theta_1}J(\\theta_0,\\theta_1)\\theta_0:=temp0\\theta_1:=temp1上面满足同步更新，与下面的方式不同 Incorrect： temp0:=\\theta_0-\\alpha\\frac{\\delta}{\\delta\\theta_0}J(\\theta_0,\\theta_1)\\theta_0:=temp0temp1:=\\theta_1-\\alpha\\frac{\\delta}{\\delta\\theta_1}J(\\theta_0,\\theta_1)$$（$$\\theta_0$$更新后计算这个倒数项） $$\\theta_1:=temp1 微妙处，对于更新方程，同时更新\\theta_0,\\theta_1，梯度下降\\to同步更新","link":"/Machine-Learing/8420e1e9.html"},{"title":"起步","text":"导师公众号内容 一、基于深度强化学习的像素材料设计英文原题：Deep reinforcement learning for digital materials design 1.1 关键词深度神经网络（Deep Neural Network, DNN） 深度强化学习（Deep Reinforcement Learning, DRL） 深度Q网络（Deep Q Network, DQN） 遗传算法（genetic algorithm, GA） 1.2 关键内容深度学习相关理论也应用在其他自然学科的研究，例如新材料研发与生物高分子解析，而近期热议的Alphafold2就很好的展示了深度学习在学科交叉方面的优势。在材料与结构设计优化领域，深度强化学习（Deep Reinforcement Learning, DRL）有着巨大的应用潜力，或将有效降低传统设计过程中的人工成本。 通过试错自动迭代算法找到解决问题的最优决策，结合深度神经网络对问题的强大感知与泛化能力，深度强化学习得以解决现实世界中更加复杂的实际问题。 加州大学伯克利分校的研究团队针对像素材料（Digital Materials, DMs）首次提出了基于深度强化学习的自动化设计方法。 如图1所示，深度强化学习算法可自动提升复合材料的某一物理属性（如平均杨氏模量 Emean）。区别于传统的参数化设计（Parametric Design），像素化设计思想将设计空间看做由材料微元组合而成，将提供更高的设计自由度以及结构复杂性。 文中使用了像素复合材料作为主体研究对象，系统执行方式如图2所示。复合材料由可3D打印的硬材料（数位0表示）与软材料（数位1表示）组成。起始状态下，系统将按照一定的硬软材料比例随机生成图案。图案的当前状态（state）可以转化为一维二进制数组并传递至深度Q网络（Deep Q Network, DQN）, 由其可能带来最大未来回报（reward）的动作（action）做出下一步决策，图案状态发生改变，随后有限元仿真软件得出新状态的平均杨氏模量。新旧状态的图案和物理信息都将记录在经验回放池（replay buffer）中，用于更新深度Q网络。经过不断更新迭代，最终得到的图案将在保证初始限定的硬软材料比例不变的条件下拥有最大的平均杨氏模量。 文中决策器的实际执行过程中用到了一对协同运作的深度Q网络（collaborative DQN），其工作机制如图3 所示。两个深度Q网络Q_{net1}和Q_{net2}分别代表了两个不同智能体（agent）的执行方式。Q_{net1}负责找到其最大Q值对应的原图案位置并将对应的软材料翻转为硬材料，而Q_{net2}负责对本身判断的最大Q值位置执行硬材料向软材料的翻转。经过这一对动作过程，设计图案的硬软材料比例便可维持不变。 针对相对复杂的设计问题，该系统相较传统智能设计方法，如遗传算法（genetic algorithm, GA）在运行效率和最终结果上都有较大的优势。如图4a下排所示，尽管在3 X 3的设计空间中，深度Q协同网络的实际表现并不如如遗传算法。当设计空间的自由度提升到5 X 5和7 X 7时，如4b-c下排所示，深度Q协同网络将反超遗传算法得到更高杨氏模量的图案。 本文总共研究了3 X 3,5 X 5和7 X 7三种设计空间大小下的11个硬软材料比例。所有条件下的深度Q协同网络提出的最优设计方案如图5所示。就最终结果而言，深度Q协同网络可以在所有条件下实现等同或优于遗传算法的结果。尤其是在硬软材料比例为[15:10], [10:15], [30:19], [20:19] 的条件下，本文提出的方法相较遗传算法给出的设计有着更显著的性能，平均杨氏模量有最高15.9%的提升。 由于深度Q学习网络是逐步更新实现设计优化，其间也使用了批量训练（batch training）的方法，每步更新的过程中样本的Emean分布都可视。如图6便展示了在7 X 7设计空间下硬软材料比例为 [24:25] 时的样本性能分布的逐步更新。从图中可以看出，经过24歩的翻转动作，新的样本性能分布已经大大优于原本随机的初始分布，并且超半数的样本都拥有比初始分布最优值更高的性能，体现了较高的优化效率。 本文所提出的基于深度强化学习的结构设计方法是关于智能制造的一次创新性尝试，该团队未来计划将本工作的核心思想推广至更高自由度、更多材料组合的情形，并期望本工作所提出的相关方法能够更加广泛的应用于智能材料领域的探索。","link":"/Machine-Learing/32df0da.html"},{"title":"Java多线程","text":"创建线程的主要方式 继承Thread类创建线程类（重点） 实现Runnable接口创建线程类（重点） 实现Callable接口或Future接口创建线程（了解） 线程池 1、前言关于学习Java多线程，其中程序，进程和线程等重要概念及其关系在这里就不多赘述，之前操作系统也详细讲过，我就不再详细扩展，直接进入Java线程的学习吧！ 此处分享一下Java1.8帮助文档（中文版），提取码: k26d 2、Thread类2.1 Thread类实现Runnable接口源码： 1234567891011121314151617publicclass Thread implements Runnable { /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */ private static native void registerNatives(); static { registerNatives(); } private volatile String name; private int priority; private Thread threadQ; private long eetop; /* Whether or not to single_step this thread. */ private boolean single_step; ...} 2.2 创建步骤：将一个类声明为Thread的子类。 这个子类应该重写Thread类的run方法 。 然后可以分配并启动子类的实例 自定义线程类继承Thread类 重写run()方法，编写线程执行体 创建线程对象，调用start()方法启动线程 2.2.1 测试123456789101112131415161718192021222324public class Thread1 extends Thread { @Override public void run() { // run方法线程体 for (int i = 0; i &lt; 20; i++) { System.out.print(String.format(\"%-3d\", i) + \"Hello \"); } } public static void main(String[] args) { // main方法主线程 // 创建一个线程对象 Thread1 thread1 = new Thread1(); // 调用start方法开启线程 thread1.start(); for (int i = 0; i &lt; 800; i++) { System.err.print(String.format(\"%-3d\", i) + \"World \"); } }} 查看控制台输出： 注意：线程开启不一定立即执行，由CPU调度执行 调用start方法，是线程同时执行，交替执行。如果调用run方法，就是顺序执行。 2.2.2 案例：实现多线程同步下载图片APACHE官网下载commons-io，导入项目Library 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class Thread2 extends Thread { private String url; // Picture url private String path; private String name; // Saved file name public Thread2(String url, String path, String name) { super(); this.url = url; this.path = path; this.name = name; } @Override public void run() { WebDownloader webDownloader = new WebDownloader(); webDownloader.downloader(url, path, name); System.out.println(\"Downloaded the file which name is \" + name); } public static void main(String[] args) { String path = \"src/com/newthread/img/\"; Thread2 t1 = new Thread2( \"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8okovekj21hc0u0e42.jpg\", path, \"tower.jpg\"); Thread2 t2 = new Thread2( \"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8oq8jx1j21hc0u0qse.jpg\", path, \"bike.jpg\"); Thread2 t3 = new Thread2( \"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8on2u4gj21hc0u0ngj.jpg\", path, \"bridge.jpg\"); // simultaneous execution t1.start(); t2.start(); t3.start(); }}// downloaderclass WebDownloader{ // download function public void downloader(String url, String path,String name) { try { FileUtils.copyURLToFile(new URL(url), new File(path + name)); } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); System.err.println(\"IO Exception...downloader function has a problem!\"); } }} 结果： 3、Runnable接口3.1 Runnable接口声明实现类Runnable接口。 那个类然后实现了run方法。 然后可以分配类的实例，在创建Thread时作为参数传递，并启动。 源码： 123456789101112131415publicclass Thread implements Runnable { /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */ private static native void registerNatives(); static { registerNatives(); } ... public Thread(Runnable target) { init(null, target, \"Thread-\" + nextThreadNum(), 0); } ...} 实现Runnable接口创建的线程，不能通过run或start方法来启动。在Thread类中有一个构造器，这个构造器接收一个Runnable接口的实现类对象，构造Thread线程类对象，然后使用这个线程类对象调用start方法启动我们的线程。 3.2 创建步骤 自定义线程类实现Runnable接口 实现run()方法，编写线程执行体 创建线程对象，调用start()方法启动线程 推荐使用Runnable对象，因为Java单继承的局限性 12345678910111213141516171819202122232425public class Thread3 implements Runnable { @Override public void run() { // run方法线程体 for (int i = 0; i &lt; 20; i++) { System.out.print(String.format(\"%-3d\", i) + \"Hello \"); } } public static void main(String[] args) { // main方法主线程 // 创建Runnable接口的实现类对象 Thread3 thread3 = new Thread3(); // Thread thread = new Thread(thread3);// thread.start(); new Thread(thread3).start(); for (int i = 0; i &lt; 800; i++) { System.err.print(String.format(\"%-3d\", i) + \"World \"); } }} 3.3 对比 继承Thread类 子类继承Thread类具有多线程能力 启动线程：子类对象.start() 不建议使用：避免OOP单继承局限 实现Runnable接口 子类实现Runnable接口具有多线程能力 启动线程：传入目标对象+Thread对象.start() 推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用 4、Callable接口（了解即可）4.1 源码：12345678910@FunctionalInterfacepublic interface Callable&lt;V&gt; { /** * Computes a result, or throws an exception if unable to do so. * * @return computed result * @throws Exception if unable to compute a result */ V call() throws Exception;} 从源码可以看出，Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。 这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务。 4.2 创建步骤 实现Callable接口，需要返回值类型 重写call方法，需要抛出异常 创建目标对象 创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1); 提交执行：Future&lt; Boolean&gt; result1 = ser.submit(1); 获取结果：boolean r1= result1.get(); 关闭服务：ser.shutdownNow(); 123456789101112131415161718192021222324252627282930313233343536public class Callable1 implements Callable&lt;Boolean&gt;{ @Override public Boolean call() throws Exception { for (int i = 0; i &lt; 20; i++) { System.out.println(String.format(\"%-3d\", i) + Thread.currentThread().getName()); } return true; } public static void main(String[] args) throws InterruptedException, ExecutionException { Callable1 callable1 = new Callable1(); Callable1 callable2 = new Callable1(); Callable1 callable3 = new Callable1(); // 创建执行服务 ExecutorService ser = Executors.newFixedThreadPool(3); // 提交执行 Future&lt;Boolean&gt; result1 = ser.submit(callable1); Future&lt;Boolean&gt; result2 = ser.submit(callable2); Future&lt;Boolean&gt; result3 = ser.submit(callable3); // 获取结果 boolean r1= result1.get(); boolean r2= result2.get(); boolean r3= result3.get(); System.out.println(r1 + \" \"+ r2 + \" \" + r3); // 关闭服务 ser.shutdownNow(); }} 5、静态代理模式5.1 内容真实角色，代理角色；真实角色和代理角色要实现同一个接口，代理角色要持有真实角色的引用。 在Java中线程的设计使用了静态代理设计模式，其中自定义线程类实现Runable接口，Thread类也实现了Runalbe接口，在创建子线程的时候，传入了自定义线程类的引用，再通过调用start()方法，调用自定义线程对象的run()方法。实现了线程的并发执行。 Thread对象调用线程的start()方法，在内部调用了真实角色的run()方法。 5.2 设计代码结构由三部分组成 接口：主题 代理类 被代理类 实现方式：代理类和被代理类要实现同一个主题接口，而且代理类中要有一个被代理类的属性（target），这样才能把核心业务逻辑交还给被代理类完成；而一些与核心业务逻辑无关的逻辑，并且需求是多变的，那么这些逻辑就可以交给代理类来完成。 代理对象可以做很多真实对象做不了的事情，真实对象专注做自己的事情 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class StaticProxy { public static void main(String[] args) { SpringPioneer springPioneer = new SpringPioneer(new Programmer()); springPioneer.Deploy(); }}interface SpringBootFrame { // 接口主题：框架整合部署 void Deploy();}// 真实角色，程序员class Programmer implements SpringBootFrame{ @Override public void Deploy() { System.out.println(\"Programmer SpringBoot deployed successfully!\"); }}// 代理角色，SpringBoot的作者，帮我们简化开发class SpringPioneer implements SpringBootFrame{ // 代理谁--&gt;真实目标角色 private SpringBootFrame target; public SpringPioneer(SpringBootFrame target) { this.target = target; } @Override public void Deploy() { before(); this.target.Deploy(); // 这就是真实对象 after(); } private void before() { System.out.println(\"研发出这个SpringBoot框架，并开源。\"); } private void after() { System.out.println(\"不断推出新的特性。\"); }} 6、Lambda表达式函数式编程的概念 6.1 为什么要使用lambda表达式？避免匿名内部类定义过多，代码简洁，去掉无意义代码，核心逻辑。 理解Functional Interface（函数式接口）是学习Java8 lambda表达式的关键。 函数式接口的定义：任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。 123public interface Runnable { public abstract void run();} 对于函数式接口，我们可以通过lambda表达式来创建接口的对象。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687public class lambda1 { // 3.静态内部类 static class StaticEntityLike implements Like { @Override public void lambda() { System.out.println(\"Static likes lambda!\"); } } public static void main(String[] args) { Like entityLike = new EntityLike(); entityLike.lambda(); Like staticEntityLike = new StaticEntityLike(); staticEntityLike.lambda(); // 4.局部内部类 class InternalEntityLike implements Like { @Override public void lambda() { System.out.println(\"Internal likes lambda!\"); } } Like internalEntityLike = new InternalEntityLike(); internalEntityLike.lambda(); // 5.匿名内部类，没有类的名称，必须借助接口或者父类 Like anonymousEntityLike = new Like() { @Override public void lambda() { System.out.println(\"Anonymous likes lambda!\"); } }; anonymousEntityLike.lambda(); // 6.用lambda简化 Like lambdaLike = () -&gt; { System.out.println(\"Lambda likes lambda!\"); }; lambdaLike.lambda();// new Like(()-&gt;System.out.println(\"Lambda likes lambda!\")).lambda(); // 7.带参数的 Love lambdaLove = (int t) -&gt; { System.out.println(\"Lambda loves you \" + t + \" times!\"); }; lambdaLove.time(520); // 7.1简化去掉参数类型 Love love1 = (t) -&gt; { System.out.println(\"Lambda loves you \" + t + \" times!\"); }; love1.time(521); // 7.2简化去掉括号 Love love2 = t -&gt; { System.out.println(\"Lambda loves you \" + t + \" times!\"); }; love2.time(522); // 7.3简化去掉花括号 // lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹 Love love3 = t -&gt; System.out.println(\"Lambda loves you \" + t + \" times!\"); love3.time(523); }}// 1.定义一个函数式接口interface Like { void lambda();}// 2.实现类class EntityLike implements Like { @Override public void lambda() { System.out.println(\"I like lambda!\"); }}// 带参数的interface Love { void time(int t);} 多个参数可以去掉参数类型，再简化就必须加上括号(a, b)-&gt;{}; 7、线程7.1 线程状态 创建状态（new）：Thread t = new Thread();，线程对象一旦创建，就进入到了新生状态。 就绪状态：当调用start()方法，线程立即进入就绪状态，但不意味着立即调度执行。 运行状态：CPU调度进入运行状态线程才真正执行线程体的代码块。 阻塞状态：当调用sleep()，wait()或同步锁定时，线程进入阻塞状态就是代码不往下执行，阻塞事件解除后，重新进入就绪状态，等待cpu调度执行。 死亡状态（dead）：线程中断或者结束，一旦进入死亡状态，就不能再次启动。 7.2 线程方法 方法 说明 setPriority(int newPriority) 设置当前线程的优先级 static void sleep(long millis) 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）。休眠的线程进入阻塞状态。 void join() 调用join方法的线程强制执行，其他线程处于阻塞状态，等该线程执行完后，其他线程再执行。有可能被外界中断产生InterruptedException中断异常。 static void yield() 调用yield方法的线程，（暂停当前执行的线程对象）会礼让其他线程先运行。（大概率其他线程先运行，小概率自己还会运行） void interrupt() 中断线程，不建议使用 boolean isAlive() 判断线程是否处于活动状态 （线程调用start后，即处于活动状态） 7.3 停止线程 不推荐使用JDK提供的stop()和destroy()方法。（已废弃） 12345678910111213141516171819202122232425262728publicclass Thread implements Runnable { ... @Deprecated public final void stop() { SecurityManager security = System.getSecurityManager(); if (security != null) { checkAccess(); if (this != Thread.currentThread()) { security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION); } } // A zero status value corresponds to \"NEW\", it can't change to // not-NEW because we hold the lock. if (threadStatus != 0) { resume(); // Wake up thread if it was suspended; no-op otherwise } // The VM can handle all thread states stop0(new ThreadDeath()); } ... @Deprecated public void destroy() { throw new NoSuchMethodError(); } ...} 推荐线程自己停止下来，建议使用一个标志位进行终止变量当flag=false，则终止线程运行。 12345678910111213141516171819202122232425262728293031public class TestStop implements Runnable { // 1.设置一个标志位 private boolean flag = true; @Override public void run() { int i=0; while (flag) { System.out.println(\"run...Thread...\"+i++); } } // 2.设置一个公开的方法停止线程，转换标志位 public void stop() { this.flag = false; } public static void main(String[] args) { TestStop testStop = new TestStop(); new Thread(testStop).start(); for (int i = 0; i &lt; 200; i++) { System.out.println(\"main...Thread...\"+i); if(i==100) { // 调用stop方法停止线程 testStop.stop(); System.out.println(\"run...Thread...stoped...\"); } } }} 结果：线程停止，main线程继续执行到结束 7.4 线程休眠 sleep(时间)指定当前线程阻塞的毫秒数；sleep存在异常Interrupted Exception；sleep时间达到后线程进入就绪状态；sleep可以模拟网络延时，倒计时等；每一个对象都有一个锁，sleep不会释放锁。 示例： 123456789101112131415161718192021222324252627282930313233343536// 模拟倒计时public class TestSleep2 { public static void main(String[] args) { try { tenDown(); } catch (InterruptedException e) { e.printStackTrace(); } // 打印当前系统时间 Date startTime = new Date(System.currentTimeMillis()); // 获取当前系统时间 System.out.println(\"Start printing system time...\"); while (true) { try { Thread.sleep(1000); System.out.println(new SimpleDateFormat(\"HH:mm:ss\").format(startTime)); startTime = new Date(System.currentTimeMillis()); // 更新时间 } catch (InterruptedException e) { e.printStackTrace(); } } } public static void tenDown() throws InterruptedException { int num=10; while (true) { Thread.sleep(1000); System.out.println(num--); if (num&lt;=0) { break; } } }} 7.4 线程礼让礼让线程，让当前正在执行的线程暂停，但不阻塞；将线程从运行状态转为就绪状态；让cpu重新调度，礼让不一定成功！看CPU心情。 示例： 1234567891011121314151617public class TestYield { public static void main(String[] args) { MyYield myYield = new MyYield(); new Thread(myYield, \"a\").start(); new Thread(myYield, \"b\").start(); }}class MyYield implements Runnable{ @Override public void run() { System.out.println(Thread.currentThread().getName()+\"Thread starts...\"); Thread.yield(); // 礼让 System.out.println(Thread.currentThread().getName()+\"Thread ends...\"); }} 7.5 线程强制执行 join()合并程序，待此线程执行完成后，再执行其他线程，其他线程阻塞。可以想象为插队。 示例： 1234567891011121314151617181920212223242526public class TestJoin implements Runnable { @Override public void run() { for (int i = 0; i &lt; 100; i++) { System.out.println(\"VIP thread comes...\"+i); } } public static void main(String[] args) { TestJoin testJoin = new TestJoin(); Thread thisThread = new Thread(testJoin); thisThread.start(); for (int i = 0; i &lt; 200; i++) { if (i==90) { try { thisThread.join(); // 插队 } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"main Thread...\"+i); } }} 取一个运行结果： 12345678910111213141516171819202122232425main Thread...0VIP thread comes...0main Thread...1VIP thread comes...1VIP thread comes...2VIP thread comes...3VIP thread comes...4VIP thread comes...5...main Thread...87main Thread...88main Thread...89VIP thread comes...19VIP thread comes...20VIP thread comes...21VIP thread comes...22VIP thread comes...23VIP thread comes...24...VIP thread comes...98VIP thread comes...99main Thread...90main Thread...91main Thread...92main Thread...93 在插队之前，2线程并行，当调用join()后，这个线程即成为VIP，只能等VIP线程执行结束，其他线程才能继续执行。 7.6 线程状态线程状态State是枚举类型，有5个状态，在中文帮助文档中有声明。 Thread.java源码： 12345678910111213141516171819202122publicclass Thread implements Runnable { ... public enum State { NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED; } public State getState() { return sun.misc.VM.toThreadState(threadStatus); } ...} 示例： 123456789101112131415161718192021222324252627282930public class TestState { public static void main(String[] args) throws InterruptedException { Thread thread = new Thread(()-&gt;{ for (int i = 0; i &lt; 5; i++) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"\\\\\\\\\\\\\"); }); // 观察状态 Thread.State state = thread.getState(); System.out.println(state); // NEW // 启动 thread.start(); state = thread.getState(); System.out.println(state); // RUN while (state != Thread.State.TERMINATED) { // 只要线程不终止就一直输出状态 Thread.sleep(100); state = thread.getState(); // 更新状态 System.out.println(state); } }} 7.7 线程优先级 Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行；线程的优先级用数字表示，范围从1-10。 Thread.java源码： 123456789101112131415161718192021222324publicclass Thread implements Runnable { ... public final static int MIN_PRIORITY = 1; public final static int NORM_PRIORITY = 5; public final static int MAX_PRIORITY = 10; ... public final void setPriority(int newPriority) { ThreadGroup g; checkAccess(); if (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) { throw new IllegalArgumentException(); } if((g = getThreadGroup()) != null) { if (newPriority &gt; g.getMaxPriority()) { newPriority = g.getMaxPriority(); } setPriority0(priority = newPriority); } } ...} 优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class TestPriority { public static void main(String[] args) { // 主线程默认优先级 System.out.println( Thread.currentThread().getName() + \"--&gt;\"+Thread.currentThread().getPriority() ); MyPriority myPriority = new MyPriority(); Thread t1 = new Thread(myPriority); Thread t2 = new Thread(myPriority); Thread t3 = new Thread(myPriority); Thread t4 = new Thread(myPriority); Thread t5 = new Thread(myPriority); t1.start(); t2.setPriority(2); // 先设置优先级再启动 t2.start(); t3.setPriority(Thread.MAX_PRIORITY); t3.start(); try { t4.setPriority(-1); t4.start(); t5.setPriority(11); t5.start(); } catch (Exception e) { System.err.println(e); } }}class MyPriority implements Runnable { @Override public void run() { System.out.println( Thread.currentThread().getName()+\"--&gt;\" + Thread.currentThread().getPriority() ); }} 取一个运行结果： 12345main--&gt;5java.lang.IllegalArgumentExceptionThread-0--&gt;5Thread-2--&gt;10Thread-1--&gt;2 总是主线程mian限制性，优先级低的也可能比高的优先执行。 7.8 守护（daemon）线程 线程分为用户线程和守护线程；虚拟机必须确保用户线程（main线程）执行完毕；虚拟机不用等待守护线程执行完毕；如后台记录操作日志，监控内存垃圾回收等。 示例： 1234567891011121314151617181920212223242526272829303132public class TestDaemon { public static void main(String[] args) { God god = new God(); Man man = new Man(); Thread thread = new Thread(god); thread.setDaemon(true); // 默认false表示用户线程，正常的线程都是用户线程 thread.start(); // 守护线程启动 new Thread(man).start(); // 用户线程挺停止 }}class God implements Runnable { @Override public void run() { while (true) { System.out.println(\"God bless you!\"); } }}class Man implements Runnable { @Override public void run() { for (int i = 0; i &lt; 100; i++) { System.out.println(\"Hello World!\"); } System.err.println(\"Goodbye World!\"); }} 看似god线程会一直循环执行下去，但它是守护线程，man线程执行结束后，守护线程等一会也会结束，因为虚拟机还会运行一会儿。 8、线程同步多个线程操作同一个资源。 并发：同一个对象被多个线程同时操作。 处理多线程问题时，多个线程访问同—个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用。 8.1 队列和锁由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入锁机制synchronized，当一个线程获得对象的排它锁（锁是对象的），将会独占资源。其他线程必须等待这个线程使用后释放锁即可。存在以下问题： 一个线程持有锁会导致其他所有需要此锁的线程挂起 在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题 如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题 8.2 同步方法 由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法synchronized方法和synchronized块 同步方法: public synchronized void method(int args) synchronized方法控制对“对象“的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行 缺陷：若将一个大的方法申明为 synchronized将会影响效率 弊端：需要锁太多，浪费资源 8.3 同步块 同步块：synchronized(obj){} obj称之为同步监视器 obj可以是任何对象，但是推荐使用共享资源作为同步监视器 同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class[反射中讲解] 同步监视器的执行过程 第一个线程访问，锁定同步监视器，执行其中代码 第二个线程访问，发现同步监视器被锁定，无法访问 第一个线程访问完毕，解锁同步监视器 第二个线程访问，发现同步监视器没有锁，然后锁定并访问 案例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public class Bank { public static void main(String[] args) { Account account = new Account(100, \"Deposit\"); Drawing husband = new Drawing(account, 50, \"husband\"); Drawing wife = new Drawing(account, 100, \"wife\"); husband.start(); wife.start(); }}class Account { int money; String name; public Account(int money, String name) { this.money = money; this.name = name; }}class Drawing extends Thread { Account account; int drawingMoney; int nowMoney; public Drawing(Account account, int drawingMoney, String name) { super(name); this.account = account; this.drawingMoney = drawingMoney; } // @Override // public synchronized void run() { // if(account.money-drawingMoney&lt;0) { // System.out.println(Thread.currentThread().getName()+\" Money is not enough!\"); // return; // } // try { // Thread.sleep(1000); // } catch (InterruptedException e) { // e.printStackTrace(); // } // // 卡内余额 // account.money = account.money - drawingMoney; // // 手里的现金 // nowMoney = nowMoney + drawingMoney; // System.out.println(account.name + \" balance is \"+account.money); // System.out.println(this.getName()+\"'s cash now is \"+nowMoney); // } @Override public void run() { synchronized (account) { if(account.money-drawingMoney&lt;0) { System.out.println(Thread.currentThread().getName()+\" Money is not enough!\"); return; } try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } account.money = account.money - drawingMoney; nowMoney = nowMoney + drawingMoney; System.out.println(account.name + \" balance is \"+account.money); System.out.println(this.getName()+\"'s cash now is \"+nowMoney); } }} 这里要注意了：同步块指定锁住的对象，可以锁住任何对象。如果用上面的方法将run方法上锁，锁住的是husband和wife对象，也就是有两把锁了（2个线程2把锁）。只能用下面的方法锁住变化的量，才有用。 List等常见数据集合是非安全的，JUC(java.util.concurrent包)中提供了CopyOnWriteArrayList等安全类型的集合。 9、锁9.1 死锁 多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形。某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283public class DeadLock { public static void main(String[] args) { Makeup girl1 = new Makeup(0, \"Marry\"); Makeup girl2 = new Makeup(1, \"Lisa\"); girl1.start(); girl2.start(); }}class Lipstick{}class Mirror {}class Makeup extends Thread { // 用static保证资源只有一份儿 private static Lipstick lipstick = new Lipstick(); private static Mirror mirror = new Mirror(); int choice; String name; // 化妆的人 public Makeup(int choice, String name) { this.choice = choice; this.name = name; } @Override public void run() { try { startMakeup(); } catch (InterruptedException e) { e.printStackTrace(); } } // 化妆，互相持有对方的锁，就是需要拿到对方的资源 // private void startMakeup() throws InterruptedException { // if (choice==0) { // synchronized (lipstick) { // 获得口红的锁 // System.out.println(this.name+\" got the lipstick!\"); // Thread.sleep(1000); // synchronized (mirror) { // 1秒钟后向获得镜子 // System.out.println(this.name+\" got the mirror!\"); // } // } // } else { // synchronized (mirror) { // System.out.println(this.name+\" got the mirror!\"); // Thread.sleep(1000); // synchronized (lipstick) { // System.out.println(this.name+\" got the lipstick!\"); // } // } // } // // 比如选择0时，只有当得到镜子后才会释放口红的锁，就会死锁 // } private void startMakeup() throws InterruptedException { if (choice==0) { synchronized (lipstick) { // 获得口红的锁 System.out.println(this.name+\" got the lipstick!\"); Thread.sleep(1000); } synchronized (mirror) { // 1秒钟后向获得镜子 System.out.println(this.name+\" got the mirror!\"); } } else { synchronized (mirror) { System.out.println(this.name+\" got the mirror!\"); Thread.sleep(1000); } synchronized (lipstick) { System.out.println(this.name+\" got the lipstick!\"); } } // 这样做就是当口红用完口红的锁就释放 }} 结合操作系统死锁产生的条件和避免死锁的方式。 9.2 Lock（锁） 从JDK5.0开始，Java提供了更强大的线程同步机制：通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当 java.utll.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问,毎次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象 ReentrantLock（可重入锁）类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是Reentrantlock，可以显式加锁、释放锁。 9.3 synchronized和Lock的对比 Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放 Lock只有代码块锁，synchronized有代码块锁和方法锁 使用Lock锁，JwM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类） 优先使用顺序：Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源） &gt; 同步方法（在方法体之外） 10、线程协作（线程通信） 在生产者消费者问题中，仅有synchronized是不够的 synchronized可阻止并发更新同一个共享资源，实现了同步 synchronized不能用来实现不同线程之间的消息传递（通信） Java提供了几个方法解决线程之间的通信问题 方法名 作用 wait() 表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁 wait(long timeout) 指定等待的毫秒数 notify() 唤醒一个处于等待状态的线程 notifyAll() 唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度 注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用否则会抛出异常IlegalMonitorState Exception 10.1 解决方式1：管程法并发协作模型“生产者/消费者模式”—&gt;管程法 生产者：负责生产数据的模块(可能是方法，对象，线程，进程) 消费者：负责处理数据的模块(可能是方法，对象，线程，进程) 缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区“ 生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106public class TestProductorCustomer { public static void main(String[] args) { Buffer buffer = new Buffer(); new Productor(buffer).start(); new Customer(buffer).start(); }}// 生产者class Productor extends Thread { // 需要一个容器 Buffer buffer; public Productor(Buffer buffer) { this.buffer = buffer; } // 生产 @Override public void run() { for (int i = 1; i &lt; 100; i++) { buffer.push(new Goods(i)); System.out.println(\"生产了第\"+i+\"个商品！\"); } }}// 消费者class Customer extends Thread { Buffer buffer; public Customer(Buffer buffer) { this.buffer = buffer; } // 消费 @Override public void run() { for (int i = 1; i &lt; 100; i++) { System.out.println(\"消费了第\" + buffer.pop().getID() + \"个商品！\"); } }}// 产品class Goods extends Thread { private int ID; public Goods(int id) { this.ID = id; } public int getID() { return ID; }}// 缓冲区class Buffer extends Thread { // 需要一个容器大小 Goods[] goods = new Goods[10]; int count=0; // 生产者放入产品 public synchronized void push(Goods good) { // 如果容器满了，就需要等待消费者消费 if(count==goods.length) { // 通知消费者消费，生产等待 try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // 如果没有满就需要放入产品 goods[count] = good; count++; // 可以通知消费者消费了 this.notifyAll(); } // 消费者消费产品 public synchronized Goods pop() { // 如果容器是否为空 if(count==0) { // 通知生产者生产，消费等待 try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // 如果可以消费 count--; Goods good = goods[count]; // 可以通知生产者生产了 this.notifyAll(); return good; }} 10.2 解决方式2：信号灯法就是长度为1的管程法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980public class ProductorCustomerUsingSignal { public static void main(String[] args) { Show show = new Show(); new Actor(show).start(); new Audience(show).start(); }}// 生产者演员class Actor extends Thread { private Show show; public Actor(Show show) { this.show = show; } @Override public void run() { for (int i = 0; i &lt; 20; i++) { if (i%2==0) { this.show.play(\"Happy Camp!\"); } else { this.show.play(\"TikTok!\"); } } }}// 消费者观众class Audience extends Thread { private Show show; public Audience(Show show) { this.show = show; } @Override public void run() { for (int i = 0; i &lt; 20; i++) { this.show.watch(); } }}// 资源节目class Show { // 演员表演，观众等待 T // 观众观看，演员等待 F private boolean flag = true; String display; // 表演的节目 // 表演 public synchronized void play(String display) { if (!flag) { try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"Actors show the \"+display); // 通知观众观看 this.notifyAll(); this.display = display; this.flag = !this.flag; } // 表演 public synchronized void watch() { if (flag) { try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"Audience watch the \"+display); // 通知演员表演 this.notifyAll(); this.flag = !this.flag; }} 11、线程池 背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。 思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具（共享单车）。 优势： 提高响应速度（减少了创建新线程的时间） 降低资源消耗（重复利用线程池中线程，不需要每次都创建） 便于线程管理（…） corePoolsize：核心池的大小 maximumPoolsize：最大线程数 keepAliveTime：线程没有任务时最多保持多长时间后会终止 123456789101112131415161718192021public class TestPool { public static void main(String[] args) { // 1.创建服务，创建线程池 ExecutorService executorService = Executors.newFixedThreadPool(10); executorService.execute(new PoolThread()); executorService.execute(new PoolThread()); executorService.execute(new PoolThread()); executorService.execute(new PoolThread()); // 2.关闭连接 executorService.shutdown(); }}class PoolThread implements Runnable { @Override public void run() { System.out.println(Thread.currentThread().getName()); }} JDK5.0起提供了线程池相关API：ExecutorService和Executors Executor Service：真正的线程池接口。常见子类 ThreadPoolExecutor void execute( Runnable command)：执行任务命令，没有返回值，一般用来执行 Runnable &lt;T&gt; Future&lt;T&gt; submit( Callable&lt;T&gt;task)：执行任务，有返回值，一般又来执行Callable（上面我们介绍Callable接口时测试过） void shutdown()：关闭连接池 Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池","link":"/Java/58846.html"},{"title":"高级操作系统","text":"课程目标 1、了解高级系统相关内容（主要包括网络OS与分布式系统的概念、特点、应用额体系结构与软硬件组成等）； 2、掌握单机操作系统设计实现原理（特别是常见的操作系统习题、试题的了理解和解答方法）。 1 Distributed Systems1.1 Definition一个分布式系统是：独立计算机的集合，对用户而言，它们看起来像是一个统一的系统。 尚不存在一致性的定义，普遍接受的定义是： 分布式系统是若干台独立计算机的一种联合体，对用户而言，这个联合体就是一台单独的计算机。 在这个定义中，前半句说明是对计算机硬件的要求，后半句是对计算机软件的要求，这两项都是对分布式系统的基本的要求。 另一个角度： 分布式系统是这样一个系统，它运行在不具有共享内存的多台计算机上，但在用户眼里它却像是一台计算机。 实质思想：用户不必去关心系统中的多台计算机的存在。 尽管目前不存在完全满足该条件的系统，但已经有一些原型出现。 1234567891011Machine A Machine B Machine C---------- ---------- ----------| | | | | || Distributed Application 分布式应用程序 || | | | | || Middleware Service 中间件服务 || | | | | ||Local OS| |Local OS| |Local OS|---------- ---------- ---------- | | |-----------------------------------------------------------Network 中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。 组织为中间件的分布式系统。请注意，中间件层覆盖了多台计算机。 1.2 分布式系统的特点1.2.1 资源共享 Resource Sharing 硬件资源共享：专用设备共享 =》 处理资源共享 =》 负载共享与负载均衡 信息资源共享：如：电子商务应用共享同一数据对象，协同工作组共享同一数据空间 软件资源共享：软件开发组共享同一开发工具，同一类应用任务调用同一处理软件 资源异构、分布 =》 资源命名方案、分布资源管理模型、策略与机制是要解决的重点 互联网络环境 =》 计算机资源共享和多媒体信息资源共享成为研究和开发的热点 1.2.2 透明性 Transparency 透明性的基本概念和内容 机器边界、网络细节和系统状态对用户和应用程序员呈不可见性。多计算机环境 =》 单机环境。例如用户不必知道数据存在何处，进程在何处运行。 优点 软件易于研制；资源变动，软件影响小； 易于实现资源冗余；有利于资源操作移动 实现难点 大多数分布计算机系统固有的异构性增加了透明性实现的难度。 硬件异构性：指令系统不同、数据表示不同。系统配置不同 软件异构性：操作系统不同、网络协议不同 局部自治性限制全局透明性 Transparency Description Access 访问 隐藏数据表示形式和资源访问方式的差异 Location 隐藏资源所在的位置 Migration 转移 隐藏资源可能会移动到另一个位置 Relocation 重定位 隐藏资源在使用中可能会移动到另一个位置 Replication 复写 隐瞒资源可以通过多个副本进行部署和分发 Concurrency 隐瞒资源可能会由几个竞争用户共享 Failure 隐藏资源的故障和恢复 Persistence 隐藏（软件）资源是在内存中还是在磁盘上 分布式系统透明性的不同形式。 1.3 开放性 Openess 是指系统以各种方式进行扩展的能力。核心是要求不同厂家的系统（软硬件）具有互操作性（Interoperability）和可移植性（Portability） 互操作性：不同厂家的系统可有效地相互交换信息 可移植性：在较大范围的平台上运行同一软件的功能 UNIX是一个优秀的开放式软件系统：开放式结构、源代码可用、硬件无关性；TCP/IP协议是另一个开放式系统的例子 标准化是实现开放性的基本保证 标准是已被广泛接受的一种特定实现方法或功能集（接口）。 开房放概念是一种思想、设计观点、系统特征。因此，标准并不意味着是最好的、并不总是绝对需要的（尤其是在早期）、不是一成不变的。 国际标准化组织ISO。 1.4 延展性 Scalability延展性的制约： Concept Example Centralized services 集中服务 一台适用于所有用户的服务器 Centralized data 集中数据 一本在线电话簿 Centralized algorithms 集中式算法 根据完整信息进行路由 Scaling Techniques 1.5 容错性 Fault Tolerance基本概念 系统部分失效是能继续发挥作用的能力。如某个网络节点故障而不影响网络系统正常行为。 分布计算系统的资源多重性为实现容错创造条件：硬件资源冗余、数据多副本、动态切换。 系统容错是提高系统可靠性的重要途径。可靠性描述了系统成功运行的寿命特性。 容错性是分布计算应用的强烈需求：国防应用系统，电子商务应用的电子支付系统。","link":"/OS/9607e8ba.html"},{"title":"处理机调度与进程死锁","text":"处理机调度与进程死锁笔记整理 处理机调度1 调度类型 1.1 三类调度 长程调度——作业调度 决定哪个作业可以进入系统 中程调度——内存调度 决定将哪个（些）进程调入内存 ​ 换入：取决于管理系统并发度的需求； ​ 换出：进程的存储需求。 短程调度——进程调度 决定哪个进程将获得CPU 长程调度程序执行频率较低； 中程调度程序执行频率稍高； 短程调度程序执行频率最高。 1.2 调度的时机和策略 何时调度？ 有任务终止时 处理器的空闲时 终端用户登录时 有更紧急任务到达时 调度哪个？ 先来先服务 优先级 实时性 服务时间 I/O需求 1.3 调度算法的评价准则1.3.1 面向用户，与性能相关 周转时间 从提交到完成之间的时间间隔 响应时间 从提交到开始接收响应之间的时间间隔 截止期限 进程完成的最后期限 1.3.2 面向用户，与性能无关 可预测性 希望提供给用户的服务能够随着时间的流逝展现给用户一贯相同的特性，而与系统执行的其他工作无关。 1.3.3 面向系统，与性能相关 吞吐量 单位时间内完成的进程数目 处理器利用率 处理器处于忙的状态的时间百分比 1.3.4 面向系统，与性能无关 公平性 进程被公平对待 强制优先级 进程被指定优先级，调度策略优先选择高优先级进程 平衡资源 保持系统中所有资源处于繁忙状态，较少适用紧缺资源的进程应该受到照顾 1.4 调度模式 抢占（剥夺）——对有实时性或响应时间要求的任务，必须采用抢占式调度 非抢占（非剥夺）——对没有响应时间要求的任务，可采用非抢占式调度 1.5 优先级的使用 每个进程被指定一个优先级，调度程序总是选择具有较高优先级的进程。 纯粹的优先级调度方案可能会导致第优先级进程长时间处于饥饿状态 一个进程的优先级可随着它的时间或执行历史而变化 2 调度算法2.1 几种常用调度算法的比较 算法 FCFS(先来先服务) RR(轮转) SPN(最短进程优先) SRT(最短剩余时间) HRRN(最高响应比优先) 优先级高者优先 反馈法多队里 选择依据 max((w+s)/s) 调度方式 非抢占式 抢占式（按时间片） 非抢占式 抢占式（进程到达时） 非抢占式 抢占式（时间片） 响应时间 可能很高 对于短进程提供良好的响应时间 提供较好的响应时间 提供较好的响应时间 不突出 开销 最小 低 可能高 可能高 可能高 可能高 对进程的作用 不利于短作业（进程）和I/O繁忙作业 公平对待 不利于长作业（进程） 不利于长作业（进程） 较好均衡个 偏爱I/O繁忙型进程 “饥饿”问题 无 无 可能 可能 无 可能 2.2 补充2.2.1 HRRN 公式：R=(w+s)/s，其中： R：响应比 w：等待处理器的时间 预计的服务时间 2.2.2 优先级高者优先 约定：数小代表优先级高 2.2.3 传统的UNIX调度 多级反馈 每个优先级队列中使用轮转方法 使用1秒抢占方式 每秒都会重新计算每个进程的优先级 2.3 线程调度 负载分配 系统维护一个就绪线程的全局队列，每个处理器只要空闲就从队列中选择一个线程。 组调度 一组相关的线程基于一对一的原则，同时调度到一组处理器上运行。 专用处理器调度 组调度的一种极端形式，在一个应用程序执行期间，把一组处理器专门分配给这个应用程序。 动态调度 某些应用程序允许动态地改变进程中线程数目，需要动态调度。操作系统负责分配处理器给作业，作业自行调度。 3 多机系统与实时系统调度3.1实时调度 实时计算 系统的正确性不仅取决于计算的逻辑结果，还依赖于产生结果的时间。 实时任务 硬实时任务、软实时任务 周期性任务、非周期性任务 实时系统应用的例子 目前：实验控制、过程控制、机器人、空中交通管制、电信、军事指挥与控制系统。 下一代：自动驾驶汽车、具有弹性关节的机器人控制器、智能化生产中系统查找、空间站和海底勘探。 3.2 实时操作系统的特点 可确定性 按照固定的、预先确定的时间或时间间隔执行操作。 可响应性 为中断提供服务时间。 用户控制 允许用户细粒度地控制任务优先级，指定一些特性等。 可靠性 性能的损失或降低可能产生灾难性的后果。 故障弱化操作 系统在故障时尽可能多地保存其性能和数据的能力。 3.3 实时系统调度的特征 快速的进程或线程切换。 体积小（只具备最小限度的功能）。 迅速响应外部中断的能力。 通过诸多信号量、信号和时间之类的进程间通信工具，实现多任务处理。 使用特殊的顺序文件，可以快速存储数据。 基于优先级的抢占式调度。 最小化禁止中断的时间间隔。 用于使任务延迟一段固定的时间或暂停/恢复任务的原语。 特别的警报和超时设定。 3.4 实时系统调度算法 静态表法 执行关于可行调度的静态分析。分析的结果是一个调度，它用于确定在运行时一个任务何时必须开始执行。 静态优先级抢占法 执行一个静态分析，但是没有制定调度，通过给任务制定优先级，使用传统的基于优先级的抢占式调度。 基于动态规划调度法 在运行时动态地确定可行性，可行性分析的结果是一个调度或规划，可用于确定何时分派这个任务。 动态尽力调度法 不执行可行性分析。系统试图满足所有的最后期限，并终止任何已经开始运行但错过最后期限的进程。 3.5 截止时间调度 实时应用程序通常并不关注绝对速度，它关注的是在最有价值的时间完成（或启动）任务。 截止时间调度：最早最后截止时间优先。 最后期限 开始截止时间：任务必须开始的时间。 完成截止时间：任务必须完成的时间。 3.6 优先级反转 在任何优先级调度方案中，系统应该不停地执行具有最高优先级的任务。当系统内的环境迫使一个较高优先级的任务去等待一个较低优先级的任务时，优先级反转就会发生。 优先级：T_1>T_2>T_3，高优先级的T_1被低优先级的T_2占先。 解决方案：优先级继承。 进程死锁1 死锁存在的条件 互斥 无抢占 保持并等待 循环等待","link":"/OS/ad51e977.html"},{"title":"高级操作系统","text":"文件系统 课堂笔记 1.文件与文件系统文件：具有符号名的一组相关元素的集合。 通常，文件由记录组成，记录用于描述对象的属性，记录又可包含若干个数据项。 文件系统是OS中管理文件的子系统，它实现文件的存储、检索、更新、共享和保护等，并为用户提供方便有效的文件使用和操作方法。 1.1 文件系统的功能 文件的按名存取 文件目录建立和维护 实现逻辑文件到物理文件的转换 文件存储空间的分配和管理 提供合适的文件存取方法 实现文件的共享、保护和保密 提供一组可供用户使用的文件操作 1.2 文件系统的优点使用方便：由于文件系统实现了案名存取，因而用户无需关心文件存放的物理位置数据安全：文件系统可以提供各种保护措施，防止用户对文件有意或无意的破坏接口统一：用户可以使用统一的接口来操作各种介质上的文件 1.3 文件系统的分层结构 文件管理—实现文件的逻辑结构，为用户提供各种文件系统调用，及种文件系统调用，及文件访问权限的设置等工作； 目录管理—负责查找文件描述符，进而找到需要访问的文件，及进行访问权限检查等工作; 外存映射管理—将文件的逻辑地址转换成磁盘的物理地址，即由逻辑块号找到柱面号、磁道号和扇区号，具体的数据传输操作由设备管理实现。 1.4 文件的存取存取方法是操作系统为用户程序提供的使用文件的技术和手段。 存取方法（决定和影响着文件的物理结构） ​ -顺序存取：若当前存取的记录是Ri，则下次必存取Ri+1 ​ -直接（随机）存取 ​ -索引存取 ​ -按（键）值存取 1.5 文件的操作对记录的操作：检索、插入、删除、修改 对文件的操作：创建文件、删除文件、打开文件、关闭文件、读文件、写文件 2 文件目录与文件检索 通过文件目录实现文件的“按名存取”； 文件系统基本功能之一是负责文件目录的建立、维护和检索。 存放管理文件所需信息的数据结构即文件目录，一个文件的文件目录即其目录项又称文件控制块FCB（File Control Block）： -文件和文件控制块是一一对应的； -FCB通常包括：文件名、用户名、类型、文件结构、建立日期、存取权限、物理地址等 2.1 文件目录与目录项目录文件：把FCB集中起来，组成文件，保存于外存，这个文件称作目录文件 文件检索：给定一个文件名，查找相应的目录文件找到该文件所对应的目录项 2.1.1 单级目录整个系统只有一张目录表，所有文件均登记在该表中，每个文件占有一项。 目录表存放在存储设备的固定地方，系统启动时调用内存。 单级目录的优点是非常简单，但： ​ -不允许重名 ​ -查找速度慢 2.1.2 二级目录 系统设置唯一一个主文件目录MFD（Master File Directiry）。 每个用户设立一个用户文件目录UFD（User）。UFD由该用户所有文件的FCB构成。 每个UFD在MFD中占有一个目录项，其中包括用户名和指向该用户文件的指针。 优点： ​ -提高了查找速度​ -解决了重名问题 2.1.3 多级目录 树形目录结构，最高层是根目录，最低层是数据文件，其他是目录文件。 2.1.4 层级目录结构 每一级目录即可以包含下一级目录(即目录文件的目录项)，也可以包含具体文件(即具体文件的目录项)，形成层次关系。 多级目录结构采用树形结构，是一棵倒向有根树，树根是根目录；从根向下，每个树枝是一个子目录；而树叶是文件。 树型多级目录优点：组织灵活、便于命名、检索高效。 2.1.5 UNIX/Linux目录项文件名 inode节点号14字节 2字节0号目录项和索引节点 思考：UNIX使用i-node的好处是什么? ➢因为按文件名检索目录文件时，只用到了文件名。当找到该文件名时，才需要它的其它描述信息。所以在把存放该目录文件的盘块从外存调入内存进行比较时，应使一个盘块中包含尽量多的文件名，以减少访问磁盘次数，加快文件检索速度。 例:设物理块大小为512B,某目录下有128个文件。 原来的FCB占64B，则每物理块能容纳512/64=8个FCB，则该目录文件需占128/8= 16块，查找一个文件的平均访盘次数为:(1+16) /2= 8.5次。 采用i-node后:文件名部分有16B，i-node部 分有64B，每物理块能容纳512/16=32个文件名部分或512/64=8个i-node，则该目录的文件名部分需占128/32=4块，i-node部分需占128/8=16块。查找一个文件的平均访盘次数为:(1+4)/2+1=3.5次。 3 文件逻辑结构与数据存储 文件的逻辑结构：用户所看到的文件结构 -记录式文件，文件由若干记录所构成 -流式文件，文件由若干字符（字节）序列构成 文件的物理结构：文件在外存的存放形式 -顺序文件:逻辑文件中的信息顺序地存放在相邻的物理块中 -链接文件:文件中的信息不是顺序排列的，它们可以存放在不相邻的物理块中，通过指针连接成链表索引文件:为每一文件建立一个索引表，用以实现逻辑记录和物理块号之间的映射 3.1 文件结构与文件存储物理块是存储介质上连续信息所组成的一个区域。 块是主存储器和辅助存储设备信息交换的物理单位，每次交换一块或整块数。 决定块的大小要考虑到用户使用方式、数据传输效率和存储设备类型等多种因素。 不同类型的存储介质，块的大小常常各不相同；同一类型的存储介质，块的大小也可以不同。 间隙是块之间不记录用户代码信息的空闲区城。 3.2 文件的逻辑结构文件的逻辑结构是用户所见的信息组织方式。 文件的逻辑结构分为：流式文件，记录式文件。 流式文件指文件内的数据不再组成记录，只是依次的一串信息(字节)集合。 流式文件常按字节数来读取所需信息，也可用插入特殊字符作为分界。 记录式文件由逻辑记录组成，逻辑记录具有特定的逻辑含意。 3.3 记录组块和分解逻辑记录和块的关系： 逻辑记录是按信息的逻辑含义所划分的单位，块是存储介质上连续的存储区域。 逻辑记录存放到文件存储器上时，一个记录可能占用一块或多块，也可能多个存放到一个物理块中。 记录组块—将多个记录置于一个存储块中。 记录分解—从存储块中分解出逻辑记录。 块因子—一个存储块中包含多少个记录。 3.4 记录组块3.4.1 需考虑的问题： 块的长度是固定的还是可变的? ​ -大多数系统中，块的固定长度的的。 与记录的平均大小相比，块的相对大小是多少？ ​ -综合考虑顺序访问的频率和访问的局部性潜能，倾向于用大的块，以减少I/O传送时间。 3.4.2 记录组块的方法固定组块 可变长度跨越式组块 可变长度非跨越式组块 4.文件存储器管理4.1 空闲盘块管理-》磁盘分配表 -》常用的空闲空间管理技术 ​ -位示图 ​ -空闲块列表 ​ -空闲区链表 ​ -空闲块索引 -》文件卷 ​ -一组在辅助存储上可寻址的扇区的集合，操作系统或应用程序用卷来存储数据。一个卷中的扇区在物理上并不需要是连续的，只需要对操作系统或应用程序来讲是连续的。一个卷可能是更小的卷合并或组合后的结果。 4.2文件存储空间管理4.2.1 预分配与动态分配 预分配策略要求在发出创建文件的请求时，声明该文件的最大大小。 ​ -若不能可靠地估计文件可能的最大大小，通常会多估计一些，以避免分配的空间不够。—浪费 动态分配只有在需要时才给文件分配空间。 ​ -当创建一个新文件时，是否一次性地分配所需要的最大空间？ 预分配与动态分配 ​ -在分配时，采用什么分配策略? ​ a.可变大小的连续分区(类似分区式) ​ b.大小相等但不连续的块(类似页式) ​ c.采用什么数据结构记录分配给文件的空间?—文件分配表 4.2.2 分配策略 文件分配时，需要综合考虑单个文件的效率和整个系统的效率 ​ -连续空间可以提高磁盘访问性能； ​ -使用可变大小的分区，可以减少由于超额分配而产生的未使用存储空间的派费； ​ -使用固定大小的分区可以简化空间的再分配； ​ -数目较多的小分区会增加用于管理分配信息表的大小。 综合考虑的两种选择: ​ -可变大小的连续分区 ​ a.大小可变避免了浪費，文件分配表比较小 ​ b.空间很难再次利用 ​ -大小相等但不连续的块 ​ a.小的固定分区提供了更多的灵活性 ​ b.可能需要较大的文件分配表或更复杂的结构 5.文件的物理结构文件的物理结构是指文件在物理存储空间中存放(分配)的形式，亦称为文件的物理组织。 文件的物理结构涉及：块的划分、记录的排列索引的组织、信息的搜索，其优劣直接影响文件系统的性能。 文件的物理结构：顺序文件、链式文件、索引文件、直接文件 5.1 顺序文件（连续文件） 将一个文件存放到文件存储器连续的物理块中，便形成了顺序文件。 顺序文件中逻辑记录和物理记录顺序完全一致。通常记录按次序被读出或修改。 顺序文件的优点/缺点：读写高效/改变大小困难，磁盘碎片问题。File Allocation Table 5.2 链式文件（串联文件） 链式文件通过链指针将存放文件内容的各物理块联系起来 连接结构的优/缺点：文件读写效率低/易于扩展，不存在磁盘碎片问题 5.3 直接文件（哈希文件） 通过hash函数在记录的关键字与其存储地址之间建立关系，据此实现存取即称为直接文件。 文件控制块 5.4 索引文件（链式文件的高效实现，现在几乎都采用）索引结构是实现非连续存储的另一种方法，适用于数据记录保存有随机存取存储设备上的文件。 使用索引表，其中登记了存放文件的物理块。 如果块长4KB (即索引块和数据块长4K)，每个指针(盘块号) 4B，则采用这种索引分配时，允许的文件最大尺寸是多少? 直接地址: 10 * 4KB= 40KB 一级索引: 4KB * (4KB/4B) = 4MB 二级索引: 4KB * (4KB/4B)^2= 4GB 三级索引: 4KB * (4KB/4B)^3 = 4TB 合计大小: 40KB+4MB+4GB+4TB 6.文件共享与保护 访问权限 ​ -无 ​ -知道 ​ -执行 ​ -读 ​ -追加 ​ -更新 ​ -改变保护 ​ -删除 同时访问 ​ -加锁 ​ -互斥和死锁问题 6.1 文件共享6.1.1 基于目录指针实现文件共享允许一个文件可以有多个父目录，即有多个属于不同用户的目录，同时指向同一个文件，即可实现文件共享(但这会破坏树的特性一多个父节点! ) 6.1.2 利用索引节点利用索引结点，存放文件的物理地址、文件属性和文件共享与保护相关信息，而不同用户在其文件目录中设置共性文件的别名及指向相应索引结点的指针。 6.1.3 利用符号链实现共享由操作系统为被共享文件的创建一个LINK类型的文件(即该共享文件的路径名，称为符号链)，用户通过在自己的文件目录中包含指向该符号链文件的方法实现文件共享。 6.2 文件保护利用符号链实现共享的优缺点 优点：只有文件主才拥有指向其索引结点的指针，而其他共享用户则只有该文件的路径名，因此不会因文件主删除一个共享 文件后留下悬空指针的问题。共享者通过符号链访问一个已被删除的共享文件将会访问失败时，则删除符号链。 缺点：用户访问共享文件时，系统是根据给定的文件路径名逐个分量(名)去查找目录，直至找到该文件的索引结点。因此，可能要多次读盘，开销大。此外，要为每个共享用户建立一条符号链，而由于链本身实际上是一个文件，也要为它分配索引结点，这也要耗费磁盘空间。 文件保护用于防止文件被破坏。包括两个方面: ​ 一是防止系统崩溃所造成的文件破坏; ​ 二是防止文件主和其他用户有意或无意的非法操作所造成的文件不安全性。 防止系统崩溃造成文件破坏的方法: ​ ➢定时转储 ​ ➢多副本 防止非法操作的方法:基本思想是建立三元组: (用户、 对象、存取权限)—访问控制 访问矩阵 ​ -主体 ​ -对象 访问权限 6.3 UNIX文件保护 UNIX/Linux把用户分为3类：文件主、同组用户、其他用户 定义3种存取权限：可读r、可写w、可执行x。文件属性共有10位： ​ -rwxrwxrwx","link":"/OS/9607e8ba.html"},{"title":"英语积累","text":"考查目标： 考研时期真题词汇和作文积累。 并且以后的英语积累也会记到这里。 以我考的英语二为基础 积累1.词汇量 真题词汇集锦 2020年 （完形）tedious 单调乏味的 instructive 增长知识的，富有教益的 harsh 严厉的，残酷的 vague 含糊的，粗略的 fatigue 疲乏，疲劳 confront 面对遭遇 trying 令人厌烦的 （Text1）asocial 不合群的 trait 特点 perceive 认为，感觉 reciprocal 互惠的，相应的 readiness 乐意 （Text2）rigorous 谨慎的，严格的 justified 有充分理由的，合理地 （Text3）yet 用于否定 Its fate is yet to be decided. 它的命运尚未确定。 deem 认为，视为 vulunerable 易受攻击的 2019年 （完形）obsess 使痴迷 solely 仅仅，只 depict v.描写 depiction n.描写 aside from 除…以外 rigid 严格死板的，（人）不通融的 conceal 隐藏 hold onto 抓紧，保存 account for 解释，了解，查明 confirm 证实，确认 triumph 战胜，获胜 fluctuation 波动，起伏 zeal 热情 （Text1）appease 安抚 guilt still gets a bad rap 内疚感可不是件好事 deceptive 欺骗性的 addictive 使人上瘾的 inexcusable 不可原谅的 rein 控制 nasty 极差的 nastier impulses 恶意冲动 vice versa 反之亦然 rate v.评估 n.速率 （Text2）count on 依赖，指望 soak up 吸收 consume 消耗，烧毁 be accustomed to sth 习惯于 （Text3）obstruct 阻碍 no numerical cap 没有数量限制 implausible 不合理的 plausible 可信的 cumbersome 缓慢冗长的 slow granting procedures 签发过程缓慢 curb 抑制 aggressive 激进的 2018年 utterly 完全的，绝对的 insidious 潜伏的 inferiority 劣势，低等 evaporate 蒸发，消失 asset 资产 physical assets 有形资产 astonishing 令人惊讶 intricate 错综复杂 2017年 bidder 投标者 dual 双重的 wordy 话多的，冗长的 tricky 狡猾的，棘手的 compensation 补偿 scarce 不足的，稀少的 2012年 ritual 惯例，礼节，仪式的 revise 修改，校订 scorn 蔑视 it has been particularly scorned 饱受诟病 mandate 强制执行，委托书 inflexible 僵化的 undermine 削弱 restrict 限制 impoverish 使贫穷 impoverished 贫乏的 chaotic 混乱的 faulty 不完美的，错误的 thorny 棘手的 empower 授权 2.句子 小作文集锦 Forbidden City is a great magnet for foreign tourists. The hope of living a better life is his impetus to study. I’ve come to the conclusion that … take the initiative to do 积极主动做某事 of even greater concern is the fact that … 更加需要关注的是 It is far better to do 远不如做某事，最好做某事？ In short 简言之 As sb notes, … 正如某人所指出 exert onself to do sth 努力做某事 in this hour of need 紧要关头 hold temporary jobs 兼职 jumped markedlly 很大，急剧地，显著地 图表作文 address 处理，应对 supply 供应 pose 引起，产生 decelerate 减速 图表作文:This argument has attracted a lot of attention. 这一观点已受到广泛关注。This phenomenon can be attributed to the following reasons. 之所以出现这种现象，原因可能有以下几点。However, this encouraging sign also presents challenges, like how to address the supply deficientcy posed by decelerated growth of museums and people’s increasingly diverse need for exhibitions. 如何应对博物馆增长放缓带来的供不应求问题以及人们日益多样化的观展需求问题等。 小作文范文1.范文一 Dear Li Ming, I’d like to congratulate you for winning the fierce competition for admission to a prestigious university. This success means that you have acquired extraoridinary learning capacity and if this capacity can be further developed in university, you will be competent to build your career. However, I must also warn you that the approaching university life is different to you previous school life. You should make adjustment for it. That is, you should mentally and practically prepare to be indepent and learn not for examination but for your life purpose. I wish you could learn to manage life and study by yourself in the following four years. Sincerely yours, Zhang Wei 范文赏析： 短语部分 fierce competition 激烈竞争 admission 入场费 prestigious university 名校 prestigious 声誉高的，有威望的 extraordinary learning capacity 卓越的学习能力 previous school life be competent to build your career 有能力创造一番事业 mentally 心理方面 make adjustment for it 做出调整 practically 实际层面 it counts much in schooling 对教学重要 长句部分：learn not for examination but for your life purpose 不是为考试学习，而是为自己的人生目标学习。 2.范文二（2020小作文） Dear Friends, I’m so delighted that you trust me to arrange your trip. I’m writing to inform you of the historical attraction to visit the Terracotta. Army, one of the greastest archaeological discoveries of all time and share some travel trips. Located to the east of downtown Xi’an, the Terracotta Army is a massive collection of life-size clay warriors and horses buried in the tomb of China’s First Emperor. It offers a fascinating glimpse into the country’s glorious past. To get a better view of these breathtaking sculpture, you may consider avoiding public holidays in China or setting out early if you have to visit the mesume on those days. In addition, it’s also advisable to rent a multilingual audio guide at the ticket office, which will certainly make your trip informative. Hope this trip suits your taste and that you all enjoy it. Yours sincerely, Li Ming 范文赏析： 短语部分 be so delighted that … arrange your trip Terracotta 兵马俑 the greatest archaeological discoveries 最伟大的考古发现 大作文范文1.范文一 ​ China’s auto market was still dominated by Japanese, Chinese and American brands. American cars remained the third most popular int the market with a slight increase in market share. A noticeable change occurred concerning Japanese and Chinese brands. With its market share slipping by almost 10%, Japanese brands were displaced from their leading position by Chinese brands which expanded their share by around 10%.​ The performance of American brand cars is to be expexted, given their worldwide fame and reliable quality. The big change in the performance of Japanese and Chinese brands seems sudden but is not unexpected. Chinese auto producers had narrowed the technology gap between themselves and foreign competitors, and cleverly switched their promotion strategies to satisfy Chinese customers’ appetite for a bargin. While Chinese brands were growing, Japanese brands were hit by a reputation crisis caused by frequent quality compliants.​ The plight of Japanese brands is a reminder that quality is the soul of products. Hopefully, Chinese automakers will consistently guarantee high quality, thereby protecting their own reputation so as to maintain market popularity. 范文赏析： 短语部分 auto 汽车 was still dominated by Japanese 被控制，被占据 remained the third most popular a slight increase share 股份，份额 noticeable 显著的 slipping 下降 but is not unexpected 也在预料之中 expanded 扩大，增加 narrowed the technology gap 缩小了技术差距 plight 困境，苦难 thereby 从而 长句部分： were displaced from their leading position 主导地位被取代 The performance of American brand cars is to be expexted, given their worldwide fame and reliable quality. 鉴于美国品牌汽车的世界声誉和可信赖的质量，其表现预料之中。 and cleverly switched their promotion strategies to satisfy Chinese customers’ appetite for a bargin. 并聪明地改变了其推广策略一满足中国消费者对便宜商品的喜好。 Japanese brands were hit by a reputation crisis caused by frequent quality compliants. 日本品牌因频繁的质量投诉遭到信誉危机的打击。 The plight of Japanese brands is a reminder that quality is the soul of products. 日本品牌的困境提醒一个事实，质量是产品的灵魂。 Chinese automakers will consistently guarantee high quality, 希望中国汽车制造商能一贯保证好的质量 2.范文二 ​ Employees aged above 50 years were most likely to report satisfaction, with 40% of them indicating they were content. Employees aged 40 years or younger were less willing to declare satisfaction. Employees aged between 41 and 50 were surely the unhappiest; none of them felt satisfied and the proportion of respondents reporting dissatisfaction was as high as 64%.​ The significant different in job satisfaction relates to employees’ career situation. Employees aged between 41 and 50, less energetic than younger crowd and less competent than older professionals, reach a career plateau, showing deep job dissatisfaction. In contrast, younger colleages, in spite of occasional confusion, are mostly in an upward spiral, and understandably feel happier. As for older colleagues, many of them have achieved career maturity and their careers are going to be crowned with a relaxing retirement life. Not surprisingly, they are the happiest.​ Career trouble may afflict people at all ages. For lasting happiness with our jobs, positive attitude is necessary. 范文赏析： 短语部分 aged above 50 years 定语 they were content proportion 比例 as high as as…as 句型 significant difference In contrast 比较而言 inspite of occasional confusion 不管（除了）偶尔感到困惑 in an upward spiral understandably 正常地 career maturity 职业成熟 be crowned with 获得，被冠以 Not surprisinly afflict 困扰，困惑 123456789长句部分：were less willing to declare satisfaction 更不愿意宣称对工作满意were surely the unhappiestless competent than older professionalsreach a career plateau 进入职场高原（停滞不前的局面） 专业英语1.词汇量 20ns(20 nanoseconds) 20纳秒 sensor 传感器 subcarrier 副载波，子信道 hybrid 混合的；混合物 intensity 强度 adopt 收养，采用(某方法)，采取(某态度) modulation [ˌmɒdjʊˈleɪʃən] 调制 exponentiate 指数 Weibull 韦布尔分布 turbulence 湍流 channel 通道，信道 postdoctoral 博士后 robust 强健的 dynamics 动力学 1234567长句部分：data-driven predictive reduced-order-modeling 数据驱动的预测降序建模computational turbulence 计算湍流Robust and Interpretable Learning for Operator-Theoretic Modeling of Non-linear Dynamics非线性动力学算子理论建模的鲁棒性和可解释性学习","link":"/Study/45733.html"},{"title":"毕业设计","text":"毕设相关 Netty介绍和应用场景入门介绍Netty编程涉及技术有：Java多线程编程、Java IO编程、Java网络编程、常用的Java设计模式（例如观察者模式、命令模式、职责模式）、常用的数据结构（例如链表） Netty是由 JBOSS提供的一个Java开源框架，现为 Github上的独立项目。 Netty是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络IO程序。 Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者P2P场景下的大量数据持续传输的应用。 Netty本质是一个NIO框架，适用于服务器通讯相关的多种应用场景。 层次关系：TCP/IP —&gt; 原生的JDK，Java IO编程和网络编程 —&gt; NIO —&gt; Netty 应用场景 互联网行业：分布式系统，节点远程服务调用，高性能的RFC框架将Netty作为基础通信组件。RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务。阿里的分布式服务框架Dubbo协议默认使用Netty框架。 游戏行业：手机端游和网络游戏，Netty提供TCP/UDP和HTTP协议栈，方便定制和开发私有协议栈，账号登录等。 大数据领域：经典的Hadoop的高性能通信和序列化组件Avro的RFC框架，默认采用Netty进行跨界点通信，其Netty Service基于Netty框架二次封装。 使用到Netty的开源框架。 Java BIO编程I/O模型 I/O模型简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。 Java共支持3种网络编程模型I/O模式：BIO、NIO、AIO。 Java BIO：同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。 模式：服务器每建立一个与客户端的连接，就要开启一个单独的线程负责与这个客户端的读写操作。 Java NIO：同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器（Selector）上，多路复用器轮询到连接有I/O请求就进行处理。 模式：服务器开启多个线程，每个线程对应一个Selector，每个Selector连接多个客户端。 Java AIO（NIO.2）：异步非阻塞，AIO引入异步通道的概念，釆用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。 粒度控制粒度上通常称为粗粒度和细粒度，粒度控制主要指的是在系统设计的过程中如何根据需求去控制设计的范围。粒度的把握是软件设计的关键。 例如，软件市场上有许多不同软件可以实现相同的功能，但在各自粒度的控制上或者说达到的程度上都是不同的，其在性能、伸缩性以及友好性都有所不同，用户会根据自己的喜好，适用等原因选择自己喜欢的那款软件。 开发人员就是提供客户需要的东西，客户当然希望用最少的钱得到最适用的软件，但作为开发者，当然希望利润越高越好，这就需要减少开发成本，缩短进度。卖方和买方本来就是一对矛盾体，可以说双方为了共同的利益需要寻找到一个平衡点，这就是软件的粒度控制，也许这个名词不好理解，也可以叫做范围控制，在进行系统设计时，同样也是如此。要做到的是控制在满足需求以及将来变化的范围内的粒度的系统设计是最完美的。做技术的往往在很多时候更偏向追求技术的完美、先进等等，但客户并不会关心那么的多，这个时候需要通过控制粒度来决定是否需要采用复杂具有难度的技术，技术的先进必然就带来了技术的难度、风险。 所以对于“开发基于粒度控制的FTP代理”的理解就是，根据自己对于FTP代理的理解和研究深度，进行开发即可。 Tipseclipse下查找某个接口、类的源码的快捷键：ctrl + shift + t eclipse查看某接口、类的所有子类：ctrl + t","link":"/Study/4e025b73.html"},{"title":"数据结构课程复习","text":"考查目标： 理解数椐结构的基本概念、掌握数椐的逻辑结构、存储结构及其差异，以及各种基本操作的实现。 掌握基本的数据处理原理和方法，在此基础上能够对算法进行设计与分析。 能够选择合适的数椐结构和方法进行问题求解。 以西北工业大学801计算机专业基础为考纲 零、绪论0.1 基本概念0.1.1 逻辑结构分类 分类 线性存储结构 非线性存储结构 特点 数据元素有序集合，“一对一” “一对多” 举例 线性表 图形、网状、树形结构 有序表和无序表是逻辑上有序无序，是逻辑结构。栈、队列也是逻辑结构。 0.1.2 存储结构分类存储结构也称物理结构：是数据逻辑结构在计算机中的表示（映像）。包括数据元素的表示和关系的表示。 数据元素之间的表示方法分为顺序映像和非顺序映像？ 常用的存储结构：顺序存储、链式存储、索引存储、散列存储（散列是一种算法）。（存储结构的是：环形队列、散列表、单链表、顺序表。） 顺序表、哈希表、单链表都是存储结构。 线索树是链式存储结构上的基础上对树进行线索； 双向链表是线性表以链式存储结构存储； 循环队列是建立在顺序存储结构上的； 栈是逻辑结构，顺序栈和链栈是存储结构。 栈和队列是特殊的线性表，线性表的存储结构为：顺序表和链表。对应的栈为顺序栈和链栈；队为顺序队和链队。 0.2 算法及其分析 算法的时间复杂度： 问题规模：输入量的多少 算法时间分析的就是求出算法所有原子操作的执行次数（频度），它是问题规模n的函数，用T(n)表示。 原子操作的个数m，算法执行时间t=m\\times T(n). 12345for(int i=0; i&lt;n; i++){ // 频度n+1，执行次数n for(int j=0; j&lt;n; j++){ // 频度n(n+1)，执行次数n^2 // 语句s // 频度1*n^1，执行次数n^2 }} T(n)=n+1+n*(n+1)+n^2=2n^2+2n+1$$，用数量级表示，$$T(n)=o(n^2)求和定理：算法中while循环的if条件中包含的语句可以不考虑，因为它的执行次数不超过循环条件语句的频度。 求积定理 0.2.1 题型总结 普通循环 123456void fun(int n){ // 设while循环执行次数为m， int i=0, s=0; // i从1到m，s=1+2+...+m=m(m+1)/2 while(s&lt;n){ // 所以循环结束时有 s=m(m+1)&gt;=n i++; s=s+i; // 总有常数k，使 m(m+1)/2+k=n }} 得m=\\frac{-1+\\sqrt{8n-8k+1}}{2},\\quad T(n)=m=o(\\sqrt{n}) 1234void fun(int n){ // 同理，执行m次后，i=2^m int i=1; // 循环结束时有： i&gt;n 得 m&gt;log_2{n} while(i&lt;=n) i=i*2; // 总有常数k，使m=log_2{n}+k} // T(n)=m=O(log_2{n}) 12345678void fun(int n){ // 利用到上面的求和定理，p=p*f不考虑 int p=1, d=n, f=n; // 因为他的执行次数不超过d=d/2语句的频度 while(d&gt;0){ // 同理，执行m次后，d=n/2^m&gt;=0 if(d%2==1) p=p*f; // 所以结束时，只能是d=0，计算机中当n=1时，才有d=0 f=f*f; // 则n/2^m&gt;=1， m&lt;=log_2{n} d=d/2; // T(n)=m=O(log_2{n}) }} 123456void fun(int n){ // i=1时，j从n到2，执行n-2+1=n-1次 int i, j, x=0; // i=2时，j从n到3，执行n-2次 for(i=1; i&lt;n; i++) // ... for(j=n; j&gt;=i+1; j--) // i=n时，j从n到n，执行1次 x++; // T(n)=n-1+n-2+...+1=(n-1)(n-1+1)/2=O(n^2)} 算法的平均时间复杂度，最好时间复杂度，最坏时间复杂度 1234567/*求前i(1&lt;=i&lt;=n)个元素的最大值*/int fun(int a[], int n, int i){ // 1的取值可以是1~n，有n种情况，等概率1/n int j, max=a[0]; // 每种情况都要比(i-1)-1+1=i-1次 for(j=1; j&lt;=i-1; j++) // 则Tn=见下 if(a[j]&gt;max) max=a[j]; // 所以平均时间复杂度O(n) return max; // 最好情况i=1，O(1)；最坏情况i=n，O(n)} T_n=\\sum_{i=1}^n \\frac{1}{n}(i-1)=\\frac{n-1}{2}=O(n) 12345678910/*递归算法时间复杂度分析*/void hanoi(int n, char x, char y, char z){ // 设函数hanoi(n,...)的执行时间为T(n) if(n==1) // 则hanoi(n-1,...)的执行时间为T(n-1) printf(\"move %c to %c\\n\", x, z); // 当n=1有T(1)=1 else{ // 根据代码：当n&gt;1时，T(n)=2T(n-1)+1 hanoi(n-1, x, z, y); // 所以，有 printf(\"move %c to %c\\n\", x, z); // T(n)=2T(n-1)+1=2(2T(n-2)+1)+1 hanoi(n-1, y, x, z); // =2^2T(n-2)+2+1 } // =...} // =2^2+1=O(2^2) 值得记的递归算法 123456789101112131415161718192021222324/*假设非空二叉树bt采用二叉链存储，其中所有节点数据域为正数，设计一个递归算法求其中的最大值。*//*解：设二叉链表bt中最大值为f(bt)，推导得*//*[递归模型]：*//*f(bt)=0 若bt为空*//*f(bt)=bt-&gt;data 若bt是叶子节点*//*f(bt)=MAX(bt-&gt;data, f(bt-&gt;lchild), f(bt-&gt;rchild)) 其他情况*/// 递归算法如下：int f(BTNode *bt){ int m, n; // m存放左子树最大值，n存放右子树最大值 if(bt==NULL) return 0; if(bt-&gt;lchild==NULL &amp;&amp; bt-&gt;rchild) return bt-&gt;data; else{ m=f(bt-&gt;lchild); // 求左子树中最大值 n=f(bt-&gt;rchild); // 求右子树中最大值 if(m&lt;=n) m=n; // 左、右子树中的最大值放在m中 if(m&gt;bt-&gt;data) // 由于是个3值比较，先比较子树两个值，再与父父节点比较 return m; // 返回最大值 else return bt-&gt;data; } // end else} // end function 一、线性表1.1 线性表的定义和基本操作 线性表（Linear List）描述：线性表是n个类型相同数据元素的有限序列，对n&gt;0，除第一个元素无直接前驱、最后一个元素无直接后继外，其余的每个元素只有一个直接前驱和一个直接后继，元素之间具有一对一的关系。 1.2线性表的实现1.2.1 顺序存储结构 顺序表的定义 顺序表是一种顺序存储结构，是线性表在内存中的一种直接映射方式。 所谓随机存储特性指通过首地址和元素序号可以在O(1)时间内找到指定元素。 顺序表的插入删除操作时间复杂度为O(n)。通过计算平均移动次数（平均时间复杂度） 存储密度=\\frac{节点数据本身占用的存储量}{节点结构占用的存储量}顺序表的存储密度为1，而链表小于1。 有序表的定义 元素有序排列，逻辑结构，顺序链式进行存储，不能随意指定插入元素的位置。 1.2.2 链式存储结构 单链表的定义 单链表中用任意一组存储单元存放线性表中的元素，每个节点通过一个指针指向后继节点。 头结点和首节点的区别，首节点是有值的。头插法、尾插法建单链表的时间复杂度O(n) 双链表的定义（双向链表） 每个节点通过两个指针分别指向前驱和后继节点。 循环链表的定义 循环单链表是将原单链表中尾节点的next域由NULL改为指向头节点。 循环双链表是将原双链表中尾结点的next域由NULL改为指向头节点，再将头节点的prior域改为指向为节点。 12// 带头结点的循环链表L中，某节点*p为尾结点的条件是p-&gt;next==L; 1.3 线性表的应用二、栈、队列和数组2.1 栈和队列的基本概念都是插入和删除操作受限的线性表。 2.1.1 栈的定义栈顶进行插入和删除，另一端叫栈底。（先进后出，后进先出） 2.1.2 队列的定义队尾插入，对头删除。（先进先出，后进后出） 2.2 栈和队列的顺序存储结构2.2.1 顺序栈 顺序栈s的4要素 12345678// 栈空条件s.top==-1;// 栈满条件s.top==MaxSize-1;// 元素e进栈s.top++; s.data[s.top]=e;// 元素出栈e=s.data[s.top]; s.top--; 2.2.2 共享栈两个栈共享一个数组空间，两端固定，即两栈栈底固定。下标0的一段作为栈1的栈底，其栈顶指针top1；将下标MaxSize-1的一端作为栈2的栈底，其栈顶指针为top2。 栈1的4要素 12345678// 栈空条件s.top1==-1;// 栈满条件s.top1==s.top2-1;// 元素e进栈s.top1++; s.data[s.top1]=e;// 元素出栈e=s.data[s.top1]; s.top1--; 栈2的4要素 12345678// 栈空条件s.top2==MaxSize;// 栈满条件s.top2==s.top1+1;// 元素e进栈s.top2--; s.data[s.top2]=e;// 元素出栈e=s.data[s.top2]; s.top2++; 2.2.3 顺序队数组存放队中元素，用front和rear两个变量分别指示队头和队尾，front指向队列中队首元素的前一个位置，rear指向队尾元素的位置。（也就是front指向的空间没有值，像这样的队列最多只能进队MaxSize-1个元素） “假溢出”现象 当队列中实际元素个数远远小于数组大小时，也可能由于队尾指针已超过数组上界而不能做进队操作。 为此，将数组通过逻辑方法改为首尾相连，这样的队列称为环形队列（或循环队列）。 环形队列q的4要素 12345678// 队空条件q.front==q.rear; // rear指向的空间也可能没有值// 队满条件(q.rear+1)%MaxSize==q.front;// 元素e进队q.rear=(q.rear+1)%MaxSize; q.data[q.rear]=e;// 元素出队q.front=(q.front+1)%MaxSize; e=q.data[q.front]; 2.3 栈和队列的链式存储结构2.3.1 链栈可以采用带头结点的单链表表示，也可以采用不带头结点的单链表表示。 链栈s的4要素 12345678// 栈空条件s-&gt;==NULL;// 栈满条件不存在;// 元素e进栈建立值为e的节点*p，采用头插法插入到链栈中;// 元素出栈取出首节点的data值并删除之; 2.3.2 链队通常链队用不带头结点的单链表表示？其中有两种类型的节点，一是存放队列中数据元素的节点，另一种是存放对头、队尾指针的链队节点，一个链队只有一个链队节点。 链队q的4要素 12345678// 队空条件q-&gt;front==NULL&amp;&amp;q-&gt;rear==NULL;// 队满条件不存在;// 元素e进队建立一个data域为e的数据节点*s，将*s插入到队尾并让q-&gt;rear指向它;// 元素出队取出队首节点的data值，将其删除并让q-&gt;front指向下一个节点; 2.3.3 双端队列两端（前端和后端）都可以入队和出队。其元素的逻辑结构仍是线性结构。 2.4 栈和队列的应用2.4.1 栈的应用 将算术表达式exp转换为后缀表达式postexp 法一：算法基本思想 采用运算符栈是为了比较运算符的优先级，所有的运算符必须进栈。只将大于栈顶元素优先级的运算符直接进栈，否则需要退栈栈顶运算符（先退栈的运算符先计算，同优先级的运算符在栈中计算） 法二：手工加括号 过程：先根据中缀表达式的求值次序加上括号，将右括号用相应的运算符替换，再除掉所有左括号。 例如：中缀表达式5+2*(1+6)-8/2，加括号变为：((5+(2*(1+6)))-(8/2)) 用这种对应关系((5\\underbrace{+(2{\\underbrace{*(1\\underbrace{+6)})}})}\\underbrace{-(8\\underbrace{/2)})}，往回找，就近原则。 将右括号用对应的运算符替换，变为：((\\ 5\\ (\\ 2\\ (\\ 1\\ 6\\ +\\ *\\ +\\ (\\ 8\\ 2\\ /\\ - 最后除掉所有左括号得到后缀表达式为5\\ 2\\ 1\\ 6\\ +\\ *\\ +\\ 8\\ 2\\ /\\ - 对后缀表达式求值 2.5 数组的基本概念数组是由相同类型的数据元素构成的一个有限序列，对于m(m\\geq1)维数组，每个元素受m个线性关系的约束，所以数组是线性表的推广。 数组具有随机存储的特性（存储连续，随机访问，通过下标；链表存储连续，访问连续？） 2.5.1 特殊矩阵的压缩存储n阶对称矩阵A[1...n]A[1...n]存放在一维数组B[1...\\frac{n(n+1)}{2}]中，即元素a_{ij}存放在b_k中，即只存放主对角线元素和下三角区的元素(i \\ge j)。 就是求出i，j和k的关系。求顺序号，即它前面有几个元素。 \\begin{bmatrix} {a_{11}}&{a_{12}}&{a_{13}}&{\\cdots}&{a_{1n}}\\\\ {a_{21}}&{a_{22}}&{a_{23}}&{\\cdots}&{a_{2n}}\\\\{a_{31}}&{a_{32}}&{a_{33}}&{\\cdots}&{a_{2n}}\\\\ {\\vdots}&{\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\{\\vdots}&{\\vdots}&{a_{ij}}&{\\ddots}&{\\vdots}\\\\{\\vdots}&{\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\ {a_{n1}}&{a_{n2}}&{a_{n3}}&{\\cdots}&{a_{nn}}\\\\ \\end{bmatrix}求a_{ij}前面有(1+2+\\cdots+i-1)+j-1=\\frac{(i-1)(i-1+1)}{2}+j-1=\\frac{i(i-1)}{2}+j-1个元素，得： k= \\begin{cases} \\cfrac{i(i-1)}{2}+j, &当i\\ge j(下三角区和主对角线元素)\\\\ \\cfrac{j(j-1)}{2}+i, &当i0，这\\mathtt {n}个节点作为树的根节点，其余节点可分为m(m\\geq0)个互不相交的有限集，其中每一棵自己本身又是一棵符合本定义的树，称为根节点的子树。 基本术语 度：树中各节点的度的最大值； 分支节点：度不为0的节点称为非终端结点，又叫分支节点； 叶子节点：度为0的节点称为终端结点，或叶子节点； 孩子节点、双亲结点和兄弟节点 节点的层次：根节点为第一层； 树的高度（深度）：节点的最大层次； 路径：由经过的节点序列构成； 路径长度：经过的边的数目（树中分支是有向的，从上向下，兄弟节点间无路径）； 森林：n(n\\ge 0)个互不相交的树的集合。 树的性质 性质1：树中节点数为n，度之和 等于 分支数，分支数=n-1 性质2：度为m的树中第i层上至多有m^{i-1}个结点i\\ge 1 性质3：高度为h的m次树至多有\\frac{m^{h-1}}{m-1}个结点（等比数列前n项和） 性质4：具有n个结点的m次树的最小高度为\\lceil log_m{[n(m-1)+1]} \\rceil 树的存储结构 双亲存储结构 连续空间存储树的所有结点 孩子链存储结构 按树的度设计节点的孩子节点指针域个数（m叉树的一个节点的指针域m个，加数据域共m+1域） 孩子兄弟链存储结构 3个域：数据元素域、第一个孩子域、下一个兄弟节点指针域。 3.2 二叉树3.2.1 二叉树的定义及其主要特征二叉树是n(n\\ge 0)个结点的有限集合，该集合或者为空集(n=0)，或者由一个根节点或两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。 二叉树不同于度为2的树，度为2的树至少有3个结点，不区分子树的次序。 完全二叉树的特点： 如果有度为1的节点，只能有一个，且该节点只有左孩子而无右孩子 当节点总数n为奇数时，n_1=0；当节点总数n为偶数时，n_1=1 3.2.2 二叉树的性质 性质1：非空二叉树上叶子节点数等于双分支节点数加1，即n_0=n_1+1 （度之和 等于 节点数-1）\\Rightarrow叶子节点数 等于 度为2的节点数+1 性质2：非空二叉树上第i层上至多有2^{i-1}个结点。(i\\ge 1) 性质3：高度为h的二叉树至多有2^{h-1}(\\frac{2^{i-1}}{2-1})个结点。(h\\ge 1) 性质4：若二叉树采用顺序存储结构表示，则编号为 i 和 j 的两个节点处于同一层的条件是\\lfloor log_2(i+1) \\rfloor=\\lfloor log_2(j+1) \\rfloor 3.2.3 二叉树的顺序存储结构 用一组地址连续的存储单元存放（没有结点的地方用’#’字符填补） 3.2.4 二叉树的链式存储结构3.2.5 二叉树的遍历 先序遍历：根左右 中序遍历：左根右 后序遍历：左右根 层次遍历 基于递归的二叉树算法设计方法 基于非递归的二叉树算法设计方法 3.2.6 二叉树的构造 由先序序列和中序序列构造二叉树 由后序序列和中序序列构造二叉树 由层次序列和中序序列构造二叉树 3.2.7 线索二叉树的基本概念和构造对于n个结点的二叉树，在二叉链存储结构中有n+1个空链域，利用这些空链域存放在某种遍历次序下该节点的前驱节点和后续节点的指针，这些指针称为线索。加上线索的二叉树称为线索二叉树。提高遍历过程的效率。 3.3 二叉排序树（Binary Search Tree, BST） 二叉排序树或是一颗空树，或者是满足如下性质的二叉树： 若其左子树非空，则左子树上所有的记录的值均小于根记录的值； 若其右子树非空，则右子树上所有的记录的值均大于根记录的值； 左、右子树本身又各是一颗BST。 BST按中序遍历该树所得到的中序序列是一个递增有序序列。 3.4 平衡二叉树（AVL） 平衡二叉树或是一颗空树，或者是具有下列性质的二叉排序树： 其左子树和右子树都是AVL； 且左、右子树高度之差的绝对值不超过1。 平衡因子定义为节点左子树的高度减去它的右子树的高度(-1, 0, 1)。 3.4.1 平衡二叉树中插入一个新节点的方法 LL型调整 RR型调整 LR型调整 RL型调整 3.4.2 平衡二叉树中删除一个节点的方法3.4.3 平衡二叉树查找节点的过程含有n个节点的平衡二叉树的平均查找长度为O(log_2n)。 四、树、森林4.1 树的存储结构 双亲存储结构 双亲表示法采用顺序表（也就是数组）存储普通树，其实现的核心思想是：顺序存储各个节点的同时，给各节点附加一个记录其父节点位置的变量。（求某节点双亲结点o(1)，求某节点孩子O(n)） 注意，根节点没有父节点（父节点又称为双亲节点），因此根节点记录父节点位置的变量通常置为 -1。 孩子链式存储结构 按树的度设计节点指针域个数。就是一个父节点链上其所有孩子节点。 孩子兄弟链存储结构 3个域：数据元素域，第一个孩子域，下一个兄弟节点指针域。 4.2 森林与二叉树的转换树的先根序列对应二叉树的先序序列；树的后根序列对应二叉树的中序序列。 4.2.1 森林、树转换为二叉树 4.2.2 二叉树还原为森林、树 4.3 树与森林的遍历4.4 树的应用4.5 等价类问题4.6 哈夫曼树和哈夫曼编码带权路径长度：从根节点到该节点之间的路径长度与该节点权值的乘积。 树的带权路径长度：树中所有叶子节点的带权路径长度之和。记为： WPL=\\sum_{i=0}^NW_iL_i其中，n表示叶子节点的数目，W_i表示叶子节点的权值，L_i表示根到该叶子节点间的路径长度。 哈夫曼树：在n个带权叶子节点构成的所有二叉树中，带权路径长度WPL最小的二叉树。 哈夫曼树的构造算法 哈夫曼编码中没有单分支节点，即n_1=0 哈夫曼编码 在哈夫曼树的基础上构造哈夫曼编码的过程如下： 规定哈夫曼树中所有左分支为0，右分支为1； 从根节点到每个叶子节点所经过的分支对应的0和1组成的序列便为该节点对应字符的哈夫曼编码。 得到相应字符传输的编码数据： 12A B C D E F01 1001 101 00 11 1000 只对叶子编码，不存在两个编码相同的叶子，不存在一个编码是另一个编码的前缀。 五、图5.1 图的概念图G分别由两个集合V和E组成，记为G=(V,E)，其中V是顶点的有限非空集合，E是V中序偶的有限集，这些序偶称为边。 12345 1 表示为： G=(V,E) / | \\ 2 - 3 0 V={0,1,2,3,4} \\ / 4 E={(0,1),(0,4),(1,2),(1,3),(2,3),(2,4)} 无向图：在图G中，如果表示边的序偶是无序的（用圆括号表示），则G为无向图； 有向图：在图G中，如果表示边的序偶是有序的（用尖括号表示），则G为有向图； 完全图：若图中的每两个顶点之间都存在着一条边，称该图为完全图； 具有n个顶点的完全有向图有n(n-1)条边，完全无向图有\\frac{n(n-1)}{2}条边； 端点：在一个无向图中，若存在一条边(v_i,v_j)，则称v_i和v_j为此边的两个端点，并称他们互为邻接点； 在一个有向图中，若存在一条边，则称v_i和v_j为此边的两个端点，也称他们互为邻接点，v_i为起点，v_j为终点； 顶点的度、入度和出度 子图：设有两个图G=(V,E)和G^{'}=(V^{'},E^{'})，若V^{'}是V的子集，即V^{'}\\subseteq V，且E^{'}是E的子集，则称G^{'}是G的子图；首先G^{'}是个图才行； 路径：在一个图G=(V,E)中，从v_i到v_j的一条路径是一个顶点序列(v_i,v_{i1},...v_{im},v_j)，若此图G是无向图，则边(v_i,v_{i1}),(v_{i1},v_{i2}),...,(v_{im},v_j)属于E(G)；若此图是有向图，则,,...,属于E(G)； 路径长度：指一条路径上经过的边的数目。若一条路径上除开始和结束点可以相同外，其余顶点均不相同，则称此路径为简单路径； 回路（环）：若一条路径上的开始点与结束点为同一顶点，则称此路径为回路或环；开始点与结束点相同的简单路径被称为简单回路或简单环；回路不能说是简单路径； 连通：在无向图G中，若从v_i到v_j有路径，则称v_i和v_j是连通的； 连通图：若图G中任意两个顶点都连通，则称G为连通图，否则，称为非连通图； 连通分量：无向图G中的极大连通子图称为G的连通分量；显然，任何连通图的连通分量只有一个，即本身；而非连通图有多个连通分量； 强连通分量：若有向图G中的极大强连通子图称为G的强连通分量；显然，非强连通分量有多个强连通分量； 稠密图：当一个图G接近完全图时，则称为稠密图； 稀疏图：当一个图含有较少的边数（即当e","link":"/Study/40891.html"},{"title":"计算机网络课程复习","text":"考查目标： 掌握计算机网络的基本概念、基本原理和基本方法。 掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。 能够运用计算机网络基本概念、基本原理和基本方法进行网络系统分析、设计和应用。 以西北工业大学801计算机专业基础为考纲 一、计算机网络体系结构1.1 计算机网络概述1.1.1 计算机网络的概念、组成与功能 计算机网络是“以相互共享资源的方式互联起来的自治计算机系统的集合”。 计算机网络通常由3个部分组成，分别是资源子网、通信子网和通信协议。 组成 资源子网 通信子网 通信协议 包括 主机与终端、终端控制器、联网外设、各种网络软件与数据资源 路由器、各种互联设备与通信线路 通信双方必须共同遵守的规则和约定就称为通信协议 作用 负责全网的数据处理业务，向网络用户提供各种网络资源与网络服务 负责完成网络数据传输、路由与分组转发等信息处理任务 等 计算机网络的功能 主要功能 详细 作用 数据通信 依照一定的通信协议，利用数据传输技术在两个终端之间传递数据信息的一种通信方式和通信业务 实现计算机和计算机、计算机和终端以及终端与终端之间的数据信息传递，是继电报、电话业务之后的第三种最大的通信业务 资源共享 资源共享是人们建立计算机网络的主要目的之一。计算机资源包括硬件资源、软件资源和数据资源 硬件资源的共享可以提高设备的利用率，避免设备的重复投资，如利用计算机网络建立网络打印机；软件资源和数据资源的共享可以充分利用已有的信息资源，减少软件开发过程中的劳动，避免大型数据库的重复建设 集中管理 计算机网络技术的发展和应用，已使得现代的办公手段、经营管理等发生了变化 管理信息系统、办公自动化系统等，通过这些系统可以实现日常工作的集中管理，提高工作效率，增加经济效益 实现分布式处理 网络技术的发展，使得分布式计算成为可能 对于大型的课题，可以分为许许多多小题目，由不同的计算机分别完成，然后再集中起来，解决问题 负荷均衡 负荷均衡是指工作被均匀的分配给网络上的各台计算机系统 网络控制中心负责分配和检测，当某台计算机负荷过重时，系统会自动转移负荷到较轻的计算机系统去处理 1.1.2 计算机网络的分类 计算机网络的分类方法有多种，其中最主要的方法是根据覆盖范围进行分类的方法。 分类 覆盖范围(Reference) 详细 特点 种类 广域网(Wide Area Network; WAN) &gt;100km 也称为远程网。一般是在不同城市之间的LAN或者MAN网络互联 距离较远，信息衰减比较严重，所以这种网络一般是要租用专线，通过IMP（接口信息处理）协议和线路连接起来，构成网状结构，解决循径问题 邮电部的CHINANET，CHINAPAC，和CHINADDN网 城域网(Metropolitan Area Network; MAN) 10~100km 早期以光纤为传输介质。宽带城域网以IP为基础，通过计算机网络、广播电视网、电信网三网融合 完善的光纤传输网是基础。传统电信、有线电视与IP业务的融合成为宽带城域网的核心业务。高端路由器和多层交换机是核心设备。扩大宽带接入规模与服务质量是应用关键 提供普通家庭用户和集团用户高速接入因特网、局域网互连以及VPN/VPDN等业务 局域网(Local Area Network; LAN) 10m~10km 局部地区范围内的网络。局域网一般位于一个建筑物或一个单位内，不存在寻径问题，不包括网络层的应用 连接范围窄、用户数少、配置容易、连接速率高 以太网（Ethernet）、令牌环网（Token Ring）、光纤分布式接口网络（FDDI）、异步传输模式网（ATM）以及最新的无线局域网（WLAN） 个人区域网(Personal Area Network; PAN) &lt;10m 个人操作空间(Personal Operating Space; POS)。无线个人区域网络(WPAN)。近距离不同移动办公设备之间低速互联 蓝牙：开放的规范，近距离无线通信，语音和数据传输，世界任何地方通信ZigBee：低功耗、低速率、低成本 蓝牙技术与ZigBee技术（近距离无线通信） 1.1.3 计算机网络与互联网的发展历史 第一阶段：计算机网络技术与理论准备阶段（20世纪50年代） 数据通信技术日趋成熟，为计算机网络的形成奠定技术基础 分组交换概念的提出为计算机网络的研究奠定了理论基础 第二阶段：计算机网络的形成（20世纪60年代） ARPANET的成功运行证明了分组交换理论的正确性 TCP/IP协议的广泛应用为更大规模的网络互联奠定了坚实的基础 E-mail、FTP、TELNET、BBS等应用展现出网络技术广阔的应用前景 第三阶段：网络体系结构的研究（20世纪70年代中期） 网络体系结构与协议的标准化研究，对更大规模的网络互联起到推动作用 国际标准化组织(ISO)在推动“开放系统互连(Open System Interconnection, OSI)参考模型”与网络协议标准化研究方面做了大量工作 OSI参考模型的研究对网络理论体系的形成与发展，以及在网络协议标准化研究方面起到了重要的推动作用 TCP/IP经受了市场和用户的检验，吸引了大量的投资，推动了Internet应用的发展，成为业界标准 第四阶段：Internet应用、无线网络与网络安全技术研究的发展 Internet作为全球性的国际网与大型信息系统 Internet大规模接入推动了接入技术的发展 对等(Peer-to-Peer, P2P)网络技术的研究，使得“即时通信”等新的网络应用不断涌现 WPAN、WLAN与WMAN技术日益成熟，并应用阶段。无线自组网、无线传感器网络受到高度重视 物联网技术形成与发展 网络安全技术快速发展 1.2计算机网络的标准化工作及相关组织。1.2.1 网络协议标准化组织 国际电信联盟（International Telecommunications Union, ITU） 负责电信方面的标准制定。 国际标准化组织（International Organization for Standardization, ISO） 组织制定国际标准。ISO中负责数据通信标准的是ISO第97技术委员会（TC97）。OSI参考模型就是由ISO的TC97组织制定的。 电子工业协会（Electronic Industries Association, EIA） 制定的RS-232接口标准在通信中应用广泛。 电气电子工程师协会（Institute of Electrical and Electronics Engineers, IEEE） 组织制定了局域网中最重要的802系列标准。 1.3 计算机网络体系结构与参考模型1.3.1 计算机网络分层结构 OSI体系结构：应用层，表示层，会话层，运输层，网络层，数据链路层，物理层 TCP/IP体系结构：应用层，运输层（TCP或UDP），网际层（IP），网络接口层 五层协议体系结构：应用层，运输层，网络层，数据链路层，物理层 1.3.2 计算机网络协议、接口、服务等概念 协议就是一组控制数据交互过程的通信规则，这些为网络数据交换制定的通信规则、约定与标准被称为“网络协议” 网络协议三要素： （1）语义：解释控制信息每个部分的意义（包括用于协调同步和差错处理的控制信息） （2）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序（包括数据格式、编码和信号电平等） （3）时序（定时/同步）：是对事件发生顺序地详细说明 层次结构是处理计算机网络问题最基本的方法。对于一些难以处理的复杂问题，通常采用分解为若干个容易处理的、小一些的问题，“化整为零，分而治之”的方法去解决 在邮政系统中，邮箱就是发信人、收信人与邮递员之间交互的接口。接口是同一主机内相邻层之间交换信息的连接点 实体：任何可发送或接受信息的硬件或软件进程，通常是个特定的软件模块。 第n层的活动元素称为n层实体 不同机器上同一层称为对等层，同一层的实体叫做对等实体 服务：下层为相邻上层提供的功能调用，垂直的。对等实体在协议的控制下使得本层能为上一层提供服务。 1.3.3 ISO/OSI参考模型和TCP/IP模型 二、物理层物理层提供了编码、解码，时钟提取、发送、接收和载波检测等功能，并为数据链路层提供服务。协议中规定了物理链路操作的电气和机械特性参数。 由4个部分组成：物理介质；物理介质连接设备（PMA）或接口；接口电缆；物理收发信号（PLS）。 2.1 通信基础2.1.1 信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念 信道：通信的通道，是信号传输的媒介 信号：在通信系统中，二进制代码0、1比特序列必须变换成不同的电平或频率变化的信号之后，才能通过传输介质进行传输 \\begin{cases} 模拟信号：连续变化的信号\\\\ 数字信号：离散的脉冲序列\\\\ \\end{cases} 带宽：网络的通信线路传送数据的能力。即：在单位时间内从网络中的某一个点到另一点所能通过的“最高数据率”（单位：赫兹Hz） 码元：在数字通信中常常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为(二进制）码元 一个数字脉冲就是一个码元 波特（Baud）：调制速率描述通过模拟线路传输模拟数据信号的过程中，从调制解调器输出的调制信号每秒钟载波调制状态改变的数值，单位是1/s，称为波特 1波特表示数字通信系统每秒传输1个码元，单位时间内数字通信系统所传输的码元个数 波特率：调制速率也称为波特率，波特率描述的是码元传输的速率。 与比特率的比较。 速率：连接在计算机网络上的主机在数字信道上传送数据的速率，也称为数据率或比特率。单位bit/s, bps, kbps, Mbps 信源：发送数据的一方 信宿：接收数据的一方 2.1.2 奈奎斯特定理与香农定理描述信道带宽与数据传输速率到底有什么关系？从定量的角度描述“带宽”与“速率”间的联系。 Nyquist准则（有限带宽，无噪声） 理想信道，前后码元间不产生相互串扰R_{max}=2B(bps), 2Blog_2V?，对于二进制数据，如果信道带宽B=3000Hz，则最大传输速率为6000bps。 若用V表示每个码元离散电平的数目，则理想低通信信道下的极限数据传输率=2Blog_2V(bps) Shanon定理（有限带宽，有随机噪声） 描述R_{max}和B、信号噪声功率比之间关系。信噪比S/N（无单位）。R_{max}=B\\ast log_2(1+S/N) 信噪比是信号功率S与噪声功率N之比 如果S/N=1000, B=3000Hz，则R_{max}\\approx 30kbps，表示数据传输速率不超过30kbps。 其中S/N越大，信息的极限传输速率越高。 通信系统中，信噪比通常以分贝（dB）表示，S/N=10lg(S/N) 如果S/N=1000，用分贝表示的S/N=30dB 奈奎斯特采样定理 现实世界接触到的诸如电信号、光信号、声音信号等这些信号都是随时间连续变化的，称之为连续信号。但对于计算机来说，处理这些连续的信号显然无能为力，要使计算机能够识别、计算、处理这些信号就必须将其转化为离散信号，将连续信号转换为离散信号的过程叫采样。 采样后，计算得到的是离散的点，用这些离散的点来代替连续的线，就势必会产生误差，那么这个误差是不是在容许的范围内？根据采样得到的离散的点，能不能还原出连续的信号？ 采样定理解释了采样率f_S和所测信号评率f_N之间的关系，f_S>2f_N 2.1.3 编码与调制 编码：把数字信号转换为另一种形式的数字信号 常用编码方式： （1）不归零制，归零制（正脉冲代表1，负脉冲代表0） （2）差分不归零码（遇1就跳） （3）曼彻斯特编码（位周期中心的向上跳变代表0，向下代表1，反之亦可） （4）差分曼彻斯特（每一位的中心处始终有跳变。位开始边界有跳变为0，位开始边界无跳变为1） 调制：将发送端的数字信号变换成模拟信号的过程。实现调制功能的设备称为“调制器” 2.1.4 电路交换、报文交换与分组交换 分类 内容 特点 电路交换（Circuit Switching） 两台计算机通过通信子网进行数据交换之前，首先从信源到信宿建立一条实际的物理连接通道 在保持连接期间双方独占信道（没有冲突，浪费信道资源）。信道资源的利用效率较低。适用于交互式会话类通信。 报文交换 以报文为数据交换的单位，整块数据从源到宿由交换结点逐一中转 整块数据逐站存储转发。对报文的长度没有限制，对于大块数据（占用存储空间大，占用信道时间长）。延迟较大，不能实现交互式通信 分组交换 将数据拆分成分组，依次从源到宿经交换结点转发 分组的长度有上限控制，各自独立传输（占用信道时间短，占用缓存空间小）。信道共享（可充分利用信道资源，有可能发生资源(信道和结点）占用冲突） 电路交换补充 电路交换工作过程：电路建立阶段，数据传输阶段，电路拆除阶段。 无差错检测，建立的是一条双方独占的物理通路。错误率比较低，比较稳定，但无差错检测的功能，一旦发生错误，数据就会丢失，而不会要求重发。（无差错检测不代表不需要？） 分组交换的优点 比报文交换的延迟小 比电路交换的效率高 适于计算机网络通信 分组交换有保证可靠性的网络协议。当存储转发时，某一个节点或链路突然出故障，在各路由器中运行的路由选择协议能自动找到其他路径转发。 分组交换的缺点 仍然有延迟，不能满足实时多媒体通信的服务质量 需要解决冲突检测、拥塞控制和纠错重发等问题 2.1.5 数据报与虚电路分组交换技术可以分为2类：数据报（Data Gram, DG）与虚电路（Virtual Circuit, VC）。 数据报方式 尽最大努力交付，可靠性低但有差错检测，一旦出错，就会要求重发 虚电路方式 2.2 传输介质2.2.1 双绞线、同轴电缆、光纤与无线传输介质2.2.2 物理层接口的特性2.3 物理层设备2.3.1 中继器2.3.2 集线器三、数据链路层包括2个子层：逻辑链路控制（Logical Link Control, LLC）子层和介质访问控制（Medium Access Control, MAC）子层。 3.1 数据链路层的功能采取差错检测、差错控制与流量控制等方法，将有差错的物理线路改进成无差错的数据链路，向网络层提供高质量的数据传输服务。 数据链路层的通信规程主要有两类：面向字符型的通信规程和面向比特型的通信规程（同步数据链路控制规程） 3.2 组帧（这是一个动词） 封装成帧：在一段数据的前后部分添上首部和尾部，这就构成了一个帧。接收端在接收到物理层上传的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。 组帧：为了使接收方能够正确地接收并检查所传输的帧，发送方必须依据一定规则把网络层递交的分组封装成帧。 组帧的4种方法：字符计数法、首尾填充法、零比特填充法，违规编程法。 3.3 差错控制在计算机通信中，研究检测与纠正比特流传输错误的方法称为“差错控制”。差错控制的目的是减少物理线路的传输错误。在设计差错控制方法时提出以下2种策略： 3.3.1 检错编码检错码为每个传输单元加上一定的冗余信息，接收端可以根据这些冗余信息发现传输差错，但是不能确定是哪一位或哪些位出错，并且自己不能够自动纠正传输错误。 常用的检错码有奇偶校验码（垂直、水平、垂直水平奇偶校验（也叫方阵码））和循环冗余码（CRC）。 3.3.2 纠错编码纠错码为每个传输单元加上足够多的冗余信息，以便接收端能够发现，并能够自动纠正传输差错。 检错码需要通过重传机制达到纠错目的，但工作原理简单，实现起来容易，广泛使用。 纠错码有优越之处，但实现起来困难，在一般的通信场所不易采用。 3.4 流量控制与可靠传输机制3.4.1 流量控制、可靠传输与滑动窗口机制 流量控制（流控） 是一种协调发送站的发送速率和接收站的接收速率一致性的数据传输同步技术，发送速率是指生成和发送帧的速率。 发送端发送数据超过物理线路的传输能力或超过接收端的帧接收能力时，就会造成链路拥塞。为了防止链路拥塞，数据链路层必须具有流量控制功能。（避免淹没物理线路和接收端，同步失调）解决同步失调和高效利用介质问题。 停止-等待协议（1位滑动窗口协议） 带有差错控制的滑动窗口协议（多帧连续发送） 后退N帧协议（GBN） 选择重传协议（SR） 3.5 介质访问控制无论何种Ethernet，其MAC层均采用争用型介质访问控制协议，即载波监听多路访问/冲突检测。 3.5.1 信道划分介质访问控制：频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和基本原理; 3.5.2 随即访问介质访问控制：ALOHA协议，CSMA协议，CSMA/CD协议，CSMA/CA协议 3.5.3 轮询访问介质访问控制：令牌传递协议。3.6 局域网3.6.1 局域网的基本概念与体系结构局域网是指传输距离有限，传输速率较高，以共享网络资源为主要目的的网络系统。 3.6.2 以太网与IEEE 802.33.6.3 IEEE 802.11（无线局域网）3.6.4 令牌环网的基本原理3.7 广域网3.7.1 广域网的基本概念广域网是指覆盖范围广，传输速率相对较低，以数据通信为主要目的的数据通信网。 3.7.2 PPP协议3.7.3 HDLC协议 背景 ISO将SDLC协议（面向比特型）修改后的高级数据链路控制（HDLC）协议作为国际标准（ISO 3309）。目前很多流行的数据链路层协议，如Ethernet帧结构与PPP协议，都是在HDLC基础上修改，或是取其子集形成的。 数据链路的配置方式和数据传送方式 HDLC数据链路有2种基本配置方式：非平衡配置与平衡配置 非平衡配置 一组主机根据在通信过程中的地位分为主站与从站（次站），由主站来控制数据链路的工作过程。 3.8 数据链路层设备3.8.1 网桥的概念及其基本原理3.8.2 局域网交换机及其工作原理3.9 延时问题3.9.1 Ethernet技术的研究与发展评价网络性能的两个参数是传播延时和带宽，传播延时带宽积=传播延时*带宽 3.9.2 帧传播总延时分析 传播延时t_p 指电信号通过传输介质从发送端到接收端的传播时间。则t_p=\\frac{传输介质的长度L}{电磁波传播速度v}=\\frac{L}{v} 发送延时t_f 指主机发送数据帧比特序列所需时间。则\\frac{帧长度}{发送速率} 处理延时t_{pr} 指接收端接收帧和处理帧所需要的时间。 在理想状态下，帧传输总延时t_T计算公式：t_T=(t_p+t_f+t_r)+(t_a+t_p+t_{pr})=2t_p+2t_{pr}+t_f+t_a t_a是确认帧ACK的发送延时，通常很短，可以忽略。 帧的处理延时t_{pr}小于帧发送延时t_f与传播延时t_p，t_{pr}可以忽略 简化后的帧传输总延时为：t_T\\approx t_f+2t_p 四、网络层网络层及以上使用IP地址，其他层使用硬件地址（Mac，物理地址） 4.1 网络层的功能4.1.1 异构网络互联4.1.2 路由与转发4.1.3 拥塞控制4.2 路由算法4.2.1 静态路由与动态路由4.2.2 距离-向量路由算法4.2.3 链路状态路由算法4.2.4 层次路由4.3 IPv4 IP协议的主要特点： IP协议是一种无连接、不可靠的分组传送服务的协议 IP协议是点-点网络层通信协议 IP协议屏蔽了互联的网络在数据链路层、物理层协议与实现技术上的差异 4.3.1 IPv4分组分组由2部分组成：分组头（首部）和数据 图中分组头的每行宽度（0~31）共32位，4字节。前5行是分组头中必有字段，第6行开始是选项字段，因此IPv4分组头的基本长度（$4(字节)*5(行)$）20字节，最大长度（$20+40(字节的选项)$）60字节。 4.3.2 IPv4地址与NAT（Network Address Translation） 研究NAT网络地址转换技术出于两个目的：一是由于IPv4过渡到IPv6进程缓慢，过渡技术之一的NAT短时间内有效缓解了IP地址短缺的问题；二是出于网络安全的目的（隐藏内部网络地址的目的）。 连接到每个局域网的计算机都有一块网卡，就有一个MAC地址（物理地址）。IP地址（逻辑地址）是网络层的地址，主要用于路由器的寻址，因此IP地址采用层次结构。 4.3.3 子网划分与子网掩码、CIDR求子网掩码的方法 如果需要划分出64(2^6)个子网，可以借用原16位主机号中的6位，该子网的主机号就变成10位。 B类IP地址：190.1.2.26（不需要化为2进制） 它的子网掩码用点分十进制表示为：255.255.252.0 \\underbrace{11111111\\ \\ 11111111}_{16位的网络号}\\ \\ \\underbrace{111111}_{16位主机号中的6位}00\\ \\ 00000000 \\quad \\quad 16+6=22另一种表示法：190.1.2.26/22(CIDR) 对一个B类IP地址(156.26.0.0)进行子网划分。该校园网由近210个局域网组成。（只要满足提供了210个子网即可，向上取整）由2^7","link":"/Study/41461.html"},{"title":"一志愿面试准备","text":"考查目标： 西工大复试的面试题集。 复试准备阶段，尽管分数尴尬，也要准备复试。 这里的题集以后会用得到的。 许多计算机基础问题。 2019级面试问题汇总一系 或与硬件相关方向和老师 1.操作系统的目录（分别学了哪些东西？） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576(1)计算机操作系统基础知识： OS的概念、功能和目标 OS的特征 OS的发展与分类 OS的运行机制和体系结构 中断和异常 系统调用(2)进程和调度： 进程的定义、组成、组织形式和特征 进程的状态和进程状态间的转换 进程控制的基本概念和相关原语 进程通信（共享存储，管道通信，消息传递） 线程和多线程模型（定义，为什么，线程属性，实现方式） 处理机调度（基本概念，三个层次，三层调度的联系、对比） 进程调度的时机，切换与过程，方式 调度算法及其评价指标 进程同步，进程互斥 进程互斥的软件实现方法（但标志法，双标志先检查，双标志后检查，Peterson算法） 进程互斥的硬件实现方法（中断屏蔽方法，TestAndSet(TS指令/TSL指令)，Swap指令(XCHG指令)） 信号量机制类型（整型信号量，记录型信号量） 信号量机制（实现进程互斥，实现进程同步，实现进程的前驱关系） 生产者消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题 管程（为什么引入管程，组成，基本特征，补充） 死锁（定义，区别，必要条件，处理策略） 预防死锁（破坏互斥条件，破坏不剥夺条件，破坏请求和保持条件，破坏循环等待条件） 避免死锁（银行家算法） 死锁的检测和解除 （ 如何检测{数据结构：资源分配图，死锁检测算法}， 如何解除{资源剥夺法，撤销进程法，进程回退法} ）(3)内存（定义，基本原理） 内存管理的概念（分配与回收，内存的扩充，地址转换，存储保护） 覆盖与交换（覆盖技术，交换技术，覆盖与交换的区别） 连续分配管理（单一连续分配，固定分区分配，动态分区分配） 动态分区分配算法 基本分页存储管理的基本概念（地址转换，页号、页内偏移量的计算，页表） 基本地址变换机构（页表存储器的作用，地址变换过程） 具有快表的地址变换机构（局部性原理，什么是快表(TLB)，引入快表后，地址的变换过程） 两级页表（单级页表存在的问题，地址转换） 基本分段存储管理（分段，段表，地址转换，分段VS分页） 段页式管理（分段+分页，段表、页表，地址转换，访问一个逻辑地址所需访存次数） 虚拟内存的基本概念（传统存储管理方式的特点、缺点，局部性原理，虚拟内存的定义和特征，虚拟内存技术） 请求分页管理方式（页表机制，缺页中断机构，地址变换机构） 页面置换算法（OPT，FIFO，LRU，CLOCK(NRU)，改进型CLOCK(改进型NRU)） 页面分配策略（驻留集，页面分配、置换策略，何时调入页面，从何处调页，抖动(颠簸)现象，工作集）(4)I/O和文件 文件管理 文件的逻辑结构（无结构文件，有结构文件） 有结构文件（顺序文件，索引文件，索引顺序文件） 文件目录（文件目录的实现(文件控制块)，目录结构，索引结点） 文件的物理结构（文件分配方式{连续分配，链接分配，索引分配}） 文件存储空间管理（存储空间的划分与初始化，空闲表法，空闲链表法，位示图法，成组链接法） 文件的基本操作（创建，删除，打开，关闭，读写） 文件共享（基于索引结点的共享方式(硬链接)，基于符号链的共享方式(软链接)） 文件保护（口令保护，加密保护，访问控制） 文件系统的层次结构 磁盘的结构（磁盘、磁道、扇区，如何在磁盘中读/写数据，盘面、柱面，磁盘的物理地址，磁盘的分类） 磁盘调度算法（一次磁盘读/写操作需要的时间，磁盘调度算法{FCFS,SSTF,SCAN,C-SCAN}） 减少延迟时间的方法（交替编号，错位命名，磁盘地址结构的设计） 磁盘的管理（磁盘初始化，引导块，坏块的管理） I/O设备的基本概念和分类（按使用特性、传输速率、信息交换的单位分类） I/O控制器（功能，组成，两种寄存器编址方式） I/O控制方式（程序直接控制方式，中断驱动方式，DMA方式，通道控制方式） I/O软件层次结构 I/O核心子系统 假脱机技术（SPOOLing技术）（什么是脱机技术，解决问题，原理，共享打印机原理） 设备的分配与回收 { 设备分配时应考虑的因素（设备的固有属性，设备分配算法，设备分配中的安全性） 静态分配与动态分配 设备分配管理中的数据结构 设备分配的步骤 设备分配步骤的改进 } 缓冲区管理（定义，作用，单缓冲，双缓冲，循环缓冲，缓冲池） 2.什么是进程，进程调度是调度谁，进程的工作状态。 123进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。进程调度即低级调度，按照某种规则，从就绪队列中选择一个进程为其分配处理机。进程的状态：运行，就绪，阻塞，创建，终止 2.死锁，解除死锁的方法？ 12345死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。死锁的处理策略： 预防死锁，破坏死锁产生的四个必要条件中的一个或几个。 避免死锁，用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）。 死锁的检测和解除，允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。 3.死锁已经发生，如何解决？解决的时候需要注意什么？ 资源剥夺法。挂起（暂时放在外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他进程。但是应防止被挂起的进程长时间得不到资源而饥饿。 撤销进程法（终止进程法）。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间，已经接近结束了，一旦被终止就会功亏一篑，之后还得从头再来。 进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。 4.存储的方式有几种？各自优劣性？ 分类 优点 缺点 数组 连续存储，遍历快，随机访问，长度固定 移动或添加的时间复杂度O(n) 链表 离散存储，添加删除方便，空间消耗大 不能随机访问 Hash表 离散存储，利用哈希算法决定存储位置 遍历不方便 二叉树 多种遍历方式 图 5.调度什么时候发生？及调度算法，堆栈，均值 12345678910111213141516需要进行进程调度与切换的情况： 1.当前运行的进程主动放弃处理机： （1）进程正常终止； （2）运行过程中发生异常而终止； （3）进程主动请求阻塞（如，等待I/O） 2.当前运行的进程被动放弃处理机： （1）分给进程的时间片用完； （2）有更紧急的事需要处理（如，I/O中断）； （3）有更高优先级的进程进入就绪队列调度算法： 先来先服务(FCFS)， 最短作业优先(SJF)， 最高响应比优先(HRRN)， 时间片轮转调度算法(RR)， 优先级调度算法， 多级反馈队列调度算法。 6.网络的七层结构，哪几层用硬件实现，为什么其他层不用硬件？ 12345678自顶向下： 应用层 表示层 会话层 传输层（四层交换机、也有工作在四层的路由器） 网络层（路由器、三层交换机） 数据链路层（网桥、交换机） 物理层（网卡、网线、集线器、中继器、调制解调器） 由于OSI是一个理想的模型，因此一般网络系统只涉及其中的几层，很少有系统能够具有所有的7层，并完全遵循它的规定。在7层模型中，每一层都提供一个特殊的网络功能。从网络功能的角度观察：下面4层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；第4层作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；而上3层（会话层、表示层和应用层）则以提供用户与应用程序之间的信息和数据处理功能为主。简言之，下4层主要完成通信子网的功能，上3层主要完成资源子网的功能。 7.RARP的作用，相对应的协议是什么，地址解析的过程。 1RARP是逆地址解析协议 其作用是完成Mac地址到IP地址的映射。主要用于无盘工作站，因为无盘工作站配置的IP地址不能保存。其过程是：在网络中配置一台RARP服务器。当RARP服务器启动后，就会将Mac地址封装成一个RARP数据包，然后广播到网络上去，当服务器接收到请求包后，就会查找对应Mac地址的IP地址，装入响应报文中发回请求者。 因为需要广播数据包，因此RARP只能适用于具有广播能力的网络。 8.发微信用的是TCP还是UDP，为什么？ （1）登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一TCP连接来保持在线状态。（2）和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。（3）如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。 9.数据结构的顺序结构有哪些？（两种存储结构：顺序，链式）（4种逻辑结构：线性、树形、图状结构、集合） 12 10.专业课学了什么？嵌入式课程教了什么？能不能设计CPU？ 1软件工程 11.嵌入式系统和普通系统区别在哪？ 嵌入式操作系统（Embedded Operating System，简称EOS）是相对于一般操作系统而言的，它除了具备一般操作系统的最基本功能，如任务调度、同步机制、中断处理、文件功能外，还有以下特点： 12345678（1）具有开放性、可伸缩性的体系结构；（2）强实时性；（3）操作方便、简单、提供友好的图形GUI；（4）统一的接口；（5）提供强大的网络功能；（6）强稳定性，弱交互性；（7）固化代码；（8）良好的移植性。 12.数组和指针的区别是什么？ 概念 数组：数组是用于储存多个相同类型数据的集合。 指针：指针相当于一个变量，但是它和不同变量不一样，它存放的是其它变量在内存中的地址。 12345678（1）赋值方式（同类型指针变量可以相互赋值，数组只能一个个元素地赋值或拷贝）（2）存储方式 {数组内存连续存放，下标访问，多维数组也是按照一位数组存放} {灵活，指向任意类型的数据}（3）所占字节数(sizeof) {数组所占空间和存储元素类型有关} {32位平台下，指针所占字节数是4,64位下为8}（4）初始化方式 指针数组（存放指针类型的数组）和数组指针（指针指向一个数组） 13.嵌入式系统用什么语言写，什么是嵌入式？ 1汇编语言，C语言，Java 嵌入式即嵌入式系统，就是在其他电子产品或设备中，嵌入一个小型计算机，目的是为了，人机交互、采集传感器数据、处理数据、控制执行机构和通信。这个小型计算机就是嵌入式系统，它由各种单片机或微控制器加上外围电路组成。 嵌入式系统的学习中，要掌握几种微控制器MCU，如51单片机，ARM微控制器等，种类很多，要根据实际项目要求，使用不同的微控制器。 硬件设计：利用多种设计工具、利用微控制器和外围芯片，设计产品原理图，设计印刷电路板，PCB，制版，焊接，调试。电子系学生擅长。 软件设计：C/C++开发，懂点汇编语言，可以开发与操作系统的裸机的程序？ 所以，搞嵌入式系统，既要懂硬件，也要懂软件，还要懂通信。即电子、通信、计算机的融合。人工智能？边缘计算？ 14.编码，信道，码分多址与频分多址 12 15.数电（数字电路）主要学了哪些东西，组合逻辑电路和时序逻辑电路区别（电路图的区别和性能特性的区别） 比较 组合逻辑电路 时序逻辑电路（状态机）（同步） 输入输出关系 任意时刻的输出仅仅取决于该时刻的输入，与电路原来的转态无关 不仅仅取决于当前的输入信号，而且还取决于电路原来的状态，即与之前的输入有关 有无存储（记忆）单元 无（不能包含） 包含 结构特点 只包含门电路 组合逻辑电路+存储电路输出状态必须反馈到组合电路的输入端，与输入信号共同决定组合逻辑的输出 分析方法 从电路的输入到输出逐级写出逻辑函数式，最后得到表示输出与输入关系的逻辑函数式。然后用公式化简法或者卡诺图化简法得到函数式的化简或变换，以使逻辑关系简单明了。有时还可以将逻辑函数式转换为真值表的形式。 （1）写出每个触发器的驱动方程（2）将驱动方程带入触发器的特性方程的到状态方程组（3）根据逻辑图写出电路的输出方程状态转换过程描述：状态转换表、状态转换图、状态机流程图、时序图 设计方法 （1）逻辑抽象（2）写出逻辑函数式（3）选定器件类型（4）将逻辑函数式化简或者变换成适当的形式（5）画出逻辑电路的连接图（6）工艺设计 （1）逻辑抽象得到状态转换图或者状态转换表（2）状态化简（3）状态分配(状态编码)（4）选触发器求出状态方程、驱动方程和输出方程（5）根据方程式画出逻辑图（6）检查设计的电路能否自启动 常用组合逻辑电路 编码器、译码器、数据选择器、加法器、数值比较器 锁存器、触发器、寄存器、移位寄存器、存储器 16.动态存储和静态存储的区别（变量的存储方式可分为：静态存储和动态存储） 区别 静态存储 动态存储 概念 在程序运行期间分配固定的存储空间的方式 在程序执行过程中，使用它时才分配，使用完毕立即释放 例子 全局变量 形式参数 特点 在变量定义时就分定存储单元并一直保持不变，直至整个程序结束 如果一个函数被多次调用时，则反复地分配、释放变量的存储单元 生存期 一直存在的 时而存在时而消失 总结 （1）编译时完成，不占用CPU（2）栈（stack）上分配（3）不需要（4）按计划分配，由编译器负责 （1）运行时分配，分配和释放都占用CPU（2）堆上分配（3）分配时需要指针和引用类型支持（4）按需分配，由程序员负责 17.大信号和小信号的区别 18.模电分析方法应该先分析交流还是直流，为什么，怎么进行分析？ 19.递归的含义，递归能不能替代循环，递归需要做什么？堆栈需要用的什么？ 含义 递归就是本身调用自己或者间接调用自己的函数，是一种栈的使用，递归调用是入栈，之后的结果输出是出栈！ 所有递归能否替代循环 可以。有些递归只需要一个循环就可以替代，而有些递归的改写需要循环+栈，即要利用一定的辅助空间记录过程中的某些数据才可以。 所有循环能否改写成递归 可以但没必要。循环和递归的共同特点是，它们都是会不断重复执行相同代码，每次重复执行时所使用的数据不一样。 区别 循环的时间复杂度和空间复杂度都要优于递归，但递归的优越性在于条理清晰，可读性强，比较适宜于问题本身是递归性质的、用循环难于解决的问题。 1234递归的三大要素：（1）明确函数功能；（2）寻找递归结束条件；（3）找出函数的等价关系式。 运行时堆栈 递归发生的函数调用从底向上进入堆栈，最先进入的是栈底的主程序。当最上层的递归函数满足终止条件，这时一些列终止条件开始执行堆栈顶部的活动记录被弹出，程序控制被交给返回位置处。 20.中断嵌套是什么？ 当CPU响应某一中断时，若有优先权高的中断源发出中断请求，则CPU能中断正在进行的中断服务程序，并保留这个程序的断点（类似于子程序嵌套），响应高级中断，高级中断处理结束以后，再继续进行被中断的中断服务程序，这个过程称为中断嵌套。 21.printf函数在汇编中怎么实现？printf函数的参数格式，长度等等、在汇编中怎么表示？ 22.机器人的定义是啥？人工智能是啥？机器学习？数据挖掘？ 机器人包括一切模拟人类行为或思想与模拟其他生物的机械。机器人是一种能够半自主或全自主工作的智能机器。机器人具有感知、决策、执行等基本特征。人工智能是计算机科学的一个分支，它是研究开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。机器学习是一门多领域交叉学科，专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。它是人工智能核心，是使计算机具有智能的根本途径。数据挖掘是指从大量的数据中通过算法搜索隐藏于其中信息的过程。 23.单片机为啥叫单片机？ 24.人工智能的避障算法是啥 25.单片机的引导过程 26.DMA控制器是主设备还是从设备，什么时候做主设备，8259的中断过程 27.计网做实验在哪个仿真软件，傅里叶变换作用，非归零码与归零码区别、曼彻斯特是归零码还是非归零码。 winpcap(windows packet capture)是，公共的网络访问系统。为win32应用程序提供访问网络底层的能力。很多不同的工具软件使用Winpcap于网络分析，故障排除，网络安全监控等方面。Ethereal可以用来从网络上抓包，并能对包进行分析。 28.公猫母猫问题 29.一个饼分两份怎么分才公平，枪打树上的十只鸟有哪些情况，一块钱的面包买五个和买五个一块钱的面包选哪种等 其中有一个人把饼分成两份的权利，另一个人有优先的挑选权利。这样就能做到公平了。 1：一只都没有，一只被打死掉了下来，其他的飞走了；2：有一只，被打死的那只挂在了树上，其他的飞走了；3：有九只，被打死的那只掉了下了，其他的吓死了，挂在了树上；4：有十只，被打死的那只挂在了树上，其他的吓死了，也挂在了树上。还有很多很多，比如被打死的那只挂在了树上，其他的吓死了，5只掉了下来…… 30.一个方形桌子砍一刀后有几个角？ 二系 或软件、数据库与大数据相关的方向和老师 1.操作系统的定义 操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。 2.进程和线程 1线程是一个基本的CPU执行单元，也是程序执行流的最小单位。 3.一个文件在磁盘上，如何访问到 4.内存管理有哪些方法？ 5.虛拟存储的作用？为什么虛拟存储可以实现？ 6.多级存储系统的作用？ 7.寄存器和存储器的区别？ 8.请求分页页面置换算法列举 123456页面置换算法： 最佳置换算法（OPT） 先进先出置换算法（FIFO） 最近最久未使用置换算法（LRU） 时钟置换算法（CLOCK） 改进型的时钟置换算法 最佳置换算法（OPT） 每次选择淘汰的页面将是以后永不使用，或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率。 先进先出置换算法（FIFO） 每次选择淘汰的页面是最早进入内存的页面。 最近最久未使用置换算法（LRU） 每次淘汰的页面是最近最久未使用的页面。 9.叙述clock（时钟）置换算法 1时钟置换算法是一种性能和开销较均衡的算法，又叫“最近位使用算法（NRU）” 简单的CLOCK算法实现方法：为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个循环队列。当某页被访问时，其访问位置为1。当需要淘汰一个页面时，只需检查页的访问位。如果是0，就选择该页换出；如果是1，则将其置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描（第二轮扫描中一定会有访问位为0的页面，因此简单的CLOCK算法选择一个淘汰页面最多经过两轮扫描） 访问位为1，表示最近访问过； 访问位为0，表示最近没访问过。 改进型的时钟置换算法 简单的时钟置换算法仅考虑到一个页面最近是否被访问过。事实上，如果被淘汰的页面没有被修改过，就不需要执行I/O操作写回外存。只有被淘汰的页面被修改过时，才需要写回外存。 因此，除了考虑一个页面最近有没有被访问过之外，操作系统还应考虑页面有没有被修改过。在其他条件都相同时，应优先淘汰没有修改过的页面，避免I/O操作。这就是改进型的时钟置换算法的思想。 修改位=0，表示页面没有被修改过； 修改位=1，表示页面被修改过。 用（访问位，修改位）的形式表示各页面状态。改进型CLOCK置换算法选择一个淘汰页面最多会进行四轮扫描。 10.C语言中你习惯定义全局变量还是局部变量 看情况吧，有需要使用全局变量的时候，我会选择去定义全局变量；如果局部变量可以解决的问题，我就会去定义局部变量。应为全局变量的生命周期长，会占用更多的内存，且由于其全局性，所有代码都可以修改它，对这个变量的最终就很困难。 11.编译的过程是什么？ 12.给一个链表，如何确定这个链表有环？ 采用“快慢指针”的方法。就是有两个指针fast和slow，开始的时候两个指针都指向链表头head，然后在每一步操作中slow向前走一步,即：slow = slow-&gt;next，而fast每一步向前两步即：fast = fast-&gt;next-&gt;next。由于fast要比slow移动的快，如果有环，fast一定会先进入环，而slow后进入环。当两个指针都进入环之后，经过一定步的操作之后二者一定能够在环上相遇，并且此时slow还没有绕环一圈，也就是说一定是在slow走完第一圈之前相遇。 如果存在环，找出环的入口点 从链表起点head开始到入口点的距离a,与从slow和fast的相遇点（如图）到入口点的距离相等？因此我们就可以分别用一个指针（ptr1, prt2），同时从head与slow和fast的相遇点出发，每一次操作走一步，直到ptr1 == ptr2，此时的位置也就是入口点！ 如果存在环，求出环上节点的个数 如果存在环，求出链表的长度 如果存在环，求出环上距离任意一个节点最远的点（对面节点） （扩展）如何判断两个无环链表是否相交 （扩展）如果相交，求出第一个相交的节点 13.线性表的定义 14.设计算法统计一个二进制数中1的个数？ 15.斐波那契递归和迭代区别是啥？ 16.描述斐波拉契序列算法和和汉诺塔算法 17.数据库范式的定义以及区别？ 18.数据库第一二三四范式是啥？ 19.数据挖掘有什么应用 20.数据库有几和锁？数据库的事务？常用的数据库？数据库的主码外码？ 21.用离散数学解释下主成分分析是啥？ 22.学过哪些前沿课程？课程内容是什么？人工智能是什么？（这种问题别给自己挖坑这种属于典型的开放式问题开头然后步步深入，甚至可以问的很深入。注意挑选自己擅长的科目，一知半解的课程不如不说） 23.项目是什么，自己做了什么 24.有10框苹果，有9框每个半斤重。有一筐每个四两,如何通过只称重一次，找出那个不一样的 25.有10筐苹果，9筐半斤、1筐4两，只用一杆秤，只能称一次找出4两的那筐苹果（问了多次） 三系 或机器学习、深度学习和图像处理相关的方向和老师，多涉及到一些数学相关知识 1.你能描述一下数据结构具体有哪几种吗？解释机器学习 2.面向对象中的封装、多态和继承 3.数据结构中的链表的逆置 123456方法1：头插法建立新的链表，从头顺序遍历，遍历的每个结点都用头插法插入到新的链表中； 时间和空间复杂度都为O(n)，好处是不用修改原来的链表，坏处就是多了空间复杂度。方法2：原地逆置法是每每修改两个相邻结点p,q的前后关系，增加一个指针保存下一次的修改目标结点； 空间复杂度为O(1)，时间同样为O(n)，但是这种方法修改了原来的链表。方法3：使用递归，reverse(head),出口设置为head==null 和head.next==null。方法4：库函数 4.一个链表里面有循环，怎么确定循环的头尾相交结点？ 5.优先级反转是什么？怎么解决这个问题？ 6.为什么要有泰勒展开式？对计算机学科的意义是什么？ 7.泰勒展开式的n取到多少？怎么确定？ 8.线性代数中坐标变换的意义是什么？能解决什么问题？ 9.空间解析几何中的维空间与空间解析几何讲的是什么？ 10.怎么求sin01? 11.极大似然函数的作用 12.描述下贝叶斯定理 13.特卡洛求不规则图形面积。答：比如一张纸上有不规则图形。可以用散列法（知特卡洛），如在上面撤芝妹，然后通过比例求面积（注：答案非标准答案，是考生当时的回答） 14.复变函数中的若积公式。答：应该是有两个函数，然后求关于第一个函数，表征意思是求这两个高数平滑后的面积，即翻续平移后量誉的部分。 15.傅卫叶变化。答：把一个函数分解成sin和cos，可以大大减少运算次数。 15.特征值是什么？ 17.双聚关启发式搜宗k均值聚关 18.蚁群算法。答∶用正反馈机制寻求最优解，这个最优解是全局最优解。可以和运筹学结合起来用，比如运筹学里的指派问题、旅行商问题。 19.你学过这个方向的相关专业课有哪些？ 20.人脸对比的时候，对比的是哪些信息？ 21.图像处理的项目里你觉得有那些槟块？ 22.计算机视觉的看法，评价报考老师的论文。 23.讲下你的毕设 我的毕业论文题目是《FTP代理机制研究》。 （1）科研方法：文献研究法。通过专业的文摘、索引、工具书、光盘以及网络资源等文献的检索来发挥文献价值与创造性的利用文献的方法。 （2）研究对象：计算机网络领域的一个重要协议，FTP文件传输协议。 （3）科研目的：代理服务器是缓解网络安全问题的有效方法之一。 （4）研究内容：通过实现FTP协议的控制连接和数据连接来实现代理服务器的功能。 24.一个桶装有8斤油，另有一个3斤与一个5斤桶，怎么分成两桶4斤油？（基本没有思考的时间） 8斤的桶 3斤的桶 5斤的桶 初始 8 0 0 第一次 3 0 5 第二次 3 3 2 第三次 6 0 2 第四次 6 2 0 第五次 1 2 5 第六次 1 3 4 第七次 4 0 4 25.一个箱子，放了一个白球，一个黑球，每次取一个便放回去，问至少有一次是红球的率是多少？ 四系 或网络安全、密码学相关方向和老师 1.路由器和交换机的功能然后他们的区别 2.TCP拥塞的解决方式，分别解释一下 3.TCP为什么三次握手 专业课公共知识 以下考生回忆的问题没有明显的方向性，属于基础知识的，放在下面这个目录 1.为什么要有系统调用？ “系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。有何作用： 应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。 2.调度是什么？内存怎么管理 CPU作为一种系统资源，是唯一的，而在多任务的OS中，每个任务都需要使用CPU，因此需要为任务对CPU的使用提供一种同步机制，这就是调度（Scheduling）。在并发程序设计中，各进程对公共变量的访问必须加以制约，这种制约称为同步。 3.进程和线程的区别 4.什么是死锁 5.描述一下你学过的排序算法 分类 算法 交换排序 冒泡排序 希尔排序 快速排序 选择排序 简单选择排序 插入排序 堆排序 归并排序 基数排序 6.操作系统中用来表示内存已被占用的数据结构是什么？ 7.操作系统提供给程序员创建进程的接口有哪些？ 8.说一下内存管建方式有哪些？ 9.全局变量和局部变量分别存储在哪里？（变量的存储类型及性质） 局部变量存在于（栈）中，只有当所在函数被调用时才动态地为变量分配存储单元。全局变量和静态变量存在于（静态区/全局存储区）中，占用静态的存储单元。动态申请数据存在于（堆）中（new的对象存在于堆区，malloc的对象存在于自由存储区）。常量存在于常量区。 C语言经过编译之后将内存分为以下几个区域： （1）栈（stack）：由编译器进行管理，自动分配和释放，存放函数调用过程中的各种参数、局部变量、返回值以及函数返回地址。操作方式类似数据结构中的栈。 （2）堆（heap）：用于程序动态申请分配和释放空间。C语言中的malloc和free，C++中的new和delete均是在堆中进行的。正常情况下，程序员申请的空间在使用结束后应该释放，若程序员没有释放空间，则程序结束时系统自动回收。注意：这里的“堆”并不是数据结构中的“堆”。 （3）全局（静态）存储区：分为DATA段和BSS段。DATA段（全局初始化区）存放初始化的全局变量和静态变量；BSS段（全局未初始化区）存放未初始化的全局变量和静态变量。程序运行结束时自动释放。其中BBS段在程序执行之前会被系统自动清0，所以未初始化的全局变量和静态变量在程序执行之前已经为0。 （4）文字常量区：存放常量字符串。程序结束后由系统释放。 （5）程序代码区：存放程序的二进制代码。 10.外部中断CPU该如何处理 11.快排和冒泡的原理自己他们的空间复杂度是多少？ 12.佛洛依德算法？迪杰斯特拉算法？ 1都是求最短路径的算法。 13.DHCP协议的作用 12 14.一个访问网络的过程 15.用自己的话讲TCP连接到底是什么 16.设计web服务器 17.几种方法写阶乘 1(1)循环；（2）库函数；（3）递归 18.定义一个结构体，里面一个int类型成员，一个char，int占四位，char占一位，那么在Linux占几位 123456核心：(1)每个元素的首地址偏移量必须能整除该元素的长度？(2)整个结构体的长度必须能整除最长元素的字节数。涉及到内存字节对齐的问题。Windows和Linux的区别只有double不同，以后会整理这题答案应该是8位 C++方面 （或编程语言，这类问题一般建立在简历中提到了相关技能，或老师提问你会什么语言） 1.最擅长哪种语言? 1Java 2.请简述C，C++语言有何区别和联系？ 区别： C语言是面向过程语言，而C++是面向对象语言1.面向过程和面向对象的区别（1）面向过程：面向过程编程就是分析出解决问题的步骤，然后把这些步骤一步一步的实现，使用的时候一个一个的依次调用就可以了。（2）面向对象：面向对象编程就是把问题分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。面向过程就是自顶向下的编程（步骤划分），面向对象就是高度实物抽象化（功能划分）2.具体语言的区别（1）关键字不同（2）文件后缀名不同（3）返回值 C语言中，如果一个函数没有指定返回值类型，默认返回int类型；C++中，如果一个函数没有返回值则必须指定为void。（4）参数列表 在C语言中，函数没有指定参数列表时，默认可以接收任意多个参数；但在C++中，因为严格的参数类型检测，没有参数列表的函数，默认为 void，不接收任何参数。（5）默认参数（C语言不支持默认参数，C++支持默认参数）（6）函数重载（C语言没有函数重载，C++支持函数重载） 联系： 1C++ 由C语言发展而来，几乎完全兼容C语言；也就是说C语言代码几乎可以不加修改地用于 C++。 相关扩展：C语言中struct和union的区别是什么？ struct (结构体）与union (联合体）是C语言中两种不同的数据结构，两者都是常见的复合结构，其区别主要表现在以下两个方面：(1) 结构体与联合体虽然都是由多个不同的数据类型成员组成的，但不同之处在于联合体中所有成员共用一块地址空间，即联合体只存放了一个被选中的成员，而结构体中所有成员占用空间是累加的，其所有成员都存在，不同成员会存放在不同的地址。所以结构体在计算一个结构型变量的总长度时，其内存空间大小等于所有成员长度之和（需要考虑字节对齐），而在联合体中， 所有成员不能同时占用内存空间，它们不能同时存在，所以一个联合型变量的长度等于其最长的成员的长度。(2) 对于联合体的不同成员赋值，将会对它的其他成员重写，原来成员的值就不存在了， 而对结构体的不同成员赋值是互不影响的。 相关扩展：C和C++中struct的区别是什么？ C语言中的struct与C++中的struct的区别表现在以下3个方面： (1) C语言的struct不能有函数成员，而C++的struct可以有。 (2) C语言的struct中数据成员没有private、public和protected访问权限的设定，而C++的struct的成员有访问权限设定。 (3) C语言的struct是没有继承关系的，而C++的struct却有丰富的继承关系。C语言中的struct是用户自定义数据类型，它是没有权限设置的，它只能是一些变量的集合体，虽然可以封装数据却不可以隐藏数据，而且成员不可以是函数。为了和C语言兼容，C++中就引入了struct关键字。C++语言中的struct是抽象数据类型 (ADT)，它支持成员函数的定义，同时它增加了访问权限，它的成员函数默认访问权限为public。 相关扩展：C++中的 struct与class的区别是什么？ 具体而言，在C++中，class和struct做类型定义时只有两点区别： (1) 默认继承权限不同。class继承默认是private继承，而struct继承默认是public继承； (2) class还用于定义模板参数，就像typename，但关键字struct不用于定义模板参数。 相关扩展：简单描述一下你认为的C语言的优点和缺点？ 优点： （1）编写的程序可读性强，编译效率高。 （2）具有简洁紧凑、使用灵活的语法机制。 （3）数据结构丰富，满足多种数据开发要求。 （4）允许直接访问物理地址，对硬件进行操作。 （5）具有出色的可移植性，能在多种不同体系结构的软/硬件平台上运行。缺点： （1） C语言的缺点主要表现在数据的封装性上，这一点使得C在数据的安全性上有很大缺陷，这也是C和C++的一大区别。 （2） C语言的语法限制不太严格，对变量的类型约束不严格，影响程序的安全性，对数组下标越界不作检查等。从应用的角度，C语言比其他高级语言较难掌握。也就是说，对用C语言的人，要求对程序设计更熟练一些。 （3） C语言的简洁性与其丰富的运算符相结合，使其可能会编写出极难理解的代码。 （4） C语言表达方面的自由会增加风险。尤其是C语言对指针的使用。 相关扩展：C++是不是类型安全的？ 不是。两个不同类型的指针之间可以强制转换（用reinterpret cast)。C#是类型安全的。类型安全代码指访问被授权可以访问的内存位置。类型安全的代码不会试图访问自己没被授权的内存区域。 相关扩展：谈谈你是怎么认识 C++ 中的模板的？ 模板使程序员能够快速建立具有类型安全的类库集合和函数集合，它的实现，方便了大规模的软件开发。（结合stl更好）STL是“Standard Template Library”的缩写，中文译为“标准模板库”。STL是C++标准库的一部分，不用单独安装。C++对模板（Template）支持得很好，STL就是借助模板把常用的数据结构及其算法都实现了一遍，并且做到了数据结构和算法的分离。例如，vector的底层为顺序表（数组），list的底层为双向链表，deque的底层为循环队列，set的底层为红黑树，hash_set的底层为哈希表。 相关扩展：C++中所有的运算符都能重载吗？ 在C++运算符集合中，有一些运算符是不允许被重载的。这种限制是出于安全方面的考虑，可防止错误和混乱。 （1）不能改变C++内部数据类型（如int,float等）的运算符。 （2）不能重载‘.’，因为‘.’在类中对任何成员都有意义，已经成为标准用法。 （3）不能重载目前C++运算符集合中没有的符号，如#,@,$等。原因有两点，一是难以理解，二是难以确定优先级。 （4）对已经存在的运算符进行重载时，不能改变优先级规则，否则将引起混乱。 3.简述面向对象有哪些好处？ 4.简述类和对象 类 对象 类是现实世界在计算机中的反映，它将数据和对这些数据的操作封装在一起 类的实例 并没有开辟空间类的大小：类的成员函数放在公共代码区，所有该类的对象共享这些成员函数，每个对象的大小为类内成员变量的大小之和，遵循内存对齐原则 占有实际的空间（用来存储成员变量）对象的大小为类中所有成员变量的大小之和，当然这里也遵循内存对齐原则 三大特性：封装、继承、多态访问限定符 为什么要内存对齐（前面也遇到过这种问题） 为了提高程序的性能，方便CPU访问内存，处理器并不是一个字节一个字节来访问内存，一般是4个字节或8个字节 空类占多少个字节？为什么？ 空类占1个字节，占位用，告诉系统我这里定义了一个类，虽然它是空的 5.什么是重载？ 12345重载的定义：（1）同一个类；（2）多个方法的方法名字相同；（3）参数列表不同、参数个数不同、参数的数据类型不同，不同数据类型的参数顺序不同和修饰符无关、和有无返回值无关、和返回值类型无关、和参数名无关 什么是多态？ 12多态就是同一个接口，使用不同的实例而执行不同操作。函数的多种不同的实现方式即为多态。 6.C++里什么是friend？ C++中的友元机制允许类的非公有成员被一个类或者函数访问 123456789101112友元按类型分为三种： (1)普通非类成员函数作为友元； (2)类的成员函数作为友元； (3)类作为友元。友元函数的实现可以在类外定义，但必须在类内部声明。友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类。但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend。注意： (1)友元不具有相互性，只具有单项性； (2)友元不能被继承； (3)友元不具有传递性。 7.C++的继承方式 1234继承是类的重要特性。三种继承方式：公有、私有、保护继承。多态（虚函数，虚函数表？）和Java的继承并无二致。 8.python的学习 9.python特殊的数据类型 6种特殊数据类型 概念 list：列表 是一种有序的数据集合，在列表数据结构中的类型并不唯一 tuple：元组 是一种有序的列表，但是其一旦创立完毕就不能够更改，即不能插入，删除里面的元素，访问的方式跟List结构一致。 dict：字典 类似JSON，键值对 set：集合 无序但是所有元素唯一，不重复 Unicode编码 支持显示中文 raw 一个“raw”字符串，里面的字符就不需要转义 10.Java和C++的异同 11.Java与C++的类、继承有什么相同和不同？ 跨考、在职考研的考生为什么跨专业考研。为什么辞联考研。为什么当时毕业不考研。在工作的时候有没有和本专业相关的知识运用。研究生规划。在公司的职业情况。机器人的定义。人工智能的定义。这两都跟老师的研究方向相关,会问本科专业的一些问题。PLC与FPGA的中文名称。数据结构中线性表有哪些? 考查英语口语方面 一般也是英语提问，考查考生的听、说能力 1.自我介绍+家乡介绍？ 2.介绍自己的家？ 3.本科学校，专业是啥，专业多少人，排名多少？ 4.为什么选择这个研究方向？ 5.为什么来nwpu？怎么知道nwpu？nwpu全拼是什么？ 1Northwestern Polytechnical University 6.什么时候来的西工大，感觉西工大怎么样，以后想在哪个公司？ 7.西工大绘你印象最深的地方。 8.学过什么程序语言 9.做过什么项目？ 10.问了队列和链表相比的缺点。 11.你最喜欢的专业课是什么？ 12.和门外等着的人，你觉得你的优势是什么？ 2019年夏令营面试问题汇总一系 考察内容涉及数电、模电、嵌入式、SOC相关知识，以及软工、操作系统、C语言、计算机组成原理的相关知识。 同学A：先是英语白我介绍；然后主要就是项目。没问专业问题。 同学B：银行家算法。数学知识。 三系：偏向于数据与图像处理，考察数学知识较多，而且有英语提问。 同学C：问到数学知识，专业课问题较多。 四系 主要考察计算机网络、操作系统、网络安全相关知识。会询问是否做过网络的一些实验 同学D：英文自我介绍。说说自己做过的项目，我是网络的，问了计网的，四层结构，mac英文意思，用过什么操作系统，Linux中创建文件的指令，同组有问操作系统的，概率论，高数的。 2018年夏令营面试问题汇总二系 主要负责老师未到场，面试的是今年刚任职的老师，参考意义不大，剧开始有自我介绍和英文提问。研究方向为数据库方面，主要是算法 英文介绍，用英文描述你喜欢的运动 做的具体项目，会步步深入 最欢的专业课，对本专业理解，给你三分钟的时间说服老师留下你、和舍友关系如何。 三系 偏向于数据与图像处理，考察数学知识较多，而且有英语提问 线性代数知阵的特征值和特征向量计算方式及意义。 高数：梯度。 说几种排序算法的复杂度。 编程相关经历。 是否了解意愿导师的方向 12345智能计算系统系：副高职称王党辉主要研究方向： 高性能处理器体系结构、人工智能加速器架构、 高可靠计算机系统、多核/众核系统的资源调度、 新型存储系统、嵌入式系统设计、数字系统设计与测试等 是否有接触CV、NLP或机器学习等方向的工作 2017年夏令营面试问题汇总1系 考察涉及数电、椟电、嵌入式、SOC知识、软件工程、澡作系统、C言、计算机组成原理 三八编译器的设计原理 放大器的设计原理 lts系统有哪些算法 嵌入式系统的计数器如何使用 8255如何用 操作系统进程 CPU工作模式 2系 刚开始有白我介绍和英语提问，研究方向为数据库方向，主要是算法 进程死锁（概念、避免、预防） 数据库基本知识（外键、查询语句） 算法（如从两串中查找相同元素的所有方法） 模式匹配 C语言些一简单的输入输出格式 3系 考察数学知识较多、会用英运提问 高数、线代、概率等的相关知识（如高斯模型、矩阵的转换、矩阵的逆等） 编程最好的语言 C语言的主要内容 概率论相关和独立的区别 发表论文的意义 4系 主要着察计算机网络、操作系统、网络安余等知识，是否做过一些网络的实验，本科学过什么特色课程 WLAN定义 WiFi、3G和蓝牙使用的是什么协议 为什么WiFi比3G便宜 HTTP是什么，Https是什么，区别 死锁的原因，接触；进程线程 IPV4和IPV6的地址位数 网络安全；攻击方式 会做网线吗？怎么做；网线由几根线组成？那几根不能用 cookie的原理 2017级面试问题汇总3系： 图像与语音处理，主要以数学问题为主，所以建议报考三系的同学考完研不要松懈复习专业课（数学课）基本知识，二系今年与其他组的不同之处在于没有英话介绍，背了半天竟没用上，反之是问了一个特别长的问题，好像是介绍家乡 高斯滤波、傅里叶变换、采样定理 正态分布要素 一条曲线怎么证明在一个平面上 a投影至b上，求投影长度 举一个连续分布的例子。还有什么分布 安卓和IOS区别 int在winxp和wn10区别 发送邮件用到了什么协议 ②4系:网络:HTTPS和HTTP区别 死锁的必要条件等 2016级面试问题汇总1.英语自我介绍 Good morning! Teachers and professors. I am very glad to be here for this interview. First, let me introduce myself. My name is XiaoMengjie. I have finished my undergraduate education in Northwest University, majoring in Software Engineering. I am open-minded, willing and have broad interests like basketball and web development. For example, during the past four years, I have accomplished several website. (What impresses me most is the Hotel Management System that I developed for my father.) Furthermore, I am intrested in Java programming language and have written some websites with Springboot. This year, I finished my graduate project with FTP. Although I have broad interests in many aspects and grasp the essential konwledge of the major, but I think at present, I want to do many things, but not be competent to do things professionally owing to lack of ample knowledge and ability. So I think further study is still urgent for me to realize selfvalue. 我认为可以短一点 Good morning/afternoon! Teachers. I am very glad to be here for this interview. First, let me introduce myself. My name is XiaoMengjie. I come from Northwest University, majoring in Software Engineering. I am open-minded and I like web development and am interested in Artificial intelligence field. So I think further study is still urgent for me to realize selfvalue. 2.英语描述操作系统 3.这个IP地址192.168.45.3是什么地址？ 4.百度IP和电脑IP有什么不同 5.浏览一个网页都用到了哪些协议? 12 6.离散数学中什么是蕴含 7.什么时候用到递归 8.做过什么项目","link":"/Study/56260.html"},{"title":"数字逻辑课程复习","text":"考查目标 1、掌握逻辑代数的基础知识、基本概念及运算规律； 2、掌握半导体器件、门电路、组合逻辑、时序逻辑等电路基础知识、基本概念及工作原理； 3、掌握数字系统设计基本方法、逻辑函数优化实现及逻辑电路测试方法。 以西北工业大学801计算机专业基础为考纲，虽然当时考试未选这门课，但可以以此作为作为学习基础。 一、逻辑代数1.1 逻辑代数的基本运算、基本定理、基本法则1.2 利用逻辑代数和卡诺图对逻辑函数进行转换与化简1.3 各种形式的逻辑函数的相互转换方法1.4 卡诺图化简方法1.5 不完全确定的逻辑函数的化简方法1.6 多输出逻辑函数的化简方法二、门电路2.1 了解PN结的结构与原理，掌握PN结的伏安特性2.2 掌握双极型晶体管和场效应晶体管的结构及工作原理2.3 掌握CMOS门电路结构和工作原理；2.4 掌握TTL门电路结构和工作原理三、组合逻辑电路3.1 掌握组合逻辑电路的分析方法3.2 熟悉常用组合逻辑电路模块的结构和逻辑功能3.3 掌握组合逻辑电路的设计过程3.4 基于门电路的设计3.5 基于常用组合逻辑电路模块的组合逻辑电路设计3.6 了解组合逻辑电路中的冒险现象及其消除方法四、触发器及时序逻辑电路4.1 掌握常用触发器的结构和工作原理；4.2 掌握触发器的逻辑功能及描述方法；4.3 熟悉触发器及其简单应用电路；4.4 掌握同步时序逻辑电路的分析和设计方法；4.5 掌握异步时序电路的分析和设计方法；4.6 掌握时序逻辑电路中的竞争-冒险现象和消除方法；五、半导体存储器5.1 掌握只读存储器结构和工作原理；5.2 掌握随机存储器结构和工作原理；5.3 掌握存储器容量扩展方法；5.4 熟悉用存储器实现组合逻辑函数的方法；六、可编程逻辑器件6.1 掌握复杂的可编程逻辑器件的结构和工作原理；6.2 掌握现场可编程逻辑阵列的基本结构、工作原理；6.3 熟悉可编程逻辑器件的编程和数据下载方法；七、Verilog硬件描述语言7.1 掌握Verilog基本程序结构；7.2 掌握Verilog词法构成；7.3 熟悉模块的描述方式；7.4 掌握采用Verilog描述简单的组合逻辑电路和时序逻辑电路；八、脉冲波形的产生和整形8.1 掌握施密特触发器的结构和工作原理；8.2 掌握单稳态触发器类型、结构和工作原理；8.3 掌握多谐振荡器类型、结构和工作原理；8.4 熟悉555定时器及其应用；九、逻辑电路测试9.1 掌握容错模型9.2 掌握树形结构电路；9.3 掌握随机测试方法；9.4 掌握时序电路测试方法；9.5 掌握内建自测试方法；十、参考书目 《数字电子技术基础》（第5版），阎石，高等教育出版社，2011年。 《数字逻辑与Verilog设计》（第3版），(美)布朗(Stephen Brown)，(美)弗兰民斯克(Zvonko Vran)，罗荣选译，清华大学出版社，2014年。","link":"/Study/60189.html"},{"title":"调剂面试准备","text":"《(04)光电综合》考查目标： 考察物理光学和数字电路的基础知识。 目的在于考察学生对物理光学基础知识和现代光电技术及仪器中所涉及的基本数字电路的了解情况和掌握程度。 网络上搜索，自己准备，毕竟调剂。 光的干涉衍射和偏振光的衍射光离开直线路径绕到障碍物或小孔后面传播的现象。 发生明显衍射的条件：只有在障碍物或孔的尺寸比光的波长小或者跟波长差不多的条件下，才能发生明显的衍射现象。 常见的衍射现象有单缝衍射，圆孔衍射和泊松亮斑等。 光的干涉产生稳定干涉的条件：只有两列光波的频率相同，位相差恒定，振动方向一致的相干光源，才能产生光的干涉。由两个普通独立光源发出的光，不可能具有相同的频率，更不可能存在固定的相差，因此，不能产生干涉现象。 双缝干涉两列或几列光波在空间相遇时相互叠加，在某些区域始终加强，在另一些区域则始终削弱，形成稳定的强弱分布的现象，证实了光具有波动性。 光的偏振太阳或灯泡所发出的光波，其方向很多，可能是水平的，竖直的，对角线的，如上图左下角红色的线，这是非偏振光。 偏振过滤器，即图中黑色方框，有一个偏振角，即图中蓝色线，只能让某一个方向的光波通过。如左边第一个蓝线只能让竖直方向的光波通过。多种方向的光波通过后只剩下一个方向，变成了偏振光。 但如果第二个偏振过滤器的偏振角并非垂直于剩下的电磁波，而是有一个角度呢？平行四边形法则，将剩下的光波分解成水平和垂直于偏振角的两个分量，垂直于偏振角的的被过滤掉了，剩下的就是水平的了。 数字逻辑电路的基本知识半导体器件原理和输入输出特性另有一类物质的导电特性处于导体和绝缘体之间，称为半导体，如锗、硅、砷化镓和一些硫化物、氧化物等。 物体导电性能取决于由自由电子浓度 导体原子核对电子的束缚较小，自由电子浓度高，导电性能好 绝缘体中大多数电子都被原子核束缚，自由电子浓度很低，导电性能差 半导体则介于两者之间，且易受外界因数的影响 价电子：半导体材料原子最外层的电子由于受原子核的束缚较小，比较容易变成自由电子。 现代电子学中，用的最多的半导体是硅和锗，它们的最外层电子（价电子）都是四个。 半导体的导电能力随温度、光照和掺杂等因素发生显著变化，这些特点使它们成为制作半导体元器件的重要材料。 本征半导体：纯净的单晶半导体。 价电子可以获得足够大的能量，挣脱共价键的束缚，游离出去，成为自由电子，并在共价键处留下带有一个单位的正电荷的空穴。这个过程称为本征激发。本征激发产生成对的自由电子和空穴，所以本征半导体中自由电子和空穴的数量相等。 价电子的反向递补运动等价为空穴在半导体中自由移动。因此，在本征激发的作用下，本征半导体中出现了带负电的自由电子和带正电的空穴，二者都可以参与导电，统称为载流子。 自由电子和空穴在自由移动过程中相遇时，自由电子填入空穴，释放出能量，从而消失一对载流子，这个过程称为复合。 自由电子（负电荷）：部分价电子挣脱共价键束缚离开原子而成为自由电子。自由电子可以在单晶体中自由移动。 空穴（正电荷）：失去价电子的共价键处留下一个空位，即空穴。 空穴的移动：相邻共价键中的电子在空位正电荷的吸引下会填补这个空位，即空位发生了移动。 空穴的移动实际上是束缚电子的反移动。 自由电子和空穴都可以参与导电，这是半导体不同于金属（只有自由电子）的区别之一。 本征激发：本征半导体受外界能量（热、电和光等）激发，同时产生电子、空穴对的过程。 本征半导体导电性能对温度的变化很敏感。本征载流子浓度随温度升高近似指数上升。本征半导体导电能力弱。禁带宽度越大，导电性能越差（绝缘性能越好) N型半导体和P型半导体本征激发产生的自由电子和空穴的数量相对很少，这说明本征半导体的导电能力很弱。 我们可以人工少量掺杂某些元素的原子，从而显著提高半导体的导电能力，这样获得的半导体称为杂质半导体。根据掺杂元素的不同，杂质半导体分为N型半导体和P型半导体。 N型半导体 在本征半导体中掺入五价原子，即构成N型半导体。N型半导体中每掺杂一个杂质元素的原子，就提供一个自由电子，从而大量增加了自由电子的浓度一一施主电离。 多数载流子一一自由电子 少数载流子一一空穴 但半导体仍保持电中性 P型半导体 在本征半导体中掺入三价原子，即构成P型半导体。P型半导体中每掺杂一个杂质元素的原子,就提供一个空穴,从而大量增加了空穴的浓度一一受主电离。 多数载流子一一空穴 少数载流子一一自由电子 但半导体仍保持电中性 本征半导体载流子受温度、光照影响大。杂质半导体载流子主要受掺杂浓度控制。 半导体电流漂移电流：在电场的作用下，自由电子会逆着电场方向漂移，而空穴则顺着电场方向漂移，这样产生的电流称为漂移电流，该电流的大小主要取决于载流子的浓度，迁移率和电场强度。 扩散电流：半导体中载流子浓度不均匀分布时，载流子会从高浓度区向低浓度区扩散，从而形成扩散电流，该电流的大小正比于载流子的浓度差即浓度梯度的大小。 PN结通过掺杂工艺，把本征半导体的一边做成P型半导体，另一边做成N型半导体，则P型半导体和N型半导体的交接面处会形成一个有特殊物理性质的薄层，称为PN结。 空间电荷区又称为耗尽区或势垒区。在掺杂浓度不对称的PN结中，耗尽区在重掺杂一边延伸较小，而在轻掺杂一边延伸较大。 MOS逻辑门电路MOS管是金属（metal）、氧化物（oxide）、半导体（semiconductor）场效应晶体管。 CMOS：金属-氧化物-半导体互补逻辑门电路（数字集成器件）。 TTL是晶体管-晶体管逻辑电路的英文缩写（Transistor-Transistor-Logic），是数字集成电路的一大门类；它采用双极型工艺制造，具有高速度低功耗和品种多等特点。 ECL（Emitter-Coupled Logic）：射极耦合逻辑门电路。 CMOS逻辑门电路非门：反相器？ 组合逻辑设计组合逻辑电路：对于一个逻辑电路，其输出状态在任何时刻只取决于同一时刻的输入状态，而与电路原来的状态无关。 确定逻辑功能，列出真值表 画出卡诺图，列出表达式 设计电路 触发器在时钟脉冲边沿作用下的状态刷新称为触发。具有这种特性的存储单元电路称为触发器。 触发器的逻辑功能 D触发器 特征方程：Q^{n+1}=D 原理、变化也很简单，输出取决于D取值。 JK触发器 JK触发器是时钟边沿敏感的基本存储单元。 Q^{n+1}=J\\overline {Q^n}+\\overline KQ^n由其状态图分析得出：当上一状态为0时，输出取决于J，无论K为何值，J取0时，这次输出为0，J取1时下一状态就为1；若初始上一状态为1，输出取决于K，不论J取何值。 T触发器 Q^{n+1}=T\\overline {Q^n}+\\overline TQ^n=T\\bigoplus Q^n计数功能的控制，当控制信号T=1时，每来一个时钟脉冲，它的状态翻转一次（即0变1,1变0）；而当T=0时，则不对时钟脉冲信号做出响应而保持状态不变。 SR触发器 \\begin{cases} Q^{n+1}=S+\\overline RQ^n\\\\ SR=0(约束条件)\\\\ \\end{cases}S=R=1时，触发器次态不确定，触发器将失去控制， 利用D触发器构成其他触发器 施密特触发器原理施密特触发电路（简称）是一种波形整形电路，当任何波形的信号进入电路时，输出在正、负饱和之间跳动，产生方波或脉波输出。不同于比较器，施密特触发电路有两个临界电压且形成一个滞后区，可以防止在滞后范围内的噪声干扰电路的正常。如遥控接收线路，传感器输入电路都会用到它整形。 施密特触发器 一般的比较器只有一个作比较的临界电压，若输入端有噪声来回多次穿越临界电压时，输出端即受到干扰，其正负状态产生不正常转换。 施密特触发器的输出电压经有两个电阻？分压后送回到运算放大器的非反相输入端形成正反馈。因为正反馈会产生滞后现象，所以只要噪声的大小在两个临界电压（上临界电压及下临界电压）形成的滞后电压范围内。即可避免噪声误触发电路。 特点 是能够把变化缓慢的输入信号整形成边沿陡峭的矩形脉冲。同时，施密特触发器还可利用其回差电压来提高电路的抗干扰能力。它是由两级直流放大器组成。 应用 利用施密特触发器可以将非矩形波变换成矩形波（用施密特触发器实现波形变换） 利用施密特触发器可以恢复波形（用施密特触发器对脉冲整形） 利用施密特触发器可以进行脉冲鉴幅（用施密特触发器鉴别脉冲幅度） 时序逻辑设计时序逻辑电路：电路在任一时刻的输出信号不仅与当时的输入信号有关，而且与电路原来的状态有关。 整个时序电路由进行逻辑运算的组合电路和起记忆作用的存储电路两部分构成。存储电路可用触发器或锁存器组成。 时序电路是状态依赖的，故又称状态机。 时序电路具有以下主要特征： 组成 时序电路的输出信号由输入信号和电路的状态共同决定。 异步时序电路定义：若电路中触发器的时钟输入端没有接在统一的时钟脉冲上，或电路中没有时钟脉冲，电路中各个存储单元的状态更新不是同时发生的。 根据电路是对脉冲边沿敏感还是对电平敏感，异步时序电路又分为： 脉冲异步时序电路（由触发器构成） 电平异步时序电路（由锁存器构成） 分析同步时序逻辑电路的一般步骤 根据电路列出方程组 列出状态表 画出状态图 画出时序图 逻辑功能分析 数字器件的使用和设计设计一个18进制计数器用CD4510（可同步加减计数器）、CD4511、数码管以及必要的逻辑门电路设计不同类型的18进制计数器 数据选择器（多路选择器）的4选1原理图数据选择器根据给定的输入地址代码，从一组输入信号中选出指定的一个送至输出端的组合逻辑电路。有时也把它叫做多路选择器或多路调制器。 在多路数据传送过程中，能够根据需要将其中任意一路选出来的电路，叫做数据选择器，也称多路选择器或多路开关。","link":"/Study/1918.html"},{"title":"计算机组成原理课程复习","text":"考查目标 深入理解单处理器计算机系统的组织结构、工作原理、互连结构，具有完整的计算机系统整机的概念； 掌握各部件的组成结构、工作原理、软硬件设计的舍取、以及硬件实现； 综合运用计算机组成的基本原理和基本方法，对有关计算机硬件系统中的理论和实际问题进行计算、分析，并能对一些基本部件进行逻辑设计。 以西北工业大学801计算机专业基础为考纲，虽然当时考试未选这门课，但可以以此作为作为学习基础。 一、总线1.1 总线的组成、分类、特性和性能指标1.2 总线的层次结构1.3 总线定时、传送、仲裁二、内存储器2.1 存储器的基本概念、分类、层次结构2.2 半导体主存储器2.3 高速缓冲存储器（Cache）2.4 差错检测。三、输入/输出3.1 I/O编制的方法3.2 编程I/O3.3 程序中断3.4 DMA的原理及控制机制。四、运算方法与运算器4.1 计算机中的数制系统4.2 数的表示方法4.3 定点数四则运算方法4.4 浮点数四则运算方法4.5 定点加减法器设计。五、指令系统5.1 指令格式5.2 数据类型5.3 寻址方式5.4 指令类型5.5 指令系统设计与优化。六、处理器技术6.1 CPU的结构6.2 CPU中的寄存器组织6.3 控制器的结构和工作原理6.4 微程序设计技术。七、参考书目 唐朔飞编著.计算机组成原理（第二版）.高等教育出版社，2008 白中英主编.计算机组成原理（第四版）.科学出版社，2009 蒋本珊编著.计算机组成原理（第二版）.清华大学出版社，2008","link":"/Study/57764.html"},{"title":"复试准备","text":"考查目标： 西工大初试结束后。 分数出来后，联系导师等事宜准备。 网络上搜索，自己准备。 1.邮件模板研究生博士生考试给导师发邮件模板 开头+基本情况+写信目的尊敬的某老师： 您好！ 不好意思打扰您了！我是来自某某大学某某专业的2017级本科的应届考生某某（来自某某省某某市的往届考生某某，本科毕业于某某大学），今年硕士统考报考某某大学某某专业学术/专业硕士，总分XXX分，政治XX分，英语XX分，数学XXX分，专业课XXX分。参考往年的复试分数线，我有机会进入复试。在网上查阅到您的相关资料和研究，一直以来对某某某某方向很感兴趣，所以很希望能够有机会师从于您，在您的课题组攻读硕士学位，所以冒昧写信给您，一方面希望了解您的招生情况，另一方面希望得到您关于复试准备的相关建议。 本科成绩+综合能力专业能力本科期间，我学习认真刻苦，绩点XX，专业排名XX/XXX，位于专业前XX%，曾X次获得校X等奖学金；曾担任某某组织的某某干部，工作认真负责；同时，我也具有扎实良好的专业能力，曾在某某比赛(考试)中，获得某级别X等奖(取得XX分的成绩)。 读研目的+展望在过去的学习和实践中，我渐渐对某某某某方向产生了非常浓厚的兴趣，希望能更为深入的了解和学习某某某某方向的知识。在网上了解到您的相关资料，真心对您的研究方向非常感兴趣，能在众多学校众多优秀的老师中找到您对我来说真的是非常幸运。如果有机会能够师从于您，我定当加倍努力有所作为，不负老师的栽培。 提问+祝福+结尾希望老师能为我在对某某某某方向学习道路上给予一些建议与指期待能够与您进一步探讨！感谢您在百忙之中阅读我的邮件，冒昧致信，恳请海涵，切盼回音。 祝老师身体健康，工作顺利！ ​ 学生：某某 ​ 时间：XXXX年XX月XX日 2.英语介绍 Good morning/afternoon! Teachers. I am very glad to be here for this interview. First, let me introduce myself. My name is XiaoMengjie. I come from Northwest University, majoring in Software Engineering. I am open-minded and I like web development and am interested in Artificial intelligence field. So I think further study is still urgent for me to realize selfvalue. 3.专业介绍3.1 软件工程 Software engineering is an engineering discipline that is concerned with all aspects of software production. Software development is a difficult activity that requires careful planning and execution. Through the learning of software development process and process management technology, I can effectively plan and manage software development activities. 软件工程是一门涉及软件生产各个方面的工程学科。软件的开发是一个很困难的活动，要求很仔细的计划和执行。通过对软件开发过程和过程管理技术的学习，能够有效地策划和管理软件开发活动。 3.2 计算机组成原理 The principle of computer organization introduces the basic organization principle and internal working mechanism of the computer. 计算机组成原理介绍了计算机的基本组成原理和内部工作机制。 3.3 操作系统 The operating system course describes the internal structure, working principle and the realization of typical technologies of the operating system. 操作系统课程讲述了操作系统的内部结构、工作原理及典型技术的实现。 3.4 计算机网络 The computer network course comprehensively and systematically introduces the development and principle of computer network architecture, physical layer, data link layer and other content. 计算机网络课程全面系统地介绍了计算机网络的发展和原理体系结构、物理层、数据链路层等内容。 4.未来规划学习、实践、日常生活 学业进步，学术方面发表论文，实践方面，工作经验，正式工作基础，社团活动 在硕士期间，我除了完成学院要求的课程学分之外，我还将在老师指导下从两个方面来规划自己，分别为学术研究和工程实践，在学术研究方面，我会从阅读很多文献开始，和师兄师姐一起学习，编写论文争取发表，我的目标是在毕业之前发表一篇合格的论文，积极参与实验室的项目，锻炼自己的实践能力。 During my master’s degree, in addition to completing the credits required by the college, I will also plan myself from two aspects, namely academic research and engineering practice. In academic research, I will read a lot of literature, study with my senior, write papers and strive for publication. My goal is to publish a qualified paper before graduation, and in practice I will actively participate in project in the laboratory, exercise my practical ability. 老师的指导：Teacher’s guidance 5.家乡我的家乡是湖北襄阳，它是一个历史悠久的城市。孕育了许多有名之辈，比如郭靖黄蓉，诗人孟浩然等。来到襄阳，尝尝牛肉面，欣赏气势磅礴的汉江，感受这座城市深厚的历史底蕴。 My hometown is Xiangyang, Hubei, which is a city with a long history. It gave birth to many famous people, such as Zhu Geliang, Guo Jing, Huang Rong and poet Meng Haoran. Come to Xiangyang, taste beef noodles, appreciate the majestic Hanjiang River, and feel the profound historical details of the city. 6.华南师范大学South China Normal University（SCNU）","link":"/Study/53646.html"},{"title":"尘埃落定","text":"阶段总结： 从20年9月底开始，到12月22号，进入西工大考场。 从12月23号下午五点放下手中的笔走出考场，到21年2月27号早上9点出成绩。 从等到3月25号西工大官网出计算机学院院线，到28号中午接到华南师大的复试通知。 从29号早上8点面试，11点结束，到29号晚上7点接到研招网的待录取通知。 结束后停下来整理一下自己，总结分享经验 1.等成绩考研的点点滴滴就没有必要分享啥经验了，我其实开始复习挺晚的9月底才开始，也是因为个人原因，加之疫情影响，自己在家总是没有足够的约束力来逼迫自己复习。也是匆忙选择了一个学校。 择校 目标院校（985，211，顶尖双非也是不错的选择，北上广深） 考学硕（数一英一）还是香啊，专业课2最好选择统考学科，特别是好调剂，研究所也是只收学术型硕士，深有体会。比如好多学校计算机调剂只接受408 有些学校保一志愿，有的不管的，比如北京的好多学校调剂要求就是只收一志愿报考这所学校才行 考完试修整一段时间就可以提前联系导师了，无论是一志愿还是调剂都是需要导师滴，导师的确好像有推荐 调剂本校也别大意，我就是大意了，联系的导师有点边沿人物，复试测试环境了，才说我被刷了 调剂总有不如人意，如果能和本科专业挂钩，已经是最好的了，起码有个学上啊 知道自己一志愿过不了线挺难受的，加之本校也回不来更不好过了，调剂是真的难。 2.远程网络复试调剂志愿的远程网络复试，其实挺简单，老师估计也知道是调剂生，不会太为难，没问专业问题，就谈了下规划，考察你对这个方向的认识，读一段有关方向的文献，并翻译。其实感觉自己回答的不是老师想听到的，但还是收到了待录取通知。 乾坤未定，你我皆是黑马！ 调剂到信息光电子，是我很纠结的，偏材料，相对以后不学计算机了，还是伤感，争取和计算机相关的方向吧。 研究生的生涯还未开始，一切都是未知数，希望不会后悔！ 3.未雨绸缪知乎问题 研究生期间能学到什么？对未来工作帮助大吗？下面是他们的见解： 我觉得读研期间最宝贵的看不到的收获，是思维方式的改变，是发现问题解决问题的能力，一段踏实刻苦的学术生涯，会在以后的生活工作中时刻鞭挞自己。 如果你觉得研究方向不很对胃口，那么首先考虑是否能换一个方向（通常不可能）。其次，在能够确保毕业的前提下（每天至少认真整三个小时），学你想学的，做你想做的，尽快让自己成熟起来，融入这个社会。 读个研做个工作能力提升缓冲。我本身工作能力（写代码）很强，但是在本科期间必须以学习及成绩为重点，无暇顾及竞赛，所以潜力没有发挥出来。假如我本科就去就业，我的能力根本无法变现。 研究生期间对你思维的训练，心志的磨砺，学历能力的培养都能让你在工作中快速的成长，快速的适应。 首先专业上，主要还是要养成本学科的思维方式吧，我本来也觉得本科学了四年专业没学到啥，但是读研之后观察一下跨专业进来的同学感觉思维上还是不一样，毕竟四年潜移默化还是具备一定本专业的思维能力的；然后就是生活、工作上，可以有意识地去锻炼自己处理和解决问题的能力，不要怕事～有的人遇到事就自乱阵脚，感觉这个对将来工作生活都还是挺重要的。 能学到什么知识不知道，个人能力会提升。 要问研究生能学到什么，那你学到的可能是书本没有的，比如我们学理工科的，多的是动手能力和思维方式，你开始学会质疑了，学会去探索了，学会改进方法了，再宽一点，学会了如何和老板沟通了，如何最大化节约时间了。要问有什么用，那现实一点，虽然研究生遍地走，但找工作绝对优势，进去也有学历优势。比如师兄出去，在部门因为只有一个研究生，所以主管可以为他专门买一台仪器，给他提供良好的科研环境。 用武侠小说做比喻，算法是“内功”，而编程的各种框架，就犹如各种“招式”，内功不扎实，再多招式也只是花拳绣腿。","link":"/Study/29260.html"},{"title":"软件工程课程复习","text":"整理目的： 我还是认为基础知识不能丢，也是对以前知识的回顾。 考研软件工程方向考软件工程这门学科的并不多，我选择了两所学校来进行整理。 以中南大学944软件工程考试大纲和复旦961软件工程专业基础综合考试大纲为基础。 零、前言0.1 考试性质《软件工程》考试是为高等院校和科研院所招收硕士研究生而设置的具有选拔性质的全国统一入学考试科目，其目的是科学、公平、有效地测试学生掌握大学本科阶段软件工程课程的基本概念、原理、方法与技术，以及分析和解决问题的能力，评价的标准是高等学校本科毕业生能达到的及格以上水平，以保证被录取者具有基本的软件工程专业素质，并有利于各高等院校和科研院所在专业上择优选拔。 0.2 考察目标掌握：软件工程的产生、软件工程学的研究对象与原则、软件开发方法、软件工程的生存周期模型以及软件工程发展的新方向；软件需求分析的任务和要求、可行性研究的任务以及系统建模方法；软件开发阶段的仼务、过程、方法和技术。理解：软件质量的概念、分析技术；软件维护阶段的活动、提高软件可维护性的策略；软件工程的相关管理技术。 一、软件工程与软件过程边际成本，1968年NATO首次提出。 软件工程是用工程，科学和数学的原则与方法研制、维护计算机软件的有关技术及管理方法，它由方法、工具和过程三部分组成。 1.1 软件工程的产生软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。 产生软件危机的原因：一方面与软件本身的特点有关，另一方面也和软件开发与维护的方法不正确有关。 要缓解软件危机，既要有先进的技术和方法，又需要高水平的组织管理措施。而软件工程正是综合了管理和技术两方面，研究如何更好地开发软件的一门新兴学科。所以，就目前而言，软件工程是缓解软件危机的最好途径。 软件工程是指导计算机软件开发和维护的一门工程学科。采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它，这就是软件工程。 1.2 软件工程的研究对象与基本原理1.3 软件开发方法1.4 软件工程工具和环境 软件工程环境 方法与工具的结合，加上配套的软、硬件支持称为软件工程环境。它能支持开发者按照软件工程的方法,全面完成生存周期中的各项任务。 软件工具是什么？按照软件生存周期可将其分为几类？ 软件工具是指为支持计算机软件及其文档的开发、维护、模拟、移植或管理而研制的程序系统。按照软件生存周期可将其分为如下几类： 需求分析：如数据流图绘制与分析工具、状态转换图绘制与分析工具、面向对象的模型和分析工具、快速原型构造工具、数据字典与数据库工具等。 软件设计：如HIPO图、PDL(程序设计语言)或PAD(问题分析图)支持工具等。 编码：集成化的程序员工作平台。如各种正文编辑器和常规的编译程序、汇编程序、连结程序及符号调试器等。 软件测试：如静态分析器、动态覆盖率测试器、测试用例生成器、测试报告生成器及环境模拟器等。 软件维护：如反汇编程序、反编译程序、程序结构分析器、源程序格式化工具、文档生成工具、源程序至PAD(问题分析图)或流程图的自动转换工具等。 软件工程的基本原理 用分阶段的生命周期计划严格管理 坚持进行阶段评审 实行严格的产品控制 采用现代程序设计技术 结果应能清楚地审查 开发小组应该少而精 承认不断改进软件工程实践的必要性 1.5 软件生存期过程三个时期八个阶段 软件生命期瀑布模型分为六个阶段： 可行性研究与计划（确定系统的目标和规模，分析项目的可行性）； 需求分析与规格说明（明确系统的规格和要求） 设计（包括概要设计和详细设计，将系统分解为模块） 编程（用程序语言实现每个模块，简单容易）； 测试（发现并改正错误，分为模块测试、集成测试和系统联调三级）； 运行维护（扩充功能、纠错等）。 WBS work breakdown structure 工作分解结构 软件生命周期由软件定义、软件开发和运行维护（也成软件维护）3个时期组成。 1.6 软件工程常用生存周期模型软件生存周期模型是描述软件开发过程中各种活动如何执行的模型。 八种经典软件过程模型的特点（瀑布模型、增量和迭代模型、演化模型、统一过程模型、V模型、原型模型、操作规范、转换模型、螺旋模型、敏捷模型） V-V原则：validation（核实）：确保系统实现了所有的需求。 verification（验收）：确保每个功能正确运行。 1.6.1 瀑布模型 传统瀑布模型特点 阶段间具有顺序性与依赖性 推迟实现的观点 质量保证的观点 瀑布模型 优点 可强迫开发人员使用规范的方法（例如：结构化技术）； 严格规定每个阶段必须提交的文档； 要求每个阶段交出的所有产品都必须通过验证。 ·缺点 “瀑布模型是由文档驱动的”成为主要缺点 适用范围 适合于用户需求明确、完整、无重大变化的软件项目开发。 1.6.2 增量和迭代模型 特点 反复的应用瀑布模型的基本成分和原型模型的迭代特征，每一个线型过程产生一个“增量”的发布或提交，该增量均是一个可运行的产品。 早期的版本实现用户的基本需求，并提供给用户评估的平台。 优点 在较短时间内向用户提交可完成部分工作的产品； 逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的冲击； 缺点 软件体系结构必须是开放的； 开发人员既要把软件系统看作整体。又要看成可独立的构件，相互矛盾； 多个构件并行开发，具有无法集成的风险。 1.6.3 演化模型1.6.4 （Rational）统一过程模型RUP重复一系列周期，每个周期由一个交付给用户的产品结束。每个周期划分为初始、细化、构造和移交四个阶段，每个阶段围绕着五个核心工作流（需求、分析、设计、实现、测试）分别迭代。 1.6.5 V模型1.6.6 （快速）原型模型 适用范围 用户不能给出完整、准确的需求说明，或者开发者不能确定算法的有效性、操作系统的适应性或人机交互的形式等情况。 1.6.7 操作规范1.6.8 转换模型1.6.9 螺旋模型 基本思想 使用原型或其他方法来降低风险。 适用范围 适用于内部开发大规模软件项目。 优点 对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件发的一个重要目标 减少了过多测试或测试不足 维护和开发之间并没有本质区别 缺点 风险驱动，需要相当丰富的风险评估经验和专门知识，否则风险更大 随着迭代次数的增加，工作量加大，软件开发成本增加 1.6.10 敏捷模型1.6.11 喷泉模型 特点 喷泉模型是一种以用户需求为动力，以对象为驱动的模型，主要用于采用对象技术的软件开发项目。该模型认为软件开发过程自下而上周期的各阶段是相互迭代和无间隙的特性 1.7 软件过程的概念1.8 过程评估与CMM/CMMI的基本概念1.9 敏捷宣言与敏捷过程的特点二、需求分析需求分析中应该建立哪三种模型：数据模型、功能模型、行为模型 2.1 软件需求的概念四种类型的需求（用两种文档表示）：1：功能需求 2：质量（性能需求） 3：设计约束 4：过程约束 两种描述需求的文档 需求定义：客户想要实现的所有内容的完整列表。 需求规格说明书 设计建模UML：要求重新表述为所提出的系统应如何表现的规范 RTM 需求跟踪矩阵 系统怎么做什么的订需求定义 根据需求生成的设计模块 实现设计的程序代码 验证系统功能的测试 描述系统的文档 从哪些方面验证软件需求的正确性 一致性，即所有需求必须是一致的，任何一条需求不能和其他需求互相矛盾。 完整性，需求必须是完整的，规格说明书应该包括用户需要的每一个功能或性能。 现实性，指定的需求应该是用现有的硬件技术和软件技术基本上可以实现的。 有效性，必须证明需求是正确有效的，确实能解决用户面对的问题。 2.2 需求工程的基本过程需求工程过程包括如下主要活动：获取需求、需求分析与建模、需求规格说明、确认需求、需求管理。 2.3 需求分析的目标需求分析阶段的基本任务是要准确的定义新系统的目标，为了满足用户需要，回答系统必须“做什么”的问题。 本阶段要进行以下几方面的工作：问题识别、分析与综合，导出软件的逻辑模型、编写文档 基本任务 问题识别：双方确定对问题的综合需求，这些需求包括功能需求，性能需求，环境需求，用户界面需求。 分析与综合，导出软件的逻辑模型 编写文档：包括编写”需求规格说明书”,”初步用户使用手册”,”确认测试计划”,”修改完善软件开发计划” 2.4 可行性分析了解可行性研究中的任务和过程 任务：用最小的代价在尽可能短的时间内确定问题是否能够解决. 过程 复查系统规模和目标 研究目前正在使用的系统 导出新系统的高层逻辑模型 进一步定义问题 导出和评价供选择的解法 推荐进行方针 草拟开发计划 书写文档提交审查 可行性研究目的 确定在问题定义中所提出的问题是否值得去解，在限制条件下，问题能否解决。 可行性研究的任务 进一步分析和澄清问题的定义，在澄清问题的基础上，导出系统的逻辑模型； 从系统逻辑模型中，选择问题的若干种主要解法，研究每一种解法的可行性，为以后的行动提出建议； 如果问题没有可行的解，建议停止系统开发；如果问题有可行的解，应该推荐一个较好的解决方案，并为工程制定一个初步的计划。 可行性研究包括哪几方面的内容 技术可行性：现有技术能否实现本系统，现有技术人员能否胜任，开发系统的资源能否满足； 经济可行性：经济效益是否超出开发成本； 操作可行性：系统操作在用户内部行得通吗？ 法律可行性：新系统开发是否会侵犯他人、集体或国家利益，是否违反国家法律。 可行性研究的步骤 复查系统的规模和目标； 研究目前正在使用的系统，总结现有系统的优劣，提出新系统的雏形； 导出新系统的高层逻辑模型； 推荐建议方案； 推荐行动方针； 书写计划任务书(可行性报告)； 提交审查。 可行性研究报告的主要内容 可行性分析的结果是可行性研究报告，内容包括 系统概述：说明开发的系统名称,提出单位和开发单位。 可行性研究的前提:系统目标；要求；约束和限制；可行性研究的基本准则等。 对现有系统的分析:处理流程，图示说明现有系统的处理流程和数据流程；现有系统存在的问题。 系统需求:主要功能；主要性能及其要求；操作要求；信息要求；限制性要求。 建议系统:系统目标；处理流程；系统结构,功能,性能；系统技术可行性；投资和效益分析；操作可行性；法律可行性。 其它可选方案:与国内外同类型方案的比较；提出一两个可行性方案供论证和探讨。 制定下一阶段的预算。 结论性意见：由用户方、设计方和投资方共同签署意见。 2.5 需求收集2.6 需求规格说明 简述软件需求说明书（软件规格说明书）中包含的内容 软件系统的开发背景资料（主要相关人、财、物或设备）； 所开发软件的功能、性能、用户界面及运行环境等作出详细的说明； 软件系统详细的逻辑模型：数据流图(DFD)+数据词典（DD）或面向对象的三大模型（对象模型、动态模型和功能模型）等 系统开发计划表 所有附加文档：调查问卷信息、BPFD等 软件需求规格说明书由哪些部分组成，组成包括 引言：编写目的、背景说明、术语定义及参考资料等。 概述主要功能、约束条件或特殊需求。 数据流图与数据字典。 用户接口、硬件接口及软件接口。 性能需求、属性等。 其它需求，如数据库、操作及故障处理等。 2.7 数据流建模（分层数据流模型） 2.8 实体一关系建模用例和场景建模及其UML表达（用例图、活动图、泳道图、顺序图） 2.9 系统行为建模（数据模型建模及其UML表达（类图））（行为模型建模及其UML表达（状态机图）） 2.10 IDEF0功能建模2.11 IDEF1x数据建模三、软件设计3.1 软件体系结构及体系结构风格的概念软件体系结构为软件系统提供了一个结构、行为和属性的高级抽象，由构成系统的元素的描述、元素间的相互作用、指导元素集成的模式以及这些模式的约束组成。软件体系结构不仅指定了系统的组织结构和拓扑结构，并且显示了系统需求和构成系统的元素之间的对应关系，提供了一些设计决策的基本原理。良好的体系结构是普遍适用的，它可以高效地处理各种各样的个体需求。 软件架构也有通用的解决方案，叫做体系结构风格 体系结构风格提供有关如何将问题分解为软件单元以及这些单元应如何相互交互的建议 使用体系结构风格的六种方法： 去理解系统：他能做什么和怎么做 去判断多少系统可以去复用先前就建立好的系统，多少系统在以后将不能复用。 提供构建系统的蓝图，提供构建系统的蓝图，包括系统的“承载”部分可能在哪里 推断系统如何发展，包括表现，成本，原型设计 去分析依赖，选择最合适的设计，实现，和测试技术 支持管理厥词，理解实施和维护中固有的风险 3.2 设计模式的概念3.3 模块化设计的基本思想及概念（抽象、分解、模块化、封装、信息隐藏、功能独立） 什么是模块？模块具有哪几个特征？总体设计主要考虑什么特征？ 模块是数据说明、可执行语句等程序对象的集合，可以单独命名且可通过名字来访问。 模块具有输入和输出(参数传递)、功能、内部数据结构(局部变量)和程序代码四个特性。 概要设计主要考虑输入、输出(参数传递)和功能两个特性。 什么是模块化 模块化是按规定的原则将一个大型软件划分为一个个较小的、相对独立但又相关的模块。 模块设计的准则 改进软件结构, 提高模块独立性:在对初步模块进行合并、分解和移动的分析、精化过程中力求提高模块的内聚，降低藕合。 模块大小要适中:大约50行语句的代码，过大的模块应分解以提高理解性和可维护性;过小的模块,合并到上级模块中。 软件结构图的深度、宽度、扇入和扇出要适当。一般模块的调用个数不要超过5个。 尽量降低模块接口的复杂程度； 设计单入口、单出口的模块。 模块的作用域应在控制域之内。 3.4 软件重构的概念3.5 软件体系结构的UML建模软件开发的过程犹如雕琢一件工艺品，由无形到有形，由粗到细。鉴于软件系统的复杂性和规模的不断增大，项目失败的可能性也相应增加。需要建立不同的模型对系统的各个层次进行描述。在长期的研究与实践中，人们越来越深刻地认识到，建立简明准确的表示模型是把握复杂系统的关键。模型是对事物的一种抽象，在软件开发过程中，建立各种模型，以便更透彻地了解系统的本质。由于UML以图形模型为主，模型的直观性及丰富的信息描述便于开发人员与用户的交流。建立的模型也为以后的系统维护和升级提供了文档。总的来说，使用模型可以使人们从全局上把握系统的全貌及其相关部件之间的关系，可以防止过早地陷入各个模块的细节。因此，面向对象的分析与设计应该从建模开始。UML 是一种标准的图形化、可视化的建模型语言，UML的核心是建立系统的各类模型。 3.5.1 包图3.5.2 类图3.5.3 构件图3.5.4 活动图（Activity Diagram）是由状态图变化而来的，从系统任务的观点来看，系统的执行过程是由一系列有序活动组成的。活动图可以有效地描述整个系统的流程，描述了系统的全局的动态行为，且只有活动图是唯一能够描述并发活动的UML图 3.5.4 顺序图（Sequence Diagram）清晰地描述一组对象之间动态的交互关系、时间的约束关系，着重描述对象间消息传递的时间顺序，所以顺序图在实时系统中被大量使用。当参与交互的对象数目增加，交互关系复杂时用顺序图描述会显得杂乱。 3.5.5 协作图（Collaboration Diagram）从另一个角度来更好地描述相互协作的对象间的交互关系和链接（Link）关系。着重体现交互对象间的静态链接关系和协作关系。协作图也可以从顺序图生成 3.5.6 部署图3.5.7 状态图（State Diagram）用来描述一个特定对象在其生存周期或在某段时间内的所有可能的状态及其引起状态转移的事件。一个状态图包括一系列的状态以及状态之间的改变。例如订单的状态变化等，在实时系统中用得较多，还可以用于辅助设计用户界面。 3.6 接口的概念3.7 面向对象设计原则（开闭原则、Liskov替换原则、依赖转置原则、接口隔离原则） 3.8 内聚与耦合的概念、常见的内聚和耦合类型耦合包含了哪些类型？每个类型的具体内容是什么？要求能通过程序代码识别出耦合类型。 非直接耦合：就是没有耦合。 数据耦合：就是参数传递耦合，它属于低级别耦合。 标记耦合：标记耦合指两个模块之间传递的是数据结构。 控制耦合：它属于中级别耦合，比如调度程序与进程之间的耦合，就是控制耦合。 外部耦合：属于高级别耦合 公共耦合：指通过一个公共数据环境相互作用的那些模块间的耦合。 内容耦合：属于最高级别耦合，例如，一个模块利用分支或跳转技术，转入到另一个模块中去执行，就是内容耦合。 3.9 软件设计的任务和过程 系统设计包括哪两个阶段 系统设计包括总体设计与详细设计两个阶段 总体设计的主要任务是什么 总体设计的主要任务是完成软件结构的设计，确定系统的模块及其模块之间的关系。 详细设计的目的 为软件结构图（SC图或HC图）中的每一个模块确定采用的算法和块内数据结构，用某种选定的表达工具给出清晰的描述。 详细设计的主要任务 编写软件的“详细设计说明书”。软件人员要完成的工作： 为每一个模块确定采用的算法，选择某种适当的工具表达算法的过程，写出模块的详细过程描述 确定每一模块使用的数据结构 确定模块结构的细节，包括对系统外部的接口和用户界面，对系统内部其它模块的接口，以及关于模块输入数据、输出数据及局部数据的全部细节 为每一个模块设计出一组测试用例，以便在编码阶段对模块代码（即程序）进行预定的测试。 概要设计（结构设计） 把一个软件需求转换为软件表示时，首先设计出软件总的体系结构。 基本任务 设计软件系统结构 进行数据结构及数据库的设计 编写概要设计的文档 评审 详细设计 为SC图中的每个模块确定采用的算法和块内数据结构，用选定的表达工具（流程图、N-S图、PAD图、伪代码）给出清晰的描述。 基本任务 为每个模块进行详细的算法设计 为模块内的数据结构进行设计 对数据库进行物理设计 其他设计 编写详细设计说明书 评审 3.10 软件设计基本原则设计原则定义：将我们的系统需要的功能和行为分解为模块的指南（设计原理？） 六个主导原则： 模块化：耦合和类聚 我们说两个模块紧耦合，当他们彼此依赖很多。低耦合模块有一些依赖，但是他们的关联很微弱。解耦模块没有耦合 内聚：cohesion ： 去测量多个模块的相互依赖程度，内聚指来自模块内部的依赖。最糟糕的情况，巧合：一个模块和另一个没有关系 内聚种类：巧合内聚，逻辑类聚，时间类聚，过程类聚，通信类聚，功能类聚，信息类据。 耦合是影响软件复杂程度的一个重要因素。设计时力争做到高内聚，并且能够辨认出低内聚的模块，有能力通过修改设计提高模块的内聚程度并且降低模块间的耦合程度，从而获得较高的模块独立性。 接口 定义了软件单元给剩余的系统提供什么服务，其他单元如何访问那些服务。 信息隐藏（和局部化？） 使得软件系统更易于维护 它以分解系统的指导来区分：每个软件单元都包含了一个可以在未来改变的分离设计决策 增量开发 抽象 是一种模型或者表示，忽略一些细节从而可以专注其他细节。 泛化 使技术通用 泛化是一个设计原则，使得软件单元尽可能普遍接受，增加在未来别的系统复用的可能性 3.11 面向数据流图的设计方法掌握面向数据流的设计方法，了解其中涉及到的概念（变换流，事务流），结合例子理解变换分析的具体过程。 面向数据流的设计方法把信息映射成软件结构，信息流的类型决定了映射的方法。信息流有两种 变换流 事务流 变换流：信息沿输入通路进入系统，同时由外部形式变换成内部形式，进入系统的信息通过变换中心，经加处理以后再沿输出通路变换成外部形式离开软件系统。 事务流：以事务为中心，事务型数据流图中存在一个事务中心（也就是数据处理、加工中心），它将输入分离成若干个发散的数据流，形成许多活动路径，并根据输入值选择其中一条路径，这类数据流就是事务流。 3.12 面向对象的设计方法 三种编程范型的特点 过程式编程范型：把程序理解为一组被动的数据和一组能动的过程所构成；程序=数据结构+算法；着眼于程序的过程和基本控制结构，粒度最小 面向对象编程范型：数据及其操作被封装在对象中；程序=对象+消息；着眼于程序中的对象，粒度比较大 基于构件技术的编程范型：构件是通用的、可复用的对象类；程序=构件+架构；眼于适合整个领域的类对象，粒度最大 用面向对象方法开发软件时，通常需要建立哪三种形式的模型？ 描述系统数据结构的对象模型。 描述系统控制结构的动态模型。 描述系统功能的功能模型。 面向对象方法学的出发点和基本原则，是尽可能模拟人类思维方法，是开发软件尽可能接近人类认识世界解决问题的方法与过程。 对象模型表示静态的，结构化的系统的“数据”性质。它是对模拟客观世界实体的对象以及对象彼此之间的关系的映射，描述了系统的静态结构。 动态模型表示瞬时的、行为化的系统的”控制“性质，它规定了对象模型中的对象的合法序列。 功能模型表示变化的系统的”功能“性质，他指明了系统应该”做什么”，因此更直接反映了用户对目标系统的需求。 3.13 面向对象软件设计模式3.14 模型-视图-控制器框架四、软件验证技术（软件测试）软件失败：软件不能做我们描述的需求。 4.1 软件测试基础（软件测试及测试用例的概念）测试的目的是判断和发现软件是否有错误 , 调试的目的是定位软件错误并纠正错误。 软件测试是按照特定的规则，发现软件错误的过程；好的测试方案是尽可能发现迄今尚未发现错误的测试；成功的测试方案是发现迄今尚未发现错误的测试 软件测试的一般步骤 ​ 单元测试、子系统测试、系统测试、验收测试、平行测试。 4.2 代码复审4.3 白盒测试根据程序内部逻辑结构进行测试，来检验程序内部动作是否按照规格说明书的规定正常进行 软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。 8个覆盖点：语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖、点覆盖、边覆盖、路径覆盖 白盒测试主要采用的技术有：路径测试技术和事务处理流程技术，对包含有大量逻辑判断或条件组合的程序采用基于逻辑的测试技术。 4.4 黑盒测试根据程序外部特征来进行测试，着重测试软件功能，它并不能取代白盒测试，它是与白盒测试互补的测试方法 黑盒测试着重测试软件功能。这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或数据驱动测试。 黑盒测试主要采用的技术有:等价分类法、边沿值分析法、错误推测法和因果图等技术。 黑盒测试力图发现下述类型的错误 功能不正确或遗漏了功能 界面错误 数据结构错误或外部访问数据库错误 性能错误 初始化和终止错误 4.5 单元测试单元测试集中监测软件设计的最小单元—模块。 从这些方面对模块进行测试 模块接口 局部数据结构 重要的执行通路 出错处理通路 边界条件 4.6 集成测试是测试和组装软件的系统化技术。 测试方法 非渐增式测试 渐增式测试 当使用渐增方式把模块结合到程序中去时，有自顶向下和自底向上的两种集成策略 比较集成试的两种方式的优劣 非渐增式测试方式：分别测试模块,再把所有模块按设计要求放在一起组成所要的程序。该方法编写测试软件工作量大，模块间的接口错误发现得晚，错误定位较难诊断，总体测试有的错误容易漏掉，测试时间相对较少，可以并行测试所有模块，能充分利用人力，加快工程进度。。 渐增式测试方式：把下一个要测试的模块,同已经测试好的那些模块结合起来进行测试。该方法利用已测试过的模块作测试软件,开销小，较早发现模块间的接口错误，错误定位往往和最近入的模块相关，对已测试好的模块可在新加入模块的条件下受到新的检验，测试更彻底，需要较多的测试时间，不能并行测试。 总的来说，渐增式测试方法比较好。 4.7 确认测试 什么是确认测试？该阶段有哪些工作？ 确认测试又称有效性测试。它的任务是检查软件的功能与性能是否与需求规格说明书中确定的指标相符合 。 确认测试阶段有两项工作，进行确认测试与软件配置审查 确认测试一般是在模拟环境中运用黑盒测试方法，由专门测试人员和用户参加的测试。 软件配置审查的任务是检查软件的所有文档资料的完整性、正确性。如果发现遗漏和错误，应补充和改正，同时要编排好目录，为以后的软件维护工作奠定基础。 4.8 系统测试4.9 回归测试的概念4.10 程序正确性证明4.11调试（调试的概念、调试与测试的关系） 测试与调试的主要区别？ 测试从一个侧面证明程序员的失败；调试证明程序员的正确； 测试从已知条件开始，使用预先定义的程序，且有预知的结果，不可预见的仅是程序是否通过测试；调试从不可知内部条件开始，除统计性调试外，结果是不可预见的； 测试有计划并且要进行测试设计；调试不受时间约束； 测试是发现错误、改正错误、重新测试的过程；调试是一个推理的过程； 测试执行是有规程的；调试执行要求程序员进行必要的推理； 测试由独立的测试组在不了解软件设计的件下完成；调试由了解详细设计的程序员完成； 大多数测试的执行和设计可由工具支持；调试用的工具主要是调试器。 4.12 测试覆盖度的概念4.13 代码圈复杂度的计算方法4.14 白盒测试中的基本路径测试方法路径测试技术中几种主要覆盖的含义？举例说明？ 语句覆盖：至少执行程序中所有语句一次。 判定覆盖：使被测程序中的每一个分支至少执行一次。故也称为分支覆盖。 条件覆盖：执行所有可能的穿过程序的控制路流程。 条件组合测试：设计足够的测试用例，使每个判定中的所有可能条件取值组合至少执行一次 4.15 黑盒测试中的等价类划分方法等价分类法的测试技术采用的一般方法?举例说明? 为每个等价类编号； 设计一个新的测试方案,以尽可能多的覆盖尚未被覆盖的有效等价类,重复这一步骤,直到所有有效等价类被覆盖为止。 设计一个新的测试方案,使它覆盖一个尚未被覆盖的无效等价类, 重复这一步骤,直到所有无效等价类被覆盖为止。 4.16 Alpha和Beta测试Alpha测试：由用户在开发者的场所进行，并且在开发者对用户的”指导”下进行测试。开发者负责记录发现的错误和使用中遇到的问题. Beta测试：由软件的最终用户在一个或多个客户场所进行。与Alpha测试不同，开发者通常不在Beta测试的现场，因此，Bate测试时软件在开发者不能控制的环境中的”真实”应用。 五、软件维护技术5.1 软件维护的基本概念软件维护是指软件系统交付使用以后，为了改正错误或满足新的需求而修改软件的过程一个中等规模的软件，如果其开发过程需要一两年时间，则它投入使用以后，其运行时间可能持续5~10年之久。在这个维护阶段中，人们需要着手解决开发阶段尚未解决的问题，同时，还解决维护工作本身所产生的问题。做好软件的维护工作不仅能够排除软件中存在的错误，使它能够正常工作，而且还可以使它扩充功能，提高性能，为用户带来新的效益。维护阶段的花费约占整个软件生存周期花费的67%。 因此，应充分认识到维护现有软件的重要意义。 就是在软件已经交付使用之后，为了改正错误或满足新的需要而修改的过程。 软件的维护一般分为哪几类？ 改正性维护：满足用户对已开发产品的性能与运行环境不断提高的要求，进而达到延长软件寿命的目的。 适应性维护：对程序使用期间发现的程序错误进行诊断和改正的过程，配合变化了的环境进行修改软件的活动； 完善性维护：满足用户在使用过程中提出增加新的功能或修改已有功能的建议而进行的工作； 预防性维护：为了改善未来的可维护性或可靠性而修改软件的工作。 软件维护的最终目的，是满足用户对已开发产品的性能与运行环境的不断提高的需求，进而延长软件的寿命。 5.2 软件维护过程 维护过程 维护组织 维护报告 维护的事件流 保存维护记录 评价维护活动。 为什么说软件的维护是不可避免的？ 因为软件的开发过程中，一般很难检测到所有的错误，其次软件在应用过程中需要随用户新的要求或运行环境的变化而进行软件的修改或完成功能的增删等，为了提高软件的应用水平和使用寿命，软件的维护是不可避免的。 5.3 软件可维护性软件的可维护性是指维护人员为纠正软件系统出现的错误或缺陷，以及为满足新的要求而理解、修改和完善软件系统的难易程度。可维护性是所有软件系统都应具备的特点。在软件工程的每一-阶段都应该努力提高系统的可维护性，在每个阶段结束前的审查和复审中，应着重对可维护性进行复审。 决定软件可维护性的因素 软件的可理解性、可测试性、可修改性； 文档描述符合要求、用户文档简洁明确、系统文档完整并且标准。 5.3.1 可维护性度量的特性主要有可理解性、可测试性和可修改性可理解性被定义为人们通过阅读源代码和文档了解软件系统的结构、接口、功能、内部过程以及如何运行的难易程度；可测试性被定义为诊断和测试系统的难易程度；可修改性被定义为修改软件系统的难易程度；它们是密切相关的。 5.3.2 提高可维护性的方法有哪些在软件工程的每一阶段都应该努力提高系统的可维护性，在每个阶段结束前的审查和复审中，应着重对可维护性进行复审。在需求分析阶段的复审中，应对将来要扩充和修改的部分加以注明。在讨论软件可移植性问题时，要考虑可能要影响软件维护的系统界面。在软件设计的复审中，应从便于修改、模块化和功能独立的目标出发，评价软件的结构和过程，还应对将来可能修改的部分预先做准备。在软件代码复审中，应强调编码风格和内部说明这两个影响可维护性的因素。在软件系统交付使用前的每一测试步骤中都应给出需要进行预防性维护部分的提示。在完成每项维护工作后，都应对软件维护本身进行仔细认真的复审。为了从根本上提高软件系统的可维护性，人们正试图通过直接维护软件规格说明来维护软件，同时也在大力发展软件重用技术。 简述提高软件可维护性的方法 建立明确的软件质量标准； 使用先进软件开发技术和工具； 建立明确的软件质量保证工作； 选择可维护的程序设计语言； 改进程序文档。 5.4 软件再工程技术简述软件再工程的过程 库存目录分析：包含每个应用系统的信息，如：名称、构建日期、修改次数、过去18个月报告的错误、用户数量、文档质量、预期寿命，等。从中选出再工程的候选者。 文档重构 如果一个程序走向生命终点，不再经历变化，则保持现状； 重构只针对当前正在修改的软件部分。 逆向工程：逆向工程是一个恢复设计结果的过程，从程序代码中抽取数据结构、体系结构和处理过程的设计信息。 代码重构： 分析源代码，标注出与结构化程序设计概念不符的部分，重构它的代码，测试重构代码并更新代码。 数据重构：当数据结构较差时，进行再工程。如以文件方式保存数据变为以数据库方式存储。 正向工程：也称革新或改造，即应用软件工程的原理、概念、技术和方法来重新开发现有系统。 六、软件项目管理6.1 成本估计软件开发成本估算方法有哪几种 自顶向下估算方法。估算人员参照以前完成的项目所耗费的总成本（或总工作量），来推算将要开发的软件的总成本（或总工作量），然后把它们按阶段、步骤和工作单元进行分配，这样方法称为自顶向下的估算方法。 自底向上估算方法。自底向上估算方法是将待开发的软件细分，分别估算每一个子任务所需要的开发工作量，然后将它们加起来，得到软件的总开发量。 差别估算方法。差别估算是将开发项目与一个或多个已完成的类似项目进行比较，找出与某个相类似项目的若干不同之处，并估算每个不同之处对成本的影响，导出开发项目的总成本。 专家估算法。依靠一个或多个专家对要求的项目做出估算。 类推估算法。 经验公式估算法。 为什么在软件开发中，不能用简单增加人员的方法来缩短开发时间？ 大量软件开发实践说明：向一个已经延迟的项目追加开发人员，可能使它完成得更晚。因为当开发人员以算术级数增长时，而人员之间的通信将以几何级数增长，往往”得不偿失”。 6.2 效益分析6.3 风险分析6.4 进度安排6.5 项目组织与计划6.6 软件质量保证与分析 影响软件质量的主要因素有哪些？ 产品运行：正确性、风险性、效率、完整性、健壮性和可用性； 产品修改：可理解性、可维护性、灵活性、可测试性； 产品转移：可移植性、可重用性和互运行性。 如何做好软件质量保证工作？ 软件质量保证工作是软件工程管理的重要内容，软件质量保证应做好以下几个方面的工作 采用技术手段和工具。质量保证活动要贯彻开发过程始终，必须从采用技术手段和工具，尤其是使用软件开发环境来进行软件开发。 组织正式技术评审，在软件开发的第一个阶段结束时，都要组织正式的技术评审。国家标准要求单位必须采用审查、文档评审、设计评审、审计和测试等具体手段来保证质量。 加强软件测试。软件测试是质量保证的重要手段，因为测试可发现软件可发现软件中大多数潜在错误。 推选软件工程规范（标准）。用户可以自己指定软件工程规范（标准），但标准一旦确认就应贯彻执行。 对软件的变更进行控制。软件的修改和变更常常会引起潜伏的错误，因此必须严格控制软件的修改和变更。 对软件质量进行度量。即对软件质量进行跟踪，及时记录和报告软件质量情况。 基线是一个软件配置管理概念，它有助于人们在不严重合理变化的前提下来控制变化，简而言之，基线就是通过了正式复审的软件配置项。。在软件配置项变成基线之前，可以迅速而非正式地修改它。 七、参考书目 《软件工程：实践者的研究方法》（英文版，第7版），Roger Pressman，机械工业出版社，2010年10月","link":"/Study/56860.html"},{"title":"Redis入门","text":"1、NoSQL概述1.1 为什么要用NoSQL 大数据时代，分布式集群，单机—&gt;分布式 单机MySQL的时代 应用不是直接访问MySQL，会通过一些方法，DAL（数据访问层，Data Access Layer）去访问MySQL实例。以前不同SQL对应不同语法，麻烦，出现了框架Hibernate和MyBatis等框架，开发变得简单，框架底层值得学习。 90年代，一个基本的的网站访问量不会太大，单个数据库完全足够！ 那个时候更多的去使用静态网页Html，服务器根本没有太大压力！ 思考一下，这种情况下：整个网站的瓶颈是什么？ 数据量太大，一个机器放不下！ 数据的索引，比如如果MySQL的数据超300万，不建立索引太慢！MySQL使用B+Tree，索引机器也放不下！ 访问量（读写混合），一个服务器承受不来！ 只要出现以上3种情况之一，就要晋级！ Memcached（缓存）+MySQL+垂直拆分（读写分离） 网站80%的情况都在读，每次都要去查询数据库的话时分麻烦（比如两个人查询语句相同，无需再次查询服务器），所以说我们希望减轻服务器压力，可以使用缓存来保持效率！ 发展过程：优化数据结构和索引-&gt;文件索引（IO）-&gt;Memcached（当时最热门的技术） 分库分表+水平拆分+MySQL集群 技术和业务在发展的同时，对人的要求也越来越高了！ 数据库本质：读写 早些年MyISAM（默认存储引擎）：表锁，十分影响效率！高并发下就会出现严重的锁问题； 转战Innodb：行锁 慢慢的开始使用分库分表来解决写的压力！多服务多表MySQL在那个年代推出了表分区！但并没有多少公司使用。MySQL的集群，很好满足那个年代需求。","link":"/Redis/3392.html"},{"title":"操作系统课程复习","text":"考查目标： 掌握操作系统的基本概念、基本原理和基本功能，理解操作系统的整体运行过程。 掌握操作系统进程、内存、文件和I/O管理的策略、算法、机制以及相互关系。 能够运用所学的操作系统原理、方法与技术分析问题和解决问题，并能利用C语言或其他高级语言描述相关算法。 以西北工业大学801计算机专业基础为考纲，虽然当时考试未选这门课，但可以以此作为作为学习基础。 一、操作系统概述1.1 操作系统的概念、特征、功能和提供的服务1.2 操作系统的发展与分类1.3 操作系统的运行环境（内核态与用户态、中断、异常、系统调用） 1.4 操作系统体系结构二、进程管理2.1 进程与线程2.1.1 进程概念、进程的状态与转换、进程控制、进程组织2.1.2 进程通信（共享存储、消息传递、、信箱通信、管道通信） 2.1.3 线程概念与多线程模型2.2 处理机调度2.2.1 调度的基本概念，调度的基本准则，调度时机、切换与过程、调度方式2.2.2 典型调度算法先来先服务、短作业（短进程、短线程）优先、时间片轮转、优先级、最高响应比优先、多级反馈队列调度算法 2.3 进程同步与互斥2.3.1 进程同步的基本概念2.3.2 实现临界区互斥的基本方法：软件实现方法、硬件实现方法2.3.3 信号量、管程2.3.4 经典同步问题：生产者-消费者问题、读者-写者问题、哲学家进餐问题等2.4 死锁2.4.1 死锁的概念、死锁处理策略2.4.2 死锁预防2.4.3 死锁避免：系统安全状态、银行家算法2.4.4 死锁检测和解除三、内存管理3.1 内存管理基础程序执行前需要先放到内存中才能被CPU处理——缓和CPU与硬件之间的速度矛盾。 给内存的存储单元编地址 每个地址对应一个存储单元 按字节编址 按字编址（设字长16位） 每个存储单元大小为1字节 每个存储单元大小为1个字 1B，即8个二进制位 16个二进制位 字节是寻址的最小单位 字长是计算机一次处理数据的最大单位 补充知识 2^{10}=1K, 2^{20}=1M, 2^{30}=1G 指令的工作原理 指令的工作基于‘地址’。每个地址对应一个数据的存储单元。 我们写的代码要翻译成CPU能识别的指令，这些指令会告诉CPU应该去内存的哪个地址读写数据。（所以引入程序装入？） 3.1.1 内存管理概念 内存空间的分配与回收 连续分配管理方式 非连续分配管理方式 内存空间的扩充 覆盖技术（解决“程序大小超过物理内存总和”的问题） 交换（对换）技术 虚拟存储技术 地址转换 逻辑地址到物理地址的转换（这个过程称为地址重定位，有3种装入方式）应该有操作系统负责，这样就保证了程序员写程序时不需要关注物理内存的实际情况。 存储保护（内存保护），保证各进程在各自存储空间内运行，互不干扰 内存保护可采取两种方法： 方法一：在CPU中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU检查是否越界。 方法二：采用重定位寄存器（又称基址寄存器）和界地址寄存器（又称限长寄存器）进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址。 3.1.2 程序装入与链接、逻辑地址与物理地址空间、内存保护 装入的三种方式 方式 内容 特点 区别 绝对装入 在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码。装入程序按照装入模块中的地址，将程序和数据装入内存。 只适用于单道程序环境 程序中使用的绝对地址，可在编译或汇编时给出，也可由程序员直接赋予。通常情况下都是编译或汇编时再转换为绝对地址。 静态重定位（可重定位装入） 编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址进行“重定位”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的） 在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。用于早期的多道批处理操作系统 作业一旦进入内存后，在运行期间就不能移动，也不能再申请内存空间。 动态重定位（动态运行时装入） 编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到程序真正要执行时才进行。因此装入内存后所有的地址依然是逻辑地址。 需要一个重定位寄存器的支持，用来装入模块存放的起始位置。现代操作系统 允许程序在内存中发生移动。并且可将程序分配到不连续的存储区中；在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，可动态申请分配内存；便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间 编译 由编译程序将用户源代码编译成若干个目标模块（将高级语言翻译为机器语言） 链接 由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块 装入（装载） 由装入程序将装入模块装入内存运行 链接的三种方式 方式 内容 静态链接 在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块），之后不在拆开 装入时动态链接将 将各目标模块装入内存时，边装入边链接。（在内存中连续吗？） 运行时动态链接 在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享。（如何共享？） 3.1.3 交换与覆盖 覆盖技术（解决“程序大小超过物理内存总和”的问题） 思想：将程序分为多个段（多个模块）。常用的段常驻内存，不常用的段在需要时调入内存。 内存中分为一个“固定区”和若干个“覆盖区”。 需要常驻内存的段放在“固定区”中，调入后就不再调出（除非运行结束）；不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存。 按照自身逻辑结构，让那些不可能同时被访问的程序段共享同一个覆盖区。必须由程序员声明覆盖结构，操作系统完成西大覆盖。缺点：对用户不透明，增加了用户编程复旦。覆盖技术只用于早期的操所系统。 交换（对换）技术 思想：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度） 中级调度（内存调度），就是要决定将哪个处于挂起状态的进程重新调入内存。 暂时换出外存等待的进程状态为挂起状态（Suspend），挂起态又可以进一步细分为就绪挂起、阻塞挂起两种状态。 应该在外存（磁盘）的什么位置保存被换出的进程？ 具有对换功能的操作系统中，通常把磁盘空间分为文件区和对换区两部分。文件区主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式；对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度，因此通常对换区采用连续分配方式（学过文件管理章节后即可理解）。总之，对换区的I/O速度比文件区的更快。 什么时候应该交换？ 交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如：在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程：如果缺页率明显下降，就可以暂停换出。 应该换出哪些进程？ 可优先换出阻塞进程；可换出优先级低的进程：为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间。（注意：PCB会常驻内存，不会被换出外存） 3.1.4 连续分配管理方式连续分配：指为用户进程分配的必须是一个连续的内存空间。 单一连续分配 固定分区分配 动态分区分配 动态分区分配算法 首次适应算法（First Fit） 最佳适应算法（Best Fit） 最坏适应算法（Worst Fit） 邻近适应算法（Next Fit） 3.1.5 非连续（离散）分配管理方式分页管理方式、分段管理方式、段页式管理方式 基本分页存储管理的基本概念 基本分段存储管理 段页式存储管理 3.2 虚拟内存管理3.2.1 虚拟内存基本概念3.2.2 请求分页管理方式3.2.3 页面置换算法最佳置换算法（OPT）、先进先出置换算法（FIFO）、最近最少使用置换算法（LRU）、时钟置换算法（CLOCK）等 3.2.4 页面分配策略3.2.5 工作集、抖动四、文件管理4.1 文件系统基础4.1.1 文件概念、文件的逻辑结构4.1.2 文件的结构：顺序文件、索引文件、索引顺序文件4.1.3 目录结构：文件控制块和索引节点，单级、两级和树形目录结构，图形目录结构4.1.4 文件共享4.1.5 文件保护：访问类型、访问控制4.2 文件系统实现4.2.1 文件系统层次结构4.2.2 目录实现4.2.3 文件实现4.3 磁盘组织与管理4.3.1 磁盘的结构4.3.2 磁盘调度算法先来先服务（FCFS）、最短寻道时间优先（SSTF）、电梯算法（SCAN） 4.3.3.磁盘的管理五、输入输出（I/O）管理5.1 I/O管理概述5.1.1 I/O控制方式5.1.2 I/O软件层次结构5.2 I/O核心子系统5.2.1 I/O调度概念5.2.2 出错处理5.2.3 高速缓存与缓冲区5.2.4 假脱机技术（SPOOLing）5.3 设备分配与回收六、参考书目 《计算机操作系统》汤子瀛等主编 西安电子科技大学出版社； 《操作系统教程》徐甲同、陆丽娜等编 西安电子科技大学出版社。","link":"/Study/4919.html"},{"title":"Spring Boot与缓存","text":"1、Spring Boot与缓存 缓存应该是每个系统都应考虑的功能，用来加速系统的访问以及提升系统的性能； 引入缓存中间件，将高频信息从数据库存入缓存，从缓存拿数据；如果缓存中没有，在到数据库中查找吗，继续放入缓存。应用程序和缓存的交互式非常快的。 还有验证码这些临时性数据就没有必要存在数据库中了，缓存是不错的选择。 那么为了统一缓存的开发规范以及提升系统的扩展性，J2EE发布了JSR-107规范，但由于整合难度大，用的比较少。JSR-107规范定义的都是一些接口，这样的好处就类似JDBC一样，面向接口编程。但市面上的组件不都提供JSR-107的实现。但为了简化开发，Spring更多使用的是自己的Spring缓存抽象。 1.1 JSR107Java Caching定义了5个核心接口，分别是CachingProvider, CacheManager, Cache, Entry 和 Expiry。 CachingProvider定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CachingProvider。 CacheManager定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。 Cache是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有。 Entry是一个存储在Cache中的key-value对。 Expiry 每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。 1.2 Spring缓存抽象Spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术； 并支持使用JCache（JSR-107）注解简化我们开发； Cache接口为缓存的组件规范定义，包含缓存的各种操作集合； Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache等； 每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。 使用Spring缓存抽象时我们需要关注以下两点； 确定方法需要被缓存以及他们的缓存策略 从缓存中读取之前缓存存储的数据 1.3 几个重要概念&amp;缓存注解 Cache 缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等 CacheManager 缓存管理器，管理各种缓存（Cache）组件 @Cacheable 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存 @CacheEvict 清空缓存 @CachePut 保证方法被调用，又希望结果被缓存。 @EnableCaching 开启基于注解的缓存 keyGenerator 缓存数据时key生成策略 serialize 缓存数据时value序列化策略 都是作用于缓存，不作用于数据库？ 1.4 搭建基本环境 创建出department和employee表 创建javaBean封装数据 整合MyBatis操作数据库 配置数据源信息 使用注解版的MyBatis @MapperScan指定需要扫描的mapper接口所在的包 2、快速体验缓存缓存SpEL可用元数据 名字 位置 描述 示例 methodName root object 当前被调用的方法名 #root.methodName method root object 当前被调用的方法 #root.method.name target root object 当前被调用的目标对象 #root.target targetClass root object 当前被调用的目标对象类 #root.targetClass args root object 当前被调用的方法的参数列表 #root.args[0] caches root object 当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”, “cache2”})），则有两个cache #root.caches[0].name argument name evaluation context 方法参数的名字. 可以直接 #参数名 ，也可以使用 #p0或#a0 的形式，0代表参数的索引； #iban 、 #a0 、 #p0 result evaluation context 方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache put’的表达式 ’cache evict’的表达式beforeInvocation=false） #result 步骤： 2.1 开启基于注解的缓存 @EnableCaching1234567891011// 启动类@SpringBootApplication@EnableCachingpublic class SpringinitializrApplication { public static void main(String[] args) { System.out.println(\"Start...\"); SpringApplication.run(SpringinitializrApplication.class, args); System.out.println(\"Success...\"); }} 2.2 标注缓存注解即可将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法； CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字； 2.3 @Cacheable12345678910111213// DepartmentController.java@RestControllerpublic class DepartmentController { @Autowired DepartmentService departmentService; @GetMapping(\"/service/dept/{id}\") public Department getDepart(@PathVariable(\"id\") Integer id){ return departmentService.getDepartment(id); } ...} 2.3.1 几个属性： @Cacheable的属性 详情 用法 cacheNames/value 指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存 key 缓存数据使用的key；可以用它来指定。默认是使用方法参数的值 1-方法的返回值 编写SpEL； #i d;参数id的值 #a0 #p0 #root.args[0]getEmp[2] keyGenerator key的生成器；可以自己指定key的生成器的组件id key/keyGenerator：二选一使用 cacheManager 指定缓存管理器；或者cacheResolver指定获取解析器 condition 指定符合条件的情况下才缓存； condition = “#id&gt;0”condition = “#a0&gt;1”：第一个参数的值&gt;1的时候才进行缓存 unless 否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断 unless = “#result == null”unless = “#a0==2”:如果第一个参数的值是2，结果不缓存 sync 是否使用异步模式 2.3.2 应用举例123456789101112131415161718// DepartmentService.java@Servicepublic class DepartmentService { @Autowired DepartmentMapper departmentMapper; // @Cacheable(cacheNames = \"dept\", key = \"#id\") // @Cacheable(cacheNames = {\"dept\", \"tdept\"}, key = \"#id\") 多缓存名 // @Cacheable(cacheNames = \"dept\", key = \"#root.args[0]\", condition = \"#id&gt;0\") // @Cacheable(cacheNames = \"dept\", key = \"#root.args[0]\", unless = \"#result == null\") @Cacheable(cacheNames = \"dept\", key = \"#root.args[0]\") public Department getDepartment(Integer id){ System.out.println(\"查询\"+id+\"号部门\"); Department dept = departmentMapper.getDeptById(id); return dept; }} 2.3.3 运行主程序访问http://localhost:8088/service/dept/1，查看控制台，然后在刷新浏览器再查看控制台，发现后台并不执行数据库查询： 2.3.4 分析缓存的工作原理以及工作步骤结合以上例子来： 自动配置类入手：CacheAutoConfiguration.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445@Configuration@ConditionalOnClass({CacheManager.class})@ConditionalOnBean({CacheAspectSupport.class})@ConditionalOnMissingBean( value = {CacheManager.class}, name = {\"cacheResolver\"})@EnableConfigurationProperties({CacheProperties.class})@AutoConfigureBefore({HibernateJpaAutoConfiguration.class})@AutoConfigureAfter({ CouchbaseAutoConfiguration.class, HazelcastAutoConfiguration.class, RedisAutoConfiguration.class})@Import({CacheAutoConfiguration.CacheConfigurationImportSelector.class})public class CacheAutoConfiguration { static final String VALIDATOR_BEAN_NAME = \"cacheAutoConfigurationValidator\"; public CacheAutoConfiguration() { } @Bean @ConditionalOnMissingBean public CacheManagerCustomizers cacheManagerCustomizers( ObjectProvider&lt;List&lt;CacheManagerCustomizer&lt;?&gt;&gt;&gt; customizers ) { return new CacheManagerCustomizers((List)customizers.getIfAvailable()); } ... static class CacheConfigurationImportSelector implements ImportSelector { CacheConfigurationImportSelector() { } public String[] selectImports(AnnotationMetadata importingClassMetadata) { CacheType[] types = CacheType.values(); String[] imports = new String[types.length]; for(int i = 0; i &lt; types.length; ++i) { imports[i] = CacheConfigurations.getConfigurationClass(types[i]); } return imports; } }} 放了一些缓存管理的自定义器（CacheManagerCustomizers）等； 关注一下@Import({CacheAutoConfiguration.CacheConfigurationImportSelector.class})，查看源码来到上面代码中的CacheConfigurationImportSelector方法；在方法体中调用的selectImports打上断点，debug来查看给容器中导入了哪些缓存组件：缓存的配置类 哪个配置类默认生效？配置文件加入以下配置，然后运行主程序 12# 打开自动配置报告debug=true 可以看到控制台： 1234567891011121314151617181920212223242526272829=========================AUTO-CONFIGURATION REPORT=========================Positive matches:----------------- SimpleCacheConfiguration matched: - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition) - @ConditionalOnMissingBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans (OnBeanCondition) ... Negative matches:----------------- ActiveMQAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition) AopAutoConfiguration.CglibAutoProxyConfiguration: Did not match: - @ConditionalOnProperty (spring.aop.proxy-target-class=true) did not find property 'proxy-target-class' (OnPropertyCondition) ... 可以看出是SimpleCacheConfiguration配置类生效；给容器中注册了一个CacheManager：ConcurrentMapCacheManager 可以获取和创建ConcurrentMapCache类型的缓存组件；其的作用将数据保存在ConcurrentMap中； 2.3.5 @Cacheable运行流程 方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取； （CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。 去Cache中查找缓存的内容，使用一个key，默认就是方法的参数； key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key； SimpleKeyGenerator生成key的默认策略； 如果没有参数；key=new SimpleKey()； 如果有一个参数：key=参数的值 如果有多个参数：key=new SimpleKey(params)； 没有查到缓存就调用目标方法； 将目标方法返回的结果，放进缓存中 @Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据。 核心： 使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件 key使用keyGenerator生成的，默认是SimpleKeyGenerator 2.4 @CacheEvict2.5 @CachePut默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将数据保存在 ConcurrentMap中 开发中使用缓存中间件；redis、memcached、ehcache； 三、整合redis作为缓存 Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 1、安装redis：使用docker； 2、引入redis的starter 3、配置redis 4、测试缓存 原理：CacheManager===Cache 缓存组件来实际给缓存中存取数据 1）、引入redis的starter，容器中保存的是 RedisCacheManager； 2）、RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache通过操作redis缓存数据的 3）、默认保存数据 k-v 都是Object；利用序列化保存；如何保存为json 1、引入了redis的starter，cacheManager变为 RedisCacheManager； 2、默认创建的 RedisCacheManager 操作redis的时候使用的是 RedisTemplate 3、RedisTemplate 是 默认使用jdk的序列化机制 4）、自定义CacheManager；","link":"/Spring/43845.html"},{"title":"Spring Boot应用","text":"1、Restful风格简介 1.1 概念一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 1.2 URL定义 资源：互联网所有的事物都可以被抽象为资源 资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。 分别对应：添加、 删除、修改、查询。 传统方式操作资源 查询GET：http://127.0.0.1/query.action?id=1 新增POST：http://127.0.0.1/save.action 更新POST：http://127.0.0.1/update.action 删除GET或POST：http://127.0.0.1/delete.action?id=1 可以通过 GET、 POST、 PUT、 PATCH、 DELETE 等方式对服务端的资源进行操作。其中，GET 用于查询资源，POST 用于创建资源，PUT 用于更新服务端的资源的全部信息，PATCH 用于更新服务端的资源的部分信息，DELETE 用于删除服务端的资源。 使用RESTful操作资源 查询用户信息列表GET：http://127.0.0.1/users 查看某个用户信息GET：http://127.0.0.1/users/001 新建用户信息POST：http://127.0.0.1/users 更新用户信息（全部字段）PUT：http://127.0.0.1/users/001 更新用户信息（部分字段）PATCH：http://127.0.0.1/users/001 删除用户信息DELETE：http://127.0.0.1/users/001 1.3 API设计风格基本规则 使用名词而不是动词 /getAllUsers /updateUser /deleteUser/001 使用子资源表达关系（如果一个资源与另外一个资源有关系，使用子资源） 返回所有用户GET：/getUser/ 返回001用户GET： /getUser/001 总而言之restful是一种旧技术新风格 2、RestfulCRUD2.1 默认访问首页123456789101112131415@Configurationpublic class SpringMVCConfig extends WebMvcConfigurerAdapter { //所有的WebMvcConfigurerAdapter组件都会一起起作用 @Bean //将组件注册在容器 public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() { @Override public void addViewControllers(ViewControllerRegistry registry) { registry.addViewController(\"/\").setViewName(\"login\"); registry.addViewController(\"/index.html\").setViewName(\"login\"); } }; return adapter; }} 2.2 国际化 编写国际化配置文件； 使用ResourceBundleMessageSource管理国际化资源文件 在页面使用fmt:message（JSP）取出国际化内容 Spring Boot都自动配置好了，唯一要做的就是编写国际化配置文件了 步骤 编写国际化配置文件，抽取页面需要显示的国际化消息 SpringBoot自动配置好了管理国际化资源文件的组件； Ctrl+N搜索MessageSourceAutoConfiguration类，查看源码 12345678910111213141516171819202122232425262728293031323334353637@Configuration@ConditionalOnMissingBean( value = {MessageSource.class}, search = SearchStrategy.CURRENT)@AutoConfigureOrder(-2147483648)@Conditional({MessageSourceAutoConfiguration.ResourceBundleCondition.class})@EnableConfigurationProperties@ConfigurationProperties( prefix = \"spring.messages\")public class MessageSourceAutoConfiguration { private static final Resource[] NO_RESOURCES = new Resource[0]; private String basename = \"messages\"; //我们的配置文件可以直接放在类路径下叫messages.properties ... @Bean public MessageSource messageSource() { ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); if (StringUtils.hasText(this.basename)) { // 设置国际化资源文件的基础名（去掉语言国家代码的） messageSource.setBasenames( StringUtils.commaDelimitedListToStringArray( StringUtils.trimAllWhitespace(this.basename) ) ); } if (this.encoding != null) { messageSource.setDefaultEncoding(this.encoding.name()); } messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale); messageSource.setCacheSeconds(this.cacheSeconds); messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat); return messageSource; }} 去页面获取国际化的值； Thymeleaf官方文档查看message 主配置文件： 1234#设置国际化资源路径spring.messages.basename=i18n/login#设置国际化编码格式spring.messages.encoding=UTF-8 HTML文件： 1234567891011121314151617181920&lt;img class=\"mb-4\" th:src=\"@{/asserts/img/bootstrap-solid.svg}\" src=\"asserts/img/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\"&gt;&lt;h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\"&gt;Please sign in&lt;/h1&gt;&lt;label class=\"sr-only\" th:text=\"#{login.username}\"&gt;Username&lt;/label&gt;&lt;input type=\"text\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\"&gt;&lt;label class=\"sr-only\" th:text=\"#{login.password}\"&gt;Password&lt;/label&gt;&lt;input type=\"password\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\"&gt;&lt;div class=\"checkbox mb-3\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" value=\"remember-me\"&gt; [[#{login.rememberme}]] &lt;/label&gt;&lt;/div&gt;&lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.signin}\"&gt; Sign in&lt;/button&gt;&lt;p class=\"mt-5 mb-3 text-muted\"&gt;© 2017-2018&lt;/p&gt;&lt;a class=\"btn btn-sm\"&gt;中文&lt;/a&gt;&lt;a class=\"btn btn-sm\"&gt;English&lt;/a&gt; 效果：根据浏览器语言设置的信息切换了国际化； 原理：国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）； 1234567891011121314151617@Bean@ConditionalOnMissingBean@ConditionalOnProperty( prefix = \"spring.mvc\", name = {\"locale\"})public LocaleResolver localeResolver() { if (this.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.WebMvcProperties.LocaleResolver.FIXED) { return new FixedLocaleResolver(this.mvcProperties.getLocale()); } else { AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver(); localeResolver.setDefaultLocale(this.mvcProperties.getLocale()); return localeResolver; }} 默认的就是根据请求头带来的区域信息获取Locale进行国际化 点击链接切换国际化 自定义组件MyLocaleResolver类 123456789101112131415161718192021222324/** * 可以在连接上携带区域信息 */public class MyLocaleResolver implements LocaleResolver { @Override public Locale resolveLocale(HttpServletRequest httpServletRequest) { String l = httpServletRequest.getParameter(\"l\"); Locale locale = Locale.getDefault(); // 是否携带语言信息 if(!StringUtils.isEmpty(l)){ String[] split = l.split(\"_\"); locale = new Locale(split[0],split[1]); } return locale; } @Override public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) { }} 然后个组件添加进容器，在配置文件SpringMVCConfig类文件中： 12345// 区域信息解析器组件@Beanpublic LocaleResolver localeResolver(){ return new MyLocaleResolver();} 2.3 登录开发期间模板引擎页面修改以后，要实时生效 禁用模板引擎的缓存 12# 禁用缓存spring.thymeleaf.cache=false 页面修改完成以后ctrl+F9：重新编译； 登陆错误消息的显示 1&lt;p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"&gt;&lt;/p&gt; 2.4 拦截器进行登陆检查拦截器组件类： 123456789101112131415161718192021222324252627282930313233343536373839404142/** * 登陆检查， */public class LoginHandlerInterceptor implements HandlerInterceptor { //目标方法执行之前 @Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception { Object user = httpServletRequest.getSession().getAttribute(\"loginUser\"); if(user == null){ //未登陆，返回登陆页面 httpServletRequest.setAttribute(\"msg\",\"没有权限请先登陆\"); httpServletRequest.getRequestDispatcher(\"/index.html\").forward( httpServletRequest, httpServletResponse ); return false; }else{ //已登陆，放行请求 return true; } } @Override public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception { }} 注册拦截器 123456789101112131415161718//所有的WebMvcConfigurerAdapter组件都会一起起作用@Bean //将组件注册在容器public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() { ... // 注册拦截器 @Override public void addInterceptors(InterceptorRegistry registry) { // super.addInterceptors(registry); // \"/**\"表示任意多层路径下的任意请求 // 静态资源； *.css , *.js // SpringBoot已经做好了静态资源映射 registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\") .excludePathPatterns(\"/index.html\", \"/\", \"/login\"); } }; return adapter;} 3、CRUD-员工列表3.1 RestfulCRUD：CRUD满足Rest风格；URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作 普通CRUD（uri来区分操作） RestfulCRUD 查询 getEmp emp—-GET 添加 addEmp?xxx emp—-POST 修改 updateEmp?id=xxx&amp;xxx=xx emp/{id}—-PUT 删除 deleteEmp?id=1 emp/{id}—-DELETE 3.2 thymeleaf公共页面元素抽取12345678910111213141、抽取公共片段&lt;div th:fragment=\"copy\"&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt;2、引入公共片段&lt;div th:insert=\"~{footer :: copy}\"&gt;&lt;/div&gt;~{templatename::selector}：模板名::选择器~{templatename::fragmentname}:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~{}：行内写法可以加上：[[~{}]];[(~{})]； 三种引入公共片段的th属性： th:insert：将公共片段整个插入到声明引入的元素中 th:replace：将声明引入的元素替换为公共片段 th:include：将被引入的片段的内容包含进这个标签中 页面示例： 123&lt;div th:fragment=\"copy\"&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt; 其他页面使用方式： 12345&lt;div th:insert=\"footer :: copy\"&gt;&lt;/div&gt;&lt;div th:replace=\"footer :: copy\"&gt;&lt;/div&gt;&lt;div th:include=\"footer :: copy\"&gt;&lt;/div&gt; 效果： 1234567891011&lt;div&gt; &lt;footer&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery &lt;/footer&gt;&lt;/div&gt; &lt;footer&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery &lt;/footer&gt;&lt;div&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt; 3.3 引入片段的时候传入参数：父页面： 12&lt;!--引入侧边栏;传入参数--&gt;&lt;div th:replace=\"commons/bar::#sidebar(activeUri='main.html')\"&gt;&lt;/div&gt; 子页面： 12345678910111213141516171819202122232425262728&lt;!-- sidebar --&gt;&lt;nav class=\"col-md-2 d-none d-md-block bg-light sidebar\" id=\"sidebar\"&gt; &lt;div class=\"sidebar-sticky\"&gt; &lt;ul class=\"nav flex-column\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link active\" th:class=\"${activeUri=='main.html'?'nav-link active':'nav-link'}\" href=\"http://getbootstrap.com/docs/4.0/examples/dashboard/#\" th:href=\"@{main.html}\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" s troke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\"&gt; &lt;path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"&gt;&lt;/path&gt; &lt;polyline points=\"9 22 9 12 15 12 15 22\"&gt;&lt;/polyline&gt; &lt;/svg&gt; Dashboard &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; ... &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 3.4 添加操作添加页面： 123456789101112131415161718192021222324252627282930313233343536&lt;form th:action=\"@{addEmployee}\" method=\"post\"&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;LastName&lt;/label&gt; &lt;input name=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"name\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Email&lt;/label&gt; &lt;input name=\"email\" type=\"email\" class=\"form-control\" placeholder=\"name@163.com\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt; &lt;div class=\"form-check form-check-inline\"&gt; &lt;input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\"&gt; &lt;label class=\"form-check-label\"&gt;男&lt;/label&gt; &lt;/div&gt; &lt;div class=\"form-check form-check-inline\"&gt; &lt;input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\"&gt; &lt;label class=\"form-check-label\"&gt;女&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;department&lt;/label&gt; &lt;select class=\"form-control\" name=\"department.id\"&gt; &lt;!-- 提交的是部门的id --&gt; &lt;option th:value=\"${dept.id}\" th:each=\"dept: ${departments}\" th:text=\"${dept.departmentName}\"&gt; 1 &lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Birth&lt;/label&gt; &lt;input name=\"birth\" type=\"text\" class=\"form-control\" placeholder=\"2020/01/01\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;添加&lt;/button&gt;&lt;/form&gt; 提交的数据格式不对：生日：日期； 2017-12-12；2017/12/12；2017.12.12； 日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型; 2017-12-12—-Date； 类型转换，格式化; 默认日期是按照/的方式； 3.5 修改操作修改添加二合一表单 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!-- 需要区分员工修改还是添加 --&gt;&lt;form th:action=\"${employee!=null}?@{updateEmployee}:@{addEmployee}\" method=\"post\"&gt; &lt;!-- 发送put请求修改原数据 --&gt; &lt;!-- 1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的） 2、页面创建一个post表单 3、创建一个input项，name=\"_method\";值就是我们指定的请求方式 --&gt; &lt;!-- th:if=\"${employee!=null}\"修改页面采用put方式 --&gt; &lt;input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${employee!=null}\"/&gt; &lt;input type=\"hidden\" name=\"id\" th:if=\"${employee!=null}\" th:value=\"${employee.id}\"&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;LastName&lt;/label&gt; &lt;input name=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"name\" th:value=\"${employee!=null}?${employee.lastName}\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Email&lt;/label&gt; &lt;input name=\"email\" type=\"email\" class=\"form-control\" placeholder=\"name@163.com\" th:value=\"${employee!=null}?${employee.email}\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt; &lt;div class=\"form-check form-check-inline\"&gt; &lt;input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${employee!=null}?${employee.gender}==1\"&gt; &lt;label class=\"form-check-label\"&gt;男&lt;/label&gt; &lt;/div&gt; &lt;div class=\"form-check form-check-inline\"&gt; &lt;input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${employee!=null}?${employee.gender}==0\"&gt; &lt;label class=\"form-check-label\"&gt;女&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;department&lt;/label&gt; &lt;select class=\"form-control\" name=\"department.id\"&gt; &lt;!-- 提交的是部门的id --&gt; &lt;option th:selected=\"${employee!=null}?${dept.id == employee.department.id}\" th:value=\"${dept.id}\" th:each=\"dept: ${departments}\" th:text=\"${dept.departmentName}\"&gt;1&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Birth&lt;/label&gt; &lt;input name=\"birth\" type=\"text\" class=\"form-control\" placeholder=\"2020/01/01\" th:value=\"${employee!=null}?${#dates.format(employee.birth, 'yyyy-MM-dd HH:mm')}\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-primary\" th:text=\"${employee!=null}?'修改':'添加'\"&gt; &lt;/button&gt;&lt;/form&gt; 3.6 删除操作123456789101112131415161718192021222324252627282930313233343536373839404142&lt;main role=\"main\" class=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\"&gt; &lt;h2&gt;&lt;a class=\"btn btn-sm btn-success\" th:href=\"@{addEmployeePage}\"&gt;添加员工&lt;/a&gt;&lt;/h2&gt; &lt;div class=\"table-responsive\"&gt; &lt;table class=\"table table-striped table-sm\"&gt; ... &lt;tbody&gt; &lt;tr th:each=\"emp: ${employees}\"&gt; &lt;td th:text=\"${emp.id}\"&gt;&lt;/td&gt; &lt;td&gt;[[${emp.lastName}]]&lt;/td&gt; &lt;td th:text=\"${emp.email}\"&gt;&lt;/td&gt; &lt;td th:text=\"${emp.gender}==0?'女':'男'\"&gt;&lt;/td&gt; &lt;td th:text=\"${emp.department.departmentName}\"&gt;&lt;/td&gt; &lt;td th:text=\"${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\"&gt;&lt;/td&gt; &lt;td&gt; &lt;a class=\"btn btn-sm btn-primary\" th:href=\"@{/employee/}+${emp.id}\"&gt;编辑&lt;/a&gt; &lt;!-- &lt;form th:action=\"@{/employee/}+${emp.id}\" method=\"post\"&gt;--&gt; &lt;!-- &lt;input type=\"hidden\" name=\"_method\" value=\"delete\"/&gt;--&gt; &lt;!-- &lt;button type=\"submit\" class=\"btn btn-sm btn-danger\"&gt;删除&lt;/button&gt;--&gt; &lt;!-- &lt;/form&gt;--&gt; &lt;!-- th:attr自定义标签属性 --&gt; &lt;button th:attr=\"del_uri=@{/employee/}+${emp.id}\" class=\"btn btn-sm btn-danger deleteBtn\"&gt; 删除 &lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/main&gt;&lt;!-- 将表单放在里面，每个删除按钮就会有个表单，放在外面简洁 --&gt;&lt;form id=\"deleteEmpForm\" method=\"post\"&gt; &lt;input type=\"hidden\" name=\"_method\" value=\"delete\"/&gt;&lt;/form&gt;&lt;script&gt; $(\".deleteBtn\").click(function(){ //删除当前员工的 $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit(); return false; });&lt;/script&gt;","link":"/Spring/63551.html"},{"title":"Spring Boot配置","text":"1、配置文件 1.1 文件类型Spring Boot使用一个全局配置文件，配置文件名是固定的 application.properties application.yml 配置文件的作用：修改Spring Boot自动配置的默认值（Spring Boot在底层都给我们自动配置好） YAML(YAML Ain’t a Markup Language) YAML 不是一种标记语言的递归缩写 在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言） 标记语言 以前的配置文件，大多都使用XML文件 YAML以数据为中心，比JSON，XML等更适合做配置文件 例子 YAML 12server: port: 8081 XML 123&lt;server&gt; &lt;port&gt;8081&lt;/port&gt;&lt;/server&gt; 2、YAML语法2.1 基本语法key:(空格)value表示一对键值对 以空格的缩进来控制层级关系，只要是做对齐的一列数据，都是统一层级的 属性和值也是大小写敏感 2.2 值的写法字面量：普通值（数字，字符串，布尔）key: value字面直接来写 字符串默认不用加上单引号或双引号 双引号：不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思 name: “Hello \\n World”，输出：Hello 换行 World 单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串数据 name: ‘Hello \\n World’，输出：Hello \\n World 对象、Map（属性和值）（键值对）key: value在下一行来写对象的属性和值的关系，注意缩进 对象还是key: value的方式 123friends: name: Tom age: 20 行内写法 1friends: (name: Tom,age 20) 数组（List、Set）用- value表示数组中的一个元素 1234pets: - cat - dog - pig 行内写法 1pets: [cat, dog, pig] 2.3 配置文件值注入配置文件application.yml 1234567891011person: name: MysteryGuest age: 21 birth: 1999/01/09 map: {k1: v1, k2: v2} list: - China - Hubei pet: name: niuniu age: 5 @ConfigurationProperties的方式 javaBean 1234567891011121314151617181920212223/** * 将配置文件中配置的每一个属性的值，映射到这个数组中 * @ConfigurationProperties: 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定 * prefix = \"person\": 配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties功能 */@Component@ConfigurationProperties(prefix = \"person\")public class Person { private String name; private Integer age; private Date birth; private Map&lt;String, Object&gt; map; private List&lt;Object&gt; list; private Pet pet; // getter() and setter() @Override public String toString() {...}} 我们可以导入配置文件处理器，以后就有自动提示了 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; @Value的方式 123456789101112131415161718192021222324252627@Componentpublic class Person { // 另一种方式，Spring的底层注解 /** * 类似以前 * &lt;bean class=\"Person\"&gt; * &lt;property name=\"name\" value=\"MysteryGuest\"&gt;&lt;/property&gt; * &lt;/bean&gt; * &lt;bean&gt;标签相当于@Compoent * &lt;property&gt;标签中的value相当于@Value * value的参数可以是字面量、${key}从环境变量或配置文件获取值、#{SpEL} */ @Value(\"${person.name}\") private String name; @Value(\"#{11*2}\") private Integer age; private Date birth; private Map&lt;String, Object&gt; map; private List&lt;Object&gt; list; private Pet pet; // getter() and setter() @Override public String toString() {...}} 2.4 @Value获取值和@ConfigurationProperties获取值比较 @ConfigurationProperties @Value 功能 批量注入配置文件中的属性 一个一个指定 松散绑定（松散语法） 支持 不支持 SpEL（例：#{}） 不支持 支持 JSR303数据校验 支持 不支持 复杂类型封装（例：Map） 支持 不支持 属性名匹配规则（Relaxed binding，松散绑定） person.firstName：使用标准方式 person.first-name：大写用- person.first_name：大写用_ PERSON_FIRST_NAEM： 推荐系统属性使用这种写法 配置文件（yml和properties）都能获取值 如果说我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@value 如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties 2.5 配置文件注入值校验123456789101112131415161718@Component@ConfigurationProperties(prefix = \"person\")@Validated // JSR303数据校验public class Person { @Email // @value不支持 private String name; private Integer age; private Date birth; private Map&lt;String, Object&gt; map; private List&lt;Object&gt; list; private Pet pet; // getter() and setter() @Override public String toString() {...}} 3、@PropertySource和@ImportResource@PropertySource用来加载指定的配置文件 1234@PropertySource(value = {\"classpath:person.properties\"})@Component@ConfigurationProperties(prefix = \"person\")public class Person {...} @ImportResource导入Spring的配置文件，让配置文件里面的内容生效 Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别 想让Spring的配置文件生效，加载进来，@ImportResource标注在一个配置类上 1@ImportResource(locations = {\"classpath:beans.xml\"}) 3.1 Spring Boot推荐给容器中添加组件的方式不来编写Spring的配置文件 123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;bean id=\"helloService\" class=\"com.initializr.service.HelloService\"&gt;&lt;/bean&gt;&lt;/beans&gt; @Bean既可以标记在类上，也可以作为元注解 推荐使用全注解的方式 配置类———-Spring配置文件 使用@Bean给容器中添加组件 1234567891011121314/** * @Configuration指明当前类是一个配置类，就是来替代之前的Spring配置文件 * * 以前在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件 */@Configurationpublic class MyAppConfig { @Bean // 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名 public HelloService helloService() { System.out.println(\"配置类给容器中添加组件了...\"); return new HelloService(); }} 4、配置文件占位符4.1 随机数12${random.uuid} ${random.int} ${random.long}${random.int(10)} ${random.int[1024,65536]} 4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值123456789person.name=MysticalGuest${random.uuid}person.age=${random.int}person.birth=1999/01/09person.map.k1=v1person.map.k2=v2person.list=[a, b, c]person.pet.name=${person.hello:hello}${person.name}'s dog# 如果文件中没有定义person.hello，那么取后面的hello值person.pet.age=6 5、ProfileProfile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境 5.1 多Profile文件我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml 默认使用application.properties/yml的配置 5.2 yml支持多文档块方式123456789101112131415server: port: 8081spring: profiles: active: dev---server: port: 8084spring: profiles: dev---server: port: 8085 spring: profiles: prod 5.3 激活指定profile 指定激活开发环境配置 1spring.profiles.active=dev 编辑运行配置参数 --spring.profiles.active=dev 命令行 打包后运行项目，切换端口，配置传入命令行参数 1$ java -jar target/myproject-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev 虚拟机参数 -Dspring.profiles.active=dev 6、配置文件加载位置Spring Boot启动会扫描以下位置的application.properties或者application.yml文件作为 Spring Boot的默认配置文件 file: ./config/ file为当前项目目录 file: ./ classpath: /config/ classpath: / 以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容；Spring Boot会从这4个位置全部加载主配置文件，互补配置 我们也可以通过配置spring.config.location来改变默认配置 项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置，指定配置文件和默认加载的主配置文件 1$ java -jar target/myproject-0.0.1-SNAPSHOT.jar --spring.config.location=D:/application.properties 以便运维的时候修改某些配置 7、外部配置加载顺序Spring Boot支持多种外部配置方式，也可以从以下位置加载配置，优先级从高到底，高优先级的配置覆盖第优先级的配置，所有的配置会形成互补配置 这些方式优先级如下，可以参阅官方文档 命令行参数 1$ java -jar target/myproject-0.0.1-SNAPSHOT.jar --server.port=8089 --server.context-path=/initcmd 来自 java: comp/env的JNDI属性 Java系统属性( System getProperties() ) 操作系统环境变量 RandomValuePropertySource配置的Random.*属性值 jar包外部的application-{profile}.properties或application.yml（带spring.profile）配置文件 由jar包外向jar包内进行寻找，优先加载带profile jar包内部的application-{profile}-properties或application.yml（spring profile)配置文件 jar包外部的application.properties或applcation.yml（不带spring.profile）配置文件 jar包内部的application.properties或application.yml（不带spring.profile）配置文件 @Configuration注解类上的@PropertySource 通过SpringApplication.setDefaultProperties指定的默认属性 8、自动配置原理配置依据官方文档 Spring Boot启动的时候加载主配置类，开启了自动配置功能@EnableAuto Configuratio @EnableAutoConfiguration作用 利用EnableAutoConfigurationlmportSelector给容器中导入一些组件?可以查看selectImports()方法的内容 List configurations = getCandidateConfigurations(annotation Metadata, attributes)获取候选的配置 SpringFactorfesLoader.loadFactoryNames()扫描所有jar包类路径下 META-INF/ spring.factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoconfiguration.class类（类名）对应的值，然后把他们添加在器中 将类路径下 META-INF/spring.factories里面配置的所有 EnableAutoConfiguration的值加入到了容器中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\...org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration 每一个这样的xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中，用他们来做自动配置 每一个自动配置类进行自动配置功能 8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理12345678910111213141516171819202122232425262728@Configuration@EnableConfigurationProperties({HttpEncodingProperties.class})@ConditionalOnWebApplication@ConditionalOnClass({CharacterEncodingFilter.class})@ConditionalOnProperty( prefix = \"spring.http.encoding\", value = {\"enabled\"}, matchIfMissing = true)public class HttpEncodingAutoConfiguration { // 已经和Spring Boot的配置文件映射了 private final HttpEncodingProperties properties; // 只有一个有参构造器的情况下，参数的值就会从容器中拿 public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) { this.properties = properties; } @Bean // 给容器中添加一个组件，这个组件的某些值需要从properties中获取 @ConditionalOnMissingBean({CharacterEncodingFilter.class}) public CharacterEncodingFilter characterEncodingFilter() { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter(); filter.setEncoding(this.properties.getCharset().name()); filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST)); filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE)); return filter; } ...} @Configuration表示这是一个配置类，和之前编写的配置文件一样，也可以给容器中添加组件 @EnableConfigurationProperties启用指定类ConfigurationProperties功能，将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中，就可以用了 所有在配置文件中能配置的属性都是在xxxxProperties类中封装着，配置文件能配置什么可以参照某个功能对应的这个属性类 1234567@ConfigurationProperties( prefix = \"spring.http.encoding\")public class HttpEncodingProperties { public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\"); ...} @ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)从配置文件中获取指定的值和bean的属性进行绑定 @ConditionalOnWebApplication是Spring底层@Conditional注解，根据不同条件，如果满足指定的条件，整个配置类里面的配置就会生效； 这个注解是判断当前应用是否是web应用，如果是，当前配置类生效 @ConditionalOnClass判断当前项目有没有指定类CharacterEncodingFilter.class CharacterEncodingFilter.class是SpringMVC中进行乱码解决的过滤器，以前都是配置在web.xml中的 @ConditionalOnProperty判断配置文件中是否存在某个配置spring.http.encoding.enabled，如果不存在，判断也是成立的 即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的 一句话解释这个配置类，根据当前不同的条件，决定这个配置类是否生效？ 一旦这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的 8.2 Spring Boot精髓 SpringBoot启动会加载大量的自动配置类 我们看我们需要的功能有没有Spring Boot默认写好的自动配置类 我们再来看这个自动配置类中到底配置了哪些组件（只要有我们要用的组件，我们就不需要再来配置了，否则，自己配置添加，不满意也可以改） 给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值 xxxAutoConfiguration：自动配置类，给容器中添加组件 xxxproperties：封装配置文件中相关属性 8.3 细节在HttpEncodingAutoConfiguration配置里中 123456789@Bean // 给容器中添加一个组件，这个组件的某些值需要从properties中获取@ConditionalOnMissingBean({CharacterEncodingFilter.class})public CharacterEncodingFilter characterEncodingFilter() { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter(); filter.setEncoding(this.properties.getCharset().name()); filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST)); filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE)); return filter;} 方法上也有一个注解，判断容器中是否配置了这个组件，如果没有则生效，进行配置 @Conditional派生注解 作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置文件里面的所有内容才生效 Conditional扩属注解 作用(判断是否满足当前指定条件) @ConditionalOnJava 系统的java版本是否符合要求 @ConditionalOnBean 容器中存在指定Bean @ConditionalOnMissingBean 容器中不存在指定Bean @ConditionalOnExpression 满足SpEL表达式指定 @ConditionalOnClass 系统中有指定的类 @ConditionalOnMissingClass 系统中没有指定的类 @ConditionalOnSingleCandidate 容器中只有一个指定的Bean，或者这个Bean是首选Bean @ConditionalOnProperty 系统中指定的属性是否有指定的值 @ConditionalOnResource 类路径下是否存在指定资源文件 @ConditionalOnWebApplication 当前是web环境 Conditionalon NotWebApplication 当前不是web环境 @ConditionalOnJndi JNDI存在指定项 虽然自动配置类很多，但大多都需要一定条件才会生效 之前解析过程中，虽然加载了很多自动配置类，但不是所有的都生效 现在重要的是我们怎么知道哪些配置类生效了 我们可以启用debug属性 12# 开启Spring的debug，默认falsedebug=true 运行后观察控制台输出 1234567891011121314151617181920212223242526272829=========================AUTO-CONFIGURATION REPORT=========================Positive matches:----------------- DispatcherServletAutoConfiguration matched: - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition) - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition) ...Negative matches:----------------- ActiveMQAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition) ...Unconditional classes:---------------------- org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration ... Positive matches：自动配置类启用的Negative matches：没有启动，没有匹配成功的自动配置类","link":"/Spring/65459.html"},{"title":"Spring Boot自定义starter","text":"1、SpringBoot自定义starters SpringBoot的强大点就是把所有的场景抽象成starter场景启动器。 尽管已经定义好了，但依然可能无法满足我们的需求。 1.1 starter： 这个场景需要使用到的依赖是什么？ 如何编写自动配置 以WebMvcAutoConfiguration.class为例； 12345678@Configuration //指定这个类是一个配置类@ConditionalOnXXX //在指定条件成立的情况下自动配置类生效@AutoConfigureAfter //指定自动配置类的顺序@Bean //给容器中添加组件@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加入到容器中 自动配置类要能加载 1234# 将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\ 模式： 启动器只用来做依赖导入； 专门来写一个自动配置模块； 启动器依赖自动配置；别人只需要引入启动器（starter） mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter 1.2 步骤 首先在IDEA创建两个基础Maven项目：starter和autoconfiguration工程 启动器模块 1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.custom.starter&lt;/groupId&gt; &lt;artifactId&gt;custom-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--启动器--&gt; &lt;dependencies&gt; &lt;!--引入自动配置模块--&gt; &lt;dependency&gt; &lt;groupId&gt;com.custom.starter&lt;/groupId&gt; &lt;artifactId&gt;custom-spring-boot-starter-autoconfiguration&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 自动配置模块 1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.custom.starter&lt;/groupId&gt; &lt;artifactId&gt;custom-spring-boot-starter-autoconfiguration&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;custom-spring-boot-starter-autoconfiguration&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--引入spring-boot-starter；所有starter的基本配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 编写可配置属性 12345678910111213141516171819202122@ConfigurationProperties(prefix = \"custom.hello\")public class HelloProperties { private String prefix; private String suffix; public String getPrefix() { return prefix; } public void setPrefix(String prefix) { this.prefix = prefix; } public String getSuffix() { return suffix; } public void setSuffix(String suffix) { this.suffix = suffix; }} 编写场景 12345678910111213141516public class HelloService { HelloProperties helloProperties; public HelloProperties getHelloProperties() { return helloProperties; } public void setHelloProperties(HelloProperties helloProperties) { this.helloProperties = helloProperties; } public String sayHello(String name){ return helloProperties.getPrefix()+\"-\" +name + helloProperties.getSuffix(); }} 编写属性生效的自动配置类 1234567891011121314@Configuration@ConditionalOnWebApplication //web应用才生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration { @Autowired HelloProperties helloProperties; @Bean public HelloService helloService(){ HelloService service = new HelloService(); service.setHelloProperties(helloProperties); return service; }} 同样，想要配置类生效，就要在resources/META-INF/spring.factories编写路径 12org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\com.custom.starter.HelloServiceAutoConfiguration 最后将这2个项目都安装到Maven仓库中，点击IDEA右边Maven Projects，在两个项目的Lifecycle下点击install安装即可。 1.3 测试创建一个新的项目，测试上面我们自定义的starters 在项目的pom.xml文件中引入，自定义starters 123456&lt;!--引入自定义的starter--&gt;&lt;dependency&gt; &lt;groupId&gt;com.custom.starter&lt;/groupId&gt; &lt;artifactId&gt;atguigu-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt; 控制类 1234567891011@RestControllerpublic class HelloController { @Autowired HelloService helloService; @GetMapping(\"/hello\") public String hello(){ return helloService.sayHello(\"starter\"); }} 配置文件 12custom.hello.prefix=CUSTOMcustom.hello.suffix=HELLO WORLD 2、更多SpringBoot整合示例GitHub示例","link":"/Spring/24873.html"},{"title":"SpringBoot与数据访问","text":"1、整合基本JDBC与数据源1.1 Spring官网查看各种场景JDBC有关的场景启动器。 123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 配置文件： 123456spring: datasource: username: root password: 123456 url: jdbc:mysql://192.168.15.22:3306/jdbc driver-class-name: com.mysql.jdbc.Driver 效果： 默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源 数据源的相关配置都在DataSourceProperties里面 1.2 自动配置原理org.springframework.boot.autoconfigure.jdbc 参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型； SpringBoot默认可以支持以下数据源： 123org.apache.tomcat.jdbc.pool.DataSourceHikariDataSourceBasicDataSource 自定义数据源类型 1234567891011121314@ConditionalOnMissingBean({DataSource.class})@ConditionalOnProperty( name = {\"spring.datasource.type\"})static class Generic { Generic() { } @Bean public DataSource dataSource(DataSourceProperties properties) { // 使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性 return properties.initializeDataSourceBuilder().build(); }} 在DataSourceAutoConfiguration.class中，有DataSourceInitializer继承自ApplicationListener 作用： runSchemaScripts()；运行建表语句 runDataScripts()；运行插入数据的sql语句 默认只需要将文件命名为： 12schema-*.sql、data-*.sql默认规则：必须命名schema.sql，schema-all.sql； 可以使用配置文件指定位置 12345678spring: datasource: username: root password: 123456 url: jdbc:mysql://192.168.15.22:3306/jdbc driver-class-name: com.mysql.jdbc.Driver schema: - classpath:department.sql 操作数据库：自动配置了JdbcTemplate操作数据库 2、整合Druid数据源在Maven公共库中搜索Druid，找到其Maven依赖： 123456&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.23&lt;/version&gt;&lt;/dependency&gt; 在配置文件中加入配置： 12345678910111213141516171819202122232425262728293031spring: # 数据源基本配置 datasource: # 与DataSourceProperties.class下的属性一一对应 username: root password: 123456 url: jdbc:mysql://192.168.8.156:3306/jdbc driver-class-name: com.mysql.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource# schema:# - classpath:department.sql # 数据源其他配置, 底部这种颜色是因为DataSourceProperties.class下没有这些属性, # 并不能绑定到数据库的配置里 # 但DruidDataSource.java中有这些属性 # 想要生效, 自己配置, config.DruidConfig initialSize: 5 minIdle: 5 maxActive: 20 maxWait: 60000 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false poolPreparedStatements: true # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 filters: stat,wall,log4j maxPoolPreparedStatementPerConnectionSize: 20 useGlobalDataSourceStat: true connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 想要配置生效，导入druid数据源 123456789101112131415161718192021222324252627282930313233343536373839404142434445@Configurationpublic class DruidConfig { @ConfigurationProperties(prefix = \"spring.datasource\") @Bean public DataSource druid(){ return new DruidDataSource(); } // 配置Druid的监控 //1、配置一个管理后台的Servlet @Bean public ServletRegistrationBean statViewServlet(){ ServletRegistrationBean bean = new ServletRegistrationBean( new StatViewServlet(), \"/druid/*\" ); Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;(); initParams.put(\"loginUsername\",\"admin\"); initParams.put(\"loginPassword\",\"123456\"); initParams.put(\"allow\",\"\");// 默认就是允许所有访问 initParams.put(\"deny\",\"192.168.15.21\"); bean.setInitParameters(initParams); return bean; } // 2、配置一个web监控的filter @Bean public FilterRegistrationBean webStatFilter(){ FilterRegistrationBean bean = new FilterRegistrationBean(); bean.setFilter(new WebStatFilter()); Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;(); initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\"); // 排除拦截 bean.setInitParameters(initParams); bean.setUrlPatterns(Arrays.asList(\"/*\")); return bean; }} 在之前写的SpringinitializrApplicationTests类的testJDBC()方法中 1System.out.println(dataSource.getClass()); 语句打上断点，debug测试方法，查看控制台： 3、整合MyBatis同样在Maven公共库中搜索MyBatis Spring Boot Starter，找到其Maven依赖 123456&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt;&lt;/dependency&gt; 3.1 MyBatis-Spring-Boot-Starter 简介MyBatis-Spring-Boot-Starter类似一个中间件，链接Spring Boot和MyBatis，构建基于Spring Boot的MyBatis应用程序。 MyBatis-Spring-Boot-Starter 当前版本是 2.1.3，发布于2020年6月 MyBatis-Spring-Boot-Starter是个集成包，因此对MyBatis、MyBatis-Spring和SpringBoot的jar包都存在依赖，如下所示： MyBatis-Spring-Boot-Starter MyBatis-Spring Spring Boot Java 2.1 2.0 (need 2.0.2+ for enable all features) 2.1 or higher 8 or higher 1.3 1.3 1.5 6 or higher 3.2 分析依赖 依赖会引入spring-boot-starter-jdbc，mybatis的jar包，mybatis-spring中间整合包以及mybatis-spring-boot-autoconfigure自动配置包。 3.3 使用步骤 配置数据源相关属性 给数据库建表 创建JavaBean 注解版 3.4 注解版123456789101112131415161718192021222324// DepartmentMapper.java// 指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper { @Select(\"select * from department where id=#{id}\") public Department getDeptById(Integer id); @Delete(\"delete from department where id=#{id}\") public int deleteDeptById(Integer id); /* useGeneratedKeys = true: 使用自动生成的主键 keyProperty = \"id\": 指明主键字段, id属性式用来封装主键的 插入的department后, 主键会重新封装进来, 才会有值 */ @Options(useGeneratedKeys = true, keyProperty = \"id\") @Insert(\"insert into department(departmentName) values(#{departmentName})\") public int insertDept(Department department); @Update(\"update department set departmentName=#{departmentName} where id=#{id}\") public int updateDept(Department department);} 访问方式： 插入：http://localhost:8088/dept?departmentName=AA 查询：http://localhost:8088/dept/1 问题：自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer； 123456789101112131415161718192021// MyBatisConfig.java// 由于上面的org.apache.ibatis.session.Configuration, 所以这里使用全类名@org.springframework.context.annotation.Configurationpublic class MyBatisConfig { /* 使用注解版MyBatis时, 本来数据库department表中字段是departmentName, 如果将其改为department_name后, 就取不到值了, 如果不使用注解版, 可以直接在配置文件中配置驼峰命名规则, 但现在只能使用配置类了 */ @Bean public ConfigurationCustomizer configurationCustomizer(){ return new ConfigurationCustomizer(){ @Override public void customize(Configuration configuration) { // 开启驼峰命名法规则 configuration.setMapUnderscoreToCamelCase(true); } }; }} 还有，当我们实体类增多，每个映射文件都需要@Mapper注解？可以在启动类中使用MapperScan批量扫描所有的Mapper接口； 点击MapperScan查看源码： 1234567891011121314151617181920212223@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.TYPE})@Documented@Import({MapperScannerRegistrar.class})public @interface MapperScan { String[] value() default {}; String[] basePackages() default {}; Class&lt;?&gt;[] basePackageClasses() default {}; Class&lt;? extends BeanNameGenerator&gt; nameGenerator() default BeanNameGenerator.class; Class&lt;? extends Annotation&gt; annotationClass() default Annotation.class; Class&lt;?&gt; markerInterface() default Class.class; String sqlSessionTemplateRef() default \"\"; String sqlSessionFactoryRef() default \"\"; Class&lt;? extends MapperFactoryBean&gt; factoryBean() default MapperFactoryBean.class;} 里面可以配置basePackages()参数： 1234567891011@MapperScan(\"com.initializr.mapper\")@SpringBootApplicationpublic class SpringinitializrApplication { public static void main(String[] args) { System.out.println(\"Start...\"); SpringApplication.run(SpringinitializrApplication.class, args); System.out.println(\"Success...\"); } ...} 3.5 配置文件版MyBatis代码都托管到了GitHub，去GitHub查看配置文件写法，官方文档 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;settings&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/&gt; &lt;/settings&gt;&lt;/configuration&gt; 使配置文件生效： 123456# application.ymlmybatis: # 指定全局配置文件的位置 config-location: classpath:mybatis/mybatis-config.xml # 指定sql映射文件的位置 mapper-locations: classpath:mybatis/mapper/*.xml 更多使用参照官方文档 4、整合SpringData的JPA模块4.1 SpringData简介SpringData官方文档 Spring Data项目的目的是为了简化构建基于Spring框架应用的数据访问技术，包括非关系数据库、Map-Reduce框架、云数据服务等等；另外一位包含对关系数据库的访问支持。 Spring Data包含多个子项目： Spring Data Commons Spring Data JDBC Spring Data JDBC Ext Spring Data JPA Spring Data KeyValue Spring Data LDAP Spring Data MongoDB Spring Data Redis Spring Data REST …… Spring Data for Apache Solr Spring Data Neo4j Spring Data特点 SpringData为我们提供使用统一的API来对数据访问层进行操作；这主要是 Spring Data Commons项目来实现的。Spring Data Commons让我们在使用关系型或者非关系型数据访问技术时都基于Spring提供的统一标准，标准包含了CRUD(创建、获取、更新、删除)、査询、排序和分页的相关操作。 统一的Repository接口 Repository&lt;T, ID extends Serializable&gt;：统一接口 RevisionRepository&lt;T, ID extends Serializable, N extends Number&amp; Comparable&lt;N&gt;&gt;：基于乐观锁机制 CrudRepository&lt;T, ID extends Serializable&gt;：基本CRUD操作 PagingAndSortingRepository&lt;T, ID extends Serializable&gt;：基本CRUD及分页 提供数据访问模板类xxxTemplate 如：MongoTemplate、RedisTemplate等 JPA (Java Persistence API，Java持久层API) 与Spring Data JpaRepository基本功能 定义符合规范的方法命名 @Query自定义查询，定制查询SQL Specification查询（Spring Data JPA支持JPA2.0的Criteria查询） 应用面向Spring Data编程，使用其提供模板。 4.2 整合SpringData JPA引入启动器： 12345&lt;!-- 引入JPA --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; 查看视图： 可以看出，其导入了很多Spring业务功能模块，比如AOP和事务（Spring-tx）等； 还可以看出其底层是用hibernate实现的，其中使用hibernate-entitymanager管理hibernate-jpa-*-ap，进行操作。 依然需要配置数据源，用JPA操作数据库。 JPA：ORM（Object Relational Mapping）； 编写一个实体类（bean）和数据表进行映射，并且配置好映射关系； 12345678910111213141516//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = \"tbl_user\") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User { @Id //这是一个主键 @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键 private Integer id; @Column(name = \"last_name\",length = 50) //这是和数据表对应的一个列 private String lastName; @Column //省略默认列名就是属性名 private String email; // getter and setter} 编写一个Dao接口来操作实体类对应的数据表（称为Repository） 123//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; {} 基本的配置JpaProperties 1234567spring: jpa: hibernate: # 更新或者创建数据表结构 ddl-auto: update # 控制台显示SQL show-sql: true 编写controller类 1234567891011121314151617181920// UserController.java@RestControllerpublic class UserController { @Autowired UserRepository userRepository; @GetMapping(\"/user/{id}\") public User getUser(@PathVariable(\"id\") Integer id){ User user = userRepository.findOne(id); return user; } @GetMapping(\"/user\") public User insertUser(User user){ // 有自增组件 User save = userRepository.save(user); return save; }} 写了两个简单的方法用来做测验 启动主程序查看控制台： 可以看出，我们的配置ddl-auto: update生效了，当我们第一次启动项目，数据库中没有user表时，项目会自动为我们创建的。 然后依次访问：http://localhost:8088/user/1 和http://localhost:8088/user?lastName=Tom&amp;email=tom@vip.com 查看控制台： 最后返回数据库是由数据的。 测试成功啦！","link":"/Spring/33482.html"},{"title":"Spring Boot与Docker","text":"1、Docker简介类似于虚拟机技术，但不是一个虚拟机，却实现了虚拟机技术里的资源隔离，性能远远高于虚拟机。 Docker是一个开源的应用容器引擎；是一个轻量级容器技术； 如图，将用一个实例来讲述Docker的来源： 用户A使用的电脑是Windows原生系统，需要自己安装驱动和软件等，但如果用户B也使用同样方法，就也得自己再装一遍，其他人也一样，过于麻烦。 那么就有了Windows镜像系统，用户A把系统装好后，包括安装好的驱动和软件等，打包成镜像，其他用户也就有了。 Docker就类似于这种镜像机制。 Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 2、核心概念 docker主机(Host)：安装了d ocker程序的机器（Docker直接安装在操作系统之上） docker客户端(Client)：连接docker主机进行操作 docker仓库(Registry)：用来保存各种打包好的软件镜像；公共、私人仓库 docker镜像(Images)：软件打包好的镜像；放在docker仓库中 docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用 使用Docker的步骤： 安装Docker 去Docker仓库找到这个软件对应的镜像 使用Docker运行这个镜像，这个镜像就会生成一个Docker容器 对容器的启动停止就是对软件的启动停止 3、安装Docker3.1 安装linux虚拟机 VMWare、VirtualBox 创建新虚拟机或打开已创建的虚拟机，这里选择CentOS 3.2 在linux虚拟机上安装docker，步骤 检查内核版本，必须是3.10及以上 1$ uname -r 不是3.10及以上的，使用 1$ yum update 安装依赖 1$ yum install -y yum-utils device-mapper-persistent-data lvm2 添加软件源（设置yum源） 1$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 可以查看所有仓库中所有docker版本，并选择特定版本安装 1$ yum list docker-ce --showduplicates | sort -r 安装docker 1$ sudo yum install &lt;FQPN&gt; # 例如：sudo yum install docker-ce-18.03.1.ce 启动docker 1$ systemctl start docker 验证安装是否成功（有client和service两部分表示docker安装启动都成功了） 1$ docker version 停止docker 1$ systemctl stop docker 开机启动docker 1$ systemctl enable docker 更换docker的镜像源 修改或创建daemon.json文件：vi /etc/docker/daemon.json将以下配置写入到文件中，保存并退出（不会操作的百度下vi命令吧）： Docker中国官方镜像加速 123{ \"registry-mirrors\": [\"https://registry.docker-cn.com\"]} 中科大镜像加速 123{ \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]} 网易163镜像加速 123{ \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]} 阿里云跟daocloud镜像加速需要注册账号，阿里云官网，登录之后选择控制台，找到容器镜像服务，在镜像加速器下有个加速地址，复制添加上即可 123{ \"registry-mirrors\": [\"https://xxxxxxxx.mirror.aliyuncs.com\"]} 重启docker：systemctl restart docker 4、Docker常用命令&amp;操作4.1 镜像操作 操作 命令 说明 检索 docker search 关键字 eg：docker search redis 我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。 拉取 docker pull 镜像名:tag :tag是可选的，tag表示标签，多为软件的版本，默认是latest 列表 docker images 查看所有本地镜像 删除 docker rmi image-id 删除指定的本地镜像 Docker Hub仓库 4.2 容器操作软件镜像（例：QQ安装程序）——运行镜像——产生一个容器（正在运行的软件，运行的QQ） 步骤： 搜索镜像 1$ docker search tomcat 拉取镜像 1$ docker pull tomcat 根据镜像启动容器 12// --name给容器起名$ docker run --name mytomcat -d tomcat:latest 查看运行中的容器 1$ docker ps 停止运行中的容器 1$ docker stop &lt;容器的id&gt;/&lt;容器的name&gt; 查看所有的容器（包括运行中和已停止的） 1$ docker ps -a 启动容器 1$ docker start &lt;容器id&gt; 删除一个容器（注意和删除镜像的区别） 1$ docker rm 容器id 启动一个做了端口映射的tomcat（可以不用起名），一个镜像可以做 1$ docker run -d -p 8888:8080 tomcat -d：后台运行-p：将主机的端口映射到容器的一个端口 主机端口:容器内部的端口 查看容器的日志 1$ docker logs &lt;container-name&gt;/&lt;container-id&gt; 更多命令，可以参考每一个镜像的文档 5、安装MySQL示例1$ docker pull mysql 错误的启动 1$ docker run --name mysql01 -d mysql 用docker ps观察到，mysql退出了；为什么呢？使用docker logs &lt;mysql的id&gt;，得到错误日志：三个参数必须指定一个 123error: database is uninitialized and password option is not specified You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD 正确的启动 1$ docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 还应做端口映射 1$ docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 几个其他的高级操作 -v：把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面 改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql） 12$ docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag 不用配置文件，指定mysql的一些配置参数 12$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character -set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci","link":"/Spring/36445.html"},{"title":"Spring Boot错误机制","text":"1、错误处理机制1.1 SpringBoot默认的错误处理机制 默认效果： 浏览器，返回一个默认的错误页面 浏览器发送请求的请求头： 如果是其他客户端，默认响应一个json数据 客户端的请求头： 1.2 原理： 可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；查看这个类的源码 这个配置类给容器中添加了以下组件： DefaultErrorAttributes： 123456789101112// 帮我们在页面共享信息@Overridepublic Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) { Map&lt;String, Object&gt; errorAttributes = new LinkedHashMap&lt;String, Object&gt;(); errorAttributes.put(\"timestamp\", new Date()); addStatus(errorAttributes, requestAttributes); addErrorDetails(errorAttributes, requestAttributes, includeStackTrace); addPath(errorAttributes, requestAttributes); return errorAttributes;} BasicErrorController： 12345678910111213141516171819202122232425262728293031@Controller@RequestMapping(\"${server.error.path:${error.path:/error}}\")public class BasicErrorController extends AbstractErrorController { ... // 产生html类型的数据；浏览器发送的请求来到这个方法处理 @RequestMapping(produces = \"text/html\") public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) { HttpStatus status = getStatus(request); Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes( request, isIncludeStackTrace(request, MediaType.TEXT_HTML))); response.setStatus(status.value()); // 去哪个页面作为错误页面；包含页面地址和页面内容 ModelAndView modelAndView = resolveErrorView(request, response, status, model); return (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView); } // 产生json数据，其他客户端来到这个方法处理 @RequestMapping @ResponseBody public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) { Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL)); HttpStatus status = getStatus(request); return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status); } ...} ErrorPageCustomizer： 12345public class ErrorProperties { @Value(\"${error.path:/error}\") private String path = \"/error\"; ...} DefaultErrorViewResolver 12345678910111213141516171819202122232425@Overridepublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model) { ModelAndView modelAndView = resolve(String.valueOf(status), model); if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) { modelAndView = resolve(SERIES_VIEWS.get(status.series()), model); } return modelAndView;}private ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) { //默认SpringBoot可以去找到一个页面？ error/404 String errorViewName = \"error/\" + viewName; //模板引擎可以解析这个页面地址就用模板引擎解析 TemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName, this.applicationContext); if (provider != null) { //模板引擎可用的情况下返回到errorViewName指定的视图地址 return new ModelAndView(errorViewName, model); } //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面 error/404.html return resolveResource(errorViewName, model);} 1.3 步骤一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被BasicErrorController处理； 响应页面；去哪个页面是由DefaultErrorViewResolver解析得到的 123456789101112131415protected ModelAndView resolveErrorView( HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) { //所有的ErrorViewResolver得到ModelAndView for (ErrorViewResolver resolver : this.errorViewResolvers) { ModelAndView modelAndView = resolver.resolveErrorView(request, status, model); if (modelAndView != null) { return modelAndView; } } return null;} 2、如何定制错误响应：2.1 如何定制错误的页面 有模板引擎的情况下； error/状态码; 将错误页面命名为错误状态码.html放在模板引擎文件夹里面的error文件夹下，发生此状态码的错误就会来到 对应的页面； 我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）； 页面能获取的信息； 123456timestamp：时间戳status：状态码error：错误提示exception：异常对象message：异常消息errors：JSR303数据校验的错误都在这里 没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找； 以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面 2.2 如何定制错误的json数据 自定义异常处理&amp;返回定制json数据： 12345678910111213@ControllerAdvicepublic class CustomExceptionHandler { // 只要出现异常，SpringMVC就会调用这个方法，把异常对象传进来 @ResponseBody @ExceptionHandler(UserNotExistException.class) public Map&lt;String, Object&gt; handleException(Exception e){ Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"code\", \"user not exist\"); map.put(\"message\", e.getMessage()); return map; }} 用以上方法没有自适应效果，浏览器和客户端返回都是JSON数据 我们可以看到源码中，BasicErrorController类是用来处理自适应的 转发到/error进行自适应响应效果处理 12345678910111213141516171819@ControllerAdvicepublic class CustomExceptionHandler { @ExceptionHandler(UserNotExistException.class) public String handleException(Exception e, HttpServletRequest request){ Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); //传入我们自己的错误状态码 4xx 5xx，否则就不会进入定制错误页面的解析流程 /** * AbstractErrorController.class中 * Integer statusCode = (Integer) request .getAttribute(\"javax.servlet.error.status_code\"); */ request.setAttribute(\"javax.servlet.error.status_code\", 500); map.put(\"code\", \"user not exist\"); map.put(\"message\", e.getMessage()); // 转发到/error return \"forward:/error\"; }} 将我们的定制数据携带出去； 出现错误以后，会来到/error请求，会被BasicErrorController.class处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController.class（ErrorController）规定的方法）； 完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中； 页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到； 自定义： 12345678910111213// 给容器中加入我们自己定义的ErrorAttributes@Componentpublic class MyErrorAttributes extends DefaultErrorAttributes { @Override public Map&lt;String, Object&gt; getErrorAttributes( RequestAttributes requestAttributes, boolean includeStackTrace) { Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace); map.put(\"company\", \"MysteryGuest\"); return map; }} 最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容","link":"/Spring/63552.html"},{"title":"Spring Boot与日志","text":"1、日志框架故事：有一个开发人员，开发一个大型系统； 遇到重要数据，喜欢System.out.println(&quot;&quot;)，将关键数据打印在控制台 去掉？写在一个文件？方便？ 框架来记录系统的一些运行时信息，日志框架：first.jar 高大上的几个功能？异步模式？自动规定？等等？：second.jar 将以前的框架卸下来？换上新的框架，更新修改之前相关API：third.jar JDBC—-数据库驱动： 写了一个统一的接口层：暂时叫做日志门面（日志的一个抽象层）：fourth.jar 给项目中导入具体的日志实现就行了，我们之前的日志框架都是实现的抽象层 2、市面上的日志框架JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j… 2.1 下表行间无任何对应关系 日志门面 日志实现 JCL( Jakarta Commons Logging) Log4j SLF4j( Simple Logging Facade for Java) JUL( java. util.logging) jboss-logging Log4j2 Logback 左边选一个门面（抽象层）、右边选一个实现 选哪个呢？排除法 2.2 日志门面：slf4jJboss-logging：普通程序员用不了 JCL：最后一次更新是在2014年，廉颇老矣，尚能饭否？ 剩下slf4j理所应当 2.3 日志实现：logbacklog4j、logback和slf4j都是一个人写的，适配性好，log4j不错但有性能问题，但升级消耗太大，就重写了logback 所有log4j没有logback先进，JUL是Java自带的，怕日志市场被占，比较简略 log4j2是借log4j之名，由Apache公司重新做的框架，设计地非常好，由于太好还没适配 2.4 Spring Boot怎么做的呢？Spring框架默认是用JCL日志框架 Spring Boot选用slf4j和logback 3、slf4j的使用如何在系统中使用slf4j？官方文档 以后开发的时候，日志记录方法得调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法 参见用户手册SLF4J user manual给系统中导入slf4j的jar和logback的实现jar 123456789import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HelloWorld { public static void main(String[] args) { Logger logger = LoggerFactory.getLogger(HelloWorld.class); logger.info(\"Hello World\"); }} 虽然默认用的是logback的实现，如果想要其他实现也可以，毕竟slf4j是抽象层，实现用什么都行 图解 如果系统中只导入了slf4j，我们要进行日志记录，就会返回空值，因为没有任何实现 正确用法：我的应用程序面向slf4j编程，调用它的方法进行日志记录，在程序中也导入日志实现，虽然调用slf4j接口，但logback会实现，记录到文件或控制台 如果slf4j要绑定log4j，log4j出现比较早，没想到要适配slf4j，所以两者绑定要有一个适配层（slf4j实现的），适配层相当于上面实现了slf4j的具体方法，而在方法里面要进行真正日志记录的时候，又调了log4j的API，要用log4j还要导入适配层即可JUL同理 slf4j也有简单日志实现也能用，或者slf4j没有什么操作的实现包，也是输出空值 每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件 slf4j只提供抽象层，用哪个实现就写那个的配置文件 4、遗留问题开发某个系统时：使用{slf4j+logback}，依赖Spring框架（commons-logging），依赖Hibernate框架（Jboss-logging），依赖MyBatis框架等等可能一大堆 出现什么问题，系统中日志杂交？ 现在就要做同一日志记录，即使是别的框架和我一起使用slf4j进行输出？ 进入slf4j官方文档的legacy APIs 统一slf4j，使用其他包替换原有日志框架，替换的意思就是，例如要把原框架里面对Commons-logging的依赖排除掉 但如果我现在用的Spring框架缺少Commons-logging就运行不起来了，Spring底层记录日志就需要Commons-logging，那怎么办呢？就用jcl-over-slf4j.jar替换这个包，Spring要用的类这个替换包例还是有的，就不会报错了 但新的包实现怎么办呢？新的包调入slf4j，而slf4j又调到真正的实现中，其他框架不同日志框架同理替换 其他组合方式也是如此 如何让系统中所有的日志都统一到slf4j： 将系统中其他日志框架先排除去 用中间包来替换原有的日志框架 我们导入slf4j其他的实现 5、Spring Boot日志关系每个启动器（场景）都要依赖的 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt; Spring Boot使用它来做日志功能 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt; 依赖图示： 总结： Spring Boot底层也是使用slf4j+logback的方式进行日志记录 Spring Boot也是把其他的日志都替换成了slf4j 中间替换包，以jcl-over-slf4j.jar为例： 在项目的依赖包中找到其对应jar包：（中间转换包） 从图中看出，虽然包名用的Apache的，但实现却是使用的SLF4JLogFactory()的日志工厂 123456789@SuppressWarnings(\"rawtypes\")public abstract class LogFactory { static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\"; static LogFactory logFactory = new SLF4JLogFactory(); ...} 如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉！ Spring框架用的是commons-logging： 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，我们唯一需要做的是，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉。 6、日志使用6.1 默认配置当我们初始化项目运行后，自己没有配置日志，但控制台是由输出信息的 Spring Boot默认帮我们配置好了日志，直接使用就可以了 12345678910111213141516171819202122// LoggerFactory是记录器工厂，记录器Logger logger = LoggerFactory.getLogger(getClass());@Testpublic void testLog() { /** * 日志的级别 * 由低到高：trace&lt;debug&lt;info&lt;waring&lt;error * 可以调整输出的日志级别 * 只打印高级别即以后（更高级别）的信息 */ logger.trace(\"这是跟踪轨迹日志...trace...\"); logger.debug(\"这是调试日志...debug\"); /** * Spring Boot默认使用的是info级别的，输出info级别即以后的内容 * 没有指定级别的就用Spring Boot默认规定的级别（root级别） */ logger.info(\"这是信息日志...info...\"); logger.warn(\"这是警告信息...warning...\"); logger.error(\"这是错误信息日志，异常捕获...error...\"); // 也可以通过配置文件修改级别} 日志的输出格式 %d：表示时间 %thread：表示线程名 %-5level：级别从左显示5个字符宽度 %logger{50}：表示logger名字最长50个字符，否则按照句点分割 %msg：日志消息 %n：换行 12345678910111213141516# trace及以后的级别生效logging.level.com.initializr=trace# 生成springboot日志文件# 可以用决定路径# 如果不指定路径，就在当前项目下生成logging.file=springboot.log# 使用logging.path可以不使用logging.file，使用spring.log默认文件# 在当前磁盘的根路径下创建文件夹，并生成日志文件#logging.path=/spring/log# 在控制台输出的日志的格式logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n# 指定文件中输出的日志的格式logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} === [%thread] === %-5level %logger{50} === %msg%n 6.2 自定义日志、指定配置可从官方文档-日志参见第26.5条Custom log configuration 给类路径下放上每个日志框架自己的配置文件即可，Spring Boot就不使用默认配置了 Logging System Customization Logback logback-spring.xml, logback-spring.groovy, logback.xml or logback.groovy Log4j2 log4j2-spring.xml or log4j2.xml JDK (Java Util Logging) logging.properties logback.xml：直接就被日志框架识别了 logback-spring.xml：日志框架就不直接加载日志的配置项，由Spring Boot解析日志配置，可以使用Spring Boot的高级Profile功能 1234567891011&lt;springProfile name=\"staging\"&gt; &lt;!-- configuration to be enabled when the \"staging\" profile is active --&gt;&lt;/springProfile&gt;&lt;springProfile name=\"dev, staging\"&gt; &lt;!-- configuration to be enabled when the \"dev\" or \"staging\" profiles are active --&gt;&lt;/springProfile&gt;&lt;springProfile name=\"!production\"&gt; &lt;!-- configuration to be enabled when the \"production\" profile is not active --&gt;&lt;/springProfile&gt; 可以指定某段配置只在某个环境下生效 否则就会报错 123java.lang.IllegalStateException: Logback configuration error detected: ERROR in ch.qos.logback.core.joran.spi.Interpreter@23:39 - no applicable action for [springProfile]... 使用logback-spring.xml配置文件时： 1234567891011&lt;!-- 控制台打印 --&gt;&lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt; &lt;encoder charset=\"utf-8\"&gt; &lt;springProfile name=\"dev\"&gt; &lt;pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/pattern&gt; &lt;/springProfile&gt; &lt;springProfile name=\"!dev\"&gt; &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt; &lt;/springProfile&gt; &lt;/encoder&gt;&lt;/appender&gt; 7、切换日志框架7.1 现在我们想用log4j实现根据之前的原理，就要除去有关log4j的转换包，用原始包；还要导出logback的jar包 IDEA-&gt;在pom.xml文件中鼠标右键-&gt;Diagrams-&gt;Show Dependencies-&gt;选择要除去的jar包-&gt;鼠标右键-&gt;Exclude 其他的JCL和JCL有的框架还要用，所有转换包要留着 但log4j-over-slf4j.jar要去掉，这是个替换包，里面的log4j都用处slf4j了，但现在我们要用log4j了，而不是替换，所以也将其排除 最终： 面向slf4j编程，用log4j实现 导入一个适配层的包 1234&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt; 查看其源码，自动导入了log4j的框架 123456...&lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt;&lt;/dependency&gt;... 可以按照slf4j的日志适配图，进行相关的切换 得到最终的pom.xml文件配置为： 12345678910111213141516171819&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt; 7.2 切换至log4j2参阅官方文档表13.3. Spring Boot technical starters 按照之前的操作将spring-boot-start-logging.jar除去 在pom.xml文件中导入： 123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;","link":"/Spring/20515.html"},{"title":"Spring Boot入门，源码解析","text":"1、Spring Boot简介简化Spring应用开发的一个框架 整个Spring技术栈的一个大整合 J2EE开发的一站式解决方案 2、微服务2014，Martin Fowler微服务论文 微服务：架构风格（服务微化） 每一个功能元素最终都是一个可独立替换和独立升级的软件单元 一个应用应该是一组小型服务：可以通过HTTP的方式进行互通 通常跟微服务相对的是单体应用，即将所有功能都打包成在一个独立单元的应用程序。 环境约束（我的开发环境）： JDK8：java version “1.8.0_131” Maven3.x：Apache Maven 3.6.3 IntelliJ IDEA2019.2 SpringBoot 1.5.9.RELEASE 3、Spring Boot HelloWorld一个功能：浏览器发送请求，服务器接收请求并处理，响应”Hello World”字符串 3.1 创建一个Maven工程3.2 导入依赖Spring Boot相关的依赖1234567891011121314&lt;!-- Inherit defaults from Spring Boot --&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;!-- Add typical dependencies for a web application --&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 3.3 编写一个主程序启动Spring Boot应用 123456789101112@SpringBootApplication@RestControllerpublic class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } @GetMapping(\"/hello\") public String hello(@RequestParam(value = \"name\", defaultValue = \"World\") String name) { return String.format(\"Hello %s!\", name); } } 3.4 编写相关的Controller、Service层3.5 运行主程序测试3.6 简化部署Spring官方部署文档 123456789&lt;!-- 这个插件可以将应用打包成一个可执行的jar包 --&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 要运行该应用程序，请使用java -jar命令： 12345678910111213$ java -jar target/myproject-0.0.1-SNAPSHOT.jar . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v1.5.9.RELEASE)....... . . ........ . . . (log output here)....... . . ......... Started Example in 2.536 seconds (JVM running for 2.864) 4、Hello World探究4.1 POM文件父项目 12345&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt; Ctrl+鼠标左键查看底层源码，上面这个父项目还依赖于 123456&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;&lt;/parent&gt; 实现真正管理Spring Boot应用里面的所有依赖版本 Spring Boot的版本仲裁中心 12345678&lt;properties&gt; &lt;!-- Dependency versions --&gt; &lt;activemq.version&gt;5.14.5&lt;/activemq.version&gt; &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt; ... &lt;maven-war-plugin.version&gt;2.6&lt;/maven-war-plugin.version&gt; &lt;versions-maven-plugin.version&gt;2.2&lt;/versions-maven-plugin.version&gt;&lt;/properties&gt; 以后我们导入依赖默认是不需要写版本（没有在dependencies里面管理的依赖自然需要声明版本号） 4.2 导入的依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; spring-boot-starter-web spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件 更多启动器 Spring Boot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器 4.3 主程序类，主入口类1@SpringBootApplication Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法来启动Spring Boot应用 点击这个注解（annotation）查看源码 12345678910111213141516171819202122232425262728293031323334353637383940@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan( excludeFilters = {@Filter( type = FilterType.CUSTOM, classes = {TypeExcludeFilter.class}), @Filter( type = FilterType.CUSTOM, classes = {AutoConfigurationExcludeFilter.class})})public @interface SpringBootApplication { @AliasFor( annotation = EnableAutoConfiguration.class, attribute = \"exclude\" ) Class&lt;?&gt;[] exclude() default {}; @AliasFor( annotation = EnableAutoConfiguration.class, attribute = \"excludeName\" ) String[] excludeName() default {}; @AliasFor( annotation = ComponentScan.class, attribute = \"basePackages\" ) String[] scanBasePackages() default {}; @AliasFor( annotation = ComponentScan.class, attribute = \"basePackageClasses\" ) Class&lt;?&gt;[] scanBasePackageClasses() default {};} 解析 1@SpringBootConfiguration // spring boot定义的注解 Spring Boot的配置类，标注在某个类上，表示这是一个Spring Boot的配置类 点击这个注解（annotation）查看源码 123456@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Configurationpublic @interface SpringBootConfiguration {} 解析 1@Configuration // spring定义的注解 配置类上来标注这个注解 配置类—-配置文件：配置类也是容器中的一个组件：@Commponent 1@EnableAutoConfiguration 开启自动配置功能 以前我们需要配置的东西，Spring Boot帮我们自动配置，这个注解告诉Spring Boot开启自动配置功能，这样自动配置才能生效 点击这个注解（annotation）查看源码 12345678910111213@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import({EnableAutoConfigurationImportSelector.class})public @interface EnableAutoConfiguration { String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\"; Class&lt;?&gt;[] exclude() default {}; String[] excludeName() default {};} 解析 1@AutoConfigurationPackage 自动配置包 点击这个注解（annotation）查看源码 1234567@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Import({Registrar.class})public @interface AutoConfigurationPackage {} 解析 1@Import({Registrar.class}) Spring的底层注解@import，给容器中导入一个组件 导入的组件由Registrar.class 1234567891011121314static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports { ... // metadata是注解的原信息 public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { AutoConfigurationPackages.register( registry, (new AutoConfigurationPackages.PackageImport(metadata)).getPackageName() ); } ...} 将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器 1@Import({EnableAutoConfigurationImportSelector.class}) 给容器中导入组件，这是导入那些组件的选择器 点击这个注解（annotation）查看源码 1234567891011121314151617/** @deprecated */@Deprecatedpublic class EnableAutoConfigurationImportSelector extends AutoConfigurationImportSelector { public EnableAutoConfigurationImportSelector() { } protected boolean isEnabled(AnnotationMetadata metadata) { return this.getClass().equals( EnableAutoConfigurationImportSelector.class ) ? (Boolean)this.getEnvironment().getProperty( \"spring.boot.enableautoconfiguration\", Boolean.class, true) : true; }} 然后再查看其父类的源码 里面有一个selectImports方法，将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中 会给容器中导入非常多的自动配置类（xxxAutoConfiguration）：就是给容器中这个场景所需要的所有组件，并配置好这些组件 有了自动配置类，免去了我们手动编写配置注入功能组件等的工作 selectImports会调用该类里的getCandidateConfigurations方法 getCandidateConfigurations又调用了SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader) Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作 以前我们需要自己配置的东西，自动配置类帮我们 J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar 5、使用Spring Initializer快速创建Spring Boot项目IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目； 选择我们需要的模块，向导会联网创建Spring Boot项目； 默认生成的Spring Boot项目： 主程序已经生成好了，我们只需要添加自己的逻辑即可 resources文件夹中的目录结构 static：保存所有的静态资源：js, css, images templates：保存所以的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面），可以使用官方推荐模板引擎（Freemarker, Thymeleaf） application.properties：Spring Boot应用的配置文件，虽然Spring Boot有默认配置，但我们可以修改一些默认配置","link":"/Spring/12868.html"},{"title":"Spring Boot与Servlet","text":"1、配置嵌入式Servlet容器SpringBoot默认使用Tomcat作为嵌入式的Servlet容器； 问题？ 1.1 如何定制和修改Servlet容器的相关配置； 修改和server有关的配置（ServerProperties{也是EmbeddedServletContainerCustomizer}）； 123456789server.port=8088server.context-path=/server.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx 编写一个EmbeddedServletContainerCustomizer：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置 123456789101112@Bean //一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){ return new EmbeddedServletContainerCustomizer() { //定制嵌入式的Servlet容器相关的规则 @Override public void customize(ConfigurableEmbeddedServletContainer container) { container.setPort(8083); } };} 1.2 注册Servlet三大组件（Servlet、Filter、Listener）由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。 注册三大组件用以下方式 ServletRegistrationBean 1234567891011//注册三大组件@Beanpublic ServletRegistrationBean myServlet(){ ServletRegistrationBean registrationBean = new ServletRegistrationBean( new CustomServlet(), \"/myServlet\" ); return registrationBean;} FilterRegistrationBean 1234567@Beanpublic FilterRegistrationBean myFilter(){ FilterRegistrationBean registrationBean = new FilterRegistrationBean(); registrationBean.setFilter(new CustomFilter()); registrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\")); return registrationBean;} ServletListenerRegistrationBean 123456@Beanpublic ServletListenerRegistrationBean myListener(){ ServletListenerRegistrationBean&lt;CustomListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;&gt;(new CustomListener()); return registrationBean;} SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet； DispatcherServletAutoConfiguration中： 12345678910111213141516171819202122232425@Bean( name = {\"dispatcherServletRegistration\"})@ConditionalOnBean( value = {DispatcherServlet.class}, name = {\"dispatcherServlet\"})public ServletRegistrationBean dispatcherServletRegistration(DispatcherServlet dispatcherServlet) { ServletRegistrationBean registration = new ServletRegistrationBean( dispatcherServlet, new String[]{this.serverProperties.getServletMapping()} ); //默认拦截： / 所有请求；包静态资源，但是不拦截jsp请求； /*会拦截jsp //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径 registration.setName(\"dispatcherServlet\"); registration.setLoadOnStartup(this.webMvcProperties.getServlet().getLoadOnStartup()); if (this.multipartConfig != null) { registration.setMultipartConfig(this.multipartConfig); } return registration;} 2、SpringBoot能不能支持其他的Servlet容器？在之前写定制嵌入式的Servlet容器相关的规则配置类的时候 在ServletConfig.class中用的ConfigurableEmbeddedServletContainer声明的变量，选中，点击Ctrl+h，会在右侧显示它的继承树： 可配置的嵌入式容器工程 3、替换为其他嵌入式Servlet容器默认支持： 3.1 Tomcat（默认使用）12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;!--引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器--&gt;&lt;/dependency&gt; 3.2 Jetty（长链接，例如聊天）12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!-- 引入除Tomcat外的其他Servlet: jetty --&gt;&lt;dependency&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt; 3.3 Undertow（不支持JSP）12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!-- 引入除Tomcat外的其他Servlet: undertow --&gt;&lt;dependency&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt; 3.4 嵌入式Servlet容器自动配置原理在自动配置包里的EmbeddedServletContainerAutoConfiguration.class：嵌入式的Servlet容器自动配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@AutoConfigureOrder(-2147483648)@Configuration@ConditionalOnWebApplication@Import({EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar.class})// 导入BeanPostProcessorsRegistrar; 给容器中导入一些组件// 导入了EmbeddedServletContainerCustomizerBeanPostProcessor// 后置处理器: bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作public class EmbeddedServletContainerAutoConfiguration { ... @Configuration @ConditionalOnClass({Servlet.class, Undertow.class, SslClientAuthMode.class}) @ConditionalOnMissingBean( value = {EmbeddedServletContainerFactory.class}, search = SearchStrategy.CURRENT ) public static class EmbeddedUndertow { public EmbeddedUndertow() { } @Bean public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory(){ return new UndertowEmbeddedServletContainerFactory(); } } @Configuration @ConditionalOnClass({Servlet.class, Server.class, Loader.class, WebAppContext.class}) @ConditionalOnMissingBean( value = {EmbeddedServletContainerFactory.class}, search = SearchStrategy.CURRENT ) public static class EmbeddedJetty { public EmbeddedJetty() { } @Bean public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() { return new JettyEmbeddedServletContainerFactory(); } } @Configuration // 判断当前是否引入了Tomcat依赖 @ConditionalOnClass({Servlet.class, Tomcat.class}) // 判断当前容器没有用户自己定义EmbeddedServletContainerFactory: 嵌入式的Servlet容器工厂 // 作用: 创建嵌入式的Servlet容器 @ConditionalOnMissingBean( value = {EmbeddedServletContainerFactory.class}, search = SearchStrategy.CURRENT ) public static class EmbeddedTomcat { public EmbeddedTomcat() { } @Bean public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() { return new TomcatEmbeddedServletContainerFactory(); } }} EmbeddedServletContainerFactory（嵌入式Servlet容器工厂） 1234public interface EmbeddedServletContainerFactory { // 获取嵌入式的Servlet容器 EmbeddedServletContainer getEmbeddedServletContainer(ServletContextInitializer... var1);} EmbeddedServletContainer（嵌入式的Servlet容器） 以TomcatEmbeddedServletContainerFactory为例 1234567891011121314151617181920212223242526public EmbeddedServletContainer getEmbeddedServletContainer( ServletContextInitializer... initializers) { // 创建一个Tomcat Tomcat tomcat = new Tomcat(); // 配置Tomcat的基本环镜 File baseDir = this.baseDirectory != null ? this.baseDirectory : this.createTempDir(\"tomcat\"); tomcat.setBaseDir(baseDir.getAbsolutePath()); Connector connector = new Connector(this.protocol); tomcat.getService().addConnector(connector); this.customizeConnector(connector); tomcat.setConnector(connector); tomcat.getHost().setAutoDeploy(false); this.configureEngine(tomcat.getEngine()); Iterator var5 = this.additionalTomcatConnectors.iterator(); while(var5.hasNext()) { Connector additionalConnector = (Connector)var5.next(); tomcat.getService().addConnector(additionalConnector); } this.prepareContext(tomcat.getHost(), initializers); // 将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器 return this.getTomcatEmbeddedServletContainer(tomcat);} 我们对嵌入式容器的配置修改是怎么生效？ 12# 配置文件ServerProperties 或 12// 配置类EmbeddedServletContainerCustomizer() EmbeddedServletContainerCustomizer：定制器帮我们修改了Servlet容器的配置？ 怎么修改的原理？ 容器中导入了EmbeddedServletContainerCustomizerBeanPostProcessor 1234567891011121314151617181920212223242526272829303132333435363738394041// 初始化之前public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { // 如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件 if (bean instanceof ConfigurableEmbeddedServletContainer) { this.postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer)bean); } return bean;}...private void postProcessBeforeInitialization(ConfigurableEmbeddedServletContainer bean) { Iterator var2 = this.getCustomizers().iterator(); //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值 while(var2.hasNext()) { EmbeddedServletContainerCustomizer customizer = (EmbeddedServletContainerCustomizer)var2.next(); customizer.customize(bean); } private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() { if (this.customizers == null) { // 从容器中获取所有这葛类型的组件: EmbeddedServletContainerCustomizer // 定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件 this.customizers = new ArrayList( this.beanFactory.getBeansOfType( EmbeddedServletContainerCustomizer.class, false, false).values() ); Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE); this.customizers = Collections.unmodifiableList(this.customizers); } return this.customizers; }} ServerProperties也是定制器，步骤： SpringBoot根据导入的依赖情况，给容器中添加相应的嵌入式容器工厂，EmbeddedServletContainerFactory[TomcatEmbeddedServletContainerFactory] 容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；只要是嵌入式的Servlet容器工厂，后置处理器就工作； 后置处理器，从容器中获取所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法 4、嵌入式Servlet容器启动原理什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat？ 获取嵌入式的Servlet容器工厂： SpringBoot应用启动运行run方法 refreshContext(context)；SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建AnnotationConfigEmbeddedWebApplicationContext，否则：AnnotationConfigApplicationContext refresh(context)，刷新刚才创建好的ioc容器；查看AbstractApplicationContext.class源码： 1234567891011121314151617181920212223242526272829303132public void refresh() throws BeansException, IllegalStateException { synchronized(this.startupShutdownMonitor) { this.prepareRefresh(); ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory(); this.prepareBeanFactory(beanFactory); try { this.postProcessBeanFactory(beanFactory); this.invokeBeanFactoryPostProcessors(beanFactory); this.registerBeanPostProcessors(beanFactory); this.initMessageSource(); this.initApplicationEventMulticaster(); this.onRefresh(); this.registerListeners(); this.finishBeanFactoryInitialization(beanFactory); this.finishRefresh(); } catch (BeansException var9) { if (this.logger.isWarnEnabled()) { this.logger.warn( \"Exception encountered during context initialization - cancelling refresh attempt: \" + var9 ); } this.destroyBeans(); this.cancelRefresh(var9); throw var9; } finally { this.resetCommonCaches(); } }} onRefresh()，web的ioc容器重写了onRefresh方法 webioc容器会创建嵌入式的Servlet容器；createEmbeddedServletContainer(); 获取嵌入式的Servlet容器工厂：** 1EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory(); 从ioc容器中获取EmbeddedServletContainerFactory 组件；TomcatEmbeddedServletContainerFactory创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置； 使用容器工厂获取嵌入式的Servlet容器： 12this.embeddedServletContainer = containerFactory.getEmbeddedServletContainer(getSelfInitializer()); 嵌入式的Servlet容器创建对象并启动Servlet容器； 先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来； IOC容器启动创建嵌入式的Servlet容器 5、使用外置的Servlet容器嵌入式Servlet容器：应用打成可执行的jar 优点：简单、便携； 缺点：默认不支持JSP、优化定制比较复杂（使用定制器{ServerProperties、自定义EmbeddedServletContainerCustomizer}，自己编写嵌入式Servlet容器的创建工厂{EmbeddedServletContainerFactory}）； 外置的Servlet容器：外面安装Tomcat—-应用war包的方式打包； 5.1 创建JSPweb项目教程： 使用Spring Initializr新建项目： 剩下都是Next，得到项目结构： 生成webapp文件夹（可手动创建，也可用以下方法）： 点击编译器右上的Project Structure按钮—&gt;Modules—&gt;项目展开—&gt;Web—&gt;Web Resource Directories 双击Web Resource Directory下的路径，弹出对话框： 点击OK，然后在弹出对话框点Yes即可； 部署描述图生成XML文件： 将默认的路径...\\WEB-INF\\web.xml改为...\\src\\main\\webapp\\WEB-INF\\web.xml，点击OK即可，最后Apply—&gt;OK 如何启动？ 服务器整合进IDEA 编译器上方Edit Configurations… 添加本地Tomcat配置即可： 配置完后添加部署项目： 出现对话框，选择第二个暴露的就行 最后Apply—&gt;OK。运行Tomcat即可 5.2 步骤 必须创建一个war项目；（利用IDEA创建好目录结构） 将嵌入式的Tomcat指定为provided； 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 必须编写一个SpringBootServletInitializer的子类，并调用configure方法 123456789public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { // 传入SpringBoot应用的主程序 return application.sources(SpringBootWebJspApplication.class); }} 启动服务器就可以使用。 5.3 原理 jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器； war包：启动服务器，服务器启动SpringBoot应用{SpringBootServletInitializer}，启动ioc容器； servlet3.0（规范文档） 5.4 查看8.2.4 Shared libraries / runtimes pluggability条内容：规则： 服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例； ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名 还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类 5.5 流程 启动Tomcat org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer： Spring的web模块里面有这个文件：org.springframework.web.SpringServletContainerInitializer SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set","link":"/Spring/59405.html"},{"title":"人机交互","text":"人机交互课程复习 一、交互设计简介可用的交互设计必须考虑一个产品被使用的上下文。 ”用户做什么“的信息来源于：（决定了为什么需要技术，及技术需要支持什么） 产品的使用上下文3个方面\\begin{cases} 用户\\\\ 用户的任务\\\\ 交互发生的环境\\\\ \\end{cases}交互设计包括4项活动\\begin{Bmatrix} 标识需要并建立需求\\\\ 开发满足需求的候选设计方案\\\\ 构建设计的交互式设计原型\\\\ 评估设计\\\\ \\end{Bmatrix}这些活动间通常具有联系，且具有联系且本身是迭代过程目标：期望一个活动或过程执行后达到的状态。 可用性指易于使用，令人满意；满足什么目标取决于上下文。 1.1 交互设计的目标分为两类设计的产品在交互方面应满足的性质\\begin{Bmatrix} 可用性目标\\\\（6种可用性）\\begin{cases} 有效使用\\\\ 高效使用\\\\ 安全使用\\\\良好的实用性\\\\易于学习\\\\易于记忆如何使用\\\\ \\end{cases}\\\\ 用户体验目标\\begin{cases} 满足\\\\ 舒适\\\\ 有趣\\\\刺激\\\\ \\end{cases}\\\\ \\end{Bmatrix}可用性目标和用户体验目标的区别Norman提出的6个基本设计原理\\begin{cases} 可视性\\\\ 反馈\\\\ （3种）限制\\begin{cases} 物理限制\\\\ 逻辑限制\\\\ 文化限制\\\\ \\end{cases}\\\\映射\\\\ （2种）一致性\\begin{cases} 内部一致性\\\\ 外部一致性\\\\ \\end{cases}\\\\启发性\\\\ \\end{cases}交互过程的3个关键特征\\begin{cases} 以用户为中心：将用户包含在制品的设计和评估之中\\\\ 专用的可用性准则：定义可量化、可度量的可用性准则\\\\ 迭代：迭代不可避免\\\\ \\end{cases}交互式系统的定义：为了支持人类用户的任务执行，而从他们那里接受输入，并将输出表示给他们的软件和硬件构件的集合。 二、理解与概念化交互2.1 什么是原型？ 对产品概念的形象化和具体化，是设计师构思的体现。 不是产品，是产品的一种近似或受限表示。 作用：用户可以通过与之交互来探索其使用，可用性。 2.2 概念模型概念模型：即所感兴趣的事物的概念以及它们之间关系的描述。在HCI中，概念模型通常用于描述用户界面应做什么。 2类概念模型\\begin{Bmatrix} 活动模型\\stackrel{4种人机交互方式}{\\longrightarrow} \\begin{cases} 指令型：用户指示系统做某事\\\\ 会话型：用户与系统的实时信息交换\\\\ 操作型：用户直接操作虚指空间中的对象\\\\ 探索型：用户穿越虚指空间\\stackrel{2个相关概念}{\\longrightarrow}\\begin{cases} 导航\\\\ 浏览\\\\ \\end{cases}\\\\ \\end{cases} \\\\ 对象模型\\\\ \\end{Bmatrix}如何选择概念模型界面隐喻\\stackrel{2个概念}{\\longrightarrow}\\begin{cases} 隐喻：是一种短语，他通过陈述另一件事来描述一件事\\\\ 类比\\\\ \\end{cases}7种交互泛型\\begin{cases} 无处不在的计算\\\\普适计算\\\\可穿戴计算\\\\实物用户界面\\\\ 增强现实\\stackrel{AR系统的3个特征}{\\longrightarrow}\\begin{cases} 真实对象和虚拟对象在真实环境中的结合\\\\ 交互并实时的运行\\\\ 真实对象和虚拟对象相互之间准确重合（对位）\\\\ \\end{cases}\\\\ 上下文感知计算\\\\计算机支持的协同工作\\\\ \\end{cases}三、理解用户什么是认知\\begin{cases} 2种认知模式\\begin{cases} 经验式认知\\\\ 思考式认知\\\\ \\end{cases}\\\\ 5种认知过程\\begin{cases} 注意\\\\感知\\\\ 记忆和识别\\begin{cases} 记忆的结构模型\\\\ 2种长期记忆中的信息探索\\begin{cases} 回忆\\\\ 识别\\\\ \\end{cases}\\\\ 短时记忆的7\\pm2理论\\\\ \\end{cases}\\\\读、听、说\\\\推理、决策、规划、问题求解 \\end{cases}\\\\\\\\ \\end{cases}四、协作与通信的设计通信是个体间的交换过程。 3种协作和通信中的社会机制\\begin{cases} 会话机制\\stackrel{2类会话}{\\longrightarrow}\\begin{cases} 正式会话：有组织结构的会议\\\\ 非正式会话：无结构的free-talking\\\\ \\end{cases}\\\\ 协调机制\\stackrel{3种机制}{\\longrightarrow}\\begin{cases} 语言和非语言的通信\\\\ 时间表、规定和约定\\\\共享外部表示：\\\\外部表示可以为成员提供各种协调他们活动的信息\\\\ \\end{cases}\\\\ 感知机制：感官训练，对感知范围内的环境状态的理解\\\\ \\end{cases}3类以计算机为介质的通信（CMC）\\begin{cases} 同步通信\\\\ 异步通信\\\\ 与其他活动相结合的CMC\\\\ \\end{cases}认知的本质是分布的，认知现象不仅包括个人头脑中所发生的认知活动，还涉及人与人之间，以及人与技术工具之间通过交互实现某一活动的过程。通信交流是分布式认知的必备条件。 五、理解界面对用户的影响六、交互设计过程设计的两个定义\\begin{cases} 为某一特定的目的或效果而在头脑中想象和计划\\\\ 画出一幅画或图案，以显示某物是如何制作的\\\\ \\end{cases}交互设计的4项基本活动\\begin{cases} 识别用户需要并建立需求\\stackrel{4类参与者}{\\longrightarrow}\\begin{cases} \\begin{Bmatrix}主要方\\\\ 第二方\\\\第三方\\\\ \\end{Bmatrix}甲方\\\\ \\begin{Bmatrix}提供方\\end{Bmatrix}乙方\\end{cases}\\\\ 设计候选方案\\begin{cases} 2种产品特征\\\\（需要选择的产品特征\\\\可概括为两类）\\begin{cases} 内部特征：\\\\对用户通常是不可见或不可度量的属性\\\\ 外部特征：\\\\对用户而言，可见及可度量的属性\\\\ \\end{cases}\\\\ 可用性规约由7项组成\\\\（设计决策的依据）\\begin{cases} 属性\\\\度量概念\\\\度量方法\\\\当前水平\\\\计划水平\\\\最坏情况\\\\最好情况\\\\ 画出一幅画或图案，以显示某物是如何制作的\\\\ \\end{cases}\\\\ \\end{cases}\\\\ 建立设计的交互式版本\\\\评估设计\\\\ \\end{cases}交互设计过程中的3个关键特征\\begin{cases} 以用户为中心的设计\\\\ 可用性目标和度量准则\\\\迭代\\\\ \\end{cases}生命周期模型\\begin{cases} 交互设计的4项活动之间的输入/输出及时序关系\\\\ 软工中的3种生命周期模型\\begin{cases} 瀑布模型\\\\ 螺旋模型\\\\RAD模型 \\end{cases}\\\\ HCI中的2种生命周期模型\\begin{cases} 面向评估的星形生命周期模型\\\\ 可用性生命周期模型\\\\ \\end{cases}\\\\ \\end{cases}交互设计模型是对其他过程模型在可用性目标上的补充。 七、识别需求并建立需求5种方法的适用情形、信息类型和优缺点，如何选择。 5种类型的需求\\begin{cases} 功能需求\\\\ 数据\\\\ 环境\\begin{cases} 物理环境\\\\ 社会\\\\ 组织\\\\技术\\\\ \\end{cases}\\\\ 用户\\\\可用性\\\\ \\end{cases}5种数据收集技术\\begin{cases} 问卷调查\\\\ 访谈\\\\专题组和研讨会\\\\自然观察\\\\研究文档\\\\ \\end{cases}3种任务描述（提供面向任务的解释）\\begin{Bmatrix} 情节：一种非线性的叙事性描述\\\\ 用例：对情节进行抽象\\\\基本用例：在一个抽象层次上指定用户和系统的交互\\\\ \\end{Bmatrix}任务描述的方法的总结结论八、设计原型建立与构造建立和构造原型\\begin{cases} 2类原型\\begin{cases} 低保真原型：用简单的方式来快速、近似地表示产品的概念\\\\ 高保真原型：构建的原型更接近于最终产品\\\\ \\end{cases}\\\\ 2种基于原型的开发方法\\begin{cases} 丢弃式：旨在获得最终产品的需求/设计，原型被丢弃\\\\ 演化式：产品从很有限的版本逐步演化为最终发行版本\\\\ \\end{cases}\\\\ \\end{cases}选择何种类型的原型，取决于使用它们的目的，按原型表达产品的真实程度。 设计活动包括2个方面\\begin{cases} 开发概念模型\\stackrel{3个方面}{\\longrightarrow}\\begin{cases} 交互方式（对用户的活动提供支持）\\begin{cases} 基于活动的模式\\\\ 基于对象的模式\\\\ \\end{cases}\\\\ 隐喻：使用户易于理解产品的使用\\\\交互泛型：为具体化概念模型提供指导\\\\ \\end{cases}\\\\ 物理设计模型...\\\\ \\end{cases}九、以用户为中心的交互设计以用户为中心的设计方法的主要原理\\begin{cases} 交互设计的3个关键特征\\\\ 以研究用户及其任务为基础的5项具体原理\\\\ \\end{cases} 开发以用户任务和目标来驱动 系统需要对用户的行为和使用上下文提供支持 捕捉用户的特征并将其应用于设计 在整个开发过程中咨询用户，并认真考虑他们的意见 应在使用的上下文中做出所有的决策设计 2种用于理解用户工作的现场研究方法\\begin{cases} 一致性方法\\\\ 上下文设计------上下文质询（询问）\\\\ \\end{cases}将人种学研究应用于实地调查的方法。 调查采用一种用户访谈形式：上下文访谈； “师徒模式”，其中用户是专家，而设计者是学徒； 设计者观察用户的工作，提问并作记录。 旨在从用户实际工作的情况下收集数据。","link":"/Study/1adb816b.html"},{"title":"Spring Boot启动配置原理","text":"1、启动配置原理1.1 几个重要的事件回调机制 配置在META-INF/spring.factories ApplicationContextInitializer SpringApplicationRunListener 只需要放在ioc容器中 ApplicationRunner CommandLineRunner 在主程序类中打上断点，Debug，进行研究。 1.2 启动流程： 创建SpringApplication对象 12345678// SpringApplication.classpublic static ConfigurableApplicationContext run(Object source, String... args) { return run(new Object[]{source}, args);}public static ConfigurableApplicationContext run(Object[] sources, String[] args) { return (new SpringApplication(sources)).run(args);} 调用initialize(sources);方法 12345678910111213141516private void initialize(Object[] sources) { // 保存主配置类 if (sources != null &amp;&amp; sources.length &gt; 0) { this.sources.addAll(Arrays.asList(sources)); } // 判断当前是否一个web应用, 即是否导入web模块 this.webEnvironment = deduceWebEnvironment(); // 从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer // 然后保存起来, 不着急用 setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class)); // 从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); // 从多个配置类中找到有main方法的主配置类 this.mainApplicationClass = deduceMainApplicationClass();} 找到ApplicationContextInitializer： 找到的Listener： 运行run方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public ConfigurableApplicationContext run(String... args) { StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; FailureAnalyzers analyzers = null; configureHeadlessProperty(); //获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories SpringApplicationRunListeners listeners = getRunListeners(args); //回调所有的获取SpringApplicationRunListener.starting()方法 listeners.starting(); try { //封装命令行参数 ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); //准备环境 ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); //创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成 Banner printedBanner = printBanner(environment); //创建ApplicationContext；决定创建web的ioc还是普通的ioc context = createApplicationContext(); analyzers = new FailureAnalyzers(context); //准备上下文环境;将environment保存到ioc中；而且applyInitializers()； //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法 //回调所有的SpringApplicationRunListener的contextPrepared()； prepareContext(context, environment, listeners, applicationArguments, printedBanner); //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded()； //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版 //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置） refreshContext(context); //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调 //ApplicationRunner先回调，CommandLineRunner再回调 afterRefresh(context, applicationArguments); //所有的SpringApplicationRunListener回调finished方法 listeners.finished(context, null); stopWatch.stop(); if (this.logStartupInfo) { new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); } //整个SpringBoot应用启动完成以后返回启动的ioc容器； return context; } catch (Throwable ex) { handleRunFailure(context, listeners, analyzers, ex); throw new IllegalStateException(ex); }} 2、事件监听机制来实现一下1.1节中提到的4个组件； 2.1 实现自定义ApplicationContextInitializerCtrl+n搜索ApplicationContextInitializer，选择ApplicationContextInitializer，Ctrl+h查看SpringBoot已经实现的所有Initializer： 12345678910// HelloApplicationContextInitializer.javapublic class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; { // 来监听ioc容器的启动 @Override public void initialize(ConfigurableApplicationContext applicationContext) { System.out.println(\"ApplicationContextInitializer...initialize...\"+applicationContext); }} 2. 2 实现自定义SpringApplicationRunListener1234567891011121314151617181920212223242526272829303132333435363738// HelloSpringApplicationRunListener.javapublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener { //必须有的构造器, 传过来Spring应用和命令行参数 public HelloSpringApplicationRunListener(SpringApplication application, String[] args){ } // 监听容器开始 @Override public void starting() { System.out.println(\"SpringApplicationRunListener...starting...\"); } @Override public void environmentPrepared(ConfigurableEnvironment configurableEnvironment) { Object o = configurableEnvironment.getSystemProperties().get(\"os.name\"); System.out.println(\"SpringApplicationRunListener...environmentPrepared..\"+o); } @Override public void contextPrepared(ConfigurableApplicationContext configurableApplicationContext) { System.out.println(\"SpringApplicationRunListener...contextPrepared...\"); } // 容器环境加载完成 @Override public void contextLoaded(ConfigurableApplicationContext configurableApplicationContext) { System.out.println(\"SpringApplicationRunListener...contextLoaded...\"); } @Override public void finished(ConfigurableApplicationContext configurableApplicationContext, Throwable throwable) { System.out.println(\"SpringApplicationRunListener...finished...\"); }} 以上两个组件想要起作用，必须配置（META-INF/spring.factories）；在我们引入的每个Jar包里，点开其目录结构中都有META-INF文件夹，里面有个spring.factories文件； 我们就要在resources文件夹下创建META-INF/spring.factories，并写入： 123456// copy Referenceorg.springframework.context.ApplicationContextInitializer=\\com.initializr.initializer.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\\com.initializr.listener.HelloSpringApplicationRunListener 2.3 实现自定义ApplicationRunner12345678// 需要放在容器中的@Componentpublic class HelloApplicationRunner implements ApplicationRunner { @Override public void run(ApplicationArguments applicationArguments) throws Exception { System.out.println(\"ApplicationRunner...run....\"); }} 2.4 实现自定义CommandLineRunner12345678// 需要放在容器中的@Componentpublic class HelloCommandLineRunner implements CommandLineRunner { @Override public void run(String... strings) throws Exception { System.out.println(\"CommandLineRunner...run...\"+ Arrays.asList(strings)); }} 运行查看控制台有定义输出即可：","link":"/Spring/58714.html"},{"title":"Vue整合Element-UI","text":"安装Element-UI Element-UI官方中文网 1 安装命令 在项目中打开终端，执行下面命令： 1$ cnpm i element-ui -S CDN 1234&lt;!-- 引入样式 --&gt;&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"&gt;&lt;!-- 引入组件库 --&gt;&lt;script src=\"https://unpkg.com/element-ui/lib/index.js\"&gt;&lt;/script&gt; 官方教程 2 引入在项目的src/mian.js中引用element-ui： 12345678910111213141516import Vue from 'vue'import App from './App.vue'import router from './router'import store from './store'// 引入Element-UIimport ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';Vue.config.productionTip = falseVue.use(ElementUI);new Vue({ router, store, render: h =&gt; h(App)}).$mount('#app') 3 使用上述配置完成就可以使用Element-UI了，直接在组件中使用EL标签即可。","link":"/Element-UI/4ddb657c.html"},{"title":"Electron+vue-cli3开发跨平台桌面应用","text":"一步一步搭建Electron+vue-cli3开发平台（亲测有效） Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种方式越来越受到开发者的喜爱。 这篇博客一步一步教你如何使用Electron和vue-cli3，在完全保留vue开发web应用的习惯下，搭建桌面应用。 这篇博客不涉及Electron和vue的开发教程，仅以实现两者结合为目的，若要深入学习Electron和vue，请访问官方： Electron Vue Vue-cli Stylus 学习该框架之前，希望读者需要提前掌握以下技能： HTML、CSS、JavaScript Vue2.x Stylus 1.创建项目1.1 安装NodejsNode.js 中文网下载安装 1.2 使用cnpm加速下载npm有时下载速度很慢，可以安装cnpm，从国内淘宝镜像下载，执行以下命令： 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 之后所有的npm命令都可以直接替换成cnpm使用了。 1.3 为什么不使用electron-vue搭建呢Electron-vue官方中文文档 由于SimulatedGREG/electron-vue已经很久没有更新了，而且其生成的工程结构并不是vue-cli3。所以放弃使用。 1.4 安装/升级vue-cli3 先执行以下命令，确认下本地安装的vue-cli版本（如果自己的电脑没有安装过vue，跳过前两步到第三步吧！）： $ vue -V或$ vue --version 在写本篇博客时，我的vue是2.9.6版本。 如果本地使用的是vue-cli2.x或者更早版本，可先执行下面命令全局卸载： $ cnpm uninstall vue-cli -g （1）vue-cli3使用了新的npm包名，与旧版本不一样。 （2）在vue2.9.6下执行上面命令，控制台输入vue -V仍然有输出，解决方法： ​ a. 当然, 卸载命令还是要执行的: 全局卸载：npm uninstall vue-cli -g; ​ b. npmrc文件删除掉 ​ c. 检索删除vue-cli文件夹 ​ 再试试: vue -V，就不显示版本号了。 （3）可以忽略上述问题，直接安装最新版本的vue-cli3即可（亲测有效）。 执行以下命令全局安装vue-cli3： $ cnpm install @vue/cli -g 执行以下命令升级vue-cli3： $ cnpm update @vue/cli -g 1.5 创建vue项目 在指定目录下，打开终端，执行以下命令，创建vue项目： $ vue create electron-vue-demo 这里的项目名称为electron-vue-demo（不能出现大写字母），可根据自己的具体项目改变。 创建命令执行后，在完成创建之前，会出现以下选项（如果熟悉此步骤可跳过本节内容）： 1234Vue CLI v4.4.6? Please pick a preset: (Use arrow keys) default (babel, eslint) &gt; Manually select features 选择 Manually select features （自定义安装）。 1234567891011? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)&gt;(*) Babel ( ) TypeScript ( ) Progressive Web App (PWA) Support (*) Router (*) Vuex (*) CSS Pre-processors (*) Linter / Formatter ( ) Unit Testing ( ) E2E Testing 这里选择了常用的模块，请根据实际需求进行选择。 12? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)n 如果选择了router，这里会询问是否使用history模式。 vue-router 默认使用hash模式（即通过url#hash来跳转页面），使用URL的hash来模拟一个完整的 URL，当URL改变时，页面不会重新加载。 如果使用history模式，URL就像正常的url，例如 http://yoursite.com/page，比较好看。但是还需要后台配置支持。 这里我们选择n。 123456? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys) Sass/SCSS (with dart-sass) Sass/SCSS (with node-sass) Less &gt; Stylus 选择CSS预处理模块，这里我们使用Stylus。 12345? Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only ESLint + Airbnb config &gt; ESLint + Standard config ESLint + Prettier 选择ESLint代码格式检查工具的配置，选择ESLint + Standard config，标准配置。 1234? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)&gt;(*) Lint on save ( ) Lint and fix on commit Line on save表示在保存代码的时候，进行格式检查。 Lint and fix on commit表示在$ git commit的时候自动纠正格式。 这里只选择Lint on save。 123? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files &gt; In package.json 这里问把 babel，postcss，eslint 这些配置文件放哪？ In dedicated config files表示独立文件。 In package.json表示放在package.json里。 这里选择In package.json。 1? Save this as a preset for future projects? (y/N) N 是否为以后的项目保留这些设置？选择N。 然后耐心等待项目安装完成。 1.6 自动安装Electron 执行以下命令，进入项目目录： $ cd electron-vue-demo 然后执行以下命令： $ vue add electron-builder electron-builder是一个简单又强大的库。解决了打包这个棘手的问题，而且可以应对大部分的打包需求。 接下来出现配置选项： 1234? Choose Electron Version (Use arrow keys) ^7.0.0 ^8.0.0 &gt; ^9.0.0 选择Electron版本，我写这篇博客的时候，选项是上面3个版本，选择最新的即可。 然后耐心等待安装完成。 1.7 手动安装Electron 修改package.json，添加以下7行： 1234567891011121314151617181920212223242526272829303132333435363738...\"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\", \"electron:build\": \"vue-cli-service electron:build\", // add \"electron:serve\": \"vue-cli-service electron:serve\", // add \"postinstall\": \"electron-builder install-app-deps\", // add \"postuninstall\": \"electron-builder install-app-deps\" // add},\"main\": \"background.js\", // add\"dependencies\": { \"core-js\": \"^3.6.5\", \"vue\": \"^2.6.11\", \"vue-router\": \"^3.2.0\", \"vuex\": \"^3.4.0\"},\"devDependencies\": { \"@vue/cli-plugin-babel\": \"~4.4.0\", \"@vue/cli-plugin-eslint\": \"~4.4.0\", \"@vue/cli-plugin-router\": \"~4.4.0\", \"@vue/cli-plugin-vuex\": \"~4.4.0\", \"@vue/cli-service\": \"~4.4.0\", \"@vue/eslint-config-standard\": \"^5.1.2\", \"babel-eslint\": \"^10.1.0\", \"electron\": \"^9.0.5\", // add \"eslint\": \"^6.7.2\", \"eslint-plugin-import\": \"^2.20.2\", \"eslint-plugin-node\": \"^11.1.0\", \"eslint-plugin-promise\": \"^4.2.1\", \"eslint-plugin-standard\": \"^4.0.0\", \"eslint-plugin-vue\": \"^6.2.2\", \"stylus\": \"^0.54.7\", \"stylus-loader\": \"^3.0.2\", \"vue-cli-plugin-electron-builder\": \"~2.0.0-rc.3\", // add \"vue-template-compiler\": \"^2.6.11\"},... 新建src/background.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495'use strict'import { app, protocol, BrowserWindow } from 'electron'import { createProtocol, installVueDevtools} from 'vue-cli-plugin-electron-builder/lib'const isDevelopment = process.env.NODE_ENV !== 'production'// Keep a global reference of the window object, if you don't, the window will// be closed automatically when the JavaScript object is garbage collected.let win// Scheme must be registered before the app is readyprotocol.registerSchemesAsPrivileged([ { scheme: 'app', privileges: { secure: true, standard: true } }])function createWindow() { // Create the browser window. win = new BrowserWindow({ width: 1000, height: 600, webPreferences: { /* Use pluginOptions.nodeIntegration, leave this alone See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION */ webSecurity: false, nodeIntegration: true } }) if (process.env.WEBPACK_DEV_SERVER_URL) { // Load the url of the dev server if in development mode win.loadURL(process.env.WEBPACK_DEV_SERVER_URL) if (!process.env.IS_TEST) win.webContents.openDevTools() } else { createProtocol('app') // Load the index.html when not in development win.loadURL('app://./index.html') } win.on('closed', () =&gt; { win = null })}// Quit when all windows are closed.app.on('window-all-closed', () =&gt; { // On macOS it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q if (process.platform !== 'darwin') { app.quit() }})app.on('activate', () =&gt; { // On macOS it's common to re-create a window in the app when the // dock icon is clicked and there are no other windows open. if (win === null) { createWindow() }})// This method will be called when Electron has finished// initialization and is ready to create browser windows.// Some APIs can only be used after this event occurs.app.on('ready', async () =&gt; { if (isDevelopment &amp;&amp; !process.env.IS_TEST) { // Install Vue Devtools try { await installVueDevtools() } catch (e) { console.error('Vue Devtools failed to install:', e.toString()) } } createWindow()})// Exit cleanly on request from parent process in development mode.if (isDevelopment) { if (process.platform === 'win32') { process.on('message', (data) =&gt; { if (data === 'graceful-exit') { app.quit() } }) } else { process.on('SIGTERM', () =&gt; { app.quit() }) }} 以上代码是1.6小节使用自动化方式安装后生成的。 安装依赖包 在项目目录下执行以下命令，安装全部依赖包： $ cnpm install 1.8 编译并启动APP 执行以下命令，开始编译APP，并启动开发环境APP： $ npm run electron:serve或$ yarn electron:serve 首次启动可能会等待很久，加载完后会自动打开APP，等待即可。 编译成功后，就会出现开发环境的APP了，如下图（Win10启动界面）： 当回到控制台，发现控制台的信息： 1234567INFO Launching Electron...Failed to fetch extension, trying 4 more timesFailed to fetch extension, trying 3 more timesFailed to fetch extension, trying 2 more timesFailed to fetch extension, trying 1 more timesFailed to fetch extension, trying 0 more timesVue Devtools failed to install: Error: net::ERR_CONNECTION_TIMED_OUT 这是因为在请求安装vuejs devtools插件。需要翻墙才能安装成功。可以忽略上面的问题，耐心等待5次请求失败后会自动跳过，上面的成功界面即证实跳过依然编译成功。 依然有解决方案： 注释掉src/background.js中的以下代码就行了： 12345678910/* if (isDevelopment &amp;&amp; !process.env.IS_TEST) { // Install Vue Devtools try { await installVueDevtools(); } catch (e) { console.error(\"Vue Devtools failed to install:\", e.toString()); } }*/ 2.配置项目2.1 配置ESLint代码格式检查工具ESlint可以高效的检查代码格式，让参与项目的所有工程师都能保持统一的代码风格。其检测精度甚至可以精确到是否多一个空格或者少一个空格。代码格式的统一对提高团队的协同开发效率有很大的帮助，特别是对有代码洁癖的工程师。 在项目根目录下创建.eslintrc.js （注意文件名前面有个.） 请粘贴以下代码： 123456789101112131415161718192021222324module.exports = { root: true, env: { node: true }, 'extends': [ 'plugin:vue/essential', '@vue/standard' ], rules: { 'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off', // 不检测语句末尾的分号 'semi': ['off', 'always'], // 强制缩进为2个空格 'indent': ['error', 2], // 关闭函数名称跟括号之间的空格检测 'space-before-function-paren': 0, // 忽略大括号内的空格 'object-curly-spacing': 0 }, parserOptions: { parser: 'babel-eslint' }} 这里说明下关于indent缩进的配置，要配合项目根目录下的.editorconfig 12345[*.{js,jsx,ts,tsx,vue}]indent_style = space &lt;--这里定义缩进类型是空格还是tabindent_size = 2 &lt;--这里需要与.eslintrc.js的indent对应trim_trailing_whitespace = trueinsert_final_newline = true .editorconfig 用于IDE自动格式化代码.eslintrc.js 用于ESlint检测 更多配置可参阅 ESLint教程。 2.2 配置vue在项目目录下创建vue.config.js，粘贴以下代码： 123456789101112131415161718192021const path = require('path');function resolve (dir) { return path.join(__dirname, dir);}module.exports = { publicPath: './', devServer: { // can be overwritten by process.env.HOST host: '0.0.0.0', port: 8080 }, chainWebpack: config =&gt; { config.resolve.alias .set('@', resolve('src')) .set('src', resolve('src')) .set('common', resolve('src/common')) .set('components', resolve('src/components')); }}; devServer 用于设置开发环境的服务，这里表示在本地8080端口启动web服务。 chainWebpack 我们给项目目录起了”别名(alias)”，在代码中，我们可以直接用“别名”访问资源，省去了每次输入完整相对路径的麻烦。 在js代码中可直接使用别名，例如： @/common/js/xxx.js 等价于 src/common/js/xxx.js common/js/xxx.js 等价于 src/common/js/xxx.js 在css或者html中使用别名，需要在别名前加“~”，例如： @import &quot;~common/stylus/font.styl&quot; 3.项目基本设定3.1 主进程和渲染进程简介在开始下面的步骤之前，很有必要简单了解下Electron的应用架构。 主进程 Electron 运行 package.json 的 main 脚本（background.js）的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。 渲染进程 由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。 在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。 主进程和渲染进程的关系 主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。 主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。 具体可参阅官方文档。 3.2 APP窗口大小修改background.js： 1234567891011win = new BrowserWindow({ width: 1000, height: 600, webPreferences: { /* Use pluginOptions.nodeIntegration, leave this alone See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info */ nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION }}) 3.3 取消跨域限制修改background.js： 12345678910111213win = new BrowserWindow({ width: 1000, height: 600, webPreferences: { /* Use pluginOptions.nodeIntegration, leave this alone See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION */ webSecurity: false, nodeIntegration: true }}) 3.4 取消菜单栏在我们生成的桌面APP中，我们可以看到默认的菜单栏。 在windows中，菜单栏在APP窗口内的顶部；在macOS中，菜单栏位于电脑屏幕顶部。 为了方便项目将来也能直接生成纯web应用，尽量把APP的全部功能都做到渲染进程里，这里我们取消菜单栏。 由于macOS的特殊性，顶部菜单栏无法删除，所以我们针对macOS特殊处理，把菜单栏只保留“关于”和“退出”。 修改background.js： 12345678910111213141516171819202122232425262728293031323334'use strict'// 添加Menu组件import { app, protocol, BrowserWindow, Menu } from 'electron'...function createWindow() { // Create the browser window. ... win.on('closed', () =&gt; { win = null }) createMenu()}// 设置菜单栏function createMenu() { // darwin表示macOS，针对macOS的设置 if (process.platform === 'darwin') { const template = [{ label: 'App Demo', submenu: [ {role: 'about'}, { role: 'quit' }] }] const menu = Menu.buildFromTemplate(template) Menu.setApplicationMenu(menu) } else { // windows及linux系统 Menu.setApplicationMenu(null) }} 改变后的APP界面样式： 更多关于菜单栏设置，请参阅：Electron官方API 3.5 设置APP窗口图标准备windows和macOS两版图标： Platform File Type Specification Windows app.ico 最小尺寸：256x256 MacOS app.png或app.icns 最小尺寸：512x512 把图标文件放到public/目录下，项目结构如下： 1234567891011121314151617|- /dist_electron |...|- /public |- app.icns |- app.ico |- app.png |- favicon.ico |- index.html|- /src |...|- .editorconfig |- .eslintrc.js|- .gitignore|- babel.config.js|- package.json|- package-lock.json|- README.md 可以顺便把favicon.ico也修改一下，但是在桌面版APP上是用不到的。如果以后生成纯web项目才会用到。 修改background.js，让APP窗口应用图标： 1234567891011function createWindow() { // Create the browser window. win = new BrowserWindow({ ... // eslint-disable-next-line no-undef icon: `${__static}/app.ico` }) ...} 这里的${__static}对应的是public目录 现在，Windows系统上可以看到开发环境的APP窗口图标已经生效了。 MacOS图标请参照4.1章节，并且需要在build后才能生效。 3.6 设置APP窗口标题栏名称修改public/index.html， 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt; &lt;!-- 把'&lt;%= htmlWebpackPlugin.options.title %&gt;'改为App Demo --&gt; &lt;title&gt;My App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; 4.打包这里我们已经集成了electron-builder工具，可以参阅官方文档。","link":"/Electron-Vue/53aa34c9.html"},{"title":"Vue整合Axios","text":"Vue整合Axios，封装API Axios官方API 1.安装axios npm管理： 1$ cnpm i axios -S CDN： 1&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt; 2.封装axios在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御cSRF等。所以官方也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步Axios官方API。 2.2 引入在项目的src目录中，新建一个request文件夹，然后在里面新建一个http.js；新建一个apis文件夹，然后在里面新建一个api.js文件。http.js文件用来封装我们的axios，api.js用来统一管理我们的接口。 http.js文件： 123456789/* eslint-disable no-lone-blocks */// axios package// 引入axios，并加到原型链中import Vue from 'vue'import axios from 'axios'Vue.prototype.$axios = axios;Vue.prototype.$store = store;axios.defaults.baseURL = '/' // 关键代码 2.3 设置请求时间http.js文件： 1234...// 设置默认的请求超时时间。超过了10s，告知用户当前请求超时，请刷新等。axios.defaults.timeout = 10000; 2.4 post请求头设置post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为application/x-www-form-urlencoded;charset=UTF-8 http.js文件： 1axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'; 2.5 请求拦截器在发送请求前可以进行一个请求的拦截，为什么要拦截呢？拦截请求是用来做什么的呢？ 比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。 http.js文件： 12345678910111213141516171819202122232425262728293031...import store from '@/store/index' //@ 等价于/src这个目录.../* ============================== 拦截器 ============================== */// 请求拦截器axios.interceptors.request.use( config =&gt; { // 每次发送请求之前判断vuex中是否存在token // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况 // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 console.log('请求拦截器config' + config.headers.Authorization); const token = store.state.token; console.log('store.state' + store.state); console.log('token:' + token); token &amp;&amp; (config.headers.Authorization = token); // 每次发送请求之前判断是否存在token // 如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了 // if (token) { // config.headers.Authorization = token; // } return config; }, error =&gt; { console.log('error:' + error); return Promise.error(error); }) token：一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在main.js中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。 那么每个请求都携带token，那么如果一个页面不需要用户登录就可以访问的怎么办呢？其实，前端的请求可以携带token，但是后台可以选择不接收的。 2.6 响应拦截器http.js文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677...// 响应拦截器axios.interceptors.response.use( // 请求成功 response =&gt; { // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 // 否则的话抛出错误 console.log('响应拦截器' + response.status); if (response.status === 200) { console.log('响应拦截器' + response.status); return Promise.resolve(response); } else { return Promise.reject(response); } }, // 服务器状态码不是2开头的的情况 // 这里可以跟你们的后台开发人员协商好统一的错误状态码 // 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等 // 下面列举几个常见的操作，其他需求可自行扩展 // 请求失败 error =&gt; { console.log('响应拦截器error::' + error); console.log('响应拦截器码: ' + error.response.status); if (error.response.status) { switch (error.response.status) { // 401: 未登录 // 未登录则跳转登录页面，并携带当前页面的路径 // 在登录成功后返回当前页面，这一步需要在登录页操作。 case 401: { console.log('响应拦截器error::401'); console.log('401::' + router); console.log('401::' + router.currentRoute.fullPath); router.replace({ path: '/login', query: { redirect: router.currentRoute.fullPath } }); } break; // 403 token过期 // 登录过期对用户进行提示 // 清除本地token和清空vuex中token对象 // 跳转登录页面 case 403: // 清除token localStorage.removeItem('token'); store.commit('loginSuccess', null); // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 setTimeout(() =&gt; { router.replace({ path: '/login', query: { redirect: router.currentRoute.fullPath } }); }, 1000); break; // 404请求不存在 case 404: router.replace({ path: '/login', query: { redirect: router.currentRoute.fullPath } }); break; // 其他错误，直接抛出错误提示 default: } return Promise.reject(error.response); } }) 响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。 例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。 2.7 封装get方法和post方法常用的ajax请求方法有get、post、put等方法，axios对应的也有很多类似的方法。为了简化代码，还是要对其进行一个简单的封装。下面主要封装两个方法：get和post。 get方法 通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数。 http.js文件： 12345678910111213141516171819202122232425.../* ============================== 封装get方法和post方法 ============================== */// const Domain = \"http://255.255.255.0:8000\"; // 定义根域名const Domain = '';/** * get方法，对应get请求 * @param {String} url [请求的url地址] * @param {Object} params [请求时携带的参数] */export function get(action, params) { return new Promise((resolve, reject) =&gt; { // url 判断是测试环境 就要拿 测试环境的域名， 正式环境的就要用 正式域名 const url = Domain + action; axios.get(url, { params: params }).then(res =&gt; { resolve(res.data); }).catch(err =&gt; { reject(err.data) }) });} post方法 原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行序列化的操作，所以我们可以通过node的qs模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到提交的数据的。 可以通过import QS from 'qs'引入qs模块。 12345678910111213141516171819.../** * post方法，对应post请求 * @param {String} url [请求的url地址] * @param {Object} params [请求时携带的参数] */export function post(action, params) { return new Promise((resolve, reject) =&gt; { const url = Domain + action; axios.post(url, params) .then(res =&gt; { resolve(res.data); }) .catch(err =&gt; { reject(err.data) }) });} axios.get()方法和axios.post()在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！ 封装完成啦！ 3.接口统一管理整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。文件中存放所有的api接口。 在api.js中引入封装的get和post方法。 api.js文件： 12345678910111213/** * api接口统一管理 */import { get, post } from '@/request/http'export default { postData(action, params){ return post(action, params) }, getData(action, params){ return get(action, params) }} 在组件中使用： 任意vue文件： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;div id=&quot;#&quot;&gt;&lt;/template&gt;&lt;script&gt; import Vue from 'vue'; import api from '@/api/api.js'; Vue.prototype.$api = api; export default { name:&quot;#&quot;, data(){ return { value1:'', value2:'' } }, methods:{ functiondemo(arg){ // 序列化数据 let param = new URLSearchParams(); param.append(&quot;key1&quot;, this.value1); param.append(&quot;key2&quot;, this.value2); this.$api.postData('/url', param) .then(response =&gt; { ... }) .catch(err =&gt; { console.log(err); }); } } }&lt;/script&gt;&lt;style&gt; ...&lt;/style&gt; 其他的api接口，就在api.js中继续往下面扩展就可以了！ 并为每个接口写好注释！ api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在api.js中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就会很麻烦。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。","link":"/Axios/95be03fc.html"},{"title":"Spring Boot Web开发","text":"1、使用Spring Boot： 创建Spring Boot应用，选中我们需要的模块 Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来 自己编写业务代码 回顾自动配置原理 这个场景Spring Boot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？等等 xxxxAutoConfiguration：帮我们给容器中自动配置组件 xxxxProperties：配置类来封装配置文件的内容 2、Spring Boot对静态资源的映射规则12345678@ConfigurationProperties( prefix = \"spring.resources\", ignoreUnknownFields = false)public class ResourceProperties implements ResourceLoaderAware { // 可以设置和静态资源有关的参数，比如缓存时间 ...} 2.1 依赖的方式12345678910111213141516171819202122232425// WebMvcAutoConfiguration.class文件public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(\"Default resource handling disabled\"); } else { Integer cachePeriod = this.resourceProperties.getCachePeriod(); if (!registry.hasMappingForPattern(\"/webjars/**\")) { this.customizeResourceHandlerRegistration(registry.addResourceHandler( new String[]{\"/webjars/**\"}).addResourceLocations( new String[]{\"classpath:/META-INF/resources/webjars/\"} ).setCachePeriod(cachePeriod) ); } String staticPathPattern = this.mvcProperties.getStaticPathPattern(); if (!registry.hasMappingForPattern(staticPathPattern)) { this.customizeResourceHandlerRegistration(registry.addResourceHandler( new String[]{staticPathPattern}).addResourceLocations( this.resourceProperties.getStaticLocations() ).setCachePeriod(cachePeriod) ); } }} 所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源 webjars：以jar包的方式引入静态资源 webjars官网 访问方式：http://localhost:8088/webjars/jquery/3.5.1/jquery.js 123456&lt;!-- 引入jquery-webjars --&gt;&lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;jquery&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt;&lt;/dependency&gt; 2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）继续读addResourceHandlers方法，如果处理不了，就去静态staticPathPattern路径去找 12345678910111213public WebMvcProperties() { this.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER; this.dispatchTraceRequest = false; this.dispatchOptionsRequest = true; this.ignoreDefaultModelOnRedirect = true; this.throwExceptionIfNoHandlerFound = false; this.logResolvedException = false; this.mediaTypes = new LinkedHashMap(); this.staticPathPattern = \"/**\"; this.async = new WebMvcProperties.Async(); this.servlet = new WebMvcProperties.Servlet(); this.view = new WebMvcProperties.View();} 它添加了个位置addResourceLocations，这个里面的resourceProperties有个getStaticLocations()方法，点进去，有个常量RESOURCE_LOCATIONS 12345678static { RESOURCE_LOCATIONS = new String[CLASSPATH_RESOURCE_LOCATIONS.length + SERVLET_RESOURCE_LOCATIONS.length]; System.arraycopy(SERVLET_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS, 0, SERVLET_RESOURCE_LOCATIONS.length); System.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS, SERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);} 就找到了以下文件夹 12345678private static final String[] SERVLET_RESOURCE_LOCATIONS = new String[]{\"/\"}; // 当前项目的根路径// 和private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{ \"classpath:/META-INF/resources/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\"}; src/mian/java和src/main/resources都是类路径 如果要访问localhost:8088/*.js资源，没有人为处理，那么会自动去上面这些路径，静态资源文件夹里找这些文件 访问方式：http://localhost:8088/asserts/img/childhood_dreams.jpg 2.3 欢迎页设置，静态资源文件夹下的所有index.html页面12345678910111213141516// WebMvcAutoConfiguration.class文件// 配置欢迎页映射@Beanpublic WebMvcAutoConfiguration.WelcomePageHandlerMapping welcomePageHandlerMapping (ResourceProperties resourceProperties) { return new WebMvcAutoConfiguration.WelcomePageHandlerMapping( resourceProperties.getWelcomePage(), this.mvcProperties.getStaticPathPattern() );}private void customizeResourceHandlerRegistration(ResourceHandlerRegistration registration) { if (this.resourceHandlerRegistrationCustomizer != null) { this.resourceHandlerRegistrationCustomizer.customize(registration); }} Spring最顶层的组件，保存每个请求谁来处理 点进getWelcomePage()方法 this.mvcProperties.getStaticPathPattern()还被谁映射，点进去看源码就是/** 12345678910111213141516171819public Resource getWelcomePage() { String[] var1 = this.getStaticWelcomePageLocations(); int var2 = var1.length; for(int var3 = 0; var3 &lt; var2; ++var3) { String location = var1[var3]; Resource resource = this.resourceLoader.getResource(location); try { if (resource.exists()) { resource.getURL(); return resource; } } catch (Exception var7) { } } return null;} 需要遍历，说明欢迎页还挺多的 点进getStaticWelcomePageLocations()方法 1234567891011121314private String[] getStaticWelcomePageLocations() { String[] result = new String[this.staticLocations.length]; for(int i = 0; i &lt; result.length; ++i) { String location = this.staticLocations[i]; if (!location.endsWith(\"/\")) { location = location + \"/\"; } result[i] = location + \"index.html\"; } return result;} 还是这个staticLocations静态文件夹 静态文件夹路径都拼接上index.html 访问方式：http://localhost:8088/ 就会找index页面 2.4 网站图标123456789101112131415161718192021222324252627282930// WebMvcAutoConfiguration.class文件// 配置喜欢的图标@Configuration@ConditionalOnProperty( value = {\"spring.mvc.favicon.enabled\"}, matchIfMissing = true)public static class FaviconConfiguration { private final ResourceProperties resourceProperties; public FaviconConfiguration(ResourceProperties resourceProperties) { this.resourceProperties = resourceProperties; } @Bean public SimpleUrlHandlerMapping faviconHandlerMapping() { SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping(); mapping.setOrder(-2147483647); mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\", this.faviconRequestHandler())); return mapping; } @Bean public ResourceHttpRequestHandler faviconRequestHandler() { ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler(); requestHandler.setLocations(this.resourceProperties.getFaviconLocations()); return requestHandler; }} 所有的**/favicon.ico都是在静态文件夹下找 2.5 自定义路径1spring.resources.static-locations=classpath:/hello/,classpath:initializr/ 多路径用都好隔开，一旦启用自定义路径，那么默认的静态资源路径就不能使用了 3、模板引擎JSP、Velocity、Freemarker、Thymeleaf Spring Boot推荐的Thymeleaf：语法更简单，功能更强大 3.1 引入Thymeleaf，引入starter：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 查看引入的库，发现引入的2.1.6版本的，太低了 Thymeleaf的版本发布 Spring官网Thymeleaf 3的使用 切换版本： 12345678&lt;properties&gt; ... &lt;!-- Thymeleaf主程序 --&gt; &lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt; &lt;!-- Thymeleaf布局支持程序 Thymeleaf3要求layout2以上版本 --&gt; &lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt; &lt;!-- Thymeleaf2和layout1适配 --&gt;&lt;/properties&gt; properties里面的会属性覆盖Spring Boot默认的版本号 thymeleaf-layout-dialect的版本发布 3.2 Thymeleaf使用及语法还是在spring-boot-autoconfigure自动配置包里：添加组件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374@Configuration@ConditionalOnClass( name = {\"org.thymeleaf.templatemode.TemplateMode\"})static class Thymeleaf3Configuration { Thymeleaf3Configuration() { } @Configuration @ConditionalOnClass({Servlet.class}) @ConditionalOnWebApplication static class Thymeleaf3ViewResolverConfiguration extends AbstractThymeleafViewResolverConfiguration { Thymeleaf3ViewResolverConfiguration(ThymeleafProperties properties, SpringTemplateEngine templateEngine) { super(properties, templateEngine); } protected void configureTemplateEngine(ThymeleafViewResolver resolver, SpringTemplateEngine templateEngine) { Method setTemplateEngine; try { setTemplateEngine = ReflectionUtils.findMethod( resolver.getClass(), \"setTemplateEngine\", new Class[]{Class.forName( \"org.thymeleaf.ITemplateEngine\", true, resolver.getClass().getClassLoader() )} ); } catch (ClassNotFoundException var5) { throw new IllegalStateException(var5); } ReflectionUtils.invokeMethod(setTemplateEngine, resolver, new Object[]{templateEngine}); } } @Configuration @ConditionalOnMissingBean( name = {\"defaultTemplateResolver\"} ) static class DefaultTemplateResolverConfiguration extends AbstractTemplateResolverConfiguration { DefaultTemplateResolverConfiguration(ThymeleafProperties properties, ApplicationContext applicationContext) { super(properties, applicationContext); } @Bean public SpringResourceTemplateResolver defaultTemplateResolver() { SpringResourceTemplateResolver resolver = super.defaultTemplateResolver(); Method setCheckExistence = ReflectionUtils.findMethod( resolver.getClass(), \"setCheckExistence\", new Class[]{Boolean.TYPE} ); ReflectionUtils.invokeMethod( setCheckExistence, resolver, new Object[]{this.getProperties().isCheckTemplate()} ); return resolver; } }} 因为我们引入的是3+版本，所以只有3+版本生效； 配置了哪些属性？在文件ThymeleafProperties中： 123456789101112131415161718192021@ConfigurationProperties( prefix = \"spring.thymeleaf\")public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\"); private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\"); public static final String DEFAULT_PREFIX = \"classpath:/templates/\"; public static final String DEFAULT_SUFFIX = \".html\"; private boolean checkTemplate = true; private boolean checkTemplateLocation = true; private String prefix = \"classpath:/templates/\"; private String suffix = \".html\"; private String mode = \"HTML5\"; private Charset encoding; private MimeType contentType; private boolean cache; private Integer templateResolverOrder; private String[] viewNames; private String[] excludedViewNames; private boolean enabled;} 只要我们把HTML页面放在classpath:/templates/，Thymeleaf就能自动渲染 Thymeleaf语法还是参照官方网的官方文档 3.3 代码示例 导入Thymeleaf的名称空间 1&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"&gt; 使用Thymeleaf语法 1&lt;div th:text=\"${text}\"&gt;这里是div信息&lt;/div&gt; 3.4 语法规则th:text：改变当前元素里面的文本内容； th：任意html属性；替换原生属性的值，例：th:class覆盖class Feature Detail Attribute Fragment inclusion 片段包含：jsp:include th:insertth:replace Fragment iteration 遍历：c:forEach th:each Conditional evaluation 条件判断：c:if th:ifth:unlessth:switchth:case Local variable definition 声明变量：c:set th:objectth:with General attribute modification 任意属性修改支持prepend, append th:attrth:attrprependth:attrappend Specific attribute modification 修改制定属性默认值 th:valueth:hrefth:src… Text (tag body modification) 修改标签体内容 th:text(转义特殊字符)th:utext(不转义特殊字符) Fragment specification 声明片段 th:fragment Fragment removal th:remove 3.5 表达式 Simple expressions: (表达式语法) Variable Expressions: ${…}: 获取变量值; OGNL; 12345678910111213141516171819202122232425262728293031 1) 获取对象的属性、调用方法 2) 使用内置的基本对象 #ctx : the context object. #vars: the context variables. #locale : the context locale. #request : (only in Web Contexts) the HttpServletRequest object. #response : (only in Web Contexts) the HttpServletResponse object. #session : (only in Web Contexts) the HttpSession object. #servletContext : (only in Web Contexts) the ServletContext object. ${session.foo} // Retrieves the session atttribute 'foo' # 附录都有演示 3) 内置的一些工具对象 #execInfo : information about the template being processed. #messages : methods for obtaining externalized messages inside variables expressions, # in the same way as they would be obtained using #{…} syntax. #uris : methods for escaping parts of URLs/URIs #conversions : methods for executing the configured conversion service (if any). #dates : methods for java.util.Date objects: formatting, component extraction, etc. #calendars : analogous to #dates , but for java.util.Calendar objects. #numbers : methods for formatting numeric objects. #strings : methods for String objects: contains, startsWith, prepending/appending, etc. #objects : methods for objects in general. #bools : methods for boolean evaluation. #arrays : methods for arrays. #lists : methods for lists. #sets : methods for sets. #maps : methods for maps. #aggregates : methods for creating aggregates on arrays or collections. #ids : methods for dealing with id attributes that might be repeated # (for example, as a result of an iteration). Selection Variable Expressions: *{…}: 选择表达式, 和${}在功能上是一样的 123456补充: 配合th:object=\"${session.user}\"进行使用&lt;div th:object=\"${session.user}\"&gt; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;&lt;/div&gt; Message Expressions: #{…}: 获取国际化内容 Link URL Expressions: @{…}: 定义URL 1@{/order/process(execId=${execId},execType='FAST')} Fragment Expressions: ~{…}: 片段引用表达式 12# 插入片段文档&lt;div th:insert=\"~{commons :: main}\"&gt;...&lt;/div&gt; Literals(字面量) 12345Text literals: 'one text' , 'Another one!' ,…Number literals: 0 , 34 , 3.0 , 12.3 ,…Boolean literals: true , falseNull literal: nullLiteral tokens: one , sometext , main ,… Text operations:(文本操作) 12String concatenation: +Literal substitutions: |The name is ${name}| Arithmetic operations:(数学运算) 12Binary operators: + , - , * , / , %Minus sign (unary operator): - Boolean operations:(布尔运算) 12Binary operators: and , orBoolean negation (unary operator): ! , not Comparisons and equality:(比较运算) 12Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )Equality operators: == , != ( eq , ne ) Conditional operators:(条件运算, 也支持3元运算符) 123If-then: (if) ? (then)If-then-else: (if) ? (then) : (else)Default: (value) ?: (defaultvalue) Special tokens:(特殊符号) 1No-Operation: _ 4、SpringMVC自动配置可以参阅官方文档Developing web applications 4.1 Spring Boot为Spring MVC提供了自动配置，可与大多数应用程序完美配合。自动配置会在Spring的默认设置之上添加以下功能： 包含ContentNegotiatingViewResolver和BeanNameViewResolver Bean。 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（就是View对象），视图对象决定如何渲染（转发？重定向？等）） ContentNegotiatingViewResolver：组合所有的视图解析器的 如何定制：我们可以自己给容器中添加一个视图解析器，自动将其组合进来 Ctrl+N输入DispatchServlet.class在它的doDispatch方法前面设置断点，Debug运行，浏览器访问页面，查看控制台。看DispatchServlet里用到的视图解析器是什么？得到如图： 支持提供静态资源，包括对WebJars的支持（请参见下文）。 自动注册Converter，GenericConverter，Formatter bean。 Converter：转换器，类型转换使用。例如前端文本转后台Integer Formatter：格式化器，2020.08.13===Date 123456789// 配置文件中配置日期格式化的规则@Bean@ConditionalOnProperty( prefix = \"spring.mvc\", name = {\"date-format\"})public Formatter&lt;Date&gt; dateFormatter() { return new DateFormatter(this.mvcProperties.getDateFormat()); // 日期格式化组件} 自己添加的格式化器，我们只需要放在容器中即可 支持HttpMessageConverters（请参见下文）。 HttpMessageConverter：SpringMVC中用来转换HTTP请求和响应的；例：User对象以JSON形式写出 HttpMessageConverters是从容器中确定的，获取所有的HttpMessageConverter 自己给容器中添加HttpMessageConverter，只需将自己的组件注册在容器中（@Bean, @Component） 自动注册MessageCodesResolver（请参见下文）。 定义错误代码生成规则（例：JSR303校验时） 静态index.html支持。 自定义Favicon支持（请参阅下文）。 自动使用ConfigurableWebBindingInitializer bean（请参见下文）。 我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器中） 初始化WebDataBinder（web数据绑定器）； web数据绑定器的功能：请求数据=====绑定到JavaBean中 org.springframework.boot.autoconfigure.web：web的所有自动配置场景。 如果您想保留Spring Boot MVC功能，而只想添加其他MVC配置（拦截器，格式化程序，视图控制器等），则可以添加自己的类型为WebMvcConfigurerAdapter的@Configuration类，但无需@EnableWebMvc。如果希望提供RequestMappingHandlerMapping，RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，则可以声明一个提供此类组件的WebMvcRegistrationsAdapter实例。 如果要完全控制Spring MVC，则可以添加用@EnableWebMvc注释的自己的@Configuration。 4.2 扩展SpringMVC1234567&lt;mvc:view-controller path=\"/hello\" view-name=\"success\"/&gt;&lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path=\"/hello\"/&gt; &lt;bean&gt;&lt;/bean&gt; &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt; 要实现以上Spring配置文件的内容，编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc 1234567891011// 使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class SpringMVCConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers(ViewControllerRegistry registry) { // super.addViewControllers(registry); //浏览器发送 /addViewController 请求来到 thymeleaf registry.addViewController(\"/addViewController\").setViewName(\"thymeleaf\"); }} 既保留了所有的自动配置，也能用我们扩展的配置； 原理： WebMvcAutoConfiguration是SpringMVC的自动配置类 在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class) 1234@Configurationpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration { ...} 点进其父类DelegatingWebMvcConfiguration查看源码： 123456789101112131415161718public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport { private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite(); public DelegatingWebMvcConfiguration() { } //自动装配, 从容器中获取所有的WebMvcConfigurer @Autowired( required = false ) public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) { if (!CollectionUtils.isEmpty(configurers)) { this.configurers.addWebMvcConfigurers(configurers); // 一个参考实现; 将所有的WebMvcConfigurer相关配置都来一起调用; } }} WebMvcConfigurerComposite类中的一个实现 123456789public void addViewControllers(ViewControllerRegistry registry) { Iterator var2 = this.delegates.iterator(); while(var2.hasNext()) { WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next(); delegate.addViewControllers(registry); }} 容器中所有的WebMvcConfigurer都会一起起作用（包括我们自己写的）； 我们的配置类也会被调用； 效果：SpringMVC的自动配置和我们的扩展配置都会起作用； 4.3 全面接管SpringMVCSpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了（静态资源也不能访问了） 我们需要在配置类中添加@EnableWebMvc即可； 原理：为什么@EnableWebMvc自动配置就失效了？ @EnableWebMvc的核心 123456@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.TYPE})@Documented@Import({DelegatingWebMvcConfiguration.class})public @interface EnableWebMvc {} 查看DelegatingWebMvcConfiguration类的源码 1234@Configurationpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport { ...} 在找到WebMvcAutoConfiguration类，查看签名 12345678910@Configuration@ConditionalOnWebApplication@ConditionalOnClass({Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class})@ConditionalOnMissingBean({WebMvcConfigurationSupport.class})@AutoConfigureOrder(-2147483638)@AutoConfigureAfter({DispatcherServletAutoConfiguration.class, ValidationAutoConfiguration.class})public class WebMvcAutoConfiguration { ...} @ConditionalOnMissingBean()：容器中没有这个组件的时候，这个自动配置类才生效 @EnableWebMvc将WebMvcConfigurationSupport组件导入进来； 导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能。 5、如何修改Spring Boot的默认配置模式： Spring Boot在自动配置很多组件时，先看容器中有没有用户自己配置的（@Bean, @Component）,如果有就用用户配置的，如果没有才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来； 在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置 在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置","link":"/Spring/38068.html"},{"title":"TypeScript入门","text":"TypeScript教程 TypeScript官网 1 安装1.1 NPM安装 在项目中打开终端，执行下面命令： 1$ cnpm install -g typescript 菜鸟教程 1.2 测试安装完成后我们可以使用 tsc 命令来执行 TypeScript 的相关代码，以下是查看版本号： 12$ tsc -vVersion 3.9.5 1.3 Hello World 然后我们新建一个 test.ts 的文件，代码如下： 12var message:string = \"Hello World\" console.log(message) .ts 为 TypeScript 代码文件的扩展名。 然后执行以下命令将 TypeScript 转换为 JavaScript 代码： 1$ tsc test.ts 这时候再当前目录下（与 test.ts 同一目录）就会生成一个 test.js 文件，代码如下： 12var message = \"Hello World\";console.log(message); 使用 node 命令来执行 test.js 文件： 12$ node test.jsHello World","link":"/TypeScript/48922786.html"},{"title":"算法设计与分析","text":"算法设计与分析课程 贪心算法，蛮力算法 问题求解的关键 建模：对输入参数和解给出形式化或半形式化的描述 设计算法：采用什么算法设计技术，正确性——是否对所有的实例都得到正确的解 分析算法——效率 目标函数，约束条件 运筹学 递归树是迭代的模型 主定理及其证明主定理的应用迭代推时间复杂度，不能使用定理的，可以使用递归树求解 分治算法的设计思想与分析方法分治策略的设计思想","link":"/Machine-Learing/3274548c.html"},{"title":"论文写作与学术规范","text":"课程 第一讲 学术规范与科学伦理1.学术规范与学术不端1.1 学术规范 学术规范的定义 学术共同体内形成的进行学术活动的基本规范，或者根据学术发展规律制定的有关学术活动的基本准则。 学术规范的内涵 学术研究、学术评审、学术批评、学术管理的规范。 内容层面、价值方面、技术操作层面的规范。 1.2 学术不端 学术不端的定义 学术不端是指违反学术规范、学术道德的行为。 学术不端的内涵 国际：捏造数据、篡改数据和剽窃成果。 国内：除了上述三点之外，增加了：一稿多投、侵占学术成果、伪造学术履历等等。 2.科学论文中的学术规范与学术不端2.1科学数据不端行为 捏造数据 如果研究人员没有做过某个实验、试验、观察或调查，却谎称做过，无中生有地编造数据，这就构成了最严重的学术不端行为一捏造数据。 篡改数据 对数据进行窜改或故意误报。常见的窜改数据行为：去掉不利数据、添加有利数据夸大实验重复次数、夸大实验动物或试验患者的数量等等。 2.2 剽窃不端行为 剽窃行为一：成果剽窃。 剽窃他人的观点、实验数据、结果，最严重剽窃行为。 剽窃行为二：文字剽窃。 欧美主流学术期刊规定：连续7个单词的拼写和顺序与别人论文的完全相同，就是剽窃！（i）使用别人论文中的句子来描述实验结果。（ii）引言部分介绍他人成果时，也不能直接照抄他人语句。如果照抄，则必须用引号把照抄部分引起来；否则，即使标注引用也会被认为构成文字剽窃。 剽窃行为三：图片剽窃。 不同的论文使用了相同图片，或者同一论文重复使用同图片，都是学术不端行为。但是进展类综述论文除外。 剽窃行为四：自我抄袭、自我剽窃。 虽然本文的通讯作者和主要作者与已经发表和引用的论文中的通讯作者和主要作者相同，本文也不能过多地套用后者文中的语句，否则构成自我抄袭、自我剽窃。 总之，科学论文就是要鼓励创新，包括内容和表述的创新！ 3.剽窃的适度标准 适度标准一：不引起原创歧义，可以不引用。 对别人的比较新颖、比较前沿的观点，如果不做说明就有可能被误会为是论文作者的原创的情况，必须引用！对于已经成为学术界常识、即使不做说明或者引用也不会对成果的归属产生误会的观点，可以不引用。例如，现在提及自然选择学说时可以不引用达尔文《物种起源》；现在提及DNA双螺旋结枃模型时可以不引用沃森、克里克的论文。 适度标准二：使用日常用语和格式化短句不算文字剽窃。 如果语句太短、太常见（例如只有几个字词的日常用语），或者表述非常格式化,例如对实验材料和方法的描述，不同的人书写的结果都差不多，那么就不存在剽窃的问题。 适度标准三：科普作品可以不标注引用。 科普文章一般是介绍他人的科学成果，即使不标注引用也不会被读者误认为是作者的成果，因此可以不标注引用。但是，科普文章必须防止文字剽窃。 适度标准四：引用未正式发表成果，必须作者书面许可！ 在论文中引用他人已经正式发表的成果，无须获得作者同意；但是，如果引用未正式发表的成果（例如通过私人通信或学术会议的交流而获取的他人成果），那么必须征得原作者的书面许可。 4.署名不端行为 作者署名：对论文工作有实质贡献、且共同担责的人。 第一作者：对本论文的工作作出了最直接、最主要的理论和实验贡献,并且通常是论文初稿的撰写者。 通讯作者：是该论文与外界的联系人，也是该论文成果学术正确性的负责人，所以也叫责任作者，一般是论文课题的学术领导人，为论文工作确定总的研究方向和论文点子的提出者，并且在研究过程中，在理论上或技术上对其他作者进行了具体指导。在多数情况下，通讯作者是第一作者的导师或上司。 论文的投稿、任何结论必须是所有作者都知情，且一致同意，如果某个作者有不同意见，有权利退出署名，撤下与其有关的那部分结果。不应该在某个人不知情的情况下就把他列为共同作者。 如果有两个主要贡献者的工作确实难以分出主次，可以注明两人贡献相等、为共同第一作者。一般一篇论文有多名共同第一作者，或多名通讯作者，属于不正常现象，会让人猜疑是为了増加一篇论文在评价工作中的使用价值所做的安排。 论文的署名既是一种荣耀，也是一种责任。 如果在论文发表后被发现存在造假、剽窃等问题，全部作者都要承担相应的责任，不应该以不知情做为借口，试图推卸切责任。造假者、剽窃者固然要承担最主要的责任，但是全部作者都要承担连带责任。 在列举自己的论文时，应该保留论文原有的全部作者和原有的排名顺序，可以采用黑体字或画线的方式突出自己的名字，但是不能改变论文排名顺序或者不写其他作者。 如果作者人数较多,难以全部列出,国际通常做法是写出前两名或者前三名作者,再在后面写上et al.。 如果是学术专著，应该清楚写明自己的贡献：如果是专著的主编而非作者，应该注明“编”或“Ed.”；如果自己撰写了专著中的某个章节，应该注明该章节。 非正式期刊发表的论文要清楚标注发表类型，例如：期刊的増刊，会议摘要，墙报展示论文等等。 5.发表的不端行为 禁止一稿多投和重复发表：一篇论文只能投给一家期刊，只有在确知被退稿后，才能改投其他期刊。许多学术期刊都明文禁止一稿多投或重复发表。如果一组数据、图片、结果已经在某篇论文中发表过，就不宜在新的论文中继续做为新数据来使用，否则也会被当成重复发表。如果在新论文中需要用到已发表论文的数据，应该采用引用的方式注明文献出处。 中英文重复发表问题:一篇论文先在中国期刊上发表中文论文，再在国际期刊上发表同一内容的英文论文，这种做法严格来说也是重复发表，但是由于有助于促进国际交流，所以也没有必要深究。但是不宜先发表英文论文,再翻译成中文重复发表 综述类论文明确引用，不算重复发表：对于研究进展类的综述论文，只要明确引用,可以重复发表作者本人或者他人的、已经发表过的数据、图片、结果、结论。 3.学术不端公布案例4.科学伦理及其种类5.规范科学伦理，防止学术不端第二讲 科学精神与价值取向第三讲 学位期刊与文献检索1.文献类型与常用数据库1.1 文献类型 期刊论文：作者 、题目 、期刊名称 、卷号 （期号 ）、起始 页码 （~终止页码 ）、出版年份。 周刊：每周出一期。 半月刊：每半个月（两周）出一期。 月刊：每个月出一期。 双月刊：每两个月出一期 季刊：每季度 （三个月）出一期。 周期更长的期刊比较少见。 学位论文：作者 、题目 、学校名称 、学位论文类型 、出版年份。 学士学位论文（本科毕业论文）。 硕士学位论文。 博士学位论文。 博士后出站报告。 书：作者 （编者 ）、书名 、出版社 、出版地点 、出版年份 、版次。 教科书 。手册。 会议论文集。 其他书籍。 公共常识，失去版权信息，开源代码，开源期刊免费下载，非开源读者要收费，不能下载全文时，可通过摘要获取主要内容，摘要写详细。投开源期刊，导师要同意。 网络链接信息：网络链接地址 、年份。 网上非审稿论文。网络数据信息。网络开源信息。 1.2 常用数据库 中国知网（CNKI） 中国知网，华南师范大学知网 华南师范大学→华南师范大学图书馆→中国知网 校内用户：通过IP地址免费登录 校外用户：通过一卡通账户登录 万方数据知识服务平台 读秀知识库 超星电子图书 环球英语多媒体数据库 LetPub数据库 中科院，论文标准名称，论文简称，打点？ 期刊网址；投稿网址；影响因子，几区，中科院分区方式；以LetPub公布的数据为准。 2.SCI期刊与中文核心期刊2.1 SCI期刊 SCI数据库 《科学引文索引》（Science Citation Index，简称SCI）美国科学信息研究所（ Institute for Scientific Information，简称ISI）尤金·加菲尔德( Eugene Garfield)于1957年在美国费城创办的引文数据库。SCI（科学引文索引）、EI（工程索引）、ISTP（科技会议录索引)是世界著名的三大科技文献检索系统,是国际公认的进行科学统计与科学评价的主要检索工具。 SCI出版形式包括印刷版期刊、光盘版、联机数据库、互联网Web版数据库。 SCI收录全世界出版的数、理、化、农、林、医、生命科学、天文、地理、环境、材料、工程技术等自然科学各学科的核心期刊约3500种，选用刊物来源于40多个国家，50多种文字其中主要的国家有美国、英国、荷兰、德国、俄罗斯、法国、日本、加拿大等,也收录部分中国（包括港澳台）刊物。 1976年，ISI在SCI基础上引出期刊引用报告（Journal Citation Report，JCR），提供了一套统计数据，展示科学期刊被引用情况、发表论文数量以及论文的平均被引用情况。在JCR中可以计算出每种期刊影响因子（Impact Factor，IF）。影响因子在一定程度上可以反映一个期刊的影响力。 有的即可被SCI收录，又被EI收录；引用A期刊的B论文不被SCI收录，数据不算数。 SCI数据库作为中国科研量化指标的前世今生 改革开放之前，中国整体科研水平较低，科研经费的拨付并没有什么量化标准，也没有同行参与评价，完全是由行政部门官员说了算。 在这种情况下，南京大学率先用SCI量化指标来衡量科研人员水平，并被国内广大高校和机构广泛沿用，这对于引导国内学者在全球高水平期刊发表论文、提升中国科研在国际上的影响力，在当时是起到了积极作用的。 2020年2月，教育部、科技部印发了《关于规范高等学校SCI论文相关指标使用，树立正确评价导向的若干意见》，该文件要破除论文“SCI至上”，也要以此为突破口，拿出针对性强、操作性强的实招硬招，破除“唯论文”，树立正确的评价导向。 2.2 中文核心期刊 核心中文期刊 《中文核心期刊》是2011年12月北京大学出版社发行部出版的图书，作者是朱强。该书由北京大学图书馆朱强馆长等任主编。北京多所高校图书馆及中国科学院国家科学图书馆、中国社会科学院文献信息中心、中国人民大学书报资料中心、中国学术期刊（光盘版）电子杂志社、中国科学技术信息研究所、北京万方数据股份有限公司、国家图书馆等27个相关单位的百余名专家和期刊工作者参加了研究。 《中文核心期刊要目总览》是学术界对某类中文期刊等级的权威划分。中文核心期刊是北京大学图书馆联合众多学术界权威专家鉴定，是除南大核心、中国科学引文数据库（CSCD）以外学术影响力最权威的一种。 北大核心期刊每四年由北大图书馆评定一次，并出版《北大核心期刊目录要览》一书,已于1992、1996、2000、2004、2008、2011年出版过六版。 3.影响因子与SCI期刊分区3.1 影响因子 影响因子 影响因子是汤森路透（Thomson reuters）出品的JCR中的一项数据，为某期刊前一年发表的论文在该报告年份中被引用总次数除以该期刊在这一年内发表的论文总数。这是一个国际上通行的期刊评价指标。 影响因子现已成为国际上通用的期刊评价指标。中国大陆各大高校都以学术期刊的影响因子作为评判研究生毕业的主要标准。 影响因子计算方法 公式：IF=\\frac AB， A=该期刊前两年所有文章在前一年中被SCI期刊的引用总次数； B=该期刊前一年所有文章数。 例如：计算 Nature期刊2021年的影响因子时， A=Nature期刊2019年发表的所有文章在2020年中被SCI期刊引用的总次数；B= Nature期刊2019年发表的所有文章数。 影响因子一般在每年的3月份左右公布。 3.2 SCI期刊分区 SCI期刊分区 关于期刊分区影响较为广泛的有两种： Thomson reuters公司制定的分区，即汤森路透分区 中科院国家科学图书馆制定的分区，简称中科院分区 SCI期刊分区一：汤森路透分区 汤森路透每年出版一本《期刊引用报告》（JCR）。JCR对86000多种SCI期刊的影响因子等指数加以统计。JCR将收录期刊分为176个不同学科类别。每个学科分类按照期刊的影响因子高低，平均分为Q1（Q表示 Quartile in Category）、Q2、Q3和Q4四个区：各学科分类中影响因子前25%（含25%）期刊划分为Q1区，前25%~50%（含50%）为Q2区，前50%~75%（含75%）为Q3区，75%之后的为Q4区。 SCI期刊分区二：中科院分区 中科院首先将JCR中所有期刊分为数学、物理、化学、生物、地学、天文、工程技术、医学、环境科学、农林科学、社会、科学、管理科学及综合性期刊13大类。然后，将13大类期刊分各自为4个区。按照各类期刊影响因子划分，前5%为该类1区、6%~20%为2区、21%~50%为3区，其余的为4区。 盲审量化，第三关，学院答辩，全院一起，导师不能参加，平常能发就发？难？都采用中科院的分区方式，学位论文要求母语。 4.文献检索4.1 中文文献检索 华师图书馆 华南师范大学→华南师范大学图书馆→文献检索 馆藏图书、学校购买的相关数据库 普通检索 主题、篇关摘、关键词、篇名（题目）、全文、作者、第一作者、通讯作者、作者单位、基金、摘要、小标题、参考文献、分类号、文献来源（期刊名称）、DOI（论文的数字对象唯一标识符，Digital Object Unique Identifier，简称为DOI，相当于论文的身份证号码） 其他检索 高级检索、专业检索、作者发文检索、句子检索、框式检索、知识元检索、引文检索 网络平台直接检索 百度、搜狗、知乎、雅虎等等。百度又细分为百度百科、百度学术、百度网盘、百度翻译、百度地图、…… 中文期刊检索 登录相关的中文期刊，通过作者、题目、卷号、期号、时间、关键词等等方式检索该发表在期刊上的论文。 4.2 英文文献检索 网络平台直接检索 英文期刊检索 登录相关的英文期刊，通过作者、题目、卷号、期号、时间、关键词等等方式检索该发表在期刊上的论文。 5.文献管理5.1 文件管理 硬盘分区管理：操作系统、常用软件、生活文件、工作件等等实行分区管理。 文件属性管理：工作文件按照参考文献、工作笔记、自编程序、理论结果、计算结果、实验结果、论文撰写、投稿管理等等不同属性实行分类管理。 结果阶段管理：程序、计算、实验等等的临时结果、每日版本、阶段版本、终结版本实行分阶段管理。 论文版本管理：投稿论文、学位论文实行版本管理。 人工分类管理：参考文献可以按照属性、目的、自己的习惯进行人工管理。 常用软件管理：目前使用比较多的免费文献管理软件有如下五种。Endnote、 Mendeley、 Zotero、 JabRef、 NoteExpress。 第四讲 学位论文要素与规范1.科学论文分类及属性1.1 学位论文 学士学位论文 国内的学士学位论文,通常也称为本科毕业论文、本科毕业设计论文、本科毕业答辩论文。 属性：主要是对本科毕业设计工作的成果总结。有些在本科阶段从事了课外科研的学生，也可以把本科阶段发表、完成的科研成果包括进来。 硕士学位论文 硕士学位论文，俗称攻读硕士期间的大论文。 属性：主要是对攻读硕士期间全部工作的成果总结，包含了硕士生期间已录用、已发表、已完成但暂未发表的科研成果。 博士学位论文 博士学位论文，俗称攻读博士期间的大论文。 属性：主要是对攻读博士期间全部工作的成果总结，包含了博士生期间已录用、已发表、已完成但暂未发表的科研成果。 博士后出站报告 博士后出站时的大论文。有些国家、国内有些单位目前把博士后看成一种学历，但绝大部分国家和国内大部分单位把博士后看成一种工作经历。 属性：主要是对博士后在站工作期间全部工作的成果总结，包含了博士后在站期间已录用、已发表、已完成但暂未发表的科研成果。 第五讲 期刊论文写作技巧第六讲 期刊论文投稿与发表第七讲 学术报告与交流","link":"/Thesis/43518d0d.html"}],"tags":[{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"配置","slug":"配置","link":"/tags/%E9%85%8D%E7%BD%AE/"},{"name":"搜索引擎","slug":"搜索引擎","link":"/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"积累","slug":"积累","link":"/tags/%E7%A7%AF%E7%B4%AF/"},{"name":"主题","slug":"主题","link":"/tags/%E4%B8%BB%E9%A2%98/"},{"name":"校招","slug":"校招","link":"/tags/%E6%A0%A1%E6%8B%9B/"},{"name":"基类","slug":"基类","link":"/tags/%E5%9F%BA%E7%B1%BB/"},{"name":"原理","slug":"原理","link":"/tags/%E5%8E%9F%E7%90%86/"},{"name":"课程","slug":"课程","link":"/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"English","slug":"English","link":"/tags/English/"},{"name":"计算机基础","slug":"计算机基础","link":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"面试题集","slug":"面试题集","link":"/tags/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"},{"name":"复试","slug":"复试","link":"/tags/%E5%A4%8D%E8%AF%95/"},{"name":"考研","slug":"考研","link":"/tags/%E8%80%83%E7%A0%94/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"框架","slug":"框架","link":"/tags/%E6%A1%86%E6%9E%B6/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"}],"categories":[{"name":"C","slug":"C","link":"/categories/C/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"ElasticSearch","slug":"ElasticSearch","link":"/categories/ElasticSearch/"},{"name":"CSharp","slug":"CSharp","link":"/categories/CSharp/"},{"name":"Interview","slug":"Interview","link":"/categories/Interview/"},{"name":"GitHub","slug":"GitHub","link":"/categories/GitHub/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Machine-Learing","slug":"Machine-Learing","link":"/categories/Machine-Learing/"},{"name":"OS","slug":"OS","link":"/categories/OS/"},{"name":"Study","slug":"Study","link":"/categories/Study/"},{"name":"Redis","slug":"Redis","link":"/categories/Redis/"},{"name":"Spring","slug":"Spring","link":"/categories/Spring/"},{"name":"Element-UI","slug":"Element-UI","link":"/categories/Element-UI/"},{"name":"Electron-Vue","slug":"Electron-Vue","link":"/categories/Electron-Vue/"},{"name":"Axios","slug":"Axios","link":"/categories/Axios/"},{"name":"TypeScript","slug":"TypeScript","link":"/categories/TypeScript/"},{"name":"Thesis","slug":"Thesis","link":"/categories/Thesis/"}]}