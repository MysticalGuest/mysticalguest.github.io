{"pages":[],"posts":[{"title":"Icarus主题美化","text":"Icarus用户指南 - 主题美化Icarus的主题样式编码文件为themes/icarus/layout/layout.jsx。此文件定义了站点全局的样式设置。本文详细介绍了本主题针对文章分类的详细配置说明。 自定义 Icarus 主题 主题默认是三列排列，第一列是个人信息，第二列是文章的简介或者内容，第三列是标签云等组件。在首页的时候阅读体验也很好，但是在文章页面查看全文的时候就感觉文章内容显示有些太少。 于是打算在文章页面隐藏掉右边的侧边栏。我想应该是我用的icarus主题版本是3+，网上都是2+版本的教程，没有找到对应教程。于是就自己阅读源码自己解决了问题。 默认配置也基本能用了，但是有一个痛点就是，阅读模式文章宽度太短了，还是根据个人习惯做下配置。 解决方案 1. 首先找到了控制侧边栏的代码文件在 ../themes/icarus/layout/layout.jsx 源码为(版本差别，大同小异)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const { Component } = require('inferno');const classname = require('hexo-component-inferno/lib/util/classname');const Head = require('./common/head');const Navbar = require('./common/navbar');const Widgets = require('./common/widgets');const Footer = require('./common/footer');const Scripts = require('./common/scripts');const Search = require('./common/search');module.exports = class extends Component { render() { const { env, site, config, page, helper, body } = this.props; const language = page.lang || page.language || config.language; const columnCount = Widgets.getColumnCount(config.widgets); return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=\"section\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"columns\"&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;; }}; 三栏分别为：（从第24行开始） 12345678&lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; // 中 1&lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; // 左 1&lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; //右 2. 那能不能逻辑改为只有主页才显示右边侧栏呢？ 我从源码中分析到，函数返回return的就是样式页面。既然找到了这3栏，我可以通过改变返回值，就可以达到控制主体样式的目的。 所以加一个判断语句即可： 12345678if(page.path==='index.html'){ // index.html即主页面 // 返回3栏 return '...';}else{ // 返回2栏，改变宽度即可 return '...';} 上面代码只会在主页面显示3栏，后续博主我在使用的过程中发现有且只有主页面是3栏；换页、分类页等页面就会变成2栏！ 因为我们的代码只为主页面返回3栏！ 后来在读源码后，找到了解决方法：在 ../themes/icarus/layout/layout.jsx 文件中第16行添加如下代码： 12console.log(\"Page\", page);console.log(\"Page.path: \", page.path); 这样就可以查看页面具体信息；控制台执行hexo g -d后，会出现以下信息；由于每个page信息可能会很多，尤其是博客文章内容过多，就会使page包含的信息过多，会使控制台信息溢出；所以我只选择其中一个较短的信息展示如下： 2.1 page信息 12345678910111213Page: { base: 'tags/Hexo/', total: 1, current: 1, current_url: 'tags/Hexo/', posts: _Query { data: [ [_Document], [_Document] ], length: 2 }, prev: 0, prev_link: '', next: 0, next_link: '', tag: 'Hexo', path: 'tags/Hexo/index.html', lang: 'en', canonical_path: 'tags/Hexo/index.html' } 2.2 page.path信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354ubuntu~/github/mysticalguest.github.io$ hexo g -dInferno is in development mode.INFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===INFO === Checking the configuration file ===INFO === Registering Hexo extensions ===INFO Start processingINFO Files loaded in 6.76 sPage.path: 2020/06/18/ICARUS主题美化/Page.path: 2020/06/17/数据结构进阶实训八/Page.path: 2020/06/17/数据结构进阶实训五/Page.path: 2020/06/17/数据结构进阶实训二/Page.path: 2020/06/17/数据结构进阶实训一/Page.path: 2020/06/17/数据结构进阶实训六/Page.path: 2020/06/17/数据结构进阶实训七/Page.path: 2020/06/16/Java笔记文档2/Page.path: 2020/06/16/Java笔记文档1/Page.path: 2020/06/15/数据结构进阶实训三/Page.path: 2020/06/15/数据结构进阶实训四/Page.path: 2020/06/14/hello-world/Page.path: archives/index.htmlPage.path: archives/page/2/index.htmlPage.path: archives/2020/index.htmlPage.path: archives/2020/page/2/index.htmlPage.path: archives/2020/06/index.htmlPage.path: archives/2020/06/page/2/index.htmlPage.path: categories/配置/index.htmlPage.path: categories/Document-Compile/index.htmlPage.path: categories/主题/index.htmlPage.path: categories/算法/index.htmlPage.path: index.htmlPage.path: page/2/index.htmlPage.path: tags/Hexo/index.htmlPage.path: tags/Java/index.htmlPage.path: tags/C/index.htmlPage.path: categories/index.htmlPage.path: tags/index.htmlINFO 0 files generated in 3.37 sINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...位于分支 master无文件要提交，干净的工作区分支 'master' 设置为跟踪来自 'git@github.com:*/*.git' 的远程分支 'master'。Everything up-to-dateINFO Deploy done: git 从控制台打印出的信息，可以明显看出每个页面的详细路径信息；所以我们想要那些页面3栏都可以； 12345678910var path = /\\Sindex.html/; if(page.path==='index.html' || path.test(page.path)){ // 返回3栏 return '...';}else{ // 返回2栏，改变宽度即可 return '...';} 这里我利用正则表达式，将非博客文章页面都设为3栏显示，大家可根据自己喜好自行对想要的页面设置指定栏数。 3. 其他修改逻辑 +表示添加代码，没有标记表示代码不做修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// 从16行开始修改代码+ if(page.path==='index.html'){ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=\"section\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"columns\"&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;;+ }+ else{+ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt;+ &lt;Head env={env} site={site} config={config} helper={helper} page={page} /&gt;+ &lt;body class={`is-${columnCount}-column`}&gt;+ &lt;Navbar config={config} helper={helper} page={page} /&gt;+ &lt;section class=\"section\"&gt;+ &lt;div class=\"container\"&gt;+ &lt;div class=\"columns\"&gt;+ &lt;div class={classname({+ column: true,+ 'order-2': true,+ 'column-main': true,+ 'is-12': columnCount === 1,+ 'is-8-tablet is-8-desktop is-10-widescreen': columnCount === 2+ })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt;+ &lt;Widgets site={site} config={config}helper={helper} page={page} position={'left'}/&gt;+ &lt;/div&gt;+ &lt;/div&gt;+ &lt;/section&gt;+ &lt;Footer config={config} helper={helper} /&gt;+ &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt;+ &lt;Search config={config} helper={helper} /&gt;+ &lt;/body&gt;+ &lt;/html&gt;;+ } 好啦，大工告成！ 其中只有两处代码改动较大，让我们来看看吧！ 我们只是修改了栏数，但每一栏的宽度没有改变，这里更关注的是文章栏的宽度。具体修改代码下： 1234// 渲染相应栏的标签，只添加‘中’和‘左’// 根据自己的喜好可以选择任意组合，‘中’和‘右’也可以// 第45行'is-8-tablet is-8-desktop is-10-widescreen': columnCount === 2 即将原来的 is-8-widescreen修改为is-10-widescreen。 4. 下面详细解释一下代码 icarus 可以设置资料、toc、归档等等插件在文章的左侧或者右侧。也就是说，包括插件和文章在内，列数在1~3列不等： 无插件的时候，为1列；插件统一在左侧或右侧时，为2列；插件左、右侧都有时，为3列。Bulma 引擎将屏幕横向分为12份，所有元素按照自己的需求使用即可。 通过 layout或widget.jsx 文件，我们可以看到，对于插件而言： 如果屏幕分为2列，则插件的宽度为 is-4-widescreen，也即是4/12=33.33%的宽度；如果屏幕分为3列，则插件的宽度为 is-3-widescreen，也即是3/12=25%的宽度，两列插件占了50%宽。同样的，layout.jsx 文件针对文章也做了宽度限制： 如果屏幕分为1列，则文章的宽度为 is-12，也即是12/12=100%的宽度；如果屏幕分为2列，则文章的宽度为 is-8-widescreen，也即是8/12=66.66%的宽度；如果屏幕分为3列，则文章的宽度为 is-6-widescreen，也即是6/12=50%的宽度。那么调整插件宽度的方法也就差不多想出来啦！","link":"/2020/06/21/ICARUS%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"title":"数据结构进阶实训一 位运算，优化算法","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目112对于一个字节（8bit)的无符号整型变量求其二进制表示中“1”的个数。要求算法的执行效率尽可能高。 1.1 算法设计思想 用户直接输入一个8位无符号整型常数，并进行用户输入的校验，如果不满足条件，提示用户重新输入，直到输入正确；将十进制转换为二进制；持续下面循环8次：将二进制数模2，结果为1，计数器加1，然后二进制数右移一位；循环结束，1的个数为计数器值。 1.2 源代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;stdio.h&gt;#include&lt;conio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;void main(){ printf(\"Please enter an 8-bit unsigned integer constant:\"); char array[8]; scanf(\"%s\", array); int len = strlen(array); // 判断用户输入是否是8位无符号整型常量 // 并判断用户输入是否为二进制 // 如果长度不为8,或不是二进制数,则重新输入 while(len!=8 || strspn(array, \"01\")!=len){ printf(\"Your input does not meet the conditions!\\n \\ Please enter an 8-bit unsigned integer constant as required:\"); scanf(\"%s\", array); len = strlen(array); } int arrayToInt = strtol(array, NULL, 2); //十进制转二进制函数的声明 int transfer(int x); int i=0, num=0; for(i; i&lt;len; i++){ if(transfer(arrayToInt)%2 == 1) num++; arrayToInt=arrayToInt&gt;&gt;1; } printf(\"The number of \\\"1\\\" in its binary representation is: %d.\\n\", num); printf(\"The program will continue to run, press any key to close it.\"); getch();}int transfer(int x){ int i=0; int binary = 0b0; for(i ; i&lt;x ; i++){ binary++; } return binary;} 1.3 运行情况截图 题目21给定一个整数N，N！末尾会有多少个0呢？编写算法计算给定的N！末尾有多少个0？ 2.1 算法设计思想 一个数的阶乘末尾有多少0，即判断这个数除以10的余数是否为0，如果为0，则末尾是0。 2.2 源代码 1234567while(factorial&gt;0){ if(factorial%10==0) numOfZero++;else break; factorial = factorial / 10;} 2.3 运行情况截图 题目31求N!的二进制表示中最低位的1的位置。 3.1 算法设计思想 初始化计数器为0；先把n!化为二进制表示的形式，再把其二进制形式模2，如果结果为0，将其二进制形式右移一位，并且计数器加1；循环上面的操作，直到模2结果为1，结束循环，计数器即为最后结果。 3.2 源代码 1234567891011121314151617181920212223242526int convert(int x){ // 十进制转二进制 int binary=0b0, i=0; for(i; i&lt;x; i++){ binary++; } return binary;}void main(){ int n,factorial=1, i=1, numOfZero=0; printf(\"Please enter an integer and the program will calculate its factorial:\"); scanf(\"%d\", &amp;n); for(i ; i&lt;=n; i++){ // 求阶乘 factorial *= i; } printf(\"The factorial of n is %d\\n\", factorial); int binary = convert(factorial); while(1){ // 求位置 numOfZero++; if(binary%2==1) break; binary = binary&gt;&gt;1; } printf(\"When representing n! In binary, \\ the position of the lowest bit 1 is (from right to left): %d\\n\", numOfZero);} 3.3 运行情况截图 题目41对于一个由N个整数组成的数组，设计算法（程序），求出该数组中的最大值和最小值。 4.1 算法设计思想 先判断数组的前两个值，将小的赋给min，将大的赋给max；循环从数组的下标2开始，将数组下标为2的值记为num，如果num小于min，则将num赋值给min，反之则不变；如果num大于max，则将num赋值给max，反之则不变；直到循环结束，max则为最大值，min为最小值。 4.2 源代码 123456789101112131415161718192021222324252627void main(){ int random, num[20], i=0, max, min; printf(\"Give an array of 20 integers:\\n\"); for(i; i&lt;20; i++){ // 使用随机数初始化数组 random = rand()%100; num[i] = random; printf(\"%d \", num[i]); } if(num[0]&lt;num[1]){ max=num[1]; min=num[0]; } else{ max=num[0]; min=num[1]; } i=2; // 从2开始比较 for(i; i&lt;20; i++){ if(num[i]&gt;max) max=num[i]; if(num[i]&lt;min) min=num[i]; } printf(\"\\nThe maximum value of the array is: %d\", max); printf(\"\\nThe minimum value of the array is: %d\\n\", min); system(\"pause\");} 4.3 运行情况截图 题目51快速找出一个数组中所有满足条件的的两个数。（条件：这两个数的和等于一个给定的值sum.）。 5.1 算法设计思想 从第1个数开始循环与后面的数相加，判断结果如果等于给定值sum就输出这两个值；然后从第2个数开始循环与后面的数相加，以此循环直到把数组遍历完。 5.2 源代码 123456789101112131415161718192021void main(){ int sum=100 int num[20]={41, 67, 34, 0, 69, 24, 78, 58, 62, 64, 5, 45, 81, 27, 61, 91, 95, 42, 27, 36}; printf(\"Give an array of 20 integers:\\n\"); int i=0, j; for(i; i&lt;20; i++){ printf(\"%d \", num[i]); } printf(\"\\n\"); i=0; for(i; i&lt;20; i++){ int add=num[i]; j= i+1; for(j; j&lt;20; j++){ if(add+num[j]==sum){ printf(\"The sum of the two numbers found is 100, which are: %d and %d.\\n\", add, num[j]); } } } system(\"pause\");} 5.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%80/"},{"title":"hello-world","text":"title: Hello WorldWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/06/21/hello-world/"},{"title":"Java编译原理","text":"Java development notes document Source Code 解决的问题1在CMD上运行java文件时出现错误：找不到或者无法加载主类的问题。 解决方案 1. 首先写一个测试文件 12345public class TestDemo { public static void main(String args[]) { System.out.println(\"Run successfully!\"); }} 2. 通过cmd编译如下 2.1 通过命令：javac TestDemo.java将其编译成字节码文件。要运行一段Java源码，必须先将源码转换为class文件，class文件就是编译器编译之后供虚拟机解释执行的二进制字节码文件。 2.2 通过命令：java TestDemo将其运行，并打印输出结果。 从图中可以看出，在这种情况下编译是正常的。 3. 那么，我们修改刚开始的代码 在首行加入在java中最常见的package关键字。如下： 1234567package CourseExercise;public class TestDemo { public static void main(String args[]) { System.out.println(\"Run successfully!\"); }} 3.1 通过命令：javac TestDemo.java将其编译成字节码文件 在编译成字节码文件时，是没有问题的。也就是说，在当前文件目录下，可以成class文件。好的，继续往下进行。 3.2 通过命令：java TestDemo尝试将其运行，并打印输出结果。 这个时候就会报错了。提示错误：找不到或无法加载主类。很明显，这个错误是由于在代码首行加入了package CourseExercise;造成的。 4. 那么，遇到这种问题该怎么解决呢 方法如下： 4.1 通过命令： javac -d . TestDemo.java将目标文件编译成class文件。 说明： -d ：表示生成目录，设置编译生成的class文件保存路径，路径与定义的包名和层次相关。 . ：表示在当前目录中生成。 4.2 通过命令： java CourseExercise/TestDemo或者java CourseExercise.TestDemo来运行程序。 4.3 通过命令： javap -verbose TestDemo.class将class文件中的字节码转换为字节码指令。","link":"/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A31/"},{"title":"Java中main方法参数String[] args的使用","text":"Java development notes document Source Code Java规定12main方法参数必须为字符串数组(String [ ])，变量名可以随意，通常使用args即是arguments（”参数”的复数形式）的缩写。 12345public static void main(String[] args) {}public static void main(String args[]) {} 两种写法都是一样的，都表示字符串数组args，其中args只是普通变量名，可以随意定义（前提是符合变量名规则） 思考讨论 1. 不按Java规定 123456public class TestDemo { public static void main(String args) { // 将 String[] 改为 String System.out.println(\"Test!\"); }} 如果按照上面代码进行编码，那就不能被系统识别为主方法；系统就会提示类似如下错误：Error: Main method not found in the file, please define the main method as: public static void main(String[] args) 2. 同名main方法 如果已经有正确main方法，再有同名的main方法就是方法重载了。 1234567public static void main(String[] args){ // 正确标准完美的main方法}public static void main(String args){ // 方法重载} 3. 回归正题：参数String[] args的作用 参数String[] args的作用就是可以在main方法运行前将参数传入main方法中。 3.1 从控制台，输入编译执行命令时传参数。例如下面代码： 123456public class TestMain { public static void main(String[] args) { for(int i=0; i&lt;args.length; i++) System.out.println(args[i]); }}3.2 但是此时args[]并没有赋值，我们需要从控制台命令行进行赋值，就像这样： 所以在命令行中使用String[] args即传入参数的使用为： 1$ java java_file_name arg1 arg2 arg3 ... 4. eclipse举例 在Eclipse使用String[] args4.1 4.2 最后点击Run运行即可。","link":"/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A32/"},{"title":"数据结构进阶实训七 链表，数组","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123判断两个链表是否相交？ - 给定两个单链表，判断两个单链表是否相交？ - 假设两个单链表均没有环 1.1 算法设计思想 如果链表有交点，那么他们一定有共同后缀，转化为共同后缀问题 1.2 源代码 12345678910111213141516171819202122LinkList commonSuffix(LinkList L1, LinkList L2){ Node *p, *q; int len1, len2; len1=listlen(L1); len2=listlen(L2); if(lastChar(L1) != lastChar(L2)){ return NULL; } else{ for(p=L1; len1&gt;len2; len1--){ p=p-&gt;next; } for(q=L2; len2&gt;len1; len2--){ q=q-&gt;next; } while(p-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }} 1.3 运行情况截图 题目2123456连续子数组的最大和。输入一个整形数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O（n） - 例如输入数组为（1、-2、3、10、-4、7、2、-5） - 和最大的子数组为（ 3、10、-4、7、2 ） - 该子数组的和为18 2.1 算法设计思想 将第一个元素默认最大值，往后遍历，并相加；如果此时和sum小于当前元素，就舍弃之前的元素；如果当前sum大于记录的max值，将max值改为sum；直到遍历结束数组所有元素 2.2 源代码 1234567891011121314151617181920212223242526int MaxSum(int a[], int size, int *s, int *e){ if(a == NULL || size == 0){ //非法输入 return -1; } int sum = 0;//初始和为0 int i = 0; int max = a[i];//最大值最初必为数组第一个元素 for(i; i &lt; size; i++){ sum = sum + a[i];//遍历一个元素，累加一次 if(sum &lt; a[i]){//如果加上当前元素之后的和比当前元素还小，则舍弃之前的元素，从当前元素开始累加 *s = i; sum = a[i]; } //如果加上当前元素之后的和比当前元素大 //说明可以继续累加 //如果当前和比最大值大，则更新最大值为当前和 //否则，不做更新 if(sum &gt; max){ *e = i; max = sum; } } return max;} 2.3 运行情况截图 题目31234数组中的逆序对。在数组中的两个数字，如果前面的数字大于后面的数字，则这两个数字组成一个逆序对。 - 输入一个数组，输出逆序对、并求出这个数组中出现的逆序对的总数 - 例如：数组中元素{7，5，6，4}，一共有5个逆序对分别是（7,6）、（7,5）（7,4）、（6,4）、（5,4） 3.1 算法设计思想 利用归并的思想； 在排序交换元素的时候就输出这两数，就是逆序对，并用计数器记录 3.2 源代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#define MAX 32767int merge(int *array, int p,int q,int r) { //归并array[p...q] 与 array[q+1...r] int tempSum=0; int n1 = q-p+1; int n2 = r-q; int* left = NULL; int* right = NULL; int i, j, k, l; left = ( int *)malloc(sizeof(int) * (n1+1)); right = ( int *)malloc(sizeof(int) * (n2+1)); for(i=0; i&lt;n1; i++) left[i] = array[p+i]; for(j=0; j&lt;n2; j++) right[j] = array[q+1+j]; left[n1] = MAX; //哨兵，避免检查每一部分是否为空 right[n2] = MAX; i=0; j=0; for(k=p; k&lt;=r; k++) { if(left[i] &lt;= right[j]) { array[k] = left[i]; i++; } else { if(array[k]&gt;right[j]){ l=k+1; for(l; l&lt;n1; l++) printf(\"(%d, %d)\\t\", array[l], right[j]); } printf(\"(%d, %d)\\t\", left[i], right[j]); array[k] = right[j]; j++; tempSum += n1 - i; } } return tempSum;}int mergeSort(int *array, int start, int end ) { int sum=0; if(start &lt; end) { int mid = (start + end) /2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid+1, end); sum += merge(array,start,mid,end); } return sum;} 3.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%83/"},{"title":"数据结构进阶实训六 多维数组","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123我们把只包含因子2,3,5的数称为丑数。求从小到大的第1500个丑数。 -例如：6,8都是丑数，但14不是丑数，因为它包含因子7.习惯上我们把1当做丑数。 -编写尽可能高效的算法。提示：（可以用空间换时间） 1.1 算法设计思想 准备一个数组，初始化第1个丑数的下标0，值1；然后1X2得到2，就是第2个丑数；然后1X3得到3，就是第3个丑数；不能直接1X5就是第4个丑数，因为还有一个丑数2X2=4；所以难点就是判断中间丑数，然后存储在数组中；往下循环；然后1X5得到5，就是第5个丑数 1.2 源代码 1234567891011121314151617181920212223int min_num(int n1,int n2,int n3){ int min=(n1&lt;n2)?n1:n2; min=(min&lt;n3)?min:n3; return min;}void solution(long int array[]){ int i; int t2=0;//记录M2的下标 int t3=0; int t5=0; for(i=1; i&lt;1500; i++){ while(array[t2]*2&lt;=array[i-1])//查找到新的M2，即乘以2后第一个大于M的数 t2++; while(array[t3]*3&lt;=array[i-1]) t3++; while(array[t5]*5&lt;=array[i-1]) t5++; int min=min_num(array[t2]*2, array[t3]*3, array[t5]*5); array[i]=min; }} 1.3 运行情况截图 题目21顺时针打印矩阵 2.1 算法设计思想 针对一般矩阵，先顺时针打印最外部一圈，那么这个矩阵去掉外部一圈，内部也是一个小矩阵；按照这样的规律，依次打印最外部一圈就可以了 2.2 源代码 1234567891011121314151617181920212223void PrintMatrix(int (*num)[4], int col, int row, int layer){ int i; int new_col = col - layer; int new_row = row - layer; for(i=layer; i&lt;new_col; i++){ // 从左至右打印第一行 printf(\"%d \", num[layer][i]); } if(new_row&gt;layer){ for(i=layer+1; i&lt;new_row; i++){ // 从上至下打印最右一列 printf(\"%d \", num[i][new_row-1]); } } if(new_col-1&gt;layer &amp;&amp; new_row-1&gt;layer){ for(i=new_col-2; i&gt;=layer; i--){ // 从右至左打印最后一行 printf(\"%d \", num[new_col-1][i]); } } if(new_col-1&gt;layer &amp;&amp; new_row-1&gt;layer+1){ for(i=new_row-2; i&gt;layer; i--){ // 从下至上打印最左一列 printf(\"%d \", num[i][layer]); } }} 2.3 运行情况截图 题目3123设二维数组B[0..m-1][0..n-1]的数据在行、列方向上都按从小到大的顺序有序，且x在B中存在。试设计一个算法，找出x在B数组中的位置i,j。要求比较的次数不超过m+n 3.1 算法设计思想 第一个循环（最多4次）：将要定位的元素与每一行的最后一个元素比较，如果小于等于最后一个元素就结束循环，此时的i值就是元素的行坐标；第二次循环（最多5次）：将要定位的元素与每一列的所有元素比较，如果小于等于这个值，就结束循环，此时的j值就是元素的列坐标 3.2 源代码 123456789int matrix[4][5] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}, i, j;for(i=0; i&lt;4; i++){ // 定位行坐标i if(obj &lt;= matrix[i][4]) break;}for(j=0; j&lt;5; j++){ // 定位列坐标j if(obj &lt;= matrix[i][j]) break;} 3.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AD/"},{"title":"数据结构进阶实训三 字符串，数组","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11234实现将一个字符串中的每个空格字符换成“%20”。 - 例如：输入“We are happy.”, 则输出: - “We%20are%happy.”要求在时间复杂度O（n）,空间复杂度O（1）下完成。假设存放字符串的数组空间足够大。 1.1 算法设计思想 前提假设存放字符串的数组空间足够大；第一次，遍历，计算出字符串长度，和替换后字符串长度；i从原字符串末尾出发，j从新字符串末尾出发，遇到空格就替换为“%20”。 1.2 源代码 12345678910111213141516171819202122232425char str[100] = \"We are happy.\"; // 假设空间足够大int length=0, blank=0, i, j;while(str[length]!='\\0'){ printf(\"%c\", str[length]); if(str[length]==' '){ blank++; } length++;}length += 2 * blank;i=length-2*blank;j=length;while(i&gt;=0 &amp;&amp; j&gt;i){ if(str[i]==' '){ str[j--]='0'; str[j--]='2'; str[j--]='%'; } else{ str[j--]=str[i]; } i--;} 1.3 运行情况截图 题目21234数组中出现次数超过一半的数字已知数组中有一个数字其出现的次数超过了数组长度的一半，请找出这个数组。要求： - 高效 - 分析时空效率 2.1 算法设计思想 一个数字出现的次数超过了数组的一半，那么将其排序后，称为有序数列，中间的元素即为所求。 2.2 源代码 1234567891011121314151617void sort(int a[], int length){ int i, j, min, temp; for(i=0; i&lt;length; i++){ min=i; for(j=i; j&lt;length; j++){ if(a[min]&gt;a[j]) min=j; } if(min!=i){ temp=a[min]; a[min]=a[i]; a[i]=temp; } }}printf(\"%d\\n\", array[length/2]); 2.3 运行情况截图 题目31234已知数组中的n个正数，找出其中最小的k个数。要求： - 高效 - 分析时空效率 3.1 算法设计思想 先将数组从小到大排序；即可顺序打印出前k个数，即为数组中最小的k个数。时间复杂度为O(n)，空间复杂度为O(1)。 3.2 源代码 12345678910111213141516171819202122void sort(int a[], int length){ int i, j, min, temp; for(i=0; i&lt;length; i++){ min=i; for(j=i; j&lt;length; j++){ if(a[min]&gt;a[j]) min=j; } if(min!=i){ temp=a[min]; a[min]=a[i]; a[i]=temp; } }}printf(\"\\nEnter the value k and output the smallest k number among them, k = \");scanf(\"%d\", &amp;k);printf(\"The smallest %d number in the array is: \\n\", k);for(i=0; i&lt;k; i++){ printf(\"%d\\t\", array[i]);} 3.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%89/"},{"title":"数据结构进阶实训四 链表","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11给定一个单链表L，L为头指针，判断该链表内是否局部存在环？ 1.1 算法设计思想 使用快慢指针判断单链表是否存在环。使用slow、fast 2个指针，slow慢指针每次向前走1步，fast快指针每次向前走2步，若存在环的话，必定存在某个时候 slow = fast 快慢指针相遇。list 带头结点的单链表返回值 &gt;0:存在环返回环的位置 0:不存在环 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657typedef struct Node { int data; struct Node *next;}Node, *LinkList;void InitLinkList(LinkList *L) { *L = (LinkList)malloc(sizeof(Node)); (*L)-&gt;next = NULL; Node *r=*L, *s, *temp; int i=0; while(i&lt;10){ s=(Node*)malloc(sizeof(Node)); s-&gt;data=i; r-&gt;next=s; s-&gt;next=NULL; if(i==4){ // 记住一个元素,以助后面成环 temp=r; } r=s; i++; } r-&gt;next=temp; // 成环}int IsLoopLinkList(LinkList list){ //空指针 if(list == NULL){ return 0; } //只有头结点,没有元素 if(list-&gt;next == NULL){ return 0; } Node* slow = list; Node* fast = list; int loc = 0; while (1){ if(fast-&gt;next == NULL){ //快指针 到底链表尾结点说明 没有环，此时slow 指向中间结点 return 0; } else{ if (fast-&gt;next != NULL &amp;&amp; fast-&gt;next-&gt;next != NULL){ fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; } else{ fast = fast-&gt;next; } } //某个时刻 快慢指针相遇，说明此处存在环！ if(slow == fast){ return 1; } } return 0;} 1.3 运行情况截图 题目21234找到单链表中倒数第k个结点。找出解决方法要求：尽可能高效例如：一个链表有6个结点，（1,2,3,4,5,6）这个链表的倒数第3个结点是：值为4的结点 2.1 算法设计思想 先遍历获得链表长度listlen(L)；然后计算得出倒数第k个节点的正数位置，也就是listlen(L)-k+1；遍历到listlen(L)-k+1的节点，然后输出 2.2 源代码 12345678910111213141516/* 求链表长度 */int listlen(LinkList L){ int len=0; Node *head=L; while(head-&gt;next!=NULL){ len++; head=head-&gt;next; } return len;}// mainscanf(\"%d\", &amp;k);for(i=0; i&lt;listlen(L)-k+1; i++){ p=p-&gt;next;} 2.3 运行情况截图 题目312在O(1)时间删除单链表结点；给定单链表L及其中一个结点地址p,定义一个函数实现在O(1)时间删除该结点。 3.1 算法设计思想 将节点p的下一个节点的值赋给p；p的后继指向p的后继的后继；然后free掉p的后继 3.2 源代码 12345678910111213141516171819202122232425void InitLinkList(LinkList *L, LinkList *temp) { *L = (LinkList)malloc(sizeof(Node)); (*L)-&gt;next = NULL; Node *r=*L, *s; int i=0; while(i&lt;10){ s=(Node*)malloc(sizeof(Node)); s-&gt;data=i; r-&gt;next=s; s-&gt;next=NULL; if(i==5){ // 记住一个节点地址 *temp=r; } r=s; i++; }}// mainInitLinkList(&amp;L, &amp;p);s=p-&gt;next;p-&gt;data = s-&gt;data;p-&gt;next=s-&gt;next;free(s); 3.3 运行情况截图 题目4123假定用带头结点的单链表保存单词，当两个单词有相同的后缀时，则可共享相同的后缀存储空间，例如：loading和being。 - 设计一个高效的算法，找出str1和str2的共同后缀的起始位置。（可能有也可能没有。） - 分析算法的时空效率 4.1 算法设计思想 分别获得链表str1和str2的长度；移动长度较长的链表的头指针，使得两指针的起始位置相同；然后同时往后移动，遇到相同地址的节点即为共同后缀的起始位置 4.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657LinkList reverse(LinkList L){ if(L-&gt;next == NULL || L-&gt;next-&gt;next == NULL) { return L; /*链表为空或只有一个元素则直接返回*/ } Node *r, *p = L-&gt;next, *q = L-&gt;next-&gt;next; while(q != NULL){ r = q-&gt;next; q-&gt;next = p; p = q; q = r; } /*此时q指向原始链表最后一个元素，也是逆转后的链表的表头元素*/ L-&gt;next-&gt;next = NULL; /*设置链表尾*/ L-&gt;next = p; /*调整链表头*/ return L;}LinkList commonSuffix1(LinkList L1, LinkList L2){ Node *p, *q; int len1, len2; len1=listlen(L1); len2=listlen(L2); if(lastNode(L1) != lastNode(L2)){ return NULL; } else{ for(p=L1; len1&gt;len2; len1--){ p=p-&gt;next; } for(q=L2; len2&gt;len1; len2--){ q=q-&gt;next; } while(p-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }}LinkList commonSuffix2(LinkList L1, LinkList L2){ Node *p=L1, *q=L2; if(L1-&gt;next == NULL || L2-&gt;next == NULL){ // 空，直接返回 return NULL; } // else if(L1-&gt;next != L2-&gt;next){ // 这里的第一个元素,是原来的最后一个元素 // return NULL; // 不相等直接返回 // } else{ while(p-&gt;next != NULL &amp;&amp; q-&gt;next != NULL &amp;&amp; p-&gt;next != q-&gt;next){ p=p-&gt;next; q=q-&gt;next; } return p-&gt;next; }} 4.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%9B%9B/"},{"title":"数据结构进阶实训五 栈与递归","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123假设算术表达式只包含“+”、“-”、“*”、“/”，正整数和括号的合法数学表达式。根据算符优先关系， - 将算术表达式的中缀表示法转换为后缀表示法。 - 对得到的后缀表达式进行求值 1.1 算法设计思想 1.1.1 转后缀表达式： 从左到右扫描每一个字符。如果扫描到的字符是操作数（如a、b等），就直接输出这些操作数。 如果扫描到的字符是一个操作符，分三种情况：（1）如果堆栈是空的，直接将操作符存储到堆栈中（pushCStack it）（2）如果该操作符的优先级大于堆栈出口的操作符，就直接将操作符存储到堆栈中（pushCStack it）（3）如果该操作符的优先级低于堆栈出口的操作符，就将堆栈出口的操作符导出（popCStack it）,直到该操作符的优先级大于堆栈顶端的操作符。将扫描到的操作符导入到堆栈中（pushCStack） 如果遇到的操作符是左括号”（”，就直接将该操作符输出到堆栈当中。该操作符只有在遇到右括号“ )”的时候移除。这是一个特殊符号该特殊处理。 如果扫描到的操作符是右括号“ ”，将堆栈中的操作符导出（popCStack）到output中输出，直到遇见左括号“（”。将堆栈中的左括号移出堆栈（popCStack ）。继续扫描下一个字符。 如果输入的中缀表达式已经扫描完了，但是堆栈中仍然存在操作符的时候，我们应该讲堆栈中的操作符导出并输入到output 当中。 1.1.3 求值 后缀表达式求值的算法是:遍历后缀表达式，如果遇到运算数，那么运算数入栈如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数，计算运算结果，然后将结果入栈最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案 1.2 源代码define StackSize 50#define INFINITY 32768// 定义运算符栈typedef struct{ char elem[StackSize]; int top;}SeqCStack;void InitCStack(SeqCStack *S){ S-&gt;top=-1;}void pushCStack(SeqCStack *S, char operator){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;elem[S-&gt;top] = operator; return ; }}void popCStack(SeqCStack *S, char *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;elem[S-&gt;top]; S-&gt;top--; return ; }}char getCStackTop(SeqCStack S){ if(S.top == -1){ // 栈空 return '#'; } else{ return S.elem[S.top]; }}void traverse(SeqCStack S){ int i=0; while(i &lt;= S.top){ printf(\"%c \", S.elem[i++]); } printf(\"\\n\");}// 定义运算数栈typedef struct{ int data[StackSize]; int top;}SeqNStack;void InitNStack(SeqNStack *S){ S-&gt;top=-1;}void pushNStack(SeqNStack *S, int num){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;data[S-&gt;top] = num; return ; }}void popNStack(SeqNStack *S, int *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;data[S-&gt;top]; S-&gt;top--; return ; }}int getNStackTop(SeqNStack S){ if(S.top == -1){ // 栈空 return INFINITY; } else{ return S.data[S.top]; }}char compare(char operator, char top){ if(top == '#') // 空栈，操作符直接进栈 return '&gt;'; else if(operator==')' &amp;&amp; top=='(') return '='; else if(top=='(') return '&gt;'; else if(operator=='+') // 如果操作符是'+', 无论栈顶元素是什么, '+'优先级都小 return '&lt;'; else if(operator=='-') return '&lt;'; else if(operator=='*' &amp;&amp; top=='+') return '&gt;'; else if(operator=='*' &amp;&amp; top=='-') return '&gt;'; else if(operator=='*' &amp;&amp; top=='*') return '&lt;'; else if(operator=='*' &amp;&amp; top=='/') return '&lt;'; else if(operator=='*' &amp;&amp; top=='(') return '&lt;'; else if(operator=='/' &amp;&amp; top=='+') return '&gt;'; else if(operator=='/' &amp;&amp; top=='-') return '&gt;'; else if(operator=='/' &amp;&amp; top=='*') return '&lt;'; else if(operator=='/' &amp;&amp; top=='(') return '&lt;'; else if(operator=='(') return '&gt;'; else if(operator==')') return '&lt;';}int caculate(int left, int right, char c){ int re = 0; switch (c){ case '+': re = left + right; break; case '-': re = left - right; break; case '*': re = left * right; break; case '/': re = left / right; break; default: break; } return re;}void main(){ SeqCStack OS, SuffixExp; SeqNStack NS; /* 初始化运算符栈 */ InitCStack(&amp;OS); /* 初始化运算数栈 */ InitNStack(&amp;NS); /* 初始后缀表达式栈 */ InitCStack(&amp;SuffixExp); char exp[] = {'5', '+', '2', '*', '(', '1', '+', '6', ')', '-', '8', '/', '2', '\\0'}; printf(\"Infix expression is: %s\\n\", exp); char suffixstr[50], temp; int i = 0, tempNum; while (exp[i]!='\\0'){ if(isdigit(exp[i])){ // 如果是数字直接进后缀表达式栈 pushCStack(&amp;SuffixExp, exp[i]); // printf(\"num------%c\\n\", exp[i]); i++; } else{ // printf(\"char------\\n\"); // printf(\"compare----%c\\n\", compare(exp[i], getCStackTop(OS))); switch(compare(exp[i], getCStackTop(OS))){ case '&gt;': pushCStack(&amp;OS, exp[i]); // printf(\"case1 &gt;---%c\\n\", exp[i]); i++; break; case '=': popCStack(&amp;OS, &amp;temp); // 脱括号 // printf(\"case2 =---%c\\n\", temp); i++; break; case '&lt;': while(compare(exp[i], getCStackTop(OS))=='&lt;'){ // printf(\"case3 &lt;---%c\\n\", exp[i]); // printf(\"case3 getCStackTop %c\\n\", getCStackTop(OS)); popCStack(&amp;OS, &amp;temp); // printf(\"case3 after getCStackTop %c\\n\", getCStackTop(OS)); pushCStack(&amp;SuffixExp, temp); } // if(exp[i]!=')'){i++;} break; } } } /* 最后把栈中剩余的运算符依次弹栈打印 */ while(getCStackTop(OS)!='#'){ popCStack(&amp;OS, &amp;temp); pushCStack(&amp;SuffixExp, temp); } traverse(SuffixExp); for(i=SuffixExp.top; i&gt;=0; i--){ popCStack(&amp;SuffixExp, &amp;temp); suffixstr[i] = temp; } printf(\"Infix expression to suffix expression is: %s\\n\", suffixstr); /* 后缀表达式求值的算法是: 遍历后缀表达式， 如果遇到运算数，那么运算数入栈 如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数， 计算运算结果，然后将结果入栈。 最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案 */ char *p=suffixstr; while (*p != '\\0'){ if (isdigit(*p)){ pushNStack(&amp;NS, *p-'0'); } else{ popNStack(&amp;NS, &amp;tempNum); int rightNum = tempNum; // printf(\"rightNum:::%d\\n\", rightNum); // free(temp); popNStack(&amp;NS, &amp;tempNum); int leftNum = tempNum; // free(temp); int result = caculate(leftNum, rightNum, *p); // printf(\"caculate result----%d\\n\", result); pushNStack(&amp;NS, result); } p++; } printf(\"result: %d\\n\", getNStackTop(NS)); system(\"pause\");} 1.3 运行情况截图 题目21设L为带头结点的单链表，实现从尾到头反向输出链表中每个结点的值。（递归思想） 2.1 算法设计思想 递归语句在打印之前就可以了 2.2 源代码 123456void printReversely(LinkList L){ if(L-&gt;next!=NULL){ printReversely(L-&gt;next); printf(\"%c \", L-&gt;next-&gt;data); }} 2.3 运行情况截图 题目312345一只青蛙一次可以跳上1级台阶，也可以跳上2级。编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？ - 若条件改为： 一只青蛙一次可以跳上1级台阶，也可以跳上2级，也可以跳上3级，...，也可以跳上n级。 编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？ 3.1 算法设计思想 Q： 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 A： f(n) = f(n-1)+f(n-2)+…+f(1)f(n-1) = f(n-2)+ f(n-3)…+f(1)两式相减，得到f(n) = 2*f(n-1) 3.2 源代码 1234567891011121314151617181920int Jump(int i, int n) { //表示当前台阶数大于总台阶数，很显然这种情况不符合，走不通，记为 0 if (i &gt; n) { return 0; } //表示当前台阶数正好等于总的台阶数，那么这种情况符合，记为 1 if (i == n) { return 1; } return Jump(i + 1, n) + Jump(i + 2, n);}int JumpN(int num){ if (num == 1){ return 1; } else{ return 2*JumpN(num-1); }} 3.3 运行情况截图 题目4123用一个2X1的小矩形横着或竖着去覆盖更大的矩形。如下图 - 具体：用8个2X1小矩形横着或竖着去覆盖2X8的大矩形，覆盖方法有多少种？ - 编写代码求用2X1小矩形横着或竖着去覆盖2Xn的大矩形。输出总共有多少种覆盖方法 4.1 算法设计思想 当n=1时，覆盖方法有1种；当n=2时，覆盖方法有2种；当n=3时，覆盖方法有2+1=3种；当n=4时，覆盖方法有3+2=5种；按照规律就转化成了斐波那契数列问题 4.2 源代码 1234567891011int Cover(int n){ if(n&lt;=0){ return 0; } else if(n==1||n==2){ return n; } else{ return Cover(n-1) + Cover(n-2); }} 4.3 运行情况截图 题目5123借助自定义栈以非递归形式求解汉诺塔问题（n,a,b,c）；即将n个盘子从起始塔座a通过辅助塔座b移动到目标塔座c,并保证每个移动符合汉诺塔问题的要求 5.1 算法设计思想 利用递归的思想，用栈来处理；比如n=3时，转化的问题是：先要移动A塔座上面2个盘子到B塔座，这个操作进栈后续处理；然后移动A塔座上面最后一个大盘子到C塔座，这个操作进栈后续处理；最后再移动B塔座上最后两个盘子到C塔座；一直访问栈，如果栈顶处理的盘子数不是1，就在把操作细分，进栈；直到盘子数为1，移动盘子；直到栈为空 5.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182// 定义汉诺塔数据typedef struct{ char A; char B; char C; int n;}HanoiData;// 定义栈typedef struct{ HanoiData elem[StackSize]; int top;}SeqStack;void InitStack(SeqStack *S){ S-&gt;top=-1;}void push(SeqStack *S, HanoiData hd){ if(S-&gt;top == StackSize - 1){ // 栈满 return ; } else{ S-&gt;top++; S-&gt;elem[S-&gt;top] = hd; return ; }}void pop(SeqStack *S, HanoiData *e){ if(S-&gt;top == -1){ // 栈空 return ; } else{ *e = S-&gt;elem[S-&gt;top]; S-&gt;top--; return ; }}// HanoiData getTop(SeqStack S){// if(S.top == -1){ // 栈空// return ;// }// else{// return S.elem[S.top];// }// }void move1(int n,char A,char B,char C){ if(n==1){ printf(\"%c--&gt;%c\\n\",A,C); } else{ move1(n-1,A,C,B); move1(1,A,B,C); move1(n-1,B,A,C); } }void hanoi(int n){ SeqStack S; InitStack(&amp;S); HanoiData h = {'A', 'B', 'C', n}; push(&amp;S,h);//初始栈 // hanoi_data x;//用来保存出栈的n,A,B,C while(S.top!=-1){ pop(&amp;S, &amp;h);//出栈并用x带回 if(h.n==1){ printf(\"%c--&gt;%c\\n\",h.A,h.C);//打印出移动方案 } else{ HanoiData h1 = {h.B, h.A, h.C, h.n-1}; push(&amp;S,h1); HanoiData h2 = {h.A, h.B, h.C, 1}; push(&amp;S,h2); HanoiData h3 = {h.A, h.C, h.B, h.n-1}; push(&amp;S,h3); } }} 5.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%94/"},{"title":"数据结构进阶实训八 数组，规律","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目1123荷兰国旗现有n个红蓝白三种不同颜色的小球，乱序排列在一起；请通过两两交换任意两个球，使得从左到右的球依次：红球、白球、蓝球 1.1 算法设计思想 把题目理解为这样的问题：一个循环，把红色球和剩余的球交换，那么红球就排序好了，就是两两交换问题；另一个循环，把剩下没排序好的白球和蓝球也排序好，也是两两交换；程序的时间复杂度取决于长度取决于第一个循环，O(n) 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#define RED 0#define WHITE 1#define BLUE 2void swap(int *p, int *q){ int temp; temp = *p; *p = *q; *q = temp;}void sort(int array[], int start, int end, int collor){ int i=start, j=end; while(i &lt; j){ while(array[i]==collor){ i++; } while(array[j]!=collor){ j--; } swap(&amp;array[i], &amp;array[j]); i++; }}void main(){ int ball[20]={1,2,2,0,1,0,1,2,0,0,0,1,2,1,0,1,2,0,0,1}; int i, num_red=0; printf(\"There are 20 red, blue and white balls in three different colors, \\ arranged together in disorder:\\n\"); for(i=0; i&lt;20; i++){ if(ball[i]==RED){ num_red++; printf(\"Red \"); } if(ball[i]==WHITE) printf(\"White \"); if(ball[i]==BLUE) printf(\"Blue \"); } printf(\"\\n\"); sort(ball, 0, 20, RED); // 把红色球排好序 sort(ball, num_red, 20, WHITE); // 把白色球排好序 printf(\"\\nAfter sorting: \\n\"); for(i=0; i&lt;20; i++){ if(ball[i]==RED) printf(\"Red \"); if(ball[i]==WHITE) printf(\"White \"); if(ball[i]==BLUE) printf(\"Blue \"); } printf(\"\\n\");} 1.3 运行情况截图 题目21234完美洗牌算法有一个长度为2n的数组{a1,a2,a3,…an,b1,b2,b3, …bn},希望“排序”后，变为{a1, b1, a2, b2, a3, b3,…an, bn}。要求：尽可能高效。能否在时间复杂度为O(n)，空间复杂度为O（1）的解法 2.1 算法设计思想 依次考察每个位置的变化规律a1: 0 -&gt; 不变a2: 1 -&gt; 2a3: 2 -&gt; 4a4: 3 -&gt; 6…an: n-1 -&gt; 2n-2b1: n -&gt; 1b2: n+1 -&gt; 3b3: n+2 -&gt; 5…bn-1: 2n-2 -&gt; 2n-3bn: 2n-1 -&gt; 不变可以得出下标的变化规律：j=(i * 2) % (n2 -1)所以将值赋给辅助数组即可 2.2 源代码 1234567891011void perfect_shuffle(char *a[],int n) { int n2 = n * 2, i, j; char *b[20]; for (i = 1; i &lt; n2-1; i++) { j=(i * 2) % (n2 -1); b[j] = a[i]; } for (i = 1; i &lt; n2-1; i++) { a[i] = b[i]; }} 2.3 运行情况截图 题目312345买票找零问题在一场激烈的球赛开始之前，售票工作正在紧张地进行中，每张球票为50元。现有2n个人排队购票，其中有n个人手持50元的钞票，另外的n个人手持100元的钞票，假设开始售票时，售票处没有零钱。要求：问这2n个人有多少种排队方式，不至于使售票处出现找不开钱的局面呢 3.1 算法设计思想 找规律递推的方法；要求持50元n人，100元n人，多少种排队方式，那么排在最后的一定是持100元的人，所以和持50元n人，100元n-1人的排队方式相同；发现规律，持50元n-1人，100元n-1人和持50元n-1人，100元n-2人的排队方式相同；所以这就可以从最小的1开始求了，然后累加到n，得到最后结果 3.2 源代码 123456789101112131415161718#define N 100int arrange(int n){ int array[N][N]; int i, j; // 当100元和50元人数不相等，100元0人，则只有1中解决方案 for(i=0; i&lt;n; i++){ array[i][0]=1; } // 若50元人数小于100元人数，则没有解决方案 // 则二维数组的上三角的值都为0，不用初始化赋值 // 开始递推，填满下三角矩阵数组 for(i=1; i&lt;=n; i++){ for(j=0; j&lt;=i; j++) array[i][j]=array[i-1][j]+array[i][j-1]; } return array[n][n];} 3.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AB/"},{"title":"数据结构进阶实训二 顺序表","text":"Data structure advanced training course notes and algorithm exercises 数据结构进阶实训课程笔记和算法练习 Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目11234输入数字n,按顺序打印输出从1到最大的n位十进制数。比如输入3，则打印出1,2,3，一直到最大的3位数999。 - 要考虑若n很大，我们求最大的n位数用int 或long long 也可能会溢出； - 考虑大数问题； - 提示：关于大数的表示和存储：用字符数组(取值为数字型字符)来表达大数 1.1 算法设计思想 这题主要解决大数问题。我用字符串来解决大数问题。那么字符串中所有字符都是数字；首先动态分配字符串空间为（n+1）*char，字符串最后要有一个结束符’\\0’，初始化其他位为0；然后每一次为字符串表示的数字加1，再打印出来；方法print()会遍历字符串，直到遇到第一个非0字符后，打印后面的字符；关键方法printRecursively()，每10个数，对具体位数加1，然后进位，递归。 1.2 源代码 1234567891011121314151617181920212223void printRecursively(char *number, int n, int index){ int i; if(index == n){ print(number, n); return; } for(i = 0; i&lt;10; i++){ number[index] = i + '0'; // printf(\"NUMBER: %s\\n\", number); printRecursively(number, n, index + 1); }}void printToMaxOfNDigits(int n){ if (n &lt;= 0) return; char *number = (char *)malloc((n+1)*sizeof(char)); memset(number, '0', (n+1)*sizeof(char)); // 在一段内存块中填充某个给定的值,初始化为0 number[n] = '\\0'; printRecursively(number, n, 0); free(number);} 1.3 运行情况截图 题目2123456已知一个顺序表L（整数）实现一个函数将调整顺序表中的数字顺序，使得所有奇数位于表L的前半部分，所有偶数位于数组的后半部分。 - 如果把题目改成把顺序表中的数按照大小分为两部分，负数都在非负数的前面，该怎么做？再定义一个函数？？ - 或者再改为：把顺序表中的数分为两部分， 能被3整除的数放在前面，不能被3整除的数放在后面；再定义一个函数？？ - 是否有更好的办法？增加代码的可扩展性。 2.1 算法设计思想 定义一个规则rule方法，根据用户输入，确定排序规则，增加代码复用性；三种排序规则思想一样：（1）start=0从顺序表头开始往后，end从尾开始往前，start遇到偶数停止，end遇到奇数停止，交换下标为start和下标为end的元素，然后继续前进；（2）start=0从顺序表头开始往后，end从尾开始往前，start遇到正数停止，end遇到负数停止，交换下标为start和下标为end的元素，然后继续前进；（3）start=0从顺序表头开始往后，end从尾开始往前，start遇到不能被3整除的数停止，end遇到能被3整除的数停止，交换下标为start和下标为end的元素，然后继续前进。 2.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114/*宏定义*/#define MAXSIZE 30//宏定义布尔类型#define BOOL int#define TRUE 1#define FALSE 0typedef int ElemType; /*顺序表中存放整型元素*/typedef struct{ ElemType elem[MAXSIZE]; int last;}SeqList;/*函数声明*/void initList(SeqList *L);void printList(SeqList L);BOOL rule(int elem, int select);void sortList(SeqList *L, SeqList *L1, int select);void main(){ SeqList La, Lb; Lb.last=-1; // 初始化Lb int select; initList(&amp;La); // 给出一个顺序表La printf(\"Give a sequence table: \\nLa = \"); printList(La); /* 给出下列几种排序规则: 奇数在前，偶数在后; 负数在前，非负数在后; 能被3整除的数在前面，不能被3整除的数在后面. */ printf(\"\\nGive the following sorting rules: \\ \\n1.Odd number first, even number behind;\\ \\n2.Negative numbers first, non-negative numbers last;\\ \\n3.Numbers divisible by 3 are in the front, \\ and numbers that are not divisible by 3 are in the back.\\ \\nPlease select the sorting rule you want and enter the rule number:\"); scanf(\"%d\", &amp;select); while(select != 1 &amp;&amp; select != 2 &amp;&amp; select != 3){ printf(\"Please reselect: \"); scanf(\"%d\", &amp;select); } sortList(&amp;La, &amp;Lb, select); printf(\"The adjusted sequence table is: \\n\"); printList(Lb); system(\"pause\");}/*函数定义*/void initList(SeqList *L){ L-&gt;last=-1; int i=0; for(i; i&lt;MAXSIZE; i++){ L-&gt;elem[i]=rand()%100 - 50; } L-&gt;last=MAXSIZE-1;}void printList(SeqList L){ int i; printf(\"(\"); for(i=0; i&lt;=L.last; i++) printf(\"%d \", L.elem[i]); printf(\")\\n\");}void sortList(SeqList *L, SeqList *L1, int select){ int i=0, end=L-&gt;last, start=0; for(i; i&lt;=L-&gt;last; i++){ if( rule(L-&gt;elem[i], select) == TRUE){ // 偶数尾插法 L1-&gt;elem[end] = L-&gt;elem[i]; end--; } else{ // 奇数前插法 L1-&gt;elem[start] = L-&gt;elem[i]; start++; } } L1-&gt;last=L-&gt;last;}BOOL rule(int elem, int select){ switch (select) { case 1: if(elem%2==0) return TRUE; return FALSE; break; case 2: if(elem&gt;=0) return TRUE; return FALSE; break; case 3: if(elem%3!=0) return TRUE; return FALSE; break; default: return FALSE; break; }} 2.3 运行情况截图 题目31给定一个整数数组，删除相邻的重复数字，结果数组中不能存在任何相邻的重复数字。 3.1 算法设计思想 将数组存入顺序表；遍历顺序表，将下标为i和下标i+1的元素比较如果相等，进行判断：如果下标为i和下标i+2的元素相等，所有元素往前移动1位；如果下标为i和下标i+2的元素不相等，所有元素往前移动2位；持续上述循环，结束的标志是遍历顺序表，没有相邻相同元素就结束循环。 3.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839while(flag==1){ if(L.last==0) // 代表顺序表中只有一个元素 break; if(L.elem[i]==L.elem[j]){ if(L.elem[i]==L.elem[j+1]){ // 判断是否3数相连 for(k=i; k&lt;L.last; k++){ L.elem[k]=L.elem[k+1]; // 所有元素前移1位 } L.last = L.last-1; } else{ // 不是3数相连，那就是2数相连 for(k=i; k&lt;L.last-1; k++){ L.elem[k]=L.elem[k+2]; // 所有元素前移2位 } L.last = L.last-2; if(j&gt;L.last){ i=0; j=1; } } } if(j==L.last){ for(k=0; k&lt;L.last; k++){ if(L.elem[k]==L.elem[k+1]){ flag=1; break; } else flag=0; } i=-1; j=0; } i++; j++;} 3.3 运行情况截图 题目4123已知顺序表L（数组表示即可），编写一个时间复杂度O(n)，空间复杂度为O（1）的算法将表L中所有值为x 的元素删除。 - 表中元素无序。 4.1 算法设计思想 遍历顺序表，将顺序表a的元素赋给顺序表b，遇到要删除的元素就跳过。 4.2 源代码 12345678910111213void deleteList(SeqList *LA, SeqList *LB, int n){ int count=0, i=0, j=0; for(i; i&lt;LA-&gt;last+1; i++){ if(LA-&gt;elem[i]==n){ count++; // 记录删除元素的个数 } else{ LB-&gt;elem[j] = LA-&gt;elem[i]; j++; } } LB-&gt;last = LA-&gt;last-count;} 4.3 运行情况截图 题目51234567将n 个整数存入顺序表L，实现将L中的整数序列循环左移p(0&lt;p&lt;n)个位置，即将L中的数据序列(x0, x1, ... , xp-1, xp, xp+1, ... , xn-1)变换为(xp, xp+1, ... , xn-1, x0, x1, ... , xp-1) - 类似的实现循环右移K位； - 要求：时间复杂度为O(n)。空间复杂度为S(1)。 5.1 算法设计思想 将下标0到p的元素逆置；将下标p+1到n 的元素逆置；最后将整个顺序表逆置得到最终结果。 5.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960void main(){ SeqList L = {{1,2,3,4,5,6,7,8,9,10},10}; int n; int temp; char direction; printf(\"Give a sequence table: \\n\"); printlist(L); printf(\"Please enter a positive integer n to cycle through the sequence: \"); scanf(\"%d\", &amp;n); getchar(); // 吃掉回车 printf(\"Please select the direction of movement (L for left, R for right): \"); while(direction!='R' &amp;&amp; direction!='L'){ scanf(\"%c\", &amp;direction); getchar(); if(direction=='L'){ n = n%L.last; } else if(direction=='R'){ // 右移n格就是左移L.last-n格 n = L.last - n%L.last; } else{ printf(\"Wrong input, please re-enter: \"); } } int i = 0, j = n-1; //将子表(X0,X1...,Xp-1)逆序为(Xp-1,...,X1,X0) reverse(&amp;L, i, j); //将子表(Xp,Xp+1,...,Xn-1)逆序为(Xn-1,...,Xp+1,Xp) i = n; j = L.last-1; reverse(&amp;L, i, j); //将整张表(Xp-1,...,X1,X0,Xn-1,...,Xp+1,Xp)逆序为(Xp,Xp+1,...,Xn-1,X0,X1...,Xp-1) i = 0; j = L.last-1; reverse(&amp;L, i, j); printf(\"The sequence table after moving is: \\n\"); printlist(L); system(\"pause\");}void reverse(SeqList *L,int i, int j){ int temp; while(i &lt; j){ temp = L-&gt;elem[i]; L-&gt;elem[i] = L-&gt;elem[j]; L-&gt;elem[j] = temp; ++i; --j; }} 5.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%8C/"},{"title":"数据结构进阶实训九 二叉树的应用","text":"Data structure advanced training course notes and algorithm exercises Source Code: https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining 题目112345建二叉树二叉链表存储 - 扩展的先序序列（之前采用的方法） 此次要求：已知两个遍历序列建二叉树（先/中，后/中） - 其先、中序遍历序列分别存放在两个数组pre[]和inorder[]中。 - 其中、后序遍历序列分别存放在两个数组inorder[]和post中。 1.1 算法设计思想 两种建树的思想相同，都是分治的思想； 通过前序遍历，第一个元素就是树的根节点； 然后在重建左子树，找到左子树的根节点，重建右子树，找到右 子树的根节点，递归下去； 中序+后续遍历重建树也是如此； 后续序列的最后一个元素就是树的根节点。 1.2 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;stdio.h&gt;#include&lt;Windows.h&gt;typedef char ElemType;typedef struct Node{ ElemType elem; struct Node *LChild; struct Node *RChild;}BiTNode, *BiTree;// 前序+中序重建二叉树void ReBuildByPreAndInOrder(char *prelist, char *inlist, int len, BiTree *bt){ if(!prelist || !inlist || len&lt;=0 ) //空树 return; int i; // 找到根结点在中序遍历中的位置 for(i = 0; i &lt; len; i++){ if(inlist[i] == prelist[0]) break; } if(i&gt;=len) return; // 初始化根结点 *bt = (BiTNode*)malloc(sizeof(BiTNode)); if(!bt) // 申请失败 return; (*bt)-&gt;LChild = (*bt)-&gt;RChild = NULL; (*bt)-&gt;elem = prelist[0]; // 重建左子树 ReBuildByPreAndInOrder(prelist+1, inlist, i, &amp;(*bt)-&gt;LChild); // 重建右子树 ReBuildByPreAndInOrder(prelist+i+1, inlist+i+1, len-i-1, &amp;(*bt)-&gt;RChild);}// 中序+后序重建二叉树void ReBuildByInAndPostOrder(char *inlist,char *postlist, int len, BiTree *bt){ if(!inlist || !postlist || len&lt;=0 ) //空树 return; int i; // 找到根结点在中序遍历中的位置 for(i = 0; i &lt; len; i++){ if(inlist[i] == postlist[len-1]) break; } if(i&gt;=len) return; // 初始化根结点 *bt = (BiTNode*)malloc(sizeof(BiTNode)); if(!bt) return; (*bt)-&gt;LChild = (*bt)-&gt;RChild = NULL; (*bt)-&gt;elem = postlist[len-1]; //重建左子树 ReBuildByInAndPostOrder(inlist, postlist, i, &amp;(*bt)-&gt;LChild); //重建右子树 ReBuildByInAndPostOrder(inlist+i+1, postlist+i, len-i-1, &amp;(*bt)-&gt;RChild);}void PrintTree(BiTree bt,int nLayer){ int i; if(bt==NULL) return; PrintTree(bt-&gt;RChild,nLayer+1); for(i=0;i&lt;nLayer;i++) printf(\" \"); printf(\"%c\\n\", bt-&gt;elem); PrintTree(bt-&gt;LChild,nLayer+1);}void main(){ char pre[7]={'A', 'B', 'D', 'E', 'C', 'F', 'G'}, inorder1[7] = {'D', 'B', 'E', 'A', 'F', 'C', 'G'}, inorder2[9] = {'G', 'D', 'H', 'B', 'A', 'E', 'C', 'I', 'F'}, post[9] = {'G', 'H', 'D', 'B', 'E', 'I', 'F', 'C', 'A'}; int i=0; /* 前序+中序重建二叉树 */ printf(\"Give the preorder and midorder traversal of a binary tree: \\nPreorder = \"); for(i=0; i&lt;7; i++){ printf(\"%c \", pre[i]); } printf(\"\\nMidorder = \"); for(i=0; i&lt;7; i++){ printf(\"%c \", inorder1[i]); } BiTree T1=NULL; ReBuildByPreAndInOrder(pre, inorder1, 7, &amp;T1); printf(\"\\nThe binary tree constructed by two traversal sequences is: \\n\"); PrintTree(T1, 1); /* 前序+中序重建二叉树 */ /* 中序+后序重建二叉树 */ printf(\"Give the midorder and postorder traversal of a binary tree: \\nMidorder = \"); for(i=0; i&lt;9; i++){ printf(\"%c \", inorder2[i]); } printf(\"\\nPostorder = \"); for(i=0; i&lt;9; i++){ printf(\"%c \", post[i]); } BiTree T2=NULL; ReBuildByInAndPostOrder(inorder2, post, 9, &amp;T2); printf(\"\\nThe binary tree constructed by two traversal sequences is: \\n\"); PrintTree(T2, 1); /* 中序+后序重建二叉树 */ system(\"pause\");} 1.3 运行情况截图 题目2123求二叉树中值为x的节点所在的层号。二叉树bt采用二叉链表存储；设计一个算法level（bt,x）求二叉树中值为x的节点所在的层号 2.1 算法设计思想 在求二叉树深度算法的基础上改进算法；在含有目标节点的子树上查找，到达目标节点即结束递归 2.2 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// 算法1int layer(BiTree bt, char x){ int cot = 0; if(bt==NULL) return cot; else if(bt-&gt;elem==x){ cot = 1; return cot; } else{ // printf(\"layer(bt-&gt;LChild, x): %d\\n\", layer(bt-&gt;LChild, x)); if(layer(bt-&gt;LChild, x)){ cot = layer(bt-&gt;LChild, x)+1; return cot; } // printf(\"layer(bt-&gt;RChild, x): %d\\n\", layer(bt-&gt;RChild, x)); if(layer(bt-&gt;RChild, x)){ cot = layer(bt-&gt;RChild, x)+1; return cot; } } return cot;}// 算法2int find_node_level(BiTree bt, char x, int h){ if (bt == NULL) return 0; else if (bt-&gt;elem == x) return h; else{ int l = find_node_level(bt-&gt;LChild, x, h+1); if (l != 0) return l; else return find_node_level(bt-&gt;RChild, x, h+1); }}// 算法3void level_in_x(BiTree BT,char x,int level){ if (BT == NULL){ return ; } if(BT-&gt;elem == x){ printf(\"x in %d\",level); } level++; printf(\"1:%d----\\n\", level); level_in_x(BT-&gt;LChild,x,level); printf(\"2:%d----\\n\", level); level_in_x(BT-&gt;RChild,x,level); printf(\"3:%d----\\n\", level); level--;} 2.3 运行情况截图 题目3123求二叉树的宽度。利用二叉树层次遍历求二叉树的宽度；二叉树的宽度即二叉树同层结点数的最大值 3.1 算法设计思想 我利用一个足够大的全局数组来记录遍历过程中的二叉树宽度；利用一个变量max来记录最大宽度，即为所求；求宽度的函数依然采用的是先序遍历递归的思想，加一个形参k，对应width数组下标，记录当前深度，来传给子层信息；如果当前深度k的节点不为空，那么width[k]++，来记录宽度；max为宽度最大值 3.2 源代码 1234567891011121314#define size 100int width[size];int max=0;void MaxWidth(BiTree T,int k){ if(T==NULL) return; width[k]++; if(max&lt;width[k]) max=width[k]; MaxWidth(T-&gt;LChild, k+1); MaxWidth(T-&gt;RChild, k+1);} 3.3 运行情况截图 题目412345678二叉树bt采用二叉链表存储，设计算法实现采用括号表示法输出该二叉树。 A / \\ B C / / \\ D E F \\ G A(B(D(,G)),C(E,F)) 4.1 算法设计思想 把题目中的括号表示法A(B(D(,G)),C(E,F))，去掉括号变为：ABDGCEF这种写法不是我们熟悉的先序遍历吗！所以我就在二叉树先序遍历算法的基础上改进算法； a.在节点的左右子树不为空时输出“（”；b.当节点右子树不为空时输出“，”；c.在节点的左右子树不为空时输出“）” 4.2 源代码 12345678910111213void Brackets(BiTree T){ if (T==NULL) return; printf(\"%c\", T-&gt;elem); if(T-&gt;LChild!=NULL||T-&gt;RChild!=NULL) printf(\"( \"); Brackets(T-&gt;LChild); if(T-&gt;RChild!=NULL) printf(\", \", T-&gt;elem); Brackets(T-&gt;RChild); if(T-&gt;LChild!=NULL||T-&gt;RChild!=NULL) printf(\" )\");} 4.3 运行情况截图 题目51234求二叉树的路径长度。二叉树二叉链表存储二叉树的路径长度即：二叉树中所有结点的路径长度之和。（结点的路径长度即：从根到结点的分支数） 5.1 算法设计思想 路径长度即为分支数之和；根据二叉树的性质；每个节点的头部都有一个分支，除了根节点；所以分支数之和就是二叉树节点数-1；那么采用递归的方法求得节点数，就可以求得路劲长度了 5.2 源代码 123456789int Node(BiTree T){ if (T==NULL) return 0; else{ return 1 + Node(T-&gt;LChild) + Node(T-&gt;RChild); }}printf(\"The path length of this binary tree is: %d\\n\", Node(T)-1); 5.3 运行情况截图","link":"/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B9%9D/"},{"title":"Hexo博客迁移","text":"Hexo用户指南 - 博客迁移GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。 解决类似问题 创建Git分支将Hexo博客迁移到其它电脑换了电脑如何使用hexo继续写博客 我整理了网上的方法并根据自己的实际情况总结出了我的解决方法 操作步骤1.基础配置电脑的基础配置还是要有的，比如： Git客户端NodeJS生成SSH密钥等 2.源文件拷贝Hexo博客系统中影响迁移的只有一部分文件和文件夹，所以只需要备份它们即可 文件（夹） 说明 scaffolds/ 博客文章的模版 source/ 所有博客文章，以及about、tags、categories等page themes/ 网站的主题所在文件夹 .gitignore 在push时需要忽略的文件和文件夹 _config.yml 站点配置文件 package.json 依赖包的名称和版本号 我们要做的就是通过各种方式备份这些文件和文件夹，比如说以下两种静态备份方式： 1.通过U盘或移动硬盘保存2.通过网盘保存 3.本地配置 3.1 创建目录 创建一个名为&quot;自己的git用户名.github.io&quot;的文件夹（推荐用这个用户名以免后面遇到问题）， 3.2 初始化 Hexo 1$ hexo init 3.3 初始化git本地仓库 1$ git init 3.4 复制文件到指定目录 把备份过的文件和文件夹都复制到hexo文件夹下完成后hexo的目录结构应该如下 123456789101112.deploy_git.gitnode_modulespublicscaffoldsscourcethemes.gitignore_config.ymldb.jsonpackage.jsonpackage-lock.json 4.测试1$ hexo s 这时候浏览器基本可以看到博客了。 5.部署发布文章12345678910// 清除缓存 网页正常情况下可以忽略此条命令$ hexo clean// 生成静态网页$ hexo g // 开始部署$ hexo d$ hexo g -d","link":"/2020/06/21/Hexo%E8%BF%81%E7%A7%BB/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"Java","slug":"Java","link":"/tags/Java/"}],"categories":[{"name":"主题","slug":"主题","link":"/categories/%E4%B8%BB%E9%A2%98/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"配置","slug":"配置","link":"/categories/%E9%85%8D%E7%BD%AE/"},{"name":"Compile","slug":"Compile","link":"/categories/Compile/"}]}