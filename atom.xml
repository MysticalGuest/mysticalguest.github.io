<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longing(MysteryGuest的博客)</title>
  
  <subtitle>心向星光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mysticalguest.github.io/"/>
  <updated>2021-01-08T13:26:48.652Z</updated>
  <id>https://mysticalguest.github.io/</id>
  
  <author>
    <name>MysticalGuest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构课程复习</title>
    <link href="https://mysticalguest.github.io/2021/01/08/Postgraduate/dataStructure/"/>
    <id>https://mysticalguest.github.io/2021/01/08/Postgraduate/dataStructure/</id>
    <published>2021-01-08T12:59:36.834Z</published>
    <updated>2021-01-08T13:26:48.652Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>考查目标：</p><ol><li>理解数椐结构的基本概念、掌握数椐的逻辑结构、存储结构及其差异，以及各种基本操作的实现。</li><li>掌握基本的数据处理原理和方法，在此基础上能够对算法进行设计与分析。</li><li>能够选择合适的数椐结构和方法进行问题求解。</li></ol><p>以西北工业大学801计算机专业基础为考纲</p></blockquote><a id="more"></a><h2 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h2><h3 id="1-1-线性表的定义和基本操作"><a href="#1-1-线性表的定义和基本操作" class="headerlink" title="1.1 线性表的定义和基本操作"></a>1.1 线性表的定义和基本操作</h3><p> <strong>线性表（Linear List）</strong>描述：线性表是n个<strong>类型相同</strong>数据元素的有限序列，对n&gt;0，除第一个元素无直接前驱、最后一个元素无直接后继外，其余的每个元素只有一个直接前驱和一个直接后继，元素之间具有一对一的关系。</p><h3 id="1-2线性表的实现"><a href="#1-2线性表的实现" class="headerlink" title="1.2线性表的实现"></a>1.2线性表的实现</h3><h4 id="1-2-1-顺序存储结构"><a href="#1-2-1-顺序存储结构" class="headerlink" title="1.2.1 顺序存储结构"></a>1.2.1 顺序存储结构</h4><h4 id="1-2-2-链式存储结构"><a href="#1-2-2-链式存储结构" class="headerlink" title="1.2.2 链式存储结构"></a>1.2.2 链式存储结构</h4><h3 id="1-3-线性表的应用"><a href="#1-3-线性表的应用" class="headerlink" title="1.3 线性表的应用"></a>1.3 线性表的应用</h3><h2 id="二、栈、队列和数组"><a href="#二、栈、队列和数组" class="headerlink" title="二、栈、队列和数组"></a>二、栈、队列和数组</h2><h3 id="2-1-栈和队列的基本概念"><a href="#2-1-栈和队列的基本概念" class="headerlink" title="2.1 栈和队列的基本概念"></a>2.1 栈和队列的基本概念</h3><h3 id="2-2-栈和队列的顺序存储结构"><a href="#2-2-栈和队列的顺序存储结构" class="headerlink" title="2.2 栈和队列的顺序存储结构"></a>2.2 栈和队列的顺序存储结构</h3><h3 id="2-3-栈和队列的链式存储结构"><a href="#2-3-栈和队列的链式存储结构" class="headerlink" title="2.3 栈和队列的链式存储结构"></a>2.3 栈和队列的链式存储结构</h3><h3 id="2-4-栈和队列的应用"><a href="#2-4-栈和队列的应用" class="headerlink" title="2.4 栈和队列的应用"></a>2.4 栈和队列的应用</h3><h3 id="2-5-特殊矩阵的压缩存储"><a href="#2-5-特殊矩阵的压缩存储" class="headerlink" title="2.5 特殊矩阵的压缩存储"></a>2.5 特殊矩阵的压缩存储</h3><h2 id="三、树与二叉树"><a href="#三、树与二叉树" class="headerlink" title="三、树与二叉树"></a>三、树与二叉树</h2><h3 id="3-1-树的概念"><a href="#3-1-树的概念" class="headerlink" title="3.1 树的概念"></a>3.1 树的概念</h3><h3 id="3-2-二叉树"><a href="#3-2-二叉树" class="headerlink" title="3.2 二叉树"></a>3.2 二叉树</h3><h4 id="3-2-1-二叉树的定义及其主要特征"><a href="#3-2-1-二叉树的定义及其主要特征" class="headerlink" title="3.2.1 二叉树的定义及其主要特征"></a>3.2.1 二叉树的定义及其主要特征</h4><h4 id="3-2-2-二叉树的顺序存储结构"><a href="#3-2-2-二叉树的顺序存储结构" class="headerlink" title="3.2.2 二叉树的顺序存储结构"></a>3.2.2 二叉树的顺序存储结构</h4><h4 id="3-2-3-二叉树的链式存储结构"><a href="#3-2-3-二叉树的链式存储结构" class="headerlink" title="3.2.3 二叉树的链式存储结构"></a>3.2.3 二叉树的链式存储结构</h4><h4 id="3-2-4-二叉树的遍历"><a href="#3-2-4-二叉树的遍历" class="headerlink" title="3.2.4 二叉树的遍历"></a>3.2.4 二叉树的遍历</h4><h4 id="3-2-5-线索二叉树的基本概念和构造"><a href="#3-2-5-线索二叉树的基本概念和构造" class="headerlink" title="3.2.5 线索二叉树的基本概念和构造"></a>3.2.5 线索二叉树的基本概念和构造</h4><h3 id="3-3-二叉排序树"><a href="#3-3-二叉排序树" class="headerlink" title="3.3 二叉排序树"></a>3.3 二叉排序树</h3><h3 id="3-4-平衡二叉树"><a href="#3-4-平衡二叉树" class="headerlink" title="3.4 平衡二叉树"></a>3.4 平衡二叉树</h3><h2 id="四、树、森林"><a href="#四、树、森林" class="headerlink" title="四、树、森林"></a>四、树、森林</h2><h3 id="4-1-树的存储结构"><a href="#4-1-树的存储结构" class="headerlink" title="4.1 树的存储结构"></a>4.1 树的存储结构</h3><h3 id="4-2-森林与二叉树的转换"><a href="#4-2-森林与二叉树的转换" class="headerlink" title="4.2 森林与二叉树的转换"></a>4.2 森林与二叉树的转换</h3><h3 id="4-3-树与森林的遍历"><a href="#4-3-树与森林的遍历" class="headerlink" title="4.3 树与森林的遍历"></a>4.3 树与森林的遍历</h3><h3 id="4-4-树的应用"><a href="#4-4-树的应用" class="headerlink" title="4.4 树的应用"></a>4.4 树的应用</h3><h3 id="4-5-等价类问题"><a href="#4-5-等价类问题" class="headerlink" title="4.5 等价类问题"></a>4.5 等价类问题</h3><h3 id="4-6-哈夫曼树和哈夫曼编码"><a href="#4-6-哈夫曼树和哈夫曼编码" class="headerlink" title="4.6 哈夫曼树和哈夫曼编码"></a>4.6 哈夫曼树和哈夫曼编码</h3><h2 id="五、图"><a href="#五、图" class="headerlink" title="五、图"></a>五、图</h2><h3 id="5-1-图的概念"><a href="#5-1-图的概念" class="headerlink" title="5.1 图的概念"></a>5.1 图的概念</h3><h3 id="5-2-图的存储及基本操作"><a href="#5-2-图的存储及基本操作" class="headerlink" title="5.2 图的存储及基本操作"></a>5.2 图的存储及基本操作</h3><h4 id="5-2-1邻接矩阵法"><a href="#5-2-1邻接矩阵法" class="headerlink" title="5.2.1邻接矩阵法"></a>5.2.1邻接矩阵法</h4><h4 id="5-2-1-邻接表法"><a href="#5-2-1-邻接表法" class="headerlink" title="5.2.1 邻接表法"></a>5.2.1 邻接表法</h4><h3 id="5-3-图的遍历"><a href="#5-3-图的遍历" class="headerlink" title="5.3 图的遍历"></a>5.3 图的遍历</h3><h4 id="5-3-1深度优先搜索"><a href="#5-3-1深度优先搜索" class="headerlink" title="5.3.1深度优先搜索"></a>5.3.1深度优先搜索</h4><h4 id="5-3-2-广度优先搜索"><a href="#5-3-2-广度优先搜索" class="headerlink" title="5.3.2 广度优先搜索"></a>5.3.2 广度优先搜索</h4><h3 id="5-4-图的基本应用及其复杂度分析"><a href="#5-4-图的基本应用及其复杂度分析" class="headerlink" title="5.4 图的基本应用及其复杂度分析"></a>5.4 图的基本应用及其复杂度分析</h3><h4 id="5-4-1-最小（代价生成树）"><a href="#5-4-1-最小（代价生成树）" class="headerlink" title="5.4.1 最小（代价生成树）"></a>5.4.1 最小（代价生成树）</h4><h4 id="5-4-2-最短路径"><a href="#5-4-2-最短路径" class="headerlink" title="5.4.2 最短路径"></a>5.4.2 最短路径</h4><h4 id="5-4-3-拓扑排序"><a href="#5-4-3-拓扑排序" class="headerlink" title="5.4.3 拓扑排序"></a>5.4.3 拓扑排序</h4><h4 id="5-4-4-关键路径"><a href="#5-4-4-关键路径" class="headerlink" title="5.4.4 关键路径"></a>5.4.4 关键路径</h4><h2 id="六、查找"><a href="#六、查找" class="headerlink" title="六、查找"></a>六、查找</h2><h3 id="6-1-查找的基本概念"><a href="#6-1-查找的基本概念" class="headerlink" title="6.1 查找的基本概念"></a>6.1 查找的基本概念</h3><h3 id="6-2-顺序查找法"><a href="#6-2-顺序查找法" class="headerlink" title="6.2 顺序查找法"></a>6.2 顺序查找法</h3><h3 id="6-3-折半查找法"><a href="#6-3-折半查找法" class="headerlink" title="6.3 折半查找法"></a>6.3 折半查找法</h3><h3 id="6-4-B-树"><a href="#6-4-B-树" class="headerlink" title="6.4 B-树"></a>6.4 B-树</h3><h3 id="6-5-散列表（Hash）表及其查找"><a href="#6-5-散列表（Hash）表及其查找" class="headerlink" title="6.5 散列表（Hash）表及其查找"></a>6.5 散列表（Hash）表及其查找</h3><h3 id="6-6-查找算法的分析及应用"><a href="#6-6-查找算法的分析及应用" class="headerlink" title="6.6 查找算法的分析及应用"></a>6.6 查找算法的分析及应用</h3><h2 id="七、内部排序"><a href="#七、内部排序" class="headerlink" title="七、内部排序"></a>七、内部排序</h2><h3 id="7-1-排序的基本概念"><a href="#7-1-排序的基本概念" class="headerlink" title="7.1 排序的基本概念"></a>7.1 排序的基本概念</h3><h3 id="7-2-插入排序"><a href="#7-2-插入排序" class="headerlink" title="7.2 插入排序"></a>7.2 插入排序</h3><h4 id="7-2-1-直接插入排除"><a href="#7-2-1-直接插入排除" class="headerlink" title="7.2.1 直接插入排除"></a>7.2.1 直接插入排除</h4><h4 id="7-2-2-折半插入排除"><a href="#7-2-2-折半插入排除" class="headerlink" title="7.2.2 折半插入排除"></a>7.2.2 折半插入排除</h4><h4 id="7-2-3-希尔（shell）排序"><a href="#7-2-3-希尔（shell）排序" class="headerlink" title="7.2.3 希尔（shell）排序"></a>7.2.3 希尔（shell）排序</h4><h3 id="7-3-交换排序"><a href="#7-3-交换排序" class="headerlink" title="7.3 交换排序"></a>7.3 交换排序</h3><h4 id="7-3-1-冒泡排序"><a href="#7-3-1-冒泡排序" class="headerlink" title="7.3.1 冒泡排序"></a>7.3.1 冒泡排序</h4><h4 id="7-3-2-快速排序"><a href="#7-3-2-快速排序" class="headerlink" title="7.3.2 快速排序"></a>7.3.2 快速排序</h4><h4 id="7-3-3-选择排序"><a href="#7-3-3-选择排序" class="headerlink" title="7.3.3 选择排序"></a>7.3.3 选择排序</h4><h4 id="7-3-4-简单选择排序"><a href="#7-3-4-简单选择排序" class="headerlink" title="7.3.4 简单选择排序"></a>7.3.4 简单选择排序</h4><h3 id="7-4-堆排序"><a href="#7-4-堆排序" class="headerlink" title="7.4 堆排序"></a>7.4 堆排序</h3><h3 id="7-5-归并排序"><a href="#7-5-归并排序" class="headerlink" title="7.5 归并排序"></a>7.5 归并排序</h3><h3 id="7-6-二路归并排序"><a href="#7-6-二路归并排序" class="headerlink" title="7.6 二路归并排序"></a>7.6 二路归并排序</h3><h3 id="7-7-基数排序"><a href="#7-7-基数排序" class="headerlink" title="7.7 基数排序"></a>7.7 基数排序</h3><h3 id="7-8-各种内部排序算法的比较"><a href="#7-8-各种内部排序算法的比较" class="headerlink" title="7.8 各种内部排序算法的比较"></a>7.8 各种内部排序算法的比较</h3><h3 id="7-9-内部排序算法的应用"><a href="#7-9-内部排序算法的应用" class="headerlink" title="7.9 内部排序算法的应用"></a>7.9 内部排序算法的应用</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;考查目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理解数椐结构的基本概念、掌握数椐的逻辑结构、存储结构及其差异，以及各种基本操作的实现。&lt;/li&gt;
&lt;li&gt;掌握基本的数据处理原理和方法，在此基础上能够对算法进行设计与分析。&lt;/li&gt;
&lt;li&gt;能够选择合适的数椐结构和方法进行问题求解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以西北工业大学801计算机专业基础为考纲&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://mysticalguest.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Theory" scheme="https://mysticalguest.github.io/tags/Theory/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络课程复习</title>
    <link href="https://mysticalguest.github.io/2021/01/08/Postgraduate/computerNetwork/"/>
    <id>https://mysticalguest.github.io/2021/01/08/Postgraduate/computerNetwork/</id>
    <published>2021-01-08T12:53:37.022Z</published>
    <updated>2020-10-12T14:37:20.803Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>考查目标：</p><ol><li>掌握计算机网络的基本概念、基本原理和基本方法。</li><li>掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。</li><li>能够运用计算机网络基本概念、基本原理和基本方法进行网络系统分析、设计和应用。</li></ol><p>以西北工业大学801计算机专业基础为考纲</p></blockquote><a id="more"></a><h2 id="一、计算机网络体系结构"><a href="#一、计算机网络体系结构" class="headerlink" title="一、计算机网络体系结构"></a>一、计算机网络体系结构</h2><h3 id="1-1-计算机网络概述"><a href="#1-1-计算机网络概述" class="headerlink" title="1.1 计算机网络概述"></a>1.1 计算机网络概述</h3><h4 id="1-1-1-计算机网络的概念、组成与功能"><a href="#1-1-1-计算机网络的概念、组成与功能" class="headerlink" title="1.1.1 计算机网络的概念、组成与功能"></a>1.1.1 计算机网络的概念、组成与功能</h4><ul><li>计算机网络是“以相互共享资源的方式互联起来的自治计算机系统的集合”。</li><li>计算机网络通常由3个部分组成，分别是资源子网、通信子网和通信协议。</li></ul><div class="table-container"><table><thead><tr><th>组成</th><th>资源子网</th><th>通信子网</th><th>通信协议</th></tr></thead><tbody><tr><td>包括</td><td>主机与终端、终端控制器、联网外设、各种网络软件与数据资源</td><td>路由器、各种互联设备与通信线路</td><td>通信双方必须共同遵守的规则和约定就称为通信协议</td></tr><tr><td>作用</td><td>负责全网的数据处理业务，向网络用户提供各种网络资源与网络服务</td><td>负责完成网络数据传输、路由与分组转发等信息处理任务</td><td>等</td></tr></tbody></table></div><ul><li>计算机网络的功能</li></ul><div class="table-container"><table><thead><tr><th>主要功能</th><th>详细</th><th>作用</th></tr></thead><tbody><tr><td>数据通信</td><td>依照一定的通信协议，利用数据传输技术在两个终端之间传递数据信息的一种通信方式和通信业务</td><td>实现计算机和计算机、计算机和终端以及终端与终端之间的数据信息传递，是继电报、电话业务之后的第三种最大的通信业务</td></tr><tr><td>资源共享</td><td>资源共享是人们建立计算机网络的主要目的之一。计算机资源包括硬件资源、软件资源和数据资源</td><td>硬件资源的共享可以提高设备的利用率，避免设备的重复投资，如利用计算机网络建立网络打印机；软件资源和数据资源的共享可以充分利用已有的信息资源，减少软件开发过程中的劳动，避免大型数据库的重复建设</td></tr><tr><td>集中管理</td><td>计算机网络技术的发展和应用，已使得现代的办公手段、经营管理等发生了变化</td><td>管理信息系统、办公自动化系统等，通过这些系统可以实现日常工作的集中管理，提高工作效率，增加经济效益</td></tr><tr><td>实现分布式处理</td><td>网络技术的发展，使得分布式计算成为可能</td><td>对于大型的课题，可以分为许许多多小题目，由不同的计算机分别完成，然后再集中起来，解决问题</td></tr><tr><td>负荷均衡</td><td>负荷均衡是指工作被均匀的分配给网络上的各台计算机系统</td><td>网络控制中心负责分配和检测，当某台计算机负荷过重时，系统会自动转移负荷到较轻的计算机系统去处理</td></tr></tbody></table></div><h4 id="1-1-2-计算机网络的分类"><a href="#1-1-2-计算机网络的分类" class="headerlink" title="1.1.2 计算机网络的分类"></a>1.1.2 计算机网络的分类</h4><ul><li>计算机网络的分类方法有多种，其中最主要的方法是根据<strong>覆盖范围</strong>进行分类的方法。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">分类</th><th>覆盖范围(Reference)</th><th>详细</th><th>特点</th><th>种类</th></tr></thead><tbody><tr><td style="text-align:center">广域网(Wide Area Network; WAN)</td><td>&gt;100km</td><td>也称为远程网。一般是在不同城市之间的LAN或者MAN网络互联</td><td>距离较远，信息衰减比较严重，所以这种网络一般是要租用专线，通过IMP（接口信息处理）协议和线路连接起来，构成网状结构，解决循径问题</td><td>邮电部的CHINANET，CHINAPAC，和CHINADDN网</td></tr><tr><td style="text-align:center">城域网(Metropolitan Area Network; MAN)</td><td>10~100km</td><td>早期以光纤为传输介质。宽带城域网以IP为基础，通过<strong>计算机网络、广播电视网、电信网三网融合</strong></td><td>完善的光纤传输网是基础。传统电信、有线电视与IP业务的融合成为宽带城域网的核心业务。高端路由器和多层交换机是核心设备。扩大宽带接入规模与服务质量是应用关键</td><td>提供普通家庭用户和集团用户高速接入因特网、局域网互连以及VPN/VPDN等业务</td></tr><tr><td style="text-align:center">局域网(Local Area Network; LAN)</td><td>10m~10km</td><td>局部地区范围内的网络。局域网一般位于一个建筑物或一个单位内，不存在寻径问题，不包括网络层的应用</td><td>连接范围窄、用户数少、配置容易、连接速率高</td><td>以太网（Ethernet）、令牌环网（Token Ring）、光纤分布式接口网络（FDDI）、异步传输模式网（ATM）以及最新的无线局域网（WLAN）</td></tr><tr><td style="text-align:center">个人区域网(Personal Area Network; PAN)</td><td>&lt;10m</td><td>个人操作空间(Personal Operating Space; POS)。无线个人区域网络(WPAN)。近距离不同移动办公设备之间低速互联</td><td>蓝牙：开放的规范，近距离无线通信，语音和数据传输，世界任何地方通信<br>ZigBee：低功耗、低速率、低成本</td><td>蓝牙技术与ZigBee技术（近距离无线通信）</td></tr></tbody></table></div><h4 id="1-1-3-计算机网络与互联网的发展历史"><a href="#1-1-3-计算机网络与互联网的发展历史" class="headerlink" title="1.1.3 计算机网络与互联网的发展历史"></a>1.1.3 计算机网络与互联网的发展历史</h4><ul><li><p>第一阶段：计算机网络技术与理论准备阶段（20世纪50年代）</p><blockquote><p>数据通信技术日趋成熟，为计算机网络的形成奠定技术基础</p><p>分组交换概念的提出为计算机网络的研究奠定了理论基础</p></blockquote></li><li><p>第二阶段：计算机网络的形成（20世纪60年代）</p><blockquote><p>ARPANET的成功运行证明了分组交换理论的正确性</p><p>TCP/IP协议的广泛应用为更大规模的网络互联奠定了坚实的基础</p><p>E-mail、FTP、TELNET、BBS等应用展现出网络技术广阔的应用前景</p></blockquote></li><li><p>第三阶段：网络体系结构的研究（20世纪70年代中期）</p><blockquote><p>网络体系结构与协议的标准化研究，对更大规模的网络互联起到推动作用</p><p>国际标准化组织(ISO)在推动“开放系统互连(Open System Interconnection, OSI)参考模型”与网络协议标准化研究方面做了大量工作</p><p>OSI参考模型的研究对网络理论体系的形成与发展，以及在网络协议标准化研究方面起到了重要的推动作用</p><p>TCP/IP经受了市场和用户的检验，吸引了大量的投资，推动了Internet应用的发展，成为业界标准</p></blockquote></li><li><p>第四阶段：Internet应用、无线网络与网络安全技术研究的发展</p><blockquote><p>Internet作为全球性的国际网与大型信息系统</p><p>Internet大规模接入推动了接入技术的发展</p><p>对等(Peer-to-Peer, P2P)网络技术的研究，使得“即时通信”等新的网络应用不断涌现</p><p>WPAN、WLAN与WMAN技术日益成熟，并应用阶段。无线自组网、无线传感器网络受到高度重视</p><p>物联网技术形成与发展</p><p>网络安全技术快速发展</p></blockquote></li></ul><h3 id="1-2计算机网络的标准化工作及相关组织。"><a href="#1-2计算机网络的标准化工作及相关组织。" class="headerlink" title="1.2计算机网络的标准化工作及相关组织。"></a>1.2计算机网络的标准化工作及相关组织。</h3><h4 id="1-2-1-网络协议标准化组织"><a href="#1-2-1-网络协议标准化组织" class="headerlink" title="1.2.1 网络协议标准化组织"></a>1.2.1 网络协议标准化组织</h4><ul><li><p>国际电信联盟（International Telecommunications Union, ITU）</p><p>负责电信方面的标准制定。</p></li><li><p>国际标准化组织（International Organization for Standardization, ISO）</p><p>组织制定国际标准。ISO中负责数据通信标准的是ISO第97技术委员会（TC97）。OSI参考模型就是由ISO的TC97组织制定的。</p></li><li><p>电子工业协会（Electronic Industries Association, EIA）</p><p>制定的RS-232接口标准在通信中应用广泛。</p></li><li><p>电气电子工程师协会（Institute of Electrical and Electronics Engineers, IEEE）</p><p>组织制定了局域网中最重要的802系列标准。</p></li></ul><h3 id="1-3-计算机网络体系结构与参考模型"><a href="#1-3-计算机网络体系结构与参考模型" class="headerlink" title="1.3 计算机网络体系结构与参考模型"></a>1.3 计算机网络体系结构与参考模型</h3><h4 id="1-3-1-计算机网络分层结构"><a href="#1-3-1-计算机网络分层结构" class="headerlink" title="1.3.1 计算机网络分层结构"></a>1.3.1 计算机网络分层结构</h4><ul><li>OSI体系结构：应用层，表示层，会话层，运输层，网络层，数据链路层，物理层</li><li>TCP/IP体系结构：应用层，运输层（TCP或UDP），网际层（IP），网络接口层</li><li>五层协议体系结构：应用层，运输层，网络层，数据链路层，物理层</li></ul><h4 id="1-3-2-计算机网络协议、接口、服务等概念"><a href="#1-3-2-计算机网络协议、接口、服务等概念" class="headerlink" title="1.3.2 计算机网络协议、接口、服务等概念"></a>1.3.2 计算机网络协议、接口、服务等概念</h4><ul><li><p>协议就是一组<strong>控制数据交互</strong>过程的通信规则，这些为网络数据交换制定的通信规则、约定与标准被称为“网络协议”</p><blockquote><p>网络协议三要素：</p><p>（1）语义：解释控制信息每个部分的意义</p><p>（2）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序</p><p>（3）时序：是对事件发生顺序地详细说明</p></blockquote></li><li><p>层次结构是处理计算机网络问题最基本的方法。对于一些难以处理的复杂问题，通常采用分解为若干个容易处理的、小一些的问题，“化整为零，分而治之”的方法去解决</p></li><li><p>在邮政系统中，邮箱就是发信人、收信人与邮递员之间交互的接口。接口是同一主机内<strong>相邻层之间交换信息</strong>的连接点</p></li><li><p>实体：任何可<strong>发送或接受信息</strong>的<strong>硬件或软件进程</strong>，通常是个特定的软件模块。</p><blockquote><p>第n层的活动元素称为n层实体</p><p>不同机器上同一层称为对等层，同一层的实体叫做<strong>对等实体</strong></p></blockquote></li><li><p>服务：下层为相邻上层提供的功能调用，垂直的。对等实体在协议的控制下使得本层能为上一层提供服务。</p></li></ul><h4 id="1-3-3-ISO-OSI参考模型和TCP-IP模型"><a href="#1-3-3-ISO-OSI参考模型和TCP-IP模型" class="headerlink" title="1.3.3 ISO/OSI参考模型和TCP/IP模型"></a>1.3.3 ISO/OSI参考模型和TCP/IP模型</h4><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/stratification.png" style="zoom: 50%;" /></p><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><h3 id="2-1-通信基础"><a href="#2-1-通信基础" class="headerlink" title="2.1 通信基础"></a>2.1 通信基础</h3><h4 id="2-1-1-信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念"><a href="#2-1-1-信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念" class="headerlink" title="2.1.1 信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念"></a>2.1.1 信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念</h4><ul><li><p>信道：通信的通道，是信号传输的媒介</p></li><li><p>信号：在通信系统中，二进制代码0、1比特序列必须变换成不同的电平或频率变化的信号之后，才能通过传输介质进行传输</p></li><li><p>带宽：网络的通信线路传送数据的能力。即：在单位时间内从网络中的某一个点到另一点所能通过的“最高数据率”</p></li><li><p>码元：在数字通信中常常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为(二进制）码元</p><blockquote><p>一个数字脉冲就是一个码元</p></blockquote></li><li><p>波特：调制速率描述通过模拟线路传输模拟数据信号的过程中，从调制解调器输出的调制信号每秒钟载波调制状态改变的数值，单位是1/s，称为波特</p><blockquote><p>1波特表示数字通信系统每秒传输1个码元，单位时间内数字通信系统所传输的码元个数</p></blockquote></li><li><p>速率：连接在计算机网络上的主机在数字信道上传送数据的速率，也称为数据率或比特率。</p></li><li><p>信源：发送数据的一方</p></li><li><p>信宿：接收数据的一方</p></li></ul><h4 id="2-1-2-奈奎斯特定理与香农定理"><a href="#2-1-2-奈奎斯特定理与香农定理" class="headerlink" title="2.1.2 奈奎斯特定理与香农定理"></a>2.1.2 奈奎斯特定理与香农定理</h4><ul><li>Nyquist准则</li></ul><h4 id="2-1-3-编码与调制"><a href="#2-1-3-编码与调制" class="headerlink" title="2.1.3 编码与调制"></a>2.1.3 编码与调制</h4><ul><li><p>编码：把数字信号转换为另一种形式的数字信号</p><blockquote><p>常用编码方式：不归零制，归零制（正脉冲代表1，负脉冲代表0），曼彻斯特编码（位周期中心的向上跳变代表0，向下代表1，反之亦可），差分曼彻斯特编码（每一位的中心处始终有跳变。位开始边界有跳变为0，位开始边界无跳变为1）。</p></blockquote></li><li><p>调制：将发送端的数字信号变换成模拟信号的过程。实现调制功能的设备称为“调制器”</p></li></ul><h4 id="2-1-4-电路交换、报文交换与分组交换"><a href="#2-1-4-电路交换、报文交换与分组交换" class="headerlink" title="2.1.4 电路交换、报文交换与分组交换"></a>2.1.4 电路交换、报文交换与分组交换</h4><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/dataexchange.png" alt=""></p><div class="table-container"><table><thead><tr><th>分类</th><th>详细</th><th>特点</th></tr></thead><tbody><tr><td>电路交换（线路交换，Circuit Switching）</td><td>两台计算机通过通信子网进行数据交换之前，首先从信源到信宿建立一条实际的物理连接通道</td><td>在保持连接期间双方独占信道（没有冲突，浪费信道资源）。信道资源的利用效率较低。适用于交互式会话类通信</td></tr><tr><td>报文交换</td><td>以报文为数据交换的单位，整块数据从源到宿由交换结点逐一中转</td><td>整块数据逐站<strong>存储转发</strong>。对报文的长度没有限制，对于大块数据（占用存储空间大，占用信道时间长）。延迟较大，不能实现交互式通信</td></tr><tr><td>分组交换</td><td>将数据拆分成分组，依次从源到宿经交换结点转发</td><td>分组的长度有上限控制，各自独立传输（占用信道时间短，占用缓存空间小）。信道共享（可充分利用信道资源，有可能发生资源(信道和结点）占用冲突）</td></tr></tbody></table></div><ul><li>分组交换的优点<ul><li>比报文交换的延迟小</li><li>比电路交换的效率高</li><li>适于计算机网络通信</li></ul></li><li>分组交换的缺点<ul><li>仍然有延迟，不能满足实时多媒体通信的服务质量</li><li>需要解决冲突检测、拥塞控制和纠错重发等问题</li></ul></li></ul><h4 id="2-1-5-数据报与虚电路"><a href="#2-1-5-数据报与虚电路" class="headerlink" title="2.1.5 数据报与虚电路"></a>2.1.5 数据报与虚电路</h4><p>分组交换技术可以分为2类：数据报（Data Gram, DG）与虚电路（Virtual Circuit, VC）。</p><ul><li>数据报方式</li><li>虚电路方式</li></ul><h3 id="2-2-传输介质"><a href="#2-2-传输介质" class="headerlink" title="2.2 传输介质"></a>2.2 传输介质</h3><ol><li><p>双绞线、同轴电缆、光纤与无线传输介质</p></li><li><p>物理层接口的特性</p></li></ol><h3 id="2-3-物理层设备"><a href="#2-3-物理层设备" class="headerlink" title="2.3 物理层设备"></a>2.3 物理层设备</h3><ol><li><p>中继器</p></li><li><p>集线器。</p></li></ol><h2 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h2><h3 id="3-1-数据链路层的功能"><a href="#3-1-数据链路层的功能" class="headerlink" title="3.1 数据链路层的功能"></a>3.1 数据链路层的功能</h3><p>采取差错检测、差错控制与流量控制等方法，将有差错的物理线路改进成无差错的数据链路，向网络层提供高质量的数据传输服务。</p><h3 id="3-2-组帧"><a href="#3-2-组帧" class="headerlink" title="3.2 组帧"></a>3.2 组帧</h3><h3 id="3-3-差错控制"><a href="#3-3-差错控制" class="headerlink" title="3.3 差错控制"></a>3.3 差错控制</h3><p>在计算机通信中，研究<strong>检测与纠正比特流传输错误</strong>的方法称为“差错控制”。差错控制的目的是减少物理线路的传输错误。在设计差错控制方法时提出以下2种策略：</p><h4 id="3-3-1-检错编码"><a href="#3-3-1-检错编码" class="headerlink" title="3.3.1 检错编码"></a>3.3.1 检错编码</h4><p>检错码为每个传输单元加上一定的冗余信息，接收端可以根据这些冗余信息<strong>发现</strong>传输差错，但是不能确定是哪一位或哪些位出错，并且自己不能够自动纠正传输错误。</p><p>常用的检错码有奇偶校验码（垂直、水平、垂直水平奇偶校验）和循环冗余码（CRC）。</p><h4 id="3-3-2-纠错编码"><a href="#3-3-2-纠错编码" class="headerlink" title="3.3.2 纠错编码"></a>3.3.2 纠错编码</h4><p>纠错码为每个传输单元加上足够多的冗余信息，以便接收端能够发现，并能够自动<strong>纠正</strong>传输差错。</p><blockquote><p>检错码需要通过重传机制达到纠错目的，但工作原理简单，实现起来容易，广泛使用。</p><p>纠错码有优越之处，但实现起来困难，在一般的通信场所不易采用。</p></blockquote><h3 id="3-4-流量控制与可靠传输机制"><a href="#3-4-流量控制与可靠传输机制" class="headerlink" title="3.4 流量控制与可靠传输机制"></a>3.4 流量控制与可靠传输机制</h3><h4 id="3-4-1-流量控制、可靠传输与滑动窗口机制"><a href="#3-4-1-流量控制、可靠传输与滑动窗口机制" class="headerlink" title="3.4.1 流量控制、可靠传输与滑动窗口机制"></a>3.4.1 流量控制、可靠传输与滑动窗口机制</h4><ul><li><p>流量控制</p><p>发送端发送数据超过物理线路的传输能力或超过接收端的帧接收能力时，就会造成<strong>链路拥塞</strong>。为了防止链路拥塞，数据链路层必须具有流量控制功能。（避免淹没物理线路和接收端）</p></li></ul><ol><li><p>停止-等待协议;</p></li><li><p>后退N帧协议(GBN);</p></li><li><p>选择重传协议(SR)。</p></li></ol><h3 id="3-5-介质访问控制"><a href="#3-5-介质访问控制" class="headerlink" title="3.5 介质访问控制"></a>3.5 介质访问控制</h3><ol><li><p>信道划分介质访问控制：频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和基本原理;</p></li><li><p>随即访问介质访问控制：ALOHA协议，CSMA协议，CSMA/CD协议，CSMA/CA协议;</p></li><li><p>轮询访问介质访问控制：令牌传递协议。</p></li></ol><h3 id="3-6-局域网"><a href="#3-6-局域网" class="headerlink" title="3.6 局域网"></a>3.6 局域网</h3><ol><li><p>局域网的基本概念与体系结构;</p></li><li><p>以太网与IEEE 802.3;</p></li><li><p>IEEE 802.11;</p></li><li><p>令牌环网的基本原理。</p></li></ol><h3 id="3-7-广域网"><a href="#3-7-广域网" class="headerlink" title="3.7 广域网"></a>3.7 广域网</h3><h4 id="3-7-1-广域网的基本概念"><a href="#3-7-1-广域网的基本概念" class="headerlink" title="3.7.1 广域网的基本概念;"></a>3.7.1 广域网的基本概念;</h4><h4 id="3-7-2-PPP协议"><a href="#3-7-2-PPP协议" class="headerlink" title="3.7.2 PPP协议;"></a>3.7.2 PPP协议;</h4><h4 id="3-7-3-HDLC协议"><a href="#3-7-3-HDLC协议" class="headerlink" title="3.7.3 HDLC协议"></a>3.7.3 HDLC协议</h4><ul><li><p>背景</p><p>ISO将SDLC协议（面向比特型）修改后的高级数据链路控制（HDLC）协议作为国际标准（ISO 3309）。目前很多流行的数据链路层协议，如Ethernet帧结构与PPP协议，都是在HDLC基础上修改，或是取其子集形成的。</p></li><li><p>数据链路的配置方式和数据传送方式</p><p>HDLC数据链路有2种基本配置方式：非平衡配置与平衡配置</p><ul><li><p>非平衡配置</p><p>一组主机根据在通信过程中的地位分为主站与从站，由主站来控制数据链路的工作过程。</p></li></ul></li></ul><h3 id="3-8-数据链路层设备"><a href="#3-8-数据链路层设备" class="headerlink" title="3.8 数据链路层设备"></a>3.8 数据链路层设备</h3><ol><li><p>网桥的概念及其基本原理;</p></li><li><p>局域网交换机及其工作原理。</p></li></ol><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><h3 id="4-1-网络层的功能"><a href="#4-1-网络层的功能" class="headerlink" title="4.1 网络层的功能"></a>4.1 网络层的功能</h3><ol><li><p>异构网络互联;</p></li><li><p>路由与转发;</p></li><li><p>拥塞控制。</p></li></ol><h3 id="4-2-路由算法"><a href="#4-2-路由算法" class="headerlink" title="4.2 路由算法"></a>4.2 路由算法</h3><ol><li><p>静态路由与动态路由;</p></li><li><p>距离-向量路由算法;</p></li><li><p>链路状态路由算法;</p></li><li><p>层次路由。</p></li></ol><h3 id="4-3-IPv4"><a href="#4-3-IPv4" class="headerlink" title="4.3 IPv4"></a>4.3 IPv4</h3><blockquote><p>IP协议的主要特点：</p><ol><li>IP协议是一种无连接、不可靠的分组传送服务的协议</li><li>IP协议是点-点网络层通信协议</li><li>IP协议屏蔽了互联的网络在数据链路层、物理层协议与实现技术上的差异</li></ol></blockquote><h4 id="4-3-1-IPv4分组"><a href="#4-3-1-IPv4分组" class="headerlink" title="4.3.1 IPv4分组"></a>4.3.1 IPv4分组</h4><p>分组由2部分组成：分组头（首部）和数据</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/IPv4_packet_header.png" style="zoom:60%;" /></p><blockquote><p>图中分组头的每行宽度（0~31）共32位，4字节。前5行是分组头中必有字段，第6行开始是选项字段，因此IPv4分组头的基本长度（$4(字节)*5(行)$）20字节，最大长度（$20+40(字节的选项)$）60字节。</p></blockquote><h4 id="4-3-2-IPv4地址与NAT"><a href="#4-3-2-IPv4地址与NAT" class="headerlink" title="4.3.2 IPv4地址与NAT"></a>4.3.2 IPv4地址与NAT</h4><p>连接到每个局域网的计算机都有一块网卡，就有一个MAC地址（物理地址）。IP地址（逻辑地址）是网络层的地址，主要用于路由器的寻址，因此IP地址采用层次结构。</p><h4 id="4-3-3-子网划分与子网掩码、CIDR"><a href="#4-3-3-子网划分与子网掩码、CIDR" class="headerlink" title="4.3.3 子网划分与子网掩码、CIDR"></a>4.3.3 子网划分与子网掩码、CIDR</h4><h4 id="4-3-4-ARP协议、DHCP协议与ICMP协议"><a href="#4-3-4-ARP协议、DHCP协议与ICMP协议" class="headerlink" title="4.3.4 ARP协议、DHCP协议与ICMP协议"></a>4.3.4 ARP协议、DHCP协议与ICMP协议</h4><h3 id="4-4-IPv6"><a href="#4-4-IPv6" class="headerlink" title="4.4 IPv6"></a>4.4 IPv6</h3><ol><li><p>IPv6的主要特点;</p></li><li><p>IPv6地址</p></li></ol><h3 id="4-5-路由协议"><a href="#4-5-路由协议" class="headerlink" title="4.5 路由协议"></a>4.5 路由协议</h3><ol><li><p>自治系统;</p></li><li><p>域内路由与域间路由;</p></li><li><p>RIP路由协议;</p></li><li><p>OSPF路由协议;</p></li><li><p>BGP路由协议。</p></li></ol><h3 id="4-6-IP组播"><a href="#4-6-IP组播" class="headerlink" title="4.6 IP组播"></a>4.6 IP组播</h3><ol><li><p>组播的概念; </p></li><li><p>IP组播地址。</p></li></ol><h3 id="4-7-移动IP"><a href="#4-7-移动IP" class="headerlink" title="4.7 移动IP"></a>4.7 移动IP</h3><ol><li><p>移动IP的概念; </p></li><li><p>移动IP的通信过程。</p></li></ol><h3 id="4-8-网络层设备"><a href="#4-8-网络层设备" class="headerlink" title="4.8 网络层设备"></a>4.8 网络层设备</h3><ol><li><p>路由器的组成和功能; </p></li><li><p>路由表与路由转发。</p></li></ol><h2 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h2><h3 id="5-1-传输层提供的服务"><a href="#5-1-传输层提供的服务" class="headerlink" title="5.1 传输层提供的服务"></a>5.1 传输层提供的服务</h3><blockquote><p>传输层的功能：实现分布式进程通信。</p></blockquote><h3 id="5-1-1-传输层寻址与端口"><a href="#5-1-1-传输层寻址与端口" class="headerlink" title="5.1.1 传输层寻址与端口"></a>5.1.1 传输层寻址与端口</h3><h3 id="5-1-2-无连接服务与面向连接服务"><a href="#5-1-2-无连接服务与面向连接服务" class="headerlink" title="5.1.2 无连接服务与面向连接服务"></a>5.1.2 无连接服务与面向连接服务</h3><div class="table-container"><table><thead><tr><th>区别</th><th>无连接服务</th><th>面向连接服务</th></tr></thead><tbody><tr><td><strong>概念</strong></td><td>不需要建立连接直接进行数据的传输，报文之间相互独立</td><td>通信双方在通信时，要事先建立一条通信线路，其过程有建立连接、使用连接和释放连接3个过程</td></tr><tr><td><strong>特点</strong></td><td>动态地分配资源，每个带有目的地址的包（报文分组）送到线路上，由系统选定路线进行传输，适用于发送少量报文的情况</td><td>静态地分配资源，传输前需要建立连接，适用于在一段时间内向一个目的地址发送大量的数据</td></tr><tr><td><strong>参考模型</strong></td><td>IP、UDP协议（无连接协议），邮件系统（无连接的模式）</td><td>TCP（面向连接的协议），电话系统（面向连接的模式）</td></tr><tr><td><strong>优点</strong></td><td>不占用通信信道</td><td>实时通信 / 可靠信息流 / 信息回复确认</td></tr><tr><td><strong>缺点</strong></td><td>非实时通信 / 信息流可能丢失 / 信息无回复确认</td><td>占用通信道</td></tr></tbody></table></div><h3 id="5-2-UDP协议"><a href="#5-2-UDP协议" class="headerlink" title="5.2 UDP协议"></a>5.2 UDP协议</h3><p>User Datagram Protocol（用户数据报协议）</p><h4 id="5-2-1-UDP数据报"><a href="#5-2-1-UDP数据报" class="headerlink" title="5.2.1 UDP数据报"></a>5.2.1 UDP数据报</h4><ul><li>UDP协议是一种无连接、不可靠的传输层协议。</li><li>UDP协议是一种面向报文的传输层协议。</li></ul><h4 id="5-2-2-UDP校验"><a href="#5-2-2-UDP校验" class="headerlink" title="5.2.2 UDP校验"></a>5.2.2 UDP校验</h4><h3 id="5-3-TCP协议"><a href="#5-3-TCP协议" class="headerlink" title="5.3 TCP协议"></a>5.3 TCP协议</h3><p>Transmission Control Protocol（传输控制协议）</p><h4 id="5-3-1-TCP段（报文段，TCP报文）"><a href="#5-3-1-TCP段（报文段，TCP报文）" class="headerlink" title="5.3.1 TCP段（报文段，TCP报文）"></a>5.3.1 TCP段（报文段，TCP报文）</h4><h4 id="5-3-2-TCP连接管理"><a href="#5-3-2-TCP连接管理" class="headerlink" title="5.3.2 TCP连接管理"></a>5.3.2 TCP连接管理</h4><ul><li>TCP连接建立（3次握手）</li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/tcp_connection_established.png" alt=""></p><ul><li>TCP连接释放（4次握手）</li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/tcp_connection_released.png" alt=""></p><h4 id="5-3-3-TCP可靠传输"><a href="#5-3-3-TCP可靠传输" class="headerlink" title="5.3.3 TCP可靠传输"></a>5.3.3 TCP可靠传输</h4><p>可靠：保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的。</p><p>TCP实现可靠传输的4个机制</p><ul><li>校验</li></ul><p>与UDP校验一样，发送方和接收方增加伪首部，然后通过二进制反码求和的计算方法来判断有没有发生错误</p><ul><li>序号</li></ul><blockquote><p>TCP是面向字节流的，但在发送的时候会把一些字节放在一起组成一个报文段然后把报文段发送出去；报文段的大小是不定的（可以是2个、十个、百个等），报文段的大小取决于链路层的MTU（最大传输单元）</p></blockquote><p>就是TCP根据下方数据链路层的MTU（最大传输单元）来随即将数据切割成好几段并且进行编号</p><ul><li>确认</li></ul><p>发送方每一次发送数据之后都需要接收方进行确认。</p><p>TCP使用的是累计确认机制，就是从第一个丢失的字节开始请求丢失的报文段。如由于网络状况原因，456丢失，78到达，但接收端仍然请求发送的数据序号是4，等到456出现在缓存中，78早已在，那么接下来接收端应该请求发送的数据序号是9。</p><ul><li>重传</li></ul><p>为什么要使用自适应算法？网络环境太复杂，路径又长又短，RTT设置短了可能会引起长报文段不必要的重传，RTT设置长了又导致网络利用率降低，所以使用RTTs</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/computernetwork/retransmission.png" alt=""></p><h4 id="5-3-4-TCP流量控制与拥塞控制"><a href="#5-3-4-TCP流量控制与拥塞控制" class="headerlink" title="5.3.4 TCP流量控制与拥塞控制"></a>5.3.4 TCP流量控制与拥塞控制</h4><h2 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h2><h3 id="6-1-网络应用模型"><a href="#6-1-网络应用模型" class="headerlink" title="6.1 网络应用模型"></a>6.1 网络应用模型</h3><ol><li><p>客户/服务器模型;</p></li><li><p>P2P模型、。</p></li></ol><h3 id="6-2-DNS系统"><a href="#6-2-DNS系统" class="headerlink" title="6.2 DNS系统"></a>6.2 DNS系统</h3><ol><li><p>层次域名空间; </p></li><li><p>域名服务器;</p></li><li><p>域名解析过程。</p></li></ol><h3 id="6-3-FTP"><a href="#6-3-FTP" class="headerlink" title="6.3 FTP"></a>6.3 FTP</h3><ol><li><p>FTP协议的工作原理;</p></li><li><p>控制连接与数据连接。</p></li></ol><h3 id="6-4-电子邮件"><a href="#6-4-电子邮件" class="headerlink" title="6.4 电子邮件"></a>6.4 电子邮件</h3><ol><li><p>电子邮件系统的组成结构;</p></li><li><p>电子邮件格式与MIME;</p></li><li><p>SMTP协议与POP3协议。</p></li></ol><h3 id="6-5-WWW"><a href="#6-5-WWW" class="headerlink" title="6.5 WWW"></a>6.5 WWW</h3><ol><li><p>WWW的概念与组成结构;</p></li><li><p>HTTP协议。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;考查目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握计算机网络的基本概念、基本原理和基本方法。&lt;/li&gt;
&lt;li&gt;掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。&lt;/li&gt;
&lt;li&gt;能够运用计算机网络基本概念、基本原理和基本方法进行网络系统分析、设计和应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以西北工业大学801计算机专业基础为考纲&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://mysticalguest.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Theory" scheme="https://mysticalguest.github.io/tags/Theory/"/>
    
  </entry>
  
  <entry>
    <title>华为面经</title>
    <link href="https://mysticalguest.github.io/2020/09/16/Interview/Huawei/"/>
    <id>https://mysticalguest.github.io/2020/09/16/Interview/Huawei/</id>
    <published>2020-09-16T00:00:00.000Z</published>
    <updated>2020-09-16T15:31:52.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收到面试邀约后该怎么做？我参考了尚硅谷雷老师的博客，他的B站ID是“黎曼的猜想”。通过他的经验的指导，并结合我的面试实际情况，为面试准备了许多说辞。</p></blockquote><a id="more"></a><h2 id="面试前准备"><a href="#面试前准备" class="headerlink" title="面试前准备"></a>面试前准备</h2><p>当收到面试通知后，通过如下准备可以大大提升面试成功率。</p><p>知己知彼，百战不殆。即使侥幸面试成，亦可防止压工资。</p><p>其实公司肯花时间让你去面试，前提条件一定是通过了你的简历，一定发现你和公司的匹配点，也就是说，一定是有录用意向的。</p><p>在技术面试的时间段里（最长1个小时，并且可能有多伦技面），尽可能地展现优势。</p><p>至于通过技术面试后，业务主管、项目经理或人事的面试一般是过滤特别差的，比如考察团队协作能力和沟通表达能力等，这对大家来说应该都不是问题。</p><p>敲重点！</p><ul><li><p>至少定出2天的准备时间</p></li><li><p>一定要再次阅读公司的职位要求</p><ul><li>就类似于考试，一定是先审题嘛，然后再做相应的准备。</li></ul></li></ul><p>比如，我报的西安华为21届秋季校招，第一意向部门传送与接入产品线，第二意向部门云核心网产品线，领域都是通用软件开发工程师。</p><h3 id="岗位职责"><a href="#岗位职责" class="headerlink" title="岗位职责"></a>岗位职责</h3><blockquote><p>在这里，你将从事IT应用层软件、分布式云化软件、互联网软件等的设计开发，可以采用敏捷、Devops、开源等先进的软件设计开发模式，接触最前沿的产品和软件技术，成为大容量高并发技术的专家；你将参与华为产品的软件研发工作，包括但不限于：<br>（1）完成从客户需求到软件产品定义、架构设计、开发实现、再到上线运营维护等产品生命周期中的各个环节；<br>（2）创造性解决产品在实现过程中的技术难题，应用前沿技术提升产品的核心竞争力，如分布式系统、性能调优、可靠性、数据库等；<br>（3）有机会参与业界前沿技术研究和规划，参与开源社区运作，与全球专家一起工作、交流，构建华为在业界影响力。</p></blockquote><h3 id="岗位要求"><a href="#岗位要求" class="headerlink" title="岗位要求"></a>岗位要求</h3><blockquote><p>1、计算机、软件、通信等相关专业本科及以上学历；<br>2、热爱编程，基础扎实，熟悉掌握但不限于JAVA/C++/C/Python/JS/HTML/GO等编程语言中的一种或数种，有良好的编程习惯；<br>3、具备独立工作能力和解决问题的能力、善于沟通，乐于合作，热衷新技术，善于总结分享，喜欢动手实践；<br>4、对数据结构、算法有一定了解；<br>5、优选条件：<br>（1）熟悉TCP/IP协议及互联网常见应用和协议的原理；<br>（2）有IT应用软件、互联网软件、IOS/安卓等相关产品开发经验，不满足于课堂所学，在校期间积极参加校内外软件编程大赛或积极参于编程开源社区组织；<br>（3）熟悉JS/AS/AJAX/HTML5/CSS等前端开发技术。</p></blockquote><p>能从中挖掘出如下的技能需求点：</p><p>专业性要求：</p><ul><li>基础扎实</li><li>熟悉TCP/IP协议及互联网常见应用和协议的原理</li><li>编程大赛</li></ul><p>其实在投简历前，就可以根据不同公司的不同要求对简历进行微调，这样获得该岗位的面试机会更大。</p><h3 id="准备项目描述的说辞"><a href="#准备项目描述的说辞" class="headerlink" title="准备项目描述的说辞"></a>准备项目描述的说辞</h3><p>面试环节中的项目介绍必要环节</p><p>这里介绍些项目描述的要点：</p><ul><li>业务需求一笔带过，项目背景，工期人数等寥寥几句，面试官不关心的。就可以这样介绍：</li></ul><blockquote><p>大二在软通动力实训的过程中接触了SpringBoot，由于我家有个亲戚开了个私人宾馆，就萌生了开发一个宾馆的Web应用的想法。然后我一个人在大二暑假花了3个月的时间用SpringBoot做一个宾馆信息管理系统，面向的用户就是宾馆的前台，可以简化管理宾馆的业务过程。</p></blockquote><ul><li>结合项目实际需求，介绍项目用到的技术，比如上面“岗位要求”描述中，要求有“开发经验，熟悉一些前端知识等”，可以这样介绍：</li></ul><blockquote><p>在这个项目里，开发用户界面要到模板引擎，比如JSP和Thymeleaf，就必须了解前端知识嘛，所以我还学习并用到了许多前端框架，比如EasyUI、Bootstrap、Ajax和axios等，甚至还接触过Vue。</p></blockquote><p>注意：这里仅仅是介绍项目，结合功能点说出技术即可，一定要思路清晰。</p><ul><li>再结合项目，说些招聘方需要的非技术的要求</li></ul><blockquote><p>在这个项目中，我用到了MVC设计模式，在项目的开发过程中去学习，遇到问题我首先会在网络上寻找解决方案，然后再去和同学商量，或是我在Java学习的微信群里，不乏工作经验丰富的人，我也会去问他们解决方案。过一定时间我也会再回顾代码，优化代码逻辑，减少代码量等。</p></blockquote><ul><li>如果有，说下项目中的亮点，比如用到了一些比较好的技术。</li></ul><blockquote><p>官方推荐模板渲染引擎Thymeleaf，语法更灵活</p><p>MyBatis框架，SQL语句更灵活，实现更简单</p><p>缓存</p><p>String对象的优化</p><p>这个项目对数据库性能和内存性能要求比较高，所以我用到了Oracle调优技术和JVM内存优化技术，此外，我们还用到了大数据分析工具对计费模式做了优化。</p></blockquote><p>准备好说辞，能给面试官留下思路清晰，技术匹配的印象。 </p><p>如果运用到项目的技术和要求不匹配，但可以在了解的基础上说出来，整理一下说辞即可。但通过后面的问题，面试官发现你根本不了解，性质就变了。</p><p>在准备项目说辞的时候，可以尽量和职位要求靠，但你说的每个技术点，稍后面试官都会问的。如果某个技术点没有掌握，其实问题不大，面试官不会要求十全十美。</p><h3 id="一定得准备项目描述里提到的技术"><a href="#一定得准备项目描述里提到的技术" class="headerlink" title="一定得准备项目描述里提到的技术"></a>一定得准备项目描述里提到的技术</h3><p>在介绍项目时，吸引面试官把注意力集中到你提到的技术点上。这些技术大多也是岗位要求的技术。</p><p>结合项目点明技术。</p><h3 id="准备亮点话题"><a href="#准备亮点话题" class="headerlink" title="准备亮点话题"></a>准备亮点话题</h3><p>亮点话题多多益善</p><p>对于Java高级开发而言，可以准备以下话题：</p><ul><li>虚拟内存优化</li><li>数据库性能优化</li><li>分布式高并发架构</li><li>一些热门组件，比如redis、nginx等</li><li>大数据方向的用法？</li><li>Java core（比如集合或多线程）方面的底层实现代码</li><li>Spring系列（比如IOC、AOP、MVC、SpringBoot、SpringCloud）方面的底层实现代码</li></ul><p>要准备到什么程度：</p><ul><li>最好结合项目实际说出真的用过这些技术</li><li>最好往性能调优方面靠</li></ul><p>通过准备，大家可以主导面试官提问，否则面试官开始天马行空地问问题，大家薄弱点被暴露的机会就有可能大大增加。</p><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><p>手撕代码啊，远程的话，就是用本地IDE，然后共享屏幕，不要紧张对自己代码不自信。</p><h2 id="面试中的表现"><a href="#面试中的表现" class="headerlink" title="面试中的表现"></a>面试中的表现</h2><h3 id="软实力"><a href="#软实力" class="headerlink" title="软实力"></a>软实力</h3><p>面试官只有当确认候选人在责任心和团队协作能力方面没问题，才会把你招进公司。面试官会通过（1）问问题的方式；（2）通过回答问题的方式和说话的语气；来确认。</p><p>所以大家面试的过程中：</p><ul><li>交流时尽量目视面试官，谈吐清晰，语速不急不缓，说话果断，语气不卑不亢，别太僵硬</li><li>适当微笑，点头互动</li><li>积极回答问题，如果没听清问题，及时主动询问</li><li>不急不燥，从容应对“压力测试”</li><li>放松心态</li></ul><blockquote><p>当觉得自己不行的时候，就走在这个斑马线上，你就是一个行人。</p><p>上面这些都是我二面之前做的准备。</p></blockquote><h2 id="二面完后总结"><a href="#二面完后总结" class="headerlink" title="二面完后总结"></a>二面完后总结</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>自我介绍嘛，基本信息，实习实践经历比赛，虽然简历上有。</p><ul><li><p>开始看机试的题</p><blockquote><p>我是没有想到的，依次回顾当时的机试题，我当时是8月12号参加的华为西北校招机试，距离面试这天已经1个月了吧，有些没有印象，只说出了一题的大概思路，觉得自己没有表现好。当时的题及我写的代码都以放在我的<a href="https://github.com/MysticalGuest/OPP-Java/tree/master/SchoolRecruitment/src/com/huawei">GitHub</a>上，大家可以参考，并不都是AC。</p></blockquote></li><li><p>项目</p><blockquote><p>问我做过的项目给他展示，我是直接共享屏幕展示，他会问我如何实现，他也会指出我项目里出现的问题。和我讨论，大家把握说话方式，不要太拘束即可。还会展示数据库，问数据库中各个表的实现和意义，问我了为什么密码是明文没有加密，这是我第二个感觉表现不好的地方。</p></blockquote></li><li><p>然后就手撕代码</p><blockquote><p>当时机试，有两题没写出来，他就从里面挑了一道题让我写，当时没有思路，最后又写出来了，觉得挺幸运，不过写代码过程中出现了写小插曲，这是我第三个感觉表现不好的地方。</p></blockquote></li><li><p>结束</p><blockquote><p>大概聊得就这么多，最后问我有什么问题想问他，我也没有问题。</p></blockquote></li></ul><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>一面结束10分钟后就会出结果，前2面安排挺紧凑的相隔30分钟吧，会换面试官的。轮到我就比较凑巧，刚好到饭点，我一面面完群里就通知大家可以去吃饭了。</p><p>吃完饭会来，等了一会儿，1点30分开始。还是自我介绍，基本信息，实习实践经历比赛，虽然简历上有。</p><ul><li><p>项目</p><blockquote><p>然后他提了个功能，问我实现思路，感觉也没有达到他的要求</p></blockquote></li><li><p>结合项目，给出场景</p><blockquote><p>问我有没有什么想法？我说出了大概思路，感觉也没有达到他的要求</p></blockquote></li><li><p>B树系列问题</p><blockquote><p>B树，B+树为什么比二叉树等效率高？特点是什么？我之前通过MySQL了解的B+树，现在已经没啥印象了，就也没有回答的很顺利。</p></blockquote></li><li><p>数据结构，排序</p><blockquote><p>问快速排序、归并排序和堆排序的时间复杂度，有没有了解比这些排序更快的，还有他们的稳定性。</p></blockquote></li><li><p>结束</p><blockquote><p>大概聊得就这么多，最后问我有什么问题想问他，我也没有问题。</p></blockquote></li></ul><h2 id="专业主管面试"><a href="#专业主管面试" class="headerlink" title="专业主管面试"></a>专业主管面试</h2><h3 id="职业规划（人生规划）："><a href="#职业规划（人生规划）：" class="headerlink" title="职业规划（人生规划）："></a>职业规划（人生规划）：</h3><p>最重要的就是找对职业方向</p><p>1、自我分析阶段</p><p>兴趣分析：</p><blockquote><p>我应聘的岗位是通用软件开发，我也向HR了解过情况，我的意向工作就是Java开发。我热爱Java，我从大二接触到这门语言就开始了，Java是我接触到的第二门编程语言，第一门面向对象的编程语言，我喜欢他的规范和严谨。所以我会主动努力地去学习Java及其相关的框架，比如Spring。</p></blockquote><p>性格分析：</p><blockquote><p>大学期间我参与过比较多的项目，做过开发，也做过项目组长，做过项目汇报，我都可以适应这些角色，开发不用说我是喜欢的，项目组长的话，主要负责协调组内成员，规划好项目进度，也会帮助和鼓励组员开发。我觉得我的性格比较活泼比较负责，我每次参与开发完成项目都很有成就感和满足感，会有冲动向同学们汇报展示。</p></blockquote><p>优缺点分析：</p><blockquote><p>优点：做事比较负责，认真，有上进心，肯吃苦</p><p>缺点：比较在意他人的看法</p></blockquote><p>2、职业分析规划</p><p>毕业之后找到自己心仪的工作，认真完成工作，抽时间学习专业知识技能，向前辈和同事学习经验。因为自己要学的东西还很多，积淀一段时间后，想着在工作中职位向上晋升，不断积累经验。</p><h3 id="网上翻到一篇博客"><a href="#网上翻到一篇博客" class="headerlink" title="网上翻到一篇博客"></a>网上翻到一篇博客</h3><p>【面试经验】三轮面试拿到华为Offer</p><p>问我为什么选择华为，我说我<strong>想去大城市闯荡，华为有很大的平台可以供我们年轻人发挥</strong>。然后主管问有没有人推荐你选华为，或者你是怎么了解华为的。这些问题我都是心里面有答案的，因为我邻居就有在华为工作的，所以我稍微了解华为，也有人力挺我要去华为发展，这些都是这个问题的答案。</p><p>接下来就是压力面试，问我如果你和你同学一起进入华为，发现你的工资比同学低个几千元，你该怎么办，你会不会心理不平衡？<strong>我说我会弄明白我为什么会比别人低，然后努力工作，改正一些缺点，争取在业务上超过他们。</strong>业务主管说在华为刚进去不要在乎你比别人少几千，以后都是年薪几十万，几百万的，那几千元算什么，刚进去的两个人，几年以后可能待遇截然不同。</p><p>接着又问我如果你有一项技术只有你一个人会，是你的独门秘诀，现在又需要，你会不会把他教给其他人。我直接说不会，因为这是吃饭的家伙。业务主管笑了笑说虽然这是我不想得到的答案，但是你诚实，在华为大家都是有技术互相交流的，大家都倾其所有的完成项目，这样项目就能轻松的完成，然后一些奖励大家一起分，这样多开心。接着又问我，如果我是业务主管，给5个不同方向的人打等级，打绩效成绩该怎么打。这个我答的比较好，因为要看团队合作能力，看他在完成工作的同时还为团队带来了哪些利益，因为华为是狼道盛行的团队，特别讲究团队合作。</p><p>聊完这些压力面以后，面试官问我有没有问题要问他。我就顺便问了一个我这个方向的进入华为能不能直接上手，对不对口。你进来以后也会跟着师傅学习，慢慢上手项目，开始融入团队完成项目，到后来一个人负责一个项目。三轮面试差不多就结束了，第三轮面试大概35分钟左右，这个还是比较轻松的。</p><p>这里要注意的是，三轮面试的时候，如果业务主管问你地点的问题，那你就要小心了，如果说给你深圳你去不去，你说不去的话，可能第三轮你就会倒下。当然了很多同学没有被问到这个问题，关于地点问题倒在三轮的，我们学院大概两个人。（当你面试完华为以后，恭喜你，你的面试经验已经非常成熟了。你再去面试其他公司，你就会发现很轻松，基本都不需要准备，级别绝对不是一个level，因为华为的面试官带你把项目都仔仔细细的过了一遍，华为三轮面试的那两个小时绝对成为你人生中宝贵的财富）</p><p>面试完三轮以后等通知，说一个星期后给结果。19号面试的同学，有大部分都撑完了三轮面试，20号面试的同学最后只有2个撑到了第三轮。然后面试完以后，第二天就有三轮面试的结果了，我是录用排序中，有的同学倒下了，显示面试不通过。苦苦等了一个星期，然后HR说可能国庆之后给结果。在家里过了一个国庆后。大概11号的时候，有人收到签约短信了，那波人是第一批被捞上来了，网络能源产品线电源岗只有我同门被捞了，因为他研究方向就是逆变器，十分对口，面试也很顺利，薪资待遇开的20k。我们专业，面试其他部门的第一批被捞的都是开的20k，价格都一样。过了几天，华为第二批开始捞人，我被捞出来了，16号南研所签约，签两方（华为的两方可以毁约，没有违约金），第二批的待遇稍微差一点只有19k，计算方法就是19*（14-16），签完两方，拿到了华为的聘书，我就回学校了。后来听说第三批只有18k了。</p><p>最后再说一下我去了哪里吧，最后我选择了江苏电网（某市供电公司）。主要原因是签了承诺书，不允许毁约电网，再加上家里人不同意我去华为，怕我身体吃不消。签完电网刚开始三天我还状态良好，后来慢慢的有些后悔，觉得我这性格的更适合华为，我喜欢奋斗干出一番事业，年轻人不能怕吃苦。然后同学对我进行了一波开导，再加上家里人不同意去华为，最后我还是坚定的选择了国家电网。其实选择哪有什么后悔不后悔，你进去以后踏实干活，干出成绩来，有所成就，你就会觉得当初的选择多么的对。如果你整天浑水摸鱼，一事无成，这样你就会觉得当初为什么选择了它，而没选择另一者。所以为了以后不留遗憾，今后也会努力工作，带着华为那种拼搏的精神进入电网，踏实干活。最后我们学院大概4个签约了华为公司，都选择了上海。最后衷心的祝愿在华为拼搏的这些同学，你们带着东大电气人的梦想，勇敢新世界，拖着世界往前走，虽然在华为拼搏的路上没有我，但梦想与你们跟随。</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>依然是自我介绍，充分准备一下。</p><ul><li><p>专业：软件工程</p><blockquote><p>对软件工程的理解，工程化开发软件项目…自我感觉还行</p></blockquote></li><li><p>软件工程中最重要的是什么？为什么？</p><blockquote><p>需求分析，软件开发的开端</p></blockquote></li><li><p>最有成就感的事</p></li><li><p>最遗憾的事</p></li><li><p>未来规划</p></li><li><p>了解华为的企业文化吗</p></li></ul><p>总体觉得面试华为收获不少，拿不拿得到Offer另说。前两面挺虚的，但三面还好，等待通知吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收到面试邀约后该怎么做？我参考了尚硅谷雷老师的博客，他的B站ID是“黎曼的猜想”。通过他的经验的指导，并结合我的面试实际情况，为面试准备了许多说辞。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://mysticalguest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Huawei" scheme="https://mysticalguest.github.io/tags/Huawei/"/>
    
  </entry>
  
  <entry>
    <title>管理GitHub个人资料README</title>
    <link href="https://mysticalguest.github.io/2020/09/13/Github/Profile/"/>
    <id>https://mysticalguest.github.io/2020/09/13/Github/Profile/</id>
    <published>2020-09-13T02:05:40.655Z</published>
    <updated>2020-09-14T03:10:30.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管理您的个人资料README"><a href="#管理您的个人资料README" class="headerlink" title="管理您的个人资料README"></a>管理您的个人资料README</h2><a id="more"></a><p>最近看到一个Github主页添加个人资料，觉得挺不错，就想着也弄一个，就像下图一样，其实并不麻烦。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Github/github.PNG" alt=""></p><p>GitHub提供了这样的服务，<a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme">官方文档</a>，我也是在官方文档找到的详细教程。以下大多都是翻译版，还有一些个人建议和踩坑经验，我挑出其中最重要的部分分享。</p><h3 id="关于您的个人资料README"><a href="#关于您的个人资料README" class="headerlink" title="关于您的个人资料README"></a>关于您的个人资料README</h3><p>您可以将自述文件添加到您的GitHub个人资料中，以向其他人介绍您自己。</p><p>您可以通过创建个人资料README与GitHub社区上有关您自己的信息。 GitHub在个人资料页面顶部显示您的个人资料README。</p><p>您可以决定在个人资料README中包含哪些信息，因此可以完全控制自己在GitHub上的展示方式。以下是一些访问者在您的个人资料README中可能发现有趣，有趣或有用的信息示例。</p><ul><li><p>“关于我”部分描述了您的工作和兴趣</p></li><li><p>您引以为豪的贡献以及这些贡献的背景</p></li><li><p>在您所参与的社区中获得帮助的指南</p></li></ul><p>您可以使用GitHub Flavored Markdown设置文本格式，并在个人资料README中包含表情符号，图像和GIF。有关更多信息，请参阅“<a href="https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github">在GitHub上编写和格式化入门</a>”。</p><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>如果满足以下所有条件，则GitHub将在您的个人资料页面上显示您的个人资料README。</p><ul><li><p>您已经创建了一个名称与<strong>您的GitHub用户名相匹配</strong>的存储库。</p></li><li><p>该存储库是<strong>公共（Public）</strong>的。</p></li><li><p>存储库的根目录中包含一个名为README.md的文件（初始化创建即可，不需要克隆到本地）。</p></li><li><p>README.md文件包含任何内容。</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Github/create.PNG" alt=""></p><p>当你创建仓库的时候，将仓库名命名为<code>mysticalguest</code>，下面就会出现提示：</p><blockquote><p><em>您发现了一个秘密！ MysticalGuest / MysticalGuest是一个“特殊”存储库，可用于将README.md添加到您的GitHub个人资料中。确保它是公开的，并使用自述文件对其进行初始化以开始使用。</em></p></blockquote><p>其他仓库不会出现这样的提示。说明是成功的。</p><blockquote><p>注意：如果您在2020年7月之前创建了一个与用户名相同名称的公共存储库，则GitHub不会在您的个人资料上自动显示该存储库的自述文件。您可以通过转到GitHub.com上的存储库并单击“共享到配置文件”，手动将存储库的自述文件共享到您的配置文件。（这个不用管了，因为7月之后很方便，一旦仓库创建成功，GitHub个人主页就会显示了！）</p></blockquote><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Github/success.PNG" alt=""></p><p>下面就开始<strong>在线编辑</strong>这个仓库下的README.md文件即可：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Github/edit.PNG" alt=""></p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>GitHub提供了强大的在线编辑器，还可以预览。我的编辑：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Welcome！👋 </span></span><br><span class="line"><span class="bullet">+ </span><span class="strong">**My Github Blog.[https://mysticalguest.github.io](https://mysticalguest.github.io/)**</span></span><br><span class="line"><span class="bullet">+ </span><span class="strong">**My Gitee Blog.[https://mysteryguest.gitee.io](https://mysteryguest.gitee.io/)**</span></span><br><span class="line"><span class="bullet">+ </span><span class="strong">**My CSDN Blog.[https://blog.csdn.net/etherealsymbol](https://blog.csdn.net/etherealsymbol/)**</span></span><br><span class="line"><span class="bullet">+ </span><span class="strong">**My CNBlogs Blog.[https://www.cnblogs.com/mysteryguest](https://www.cnblogs.com/mysteryguest/)**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>🔭 I’m currently working on java source code...</span><br><span class="line"><span class="bullet">- </span>🌱 I’m currently learning Java, MySQL, Spring, Redis, Elasticsearch...</span><br><span class="line"><span class="bullet">- </span>📫 How to reach me: mysticalguest@163.com</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">**MysticalGuest/mysticalguest** is a ✨ _special_ ✨ repository </span></span><br><span class="line"><span class="xml">because its `README.md` (this file) appears on your GitHub profile.</span></span><br><span class="line"></span><br><span class="line"><span class="xml">Here are some ideas to get you started:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">- 🔭 I’m currently working on ...</span></span><br><span class="line"><span class="xml">- 🌱 I’m currently learning ...</span></span><br><span class="line"><span class="xml">- 👯 I’m looking to collaborate on ...</span></span><br><span class="line"><span class="xml">- 🤔 I’m looking for help with ...</span></span><br><span class="line"><span class="xml">- 💬 Ask me about ...</span></span><br><span class="line"><span class="xml">- 📫 How to reach me: ...</span></span><br><span class="line"><span class="xml">- 😄 Pronouns: ...</span></span><br><span class="line"><span class="xml">- ⚡ Fun fact: ...</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br></pre></td></tr></table></figure><p>编辑完成<code>Commit Changes</code>即可，刷新主页。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Github/github.PNG" alt=""></p><p>成功，就是这么简单！</p><h3 id="删除个人资料README"><a href="#删除个人资料README" class="headerlink" title="删除个人资料README"></a>删除个人资料README</h3><p>如果满足以下任何条件，则从您的GitHub个人资料中删除个人资料README：</p><ul><li><p>自述文件为空或不存在。</p></li><li><p>该存储库是私有的。</p></li><li><p>存储库名称不再与您的用户名匹配。</p></li></ul><p>选择的方法取决于您的需求，但是如果不确定，我们建议将存储库设为私有。 有关如何将存储库设为私有的步骤，请参阅“<a href="https://docs.github.com/en/github/administering-a-repository/setting-repository-visibility#changing-a-repositorys-visibility">更改存储库的可见性</a>”。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;管理您的个人资料README&quot;&gt;&lt;a href=&quot;#管理您的个人资料README&quot; class=&quot;headerlink&quot; title=&quot;管理您的个人资料README&quot;&gt;&lt;/a&gt;管理您的个人资料README&lt;/h2&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="GitHub" scheme="https://mysticalguest.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://mysticalguest.github.io/2020/09/05/Java/Thread/"/>
    <id>https://mysticalguest.github.io/2020/09/05/Java/Thread/</id>
    <published>2020-09-05T15:50:15.714Z</published>
    <updated>2020-09-09T03:15:34.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>创建线程的<strong>主要</strong>方式</p><ol><li>继承Thread类创建线程类（重点）</li><li>实现Runnable接口创建线程类（重点）</li><li>实现Callable接口或Future接口创建线程（了解）</li></ol></blockquote><a id="more"></a><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>关于学习Java多线程，其中程序，进程和线程等重要概念及其关系在这里就不多赘述，之前操作系统也详细讲过，我就不再详细扩展，直接进入Java线程的学习吧！</p><p>此处分享一下<a href="https://pan.baidu.com/s/1BqJdwPNVusF14r9JhMzwdA">Java1.8帮助文档</a>（中文版），提取码: k26d</p><h2 id="2、Thread类"><a href="#2、Thread类" class="headerlink" title="2、Thread类"></a>2、Thread类</h2><h3 id="2-1-Thread类实现Runnable接口"><a href="#2-1-Thread类实现Runnable接口" class="headerlink" title="2.1 Thread类实现Runnable接口"></a>2.1 Thread类实现Runnable接口</h3><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>            priority;</span><br><span class="line">  <span class="keyword">private</span> Thread         threadQ;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span>           eetop;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Whether or not to single_step this thread. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span>     single_step;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-创建步骤："><a href="#2-2-创建步骤：" class="headerlink" title="2.2 创建步骤："></a>2.2 创建步骤：</h3><p><strong>将一个类声明为<code>Thread</code>的子类。  这个子类应该重写<code>Thread</code>类的<code>run</code>方法 。 然后可以分配并启动子类的实例</strong></p><ul><li>自定义线程类继承<strong>Thread类</strong></li><li>重写<strong>run()</strong>方法，编写线程执行体</li><li>创建线程对象，调用<strong>start()</strong>方法启动线程</li></ul><h4 id="2-2-1-测试"><a href="#2-2-1-测试" class="headerlink" title="2.2.1 测试"></a>2.2.1 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// run方法线程体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      System.out.print(String.format(<span class="string">"%-3d"</span>, i) + <span class="string">"Hello    "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// main方法主线程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个线程对象</span></span><br><span class="line">    Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用start方法开启线程</span></span><br><span class="line">    thread1.start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">800</span>; i++) &#123;</span><br><span class="line">      System.err.print(String.format(<span class="string">"%-3d"</span>, i) + <span class="string">"World    "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看控制台输出：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/Thread/thread1.PNG" alt=""></p><blockquote><p>注意：线程开启不一定立即执行，由CPU调度执行</p><p>调用start方法，是线程同时执行，交替执行。如果调用run方法，就是顺序执行。</p></blockquote><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/Thread/run_and_start.PNG" alt=""></p><h4 id="2-2-2-案例：实现多线程同步下载图片"><a href="#2-2-2-案例：实现多线程同步下载图片" class="headerlink" title="2.2.2 案例：实现多线程同步下载图片"></a>2.2.2 案例：实现多线程同步下载图片</h4><p>APACHE官网下载<a href="https://commons.apache.org/proper/commons-io/download_io.cgi">commons-io</a>，导入项目Library</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String url;<span class="comment">// Picture url</span></span><br><span class="line">  <span class="keyword">private</span> String path;</span><br><span class="line">  <span class="keyword">private</span> String name;<span class="comment">// Saved file name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Thread2</span><span class="params">(String url, String path, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    <span class="keyword">this</span>.path = path;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">    webDownloader.downloader(url, path, name);</span><br><span class="line">    System.out.println(<span class="string">"Downloaded the file which name is "</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">"src/com/newthread/img/"</span>;</span><br><span class="line">    Thread2 t1 = <span class="keyword">new</span> Thread2(</span><br><span class="line">        <span class="string">"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8okovekj21hc0u0e42.jpg"</span>,</span><br><span class="line">        path, <span class="string">"tower.jpg"</span>);</span><br><span class="line">    Thread2 t2 = <span class="keyword">new</span> Thread2(</span><br><span class="line">        <span class="string">"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8oq8jx1j21hc0u0qse.jpg"</span>,</span><br><span class="line">        path, <span class="string">"bike.jpg"</span>);</span><br><span class="line">    Thread2 t3 = <span class="keyword">new</span> Thread2(</span><br><span class="line">        <span class="string">"https://wx1.sinaimg.cn/orj360/67e231a6ly1geq8on2u4gj21hc0u0ngj.jpg"</span>,</span><br><span class="line">        path, <span class="string">"bridge.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// simultaneous execution</span></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// downloader</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">  <span class="comment">// download function</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String path,String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(path + name));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.err.println(<span class="string">"IO Exception...downloader function has a problem!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/Thread/webdownloader.PNG" alt=""></p><h2 id="3、Runnable接口"><a href="#3、Runnable接口" class="headerlink" title="3、Runnable接口"></a>3、Runnable接口</h2><h3 id="3-1-Runnable接口"><a href="#3-1-Runnable接口" class="headerlink" title="3.1 Runnable接口"></a>3.1 Runnable接口</h3><p>声明实现类<code>Runnable</code>接口。 那个类然后实现了<code>run</code>方法。  然后可以分配类的实例，在<strong>创建<code>Thread</code>时作为参数传递</strong>，并启动。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现Runnable接口创建的线程，不能通过run或start方法来启动。在Thread类中有一个构造器，这个构造器接收一个Runnable接口的实现类对象，构造Thread线程类对象，然后使用这个线程类对象调用start方法启动我们的线程。</p></blockquote><h3 id="3-2-创建步骤"><a href="#3-2-创建步骤" class="headerlink" title="3.2 创建步骤"></a>3.2 创建步骤</h3><ul><li>自定义线程类实现<strong>Runnable接口</strong></li><li>实现<strong>run()</strong>方法，编写线程执行体</li><li>创建线程对象，调用<strong>start()</strong>方法启动线程</li></ul><p>推荐使用Runnable对象，因为Java单继承的局限性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// run方法线程体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      System.out.print(String.format(<span class="string">"%-3d"</span>, i) + <span class="string">"Hello    "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// main方法主线程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建Runnable接口的实现类对象</span></span><br><span class="line">    Thread3 thread3 = <span class="keyword">new</span> Thread3();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    Thread thread = new Thread(thread3);</span></span><br><span class="line"><span class="comment">//    thread.start();</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(thread3).start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">800</span>; i++) &#123;</span><br><span class="line">      System.err.print(String.format(<span class="string">"%-3d"</span>, i) + <span class="string">"World    "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-对比"><a href="#3-3-对比" class="headerlink" title="3.3 对比"></a>3.3 对比</h3><ul><li>继承Thread类<ul><li>子类继承Thread类具有多线程能力</li><li>启动线程：子类对象.start()</li><li>不建议使用：避免OOP单继承局限</li></ul></li><li>实现Runnable接口<ul><li>子类实现Runnable接口具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li>推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用</li></ul></li></ul><h2 id="4、Callable接口（了解即可）"><a href="#4、Callable接口（了解即可）" class="headerlink" title="4、Callable接口（了解即可）"></a>4、Callable接口（了解即可）</h2><h3 id="4-1-源码："><a href="#4-1-源码：" class="headerlink" title="4.1 源码："></a>4.1 源码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从源码可以看出，Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p><p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务。</p></blockquote><h3 id="4-2-创建步骤"><a href="#4-2-创建步骤" class="headerlink" title="4.2 创建步骤"></a>4.2 创建步骤</h3><ul><li><p>实现Callable接口，需要返回值类型</p></li><li><p>重写call方法，需要抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务：<code>ExecutorService ser = Executors.newFixedThreadPool(1);</code></p></li><li><p>提交执行：<code>Future&lt; Boolean&gt; result1 = ser.submit(1);</code></p></li><li><p>获取结果：<code>boolean r1= result1.get();</code></p></li><li><p>关闭服务：<code>ser.shutdownNow();</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callable1</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      System.out.println(String.format(<span class="string">"%-3d"</span>, i) +</span><br><span class="line">            Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Callable1 callable1 = <span class="keyword">new</span> Callable1();</span><br><span class="line">    Callable1 callable2 = <span class="keyword">new</span> Callable1();</span><br><span class="line">    Callable1 callable3 = <span class="keyword">new</span> Callable1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建执行服务</span></span><br><span class="line">    ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交执行</span></span><br><span class="line">    Future&lt;Boolean&gt; result1 = ser.submit(callable1);</span><br><span class="line">    Future&lt;Boolean&gt; result2 = ser.submit(callable2);</span><br><span class="line">    Future&lt;Boolean&gt; result3 = ser.submit(callable3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取结果</span></span><br><span class="line">    <span class="keyword">boolean</span> r1= result1.get();</span><br><span class="line">    <span class="keyword">boolean</span> r2= result2.get();</span><br><span class="line">    <span class="keyword">boolean</span> r3= result3.get();</span><br><span class="line">    System.out.println(r1 + <span class="string">" "</span>+ r2 + <span class="string">" "</span> + r3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭服务</span></span><br><span class="line">    ser.shutdownNow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、静态代理模式"><a href="#5、静态代理模式" class="headerlink" title="5、静态代理模式"></a>5、静态代理模式</h2><h3 id="5-1-内容"><a href="#5-1-内容" class="headerlink" title="5.1 内容"></a>5.1 内容</h3><p>真实角色，代理角色；真实角色和代理角色要实现同一个接口，代理角色要持有真实角色的<strong>引用</strong>。</p><blockquote><p>在Java中线程的设计使用了静态代理设计模式，其中自定义线程类实现Runable接口，Thread类也实现了Runalbe接口，在创建子线程的时候，传入了自定义线程类的引用，再通过调用start()方法，调用自定义线程对象的run()方法。实现了线程的并发执行。</p></blockquote><p>Thread对象调用线程的start()方法，在内部调用了真实角色的run()方法。</p><h3 id="5-2-设计"><a href="#5-2-设计" class="headerlink" title="5.2 设计"></a>5.2 设计</h3><p>代码结构由三部分组成</p><ul><li><p>接口：主题</p></li><li><p>代理类</p></li><li><p>被代理类</p></li></ul><blockquote><p>实现方式：代理类和被代理类要实现同一个主题接口，而且代理类中要有一个被代理类的属性（target），这样才能把核心业务逻辑交还给被代理类完成；而一些与核心业务逻辑无关的逻辑，并且需求是多变的，那么这些逻辑就可以交给代理类来完成。</p><p>代理对象可以做很多真实对象做不了的事情，真实对象专注做自己的事情</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringPioneer springPioneer = <span class="keyword">new</span> SpringPioneer(<span class="keyword">new</span> Programmer());</span><br><span class="line">    springPioneer.Deploy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SpringBootFrame</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 接口主题：框架整合部署</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Deploy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实角色，程序员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">implements</span> <span class="title">SpringBootFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Deploy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Programmer SpringBoot deployed successfully!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理角色，SpringBoot的作者，帮我们简化开发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringPioneer</span> <span class="keyword">implements</span> <span class="title">SpringBootFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理谁--&gt;真实目标角色</span></span><br><span class="line">  <span class="keyword">private</span> SpringBootFrame target;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SpringPioneer</span><span class="params">(SpringBootFrame target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Deploy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    before();</span><br><span class="line">    <span class="keyword">this</span>.target.Deploy();<span class="comment">// 这就是真实对象</span></span><br><span class="line">    after();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"研发出这个SpringBoot框架，并开源。"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"不断推出新的特性。"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Lambda表达式"><a href="#6、Lambda表达式" class="headerlink" title="6、Lambda表达式"></a>6、Lambda表达式</h2><p>函数式编程的概念</p><h3 id="6-1-为什么要使用lambda表达式？"><a href="#6-1-为什么要使用lambda表达式？" class="headerlink" title="6.1 为什么要使用lambda表达式？"></a>6.1 为什么要使用lambda表达式？</h3><p>避免匿名内部类定义过多，代码简洁，去掉无意义代码，核心逻辑。</p><p>理解Functional Interface（函数式接口）是学习Java8 lambda表达式的关键。</p><p>函数式接口的定义：任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数式接口，我们可以通过lambda表达式来创建接口的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambda1</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 3.静态内部类</span></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticEntityLike</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Static likes lambda!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Like entityLike = <span class="keyword">new</span> EntityLike();</span><br><span class="line">    entityLike.lambda();</span><br><span class="line"></span><br><span class="line">    Like staticEntityLike = <span class="keyword">new</span> StaticEntityLike();</span><br><span class="line">    staticEntityLike.lambda();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.局部内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InternalEntityLike</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Internal likes lambda!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Like internalEntityLike = <span class="keyword">new</span> InternalEntityLike();</span><br><span class="line">    internalEntityLike.lambda();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.匿名内部类，没有类的名称，必须借助接口或者父类</span></span><br><span class="line">    Like anonymousEntityLike = <span class="keyword">new</span> Like() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Anonymous likes lambda!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    anonymousEntityLike.lambda();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.用lambda简化</span></span><br><span class="line">    Like lambdaLike = () -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">"Lambda likes lambda!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    lambdaLike.lambda();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    new Like(()-&gt;System.out.println("Lambda likes lambda!")).lambda();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.带参数的</span></span><br><span class="line">    Love lambdaLove = (<span class="keyword">int</span> t) -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">"Lambda loves you "</span> + t + <span class="string">" times!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    lambdaLove.time(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.1简化去掉参数类型</span></span><br><span class="line">    Love love1 = (t) -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">"Lambda loves you "</span> + t + <span class="string">" times!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    love1.time(<span class="number">521</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.2简化去掉括号</span></span><br><span class="line">    Love love2 = t -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">"Lambda loves you "</span> + t + <span class="string">" times!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    love2.time(<span class="number">522</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.3简化去掉花括号</span></span><br><span class="line">    <span class="comment">// lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</span></span><br><span class="line">    Love love3 = t -&gt; System.out.println(<span class="string">"Lambda loves you "</span> + t + <span class="string">" times!"</span>);</span><br><span class="line">    love3.time(<span class="number">523</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntityLike</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"I like lambda!"</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Love</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">time</span><span class="params">(<span class="keyword">int</span> t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个参数可以去掉参数类型，再简化就必须加上括号<code>(a, b)-&gt;{};</code></p><h2 id="7、线程"><a href="#7、线程" class="headerlink" title="7、线程"></a>7、线程</h2><h3 id="7-1-线程状态"><a href="#7-1-线程状态" class="headerlink" title="7.1 线程状态"></a>7.1 线程状态</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/Thread/thread_state.PNG" style="zoom:80%;" /></p><p>创建状态（new）：<code>Thread t = new Thread();</code>，线程对象一旦创建，就进入到了新生状态。</p><p>就绪状态：当调用<code>start()</code>方法，线程立即进入就绪状态，但不意味着立即调度执行。</p><p>运行状态：CPU调度进入运行状态线程才真正执行线程体的代码块。</p><p>阻塞状态：当调用<code>sleep()</code>，<code>wait()</code>或同步锁定时，线程进入阻塞状态就是代码不往下执行，阻塞<br>事件解除后，重新进入就绪状态，等待cpu调度执行。</p><p>死亡状态（dead）：线程中断或者结束，<strong>一旦进入死亡状态，就不能再次启动</strong>。</p><h3 id="7-2-线程方法"><a href="#7-2-线程方法" class="headerlink" title="7.2 线程方法"></a>7.2 线程方法</h3><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">setPriority(int newPriority)</td><td style="text-align:left">设置当前线程的优先级</td></tr><tr><td style="text-align:center">static void sleep(long millis)</td><td style="text-align:left">在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）。休眠的线程进入阻塞状态。</td></tr><tr><td style="text-align:center">void join()</td><td style="text-align:left">调用join方法的线程强制执行，其他线程处于阻塞状态，等该线程执行完后，其他线程再执行。有可能被外界中断产生InterruptedException中断异常。</td></tr><tr><td style="text-align:center">static void yield()</td><td style="text-align:left">调用yield方法的线程，（暂停当前执行的线程对象）会礼让其他线程先运行。（大概率其他线程先运行，小概率自己还会运行）</td></tr><tr><td style="text-align:center">void interrupt()</td><td style="text-align:left">中断线程，不建议使用</td></tr><tr><td style="text-align:center">boolean isAlive()</td><td style="text-align:left">判断线程是否处于活动状态 （线程调用start后，即处于活动状态）</td></tr></tbody></table></div><h3 id="7-3-停止线程"><a href="#7-3-停止线程" class="headerlink" title="7.3 停止线程"></a>7.3 停止线程</h3><ul><li><p>不推荐使用JDK提供的<code>stop()</code>和<code>destroy()</code>方法。（已废弃）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">      checkAccess();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">        security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// A zero status value corresponds to "NEW", it can't change to</span></span><br><span class="line">    <span class="comment">// not-NEW because we hold the lock.</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">      resume(); <span class="comment">// Wake up thread if it was suspended; no-op otherwise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The VM can handle all thread states</span></span><br><span class="line">    stop0(<span class="keyword">new</span> ThreadDeath());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError();</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>推荐线程自己停止下来，建议使用一个标志位进行终止变量当<code>flag=false</code>，则终止线程运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1.设置一个标志位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      System.out.println(<span class="string">"run...Thread..."</span>+i++);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">    <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">"main...Thread..."</span>+i);</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用stop方法停止线程</span></span><br><span class="line">        testStop.stop();</span><br><span class="line">        System.out.println(<span class="string">"run...Thread...stoped..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：线程停止，main线程继续执行到结束</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/Thread/test_stop.PNG" style="zoom:67%;" /></p></li></ul><h3 id="7-4-线程休眠"><a href="#7-4-线程休眠" class="headerlink" title="7.4 线程休眠"></a>7.4 线程休眠</h3><blockquote><p>sleep(时间)指定当前线程阻塞的毫秒数；sleep存在异常Interrupted Exception；sleep时间达到后线程进入<strong>就绪状态</strong>；sleep可以模拟网络延时，倒计时等；每一个对象都有一个锁，sleep不会释放锁。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      tenDown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印当前系统时间</span></span><br><span class="line">    Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">// 获取当前系统时间</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Start printing system time..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(startTime));</span><br><span class="line">        startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">// 更新时间</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      System.out.println(num--);</span><br><span class="line">      <span class="keyword">if</span> (num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-线程礼让"><a href="#7-4-线程礼让" class="headerlink" title="7.4 线程礼让"></a>7.4 线程礼让</h3><p><strong>礼让线程，让当前正在执行的线程暂停，但不阻塞；将线程从运行状态转为就绪状态；让cpu重新调度，礼让不一定成功！看CPU心情。</strong></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(myYield, <span class="string">"a"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(myYield, <span class="string">"b"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"Thread starts..."</span>);</span><br><span class="line">    Thread.yield();    <span class="comment">// 礼让</span></span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"Thread ends..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-线程强制执行"><a href="#7-5-线程强制执行" class="headerlink" title="7.5 线程强制执行"></a>7.5 线程强制执行</h3><blockquote><p>join()合并程序，待此线程执行完成后，再执行其他线程，其他线程阻塞。可以想象为插队。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">"VIP thread comes..."</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">    Thread thisThread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">    thisThread.start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i==<span class="number">90</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          thisThread.join();<span class="comment">// 插队</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"main Thread..."</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取一个运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main Thread...0</span><br><span class="line">VIP thread comes...0</span><br><span class="line">main Thread...1</span><br><span class="line">VIP thread comes...1</span><br><span class="line">VIP thread comes...2</span><br><span class="line">VIP thread comes...3</span><br><span class="line">VIP thread comes...4</span><br><span class="line">VIP thread comes...5</span><br><span class="line">...</span><br><span class="line">main Thread...87</span><br><span class="line">main Thread...88</span><br><span class="line">main Thread...89</span><br><span class="line">VIP thread comes...19</span><br><span class="line">VIP thread comes...20</span><br><span class="line">VIP thread comes...21</span><br><span class="line">VIP thread comes...22</span><br><span class="line">VIP thread comes...23</span><br><span class="line">VIP thread comes...24</span><br><span class="line">...</span><br><span class="line">VIP thread comes...98</span><br><span class="line">VIP thread comes...99</span><br><span class="line">main Thread...90</span><br><span class="line">main Thread...91</span><br><span class="line">main Thread...92</span><br><span class="line">main Thread...93</span><br></pre></td></tr></table></figure><p>在插队之前，2线程并行，当调用join()后，这个线程即成为VIP，只能等VIP线程执行结束，其他线程才能继续执行。</p><h3 id="7-6-线程状态"><a href="#7-6-线程状态" class="headerlink" title="7.6 线程状态"></a>7.6 线程状态</h3><p>线程状态State是枚举类型，有5个状态，在中文帮助文档中有声明。</p><p>Thread.java源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    TERMINATED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sun.misc.VM.toThreadState(threadStatus);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"\\\\\\"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 观察状态</span></span><br><span class="line">    Thread.State state = thread.getState();</span><br><span class="line">    System.out.println(state);<span class="comment">// NEW</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动</span></span><br><span class="line">    thread.start();</span><br><span class="line">    state = thread.getState();</span><br><span class="line">    System.out.println(state);<span class="comment">// RUN</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123;<span class="comment">// 只要线程不终止就一直输出状态</span></span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">      state = thread.getState();<span class="comment">// 更新状态</span></span><br><span class="line">      System.out.println(state);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7-线程优先级"><a href="#7-7-线程优先级" class="headerlink" title="7.7 线程优先级"></a>7.7 线程优先级</h3><blockquote><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行；线程的优先级用数字表示，范围从1-10。</p></blockquote><p>Thread.java源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">        newPriority = g.getMaxPriority();</span><br><span class="line">      &#125;</span><br><span class="line">      setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主线程默认优先级</span></span><br><span class="line">    System.out.println(</span><br><span class="line">        Thread.currentThread().getName() +</span><br><span class="line">        <span class="string">"--&gt;"</span>+Thread.currentThread().getPriority()</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">    </span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">    Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">    Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    </span><br><span class="line">    t2.setPriority(<span class="number">2</span>);<span class="comment">// 先设置优先级再启动</span></span><br><span class="line">    t2.start();</span><br><span class="line">    </span><br><span class="line">    t3.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">    t3.start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      t4.setPriority(-<span class="number">1</span>);</span><br><span class="line">      t4.start();</span><br><span class="line">      </span><br><span class="line">      t5.setPriority(<span class="number">11</span>);</span><br><span class="line">      t5.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.err.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(</span><br><span class="line">        Thread.currentThread().getName()+<span class="string">"--&gt;"</span> +</span><br><span class="line">        Thread.currentThread().getPriority()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取一个运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main--&gt;5</span><br><span class="line">java.lang.IllegalArgumentException</span><br><span class="line">Thread-0--&gt;5</span><br><span class="line">Thread-2--&gt;10</span><br><span class="line">Thread-1--&gt;2</span><br></pre></td></tr></table></figure><p>总是主线程mian限制性，优先级低的也可能比高的优先执行。</p><h3 id="7-8-守护（daemon）线程"><a href="#7-8-守护（daemon）线程" class="headerlink" title="7.8 守护（daemon）线程"></a>7.8 守护（daemon）线程</h3><blockquote><p>线程分为用户线程和守护线程；虚拟机必须确保用户线程（main线程）执行完毕；虚拟机不用等待守护线程执行完毕；如后台记录操作日志，监控内存垃圾回收等。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    God god = <span class="keyword">new</span> God();</span><br><span class="line">    Man man = <span class="keyword">new</span> Man();</span><br><span class="line">    </span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">    thread.setDaemon(<span class="keyword">true</span>);  <span class="comment">// 默认false表示用户线程，正常的线程都是用户线程</span></span><br><span class="line">    </span><br><span class="line">    thread.start();  <span class="comment">// 守护线程启动</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(man).start();  <span class="comment">// 用户线程挺停止</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"God bless you!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(<span class="string">"Goodbye World!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看似god线程会一直循环执行下去，但它是守护线程，man线程执行结束后，守护线程等一会也会结束，因为虚拟机还会运行一会儿。</p><h2 id="8、线程同步"><a href="#8、线程同步" class="headerlink" title="8、线程同步"></a>8、线程同步</h2><p>多个线程操作同一个资源。</p><p>并发：同一个对象被多个线程同时操作。</p><p>处理多线程问题时，多个线程访问同—个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用。</p><h3 id="8-1-队列和锁"><a href="#8-1-队列和锁" class="headerlink" title="8.1 队列和锁"></a>8.1 队列和锁</h3><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入锁机制synchronized，当一个线程获得对象的排它锁（锁是对象的），将会独占资源。其他线程必须等待这个线程使用后释放锁即可。存在以下问题：</p><ul><li><p>一个线程持有锁会导致其他所有需要此锁的<strong>线程挂起</strong></p></li><li><p>在多线程竞争下，加锁，释放锁会导致比较多的<strong>上下文切换</strong>和<strong>调度延时</strong>，引起性能问题</p></li><li><p>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致<strong>优先级倒置</strong>，引起性能问题</p></li></ul><h3 id="8-2-同步方法"><a href="#8-2-同步方法" class="headerlink" title="8.2 同步方法"></a>8.2 同步方法</h3><ul><li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法synchronized方法和synchronized块</p><blockquote><p>同步方法: <code>public synchronized void method(int args)</code></p></blockquote></li><li><p>synchronized方法控制对“<strong>对象</strong>“的访问，每个<strong>对象</strong>对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p><blockquote><p>缺陷：若将一个大的方法申明为 synchronized将会影响效率</p></blockquote></li><li><p>弊端：需要锁太多，浪费资源</p></li></ul><h3 id="8-3-同步块"><a href="#8-3-同步块" class="headerlink" title="8.3 同步块"></a>8.3 同步块</h3><ul><li><p>同步块：<code>synchronized(obj){}</code></p></li><li><p>obj称之为同步监视器</p><ul><li>obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class[反射中讲解]</li></ul></li><li><p>同步监视器的执行过程</p><ul><li>第一个线程访问，锁定同步监视器，执行其中代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li></ul></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"Deposit"</span>);</span><br><span class="line">    </span><br><span class="line">    Drawing husband = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"husband"</span>);</span><br><span class="line">    Drawing wife = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">"wife"</span>);</span><br><span class="line">    </span><br><span class="line">    husband.start();</span><br><span class="line">    wife.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> money;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.money = money;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  Account account;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> drawingMoney;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> nowMoney;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.account = account;</span><br><span class="line">    <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @Override</span></span><br><span class="line">  <span class="comment">// public synchronized void run() &#123;</span></span><br><span class="line">  <span class="comment">//   if(account.money-drawingMoney&lt;0) &#123;</span></span><br><span class="line">  <span class="comment">//     System.out.println(Thread.currentThread().getName()+" Money is not enough!");</span></span><br><span class="line">  <span class="comment">//     return;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//   try &#123;</span></span><br><span class="line">  <span class="comment">//     Thread.sleep(1000);</span></span><br><span class="line">  <span class="comment">//   &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">  <span class="comment">//     e.printStackTrace();</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   // 卡内余额</span></span><br><span class="line">  <span class="comment">//   account.money = account.money - drawingMoney;</span></span><br><span class="line">  <span class="comment">//   // 手里的现金</span></span><br><span class="line">  <span class="comment">//   nowMoney = nowMoney + drawingMoney;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//   System.out.println(account.name + " balance is "+account.money);</span></span><br><span class="line">  <span class="comment">//   System.out.println(this.getName()+"'s cash now is "+nowMoney);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">      <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" Money is not enough!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      account.money = account.money - drawingMoney;</span><br><span class="line"></span><br><span class="line">      nowMoney = nowMoney + drawingMoney;</span><br><span class="line">      </span><br><span class="line">      System.out.println(account.name + <span class="string">" balance is "</span>+account.money);</span><br><span class="line">      System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"'s cash now is "</span>+nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意了：同步块指定锁住的对象，可以锁住任何对象。如果用上面的方法将run方法上锁，锁住的是husband和wife对象，也就是有两把锁了（2个线程2把锁）。只能用下面的方法锁住变化的量，才有用。</p><p>List等常见数据集合是非安全的，JUC(java.util.concurrent包)中提供了CopyOnWriteArrayList等安全类型的集合。</p></blockquote><h2 id="9、锁"><a href="#9、锁" class="headerlink" title="9、锁"></a>9、锁</h2><h3 id="9-1-死锁"><a href="#9-1-死锁" class="headerlink" title="9.1 死锁"></a>9.1 死锁</h3><blockquote><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形。某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Makeup girl1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">"Marry"</span>);</span><br><span class="line">    Makeup girl2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">"Lisa"</span>);</span><br><span class="line">    </span><br><span class="line">    girl1.start();</span><br><span class="line">    girl2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用static保证资源只有一份儿</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">  <span class="keyword">int</span> choice;</span><br><span class="line">  String name;<span class="comment">// 化妆的人</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.choice = choice;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      startMakeup();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">  <span class="comment">// private void startMakeup() throws InterruptedException &#123;</span></span><br><span class="line">  <span class="comment">//   if (choice==0) &#123;</span></span><br><span class="line">  <span class="comment">//     synchronized (lipstick) &#123;// 获得口红的锁</span></span><br><span class="line">  <span class="comment">//       System.out.println(this.name+" got the lipstick!");</span></span><br><span class="line">  <span class="comment">//       Thread.sleep(1000);</span></span><br><span class="line">  <span class="comment">//       synchronized (mirror) &#123;// 1秒钟后向获得镜子</span></span><br><span class="line">  <span class="comment">//         System.out.println(this.name+" got the mirror!");</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     synchronized (mirror) &#123;</span></span><br><span class="line">  <span class="comment">//       System.out.println(this.name+" got the mirror!");</span></span><br><span class="line">  <span class="comment">//       Thread.sleep(1000);</span></span><br><span class="line">  <span class="comment">//       synchronized (lipstick) &#123;</span></span><br><span class="line">  <span class="comment">//         System.out.println(this.name+" got the lipstick!");</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   // 比如选择0时，只有当得到镜子后才会释放口红的锁，就会死锁</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startMakeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (choice==<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">// 获得口红的锁</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">" got the lipstick!"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">// 1秒钟后向获得镜子</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">" got the mirror!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">" got the mirror!"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">" got the lipstick!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这样做就是当口红用完口红的锁就释放</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合操作系统死锁产生的条件和避免死锁的方式。</p><h3 id="9-2-Lock（锁）"><a href="#9-2-Lock（锁）" class="headerlink" title="9.2 Lock（锁）"></a>9.2 Lock（锁）</h3><ul><li><p>从JDK5.0开始，Java提供了更强大的线程同步机制：通过显式定义<strong>同步锁对象</strong>来实现同步。同步锁使用Lock对象充当</p></li><li><p>java.utll.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问,毎次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</p></li><li><p>ReentrantLock（可重入锁）类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是Reentrantlock，可以显式加锁、释放锁。</p></li></ul><h3 id="9-3-synchronized和Lock的对比"><a href="#9-3-synchronized和Lock的对比" class="headerlink" title="9.3 synchronized和Lock的对比"></a>9.3 synchronized和Lock的对比</h3><ul><li><p>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放</p></li><li><p>Lock只有代码块锁，synchronized有代码块锁和方法锁</p></li><li><p>使用Lock锁，JwM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</p></li><li><p>优先使用顺序：Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源） &gt; 同步方法（在方法体之外）</p></li></ul><h2 id="10、线程协作（线程通信）"><a href="#10、线程协作（线程通信）" class="headerlink" title="10、线程协作（线程通信）"></a>10、线程协作（线程通信）</h2><blockquote><p>在生产者消费者问题中，仅有synchronized是不够的</p><ul><li><p>synchronized可阻止并发更新同一个共享资源，实现了同步</p></li><li><p>synchronized不能用来实现不同线程之间的消息传递（通信）</p></li></ul></blockquote><p>Java提供了几个方法解决线程之间的通信问题</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table></div><blockquote><p>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用否则会抛出异常IlegalMonitorState Exception</p></blockquote><h3 id="10-1-解决方式1：管程法"><a href="#10-1-解决方式1：管程法" class="headerlink" title="10.1 解决方式1：管程法"></a>10.1 解决方式1：管程法</h3><p>并发协作模型“生产者/消费者模式”—&gt;管程法</p><ul><li><p>生产者：负责生产数据的模块(可能是方法，对象，线程，进程)</p></li><li><p>消费者：负责处理数据的模块(可能是方法，对象，线程，进程)</p></li><li><p>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区“</p></li></ul><p>生产者将生产好的数据放入<strong>缓冲区</strong>，消费者从缓冲区拿出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductorCustomer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Productor(buffer).start();</span><br><span class="line">    <span class="keyword">new</span> Customer(buffer).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 需要一个容器</span></span><br><span class="line">  Buffer buffer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      buffer.push(<span class="keyword">new</span> Goods(i));</span><br><span class="line">      System.out.println(<span class="string">"生产了第"</span>+i+<span class="string">"个商品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  Buffer buffer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 消费</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">"消费了第"</span> + buffer.pop().getID() + <span class="string">"个商品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> ID;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ID = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ID;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 需要一个容器大小</span></span><br><span class="line">  Goods[] goods = <span class="keyword">new</span> Goods[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产者放入产品</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Goods good)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果容器满了，就需要等待消费者消费</span></span><br><span class="line">    <span class="keyword">if</span>(count==goods.length) &#123;</span><br><span class="line">      <span class="comment">// 通知消费者消费，生产等待</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果没有满就需要放入产品</span></span><br><span class="line">    goods[count] = good;</span><br><span class="line">    count++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以通知消费者消费了</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 消费者消费产品</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Goods <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 通知生产者生产，消费等待</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果可以消费</span></span><br><span class="line">    count--;</span><br><span class="line">    Goods good = goods[count];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以通知生产者生产了</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    <span class="keyword">return</span> good;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-解决方式2：信号灯法"><a href="#10-2-解决方式2：信号灯法" class="headerlink" title="10.2 解决方式2：信号灯法"></a>10.2 解决方式2：信号灯法</h3><p>就是长度为1的管程法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductorCustomerUsingSignal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Show show = <span class="keyword">new</span> Show();</span><br><span class="line">    <span class="keyword">new</span> Actor(show).start();</span><br><span class="line">    <span class="keyword">new</span> Audience(show).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Show show;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(Show show)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = show;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show.play(<span class="string">"Happy Camp!"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.show.play(<span class="string">"TikTok!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audience</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Show show;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Audience</span><span class="params">(Show show)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = show;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.show.watch();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 演员表演，观众等待T</span></span><br><span class="line">  <span class="comment">// 观众观看，演员等待F</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  String display;<span class="comment">// 表演的节目</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表演</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Actors show the "</span>+display);</span><br><span class="line">    <span class="comment">// 通知观众观看</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    <span class="keyword">this</span>.display = display;</span><br><span class="line">    <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表演</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Audience watch the "</span>+display);</span><br><span class="line">    <span class="comment">// 通知演员表演</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、线程池"><a href="#11、线程池" class="headerlink" title="11、线程池"></a>11、线程池</h2><blockquote><p>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具（共享单车）。</p></blockquote><p>优势：</p><ul><li><p>提高响应速度（减少了创建新线程的时间）</p></li><li><p>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p></li><li><p>便于线程管理（…）</p><ul><li>core Poolsize：核心池的大小</li><li>maximumPoolsize：最大线程数</li><li>keepAlive Time：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建服务，创建线程池</span></span><br><span class="line">    ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    executorService.execute(<span class="keyword">new</span> PoolThread());</span><br><span class="line">    executorService.execute(<span class="keyword">new</span> PoolThread());</span><br><span class="line">    executorService.execute(<span class="keyword">new</span> PoolThread());</span><br><span class="line">    executorService.execute(<span class="keyword">new</span> PoolThread());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.关闭连接</span></span><br><span class="line">    executorService.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoolThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>JDK5.0起提供了线程池相关API：Executor Service和Executors</p></li><li><p>Executor Service：真正的线程池接口。常见子类 ThreadPoolExecutor</p><ul><li><code>void execute( Runnable command)</code>：执行任务命令，没有返回值，一般用来执<br>行 Runnable</li><li><code>&lt;T&gt; Future&lt;T&gt; submit( Callable&lt;T&gt;task)</code>：执行任务，有返回值，一般又来执行<br>Callable（上面我们介绍Callable接口时测试过）</li><li><code>void shutdown()</code>：关闭连接池</li></ul></li><li><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;创建线程的&lt;strong&gt;主要&lt;/strong&gt;方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承Thread类创建线程类（重点）&lt;/li&gt;
&lt;li&gt;实现Runnable接口创建线程类（重点）&lt;/li&gt;
&lt;li&gt;实现Callable接口或Future接口创建线程（了解）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="原理" scheme="https://mysticalguest.github.io/categories/%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Java" scheme="https://mysticalguest.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门</title>
    <link href="https://mysticalguest.github.io/2020/09/02/Redis/NoSQL/"/>
    <id>https://mysticalguest.github.io/2020/09/02/Redis/NoSQL/</id>
    <published>2020-09-02T02:02:44.660Z</published>
    <updated>2020-09-07T15:53:55.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、NoSQL概述"><a href="#1、NoSQL概述" class="headerlink" title="1、NoSQL概述"></a>1、NoSQL概述</h2><h3 id="1-1-为什么要用NoSQL"><a href="#1-1-为什么要用NoSQL" class="headerlink" title="1.1 为什么要用NoSQL"></a>1.1 为什么要用NoSQL</h3><a id="more"></a><p>大数据时代，分布式集群，单机—&gt;分布式</p><ul><li><p>单机MySQL的时代</p><blockquote><p>应用不是直接访问MySQL，会通过一些方法，DAL（数据访问层，Data Access Layer）去访问MySQL实例。以前不同SQL对应不同语法，麻烦，出现了框架Hibernate和MyBatis等框架，开发变得简单，框架底层值得学习。</p></blockquote></li><li><p>90年代，一个基本的的网站访问量不会太大，单个数据库完全足够！</p><blockquote><p>那个时候更多的去使用静态网页Html，服务器根本没有太大压力！</p><p>思考一下，这种情况下：整个网站的瓶颈是什么？</p></blockquote><ul><li>数据量太大，一个机器放不下！</li><li>数据的索引，比如如果MySQL的数据超300万，不建立索引太慢！MySQL使用B+Tree，索引机器也放不下！</li><li>访问量（读写混合），一个服务器承受不来！</li></ul><blockquote><p>只要出现以上3种情况之一，就要晋级！</p></blockquote></li><li><p>Memcached（缓存）+MySQL+垂直拆分（读写分离）</p><blockquote><p>网站80%的情况都在读，每次都要去查询数据库的话时分麻烦，所以说我们希望减轻服务器压力，可以使用缓存来保持效率！</p><p>发展过程：优化数据结构和索引-&gt;文件索引（IO）-&gt;Memcached（当时最热门的技术）</p></blockquote><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/redis/cache.png" style="zoom:50%;" /></p></li><li><p>分库分表+水平拆分+MySQL集群</p><blockquote><p>技术和业务在发展的同时，对人的要求也越来越高了！</p><p>数据库本质：读写</p><p>早些年MyISAM（默认存储引擎）：表锁，十分影响效率！高并发下就会出现严重的锁问题；</p><p>转战Innodb：行锁</p><p>慢慢的开始使用分库分表来解决写的压力！多服务多表MySQL在那个年代推出了表分区！但并没有多少公司使用。MySQL的集群，很好满足那个年代需求。</p></blockquote><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/redis/Cluster.png" style="zoom: 40%;" /></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、NoSQL概述&quot;&gt;&lt;a href=&quot;#1、NoSQL概述&quot; class=&quot;headerlink&quot; title=&quot;1、NoSQL概述&quot;&gt;&lt;/a&gt;1、NoSQL概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-为什么要用NoSQL&quot;&gt;&lt;a href=&quot;#1-1-为什么要用NoSQL&quot; class=&quot;headerlink&quot; title=&quot;1.1 为什么要用NoSQL&quot;&gt;&lt;/a&gt;1.1 为什么要用NoSQL&lt;/h3&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://mysticalguest.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis" scheme="https://mysticalguest.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="https://mysticalguest.github.io/2020/08/29/ES/ElasticSearchStart/"/>
    <id>https://mysticalguest.github.io/2020/08/29/ES/ElasticSearchStart/</id>
    <published>2020-08-29T13:00:34.978Z</published>
    <updated>2020-09-07T09:01:58.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、ElasticSearch介绍"><a href="#1、ElasticSearch介绍" class="headerlink" title="1、ElasticSearch介绍"></a>1、ElasticSearch介绍</h2><a id="more"></a><h3 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h3><ul><li><p>在海量数据中执行搜索功能时，如果使用MSQL，效率太低。</p></li><li><p>如果关键字输入的不准确一样可以搜索到想要的数据。</p></li><li><p>将搜索关键字，以高亮字体展示（购物网站）。</p></li></ul><h3 id="1-2-ES的介绍"><a href="#1-2-ES的介绍" class="headerlink" title="1.2 ES的介绍"></a>1.2 ES的介绍</h3><p>ES是一个使用Java语言并且基于lucence编写的搜索引擎框架，他提供了分布式的全文搜索功能，提供了一个统一的基于RESTful风格的WEB接口。<a href="https://www.elastic.co/cn/">官方文档</a></p><ul><li><p>lucence：一个搜索引擎底层，<a href="https://lucene.apache.org/">官方网站</a>，apache旗下的顶级项目，直接使用成本太高，所以采用ES实现功能。</p></li><li><p>分布式：突出ES的横向扩展能力。</p></li><li><p>全文检索：将一段词语进行分词，并将分出的单个词语统一的放在一个分词库中，在搜索时，根据关键字取分词库中检索，找到匹配的内容（倒排索引）。</p><blockquote><p>比如：淘宝搜索“壳手机”，将其分解为“壳”、“手机”、“手”等；将目标“…苹果手机壳…”也这样分解。（全文检索）</p></blockquote></li><li><p>RESTful风格的WEB接口：操作ES，只需要发送一个http请求，并且根据请求方式的不同，携带参数的不同，执行相应的功能。</p></li></ul><p>应用广泛：WIKI，Github，Gold Man用ES每天维护将近10TB数据。</p><h3 id="1-3-ES的由来"><a href="#1-3-ES的由来" class="headerlink" title="1.3 ES的由来"></a>1.3 ES的由来</h3><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html">你知道的, 为了搜索…</a></p><p><strong>回忆时光</strong></p><p>许多年前，一个刚结婚的名叫 Shay Banon 的失业开发者，跟着他的妻子去了伦敦，他的妻子在那里学习厨师。 在寻找一个赚钱的工作的时候，为了给他的妻子做一个食谱搜索引擎，他开始使用 Lucene 的一个早期版本。</p><p>直接使用 Lucene 是很难的，因此 Shay 开始做一个抽象层，Java 开发者使用它可以很简单的给他们的程序添加搜索功能。 他发布了他的第一个开源项目 Compass。</p><p>后来 Shay 获得了一份工作，主要是高性能，分布式环境下的内存数据网格。这个对于高性能，实时，分布式搜索引擎的需求尤为突出， 他决定重写 Compass，把它变为一个独立的服务并取名 Elasticsearch。</p><p>第一个公开版本在2010年2月发布，从此以后，Elasticsearch 已经成为了 Github 上最活跃的项目之一，他拥有超过300名 contributors(目前736名 contributors )。 一家公司已经开始围绕 Elasticsearch 提供商业服务，并开发新的特性，但是，Elasticsearch 将永远开源并对所有人可用。</p><p>据说，Shay 的妻子还在等着她的食谱搜索引擎…</p><h3 id="1-4-ES和Slor"><a href="#1-4-ES和Slor" class="headerlink" title="1.4 ES和Slor"></a>1.4 ES和Slor</h3><ul><li><p>Solr在查询死数据时，速度比ES快。但是数据如果是改变的，Solr查询速度会降低很多，ES的查询速度没有变化。</p></li><li><p>Solr搭建集群依赖ZooKeeper来帮助管理，ES本身就支持集群的搭建，不需要第三方的介入。</p></li><li><p>Solr出现早，最开始Solr的社区很火爆，针对国内文档少；ES出现后，国内社区火爆程度 上升，ES的文档非常健全。</p></li><li><p>ES对云计算和大数据支持很好</p></li></ul><h3 id="1-5-倒排索引"><a href="#1-5-倒排索引" class="headerlink" title="1.5 倒排索引"></a>1.5 倒排索引</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/elasticsearch/step.png" style="zoom: 67%;" /></p><p>拿到数据的过程分两步：（关键字：“好编程“，分词为”好“和”编程“）</p><ul><li><strong>query</strong>：根据输入的关键字，去分词库中检索内容；结果：1,2,3</li><li><strong>fetch</strong>：根据在分词库中检索到的id，直接拉取指定数据；结果：“1：你好”，“2：编程”和“3：你好编程”</li></ul><blockquote><p>将存放的数据以一定的方式进行分词，并将分词的内容存放到一个单独的分词库中。</p><p>当用户取查询数据时，会将用户的查询关键字进行分词。</p><p>然后去分词库中匹配内容，最终得到数据的id标识</p><p>根据id标识去存放数据的位置拉去指定数据</p></blockquote><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><h3 id="2-1-安装docker-compose"><a href="#2-1-安装docker-compose" class="headerlink" title="2.1 安装docker-compose"></a>2.1 安装docker-compose</h3><p><a href="https://mysteryguest.gitee.io/2020/08/18/Spring/SpringBootDocker/#3、安装Docker">Docker安装方法</a></p><h4 id="2-2-1-安装方法1，使用pip"><a href="#2-2-1-安装方法1，使用pip" class="headerlink" title="2.2.1 安装方法1，使用pip"></a>2.2.1 安装方法1，使用pip</h4><ul><li><p>安装pip需要先安装epel-release包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yum <span class="literal">-y</span> install <span class="literal">-y</span> epel<span class="literal">-release</span></span><br></pre></td></tr></table></figure></li><li><p>安装pip</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yum install <span class="literal">-y</span> python<span class="literal">-pip</span></span><br></pre></td></tr></table></figure></li><li><p>检查python和pip版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python <span class="literal">-V</span>   <span class="comment"># 3+</span></span><br><span class="line"><span class="variable">$</span> pip <span class="literal">-V</span>      <span class="comment"># 20+</span></span><br></pre></td></tr></table></figure></li><li><p>若不满足上述条件</p><ul><li><p>pip升级</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> pip install -<span class="literal">-upgrade</span> pip <span class="literal">-ihttp</span>://pypi.douban.com/simple -<span class="literal">-trusted</span><span class="literal">-host</span> pypi.douban.com</span><br></pre></td></tr></table></figure></li><li><p>升级python2到python3</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="variable">$</span> wget https://www.python.org/ftp/python/<span class="number">3.7</span>.<span class="number">0</span>/Python<span class="literal">-3</span>.<span class="number">7.0</span>.tgz</span><br><span class="line"><span class="comment"># 解压源码包</span></span><br><span class="line"><span class="variable">$</span> tar <span class="literal">-zxvf</span> Python<span class="literal">-3</span>.<span class="number">7.0</span>.tgz</span><br><span class="line"><span class="comment"># 创建安装目录</span></span><br><span class="line"><span class="variable">$</span> mkdir /usr/local/python3</span><br><span class="line"><span class="variable">$</span> cd Python<span class="literal">-3</span>.<span class="number">7.0</span>/</span><br><span class="line"><span class="comment"># 安装到指定目录</span></span><br><span class="line"><span class="variable">$</span> ./configure -<span class="literal">-prefix</span>=/usr/local/python3</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="variable">$</span> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>设置软链接全局使用python3</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cd /usr/local/python3</span><br><span class="line"><span class="variable">$</span> ln <span class="literal">-s</span> /usr/local/python3/bin/python3 /usr/local/bin/python3</span><br><span class="line"><span class="variable">$</span> ln <span class="literal">-s</span> /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br><span class="line"><span class="variable">$</span> ln <span class="literal">-s</span> /usr/local/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure></li><li><p>验证版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python3 <span class="literal">-V</span></span><br><span class="line">Python <span class="number">3.7</span>.<span class="number">0</span></span><br><span class="line"><span class="variable">$</span> pip <span class="literal">-v</span></span><br><span class="line">pip <span class="number">20.2</span>.<span class="number">2</span> from /usr/local/python3/lib/python3.<span class="number">7</span>/site<span class="literal">-packages</span>/pip (python <span class="number">3.7</span>)</span><br></pre></td></tr></table></figure></li><li><p>可以使用下述命令来查看软链接设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ls <span class="literal">-al</span> /usr/bin | grep python</span><br></pre></td></tr></table></figure></li><li><p>升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vi /usr/bin/yum</span><br><span class="line">将 <span class="comment">#!/usr/bin/python 改为 #!/usr/bin/python2.7</span></span><br><span class="line"><span class="variable">$</span> vi /usr/libexec/urlgrabber<span class="literal">-ext</span><span class="literal">-down</span></span><br><span class="line">将 <span class="comment">#!/usr/bin/python 改为 #!/usr/bin/python2.7</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>指定安装源，安装docker-compose</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> pip install <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure></li><li><p>查看docker-compose的版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line">docker<span class="literal">-compose</span> version <span class="number">1.24</span>.<span class="number">0</span>, build <span class="number">0</span>aa5906</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1-2-安装方法2，离线安装（推荐）"><a href="#2-1-2-安装方法2，离线安装（推荐）" class="headerlink" title="2.1.2 安装方法2，离线安装（推荐）"></a>2.1.2 安装方法2，离线安装（推荐）</h4><p>Github发行<a href="https://github.com/docker/compose/releases">版本</a>，下载<code>docker-compose-Linux-x86_64</code>，推荐一个软件<code>Motrix</code>，加快下载速度，将下载文件命名为<code>docker-compose</code>。</p><ul><li><p>上传到服务器并移动到<code>/usr/local/bin/</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> mv docker<span class="literal">-compose</span> /usr/local/bin/</span><br></pre></td></tr></table></figure></li><li><p>添加可执行权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> chmod +x /usr/local/bin/docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure></li><li><p>查看docker-compose版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line">docker<span class="literal">-compose</span> version <span class="number">1.26</span>.<span class="number">2</span>, build eefe0d31</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-安装ElasticSearch-amp-Kibana"><a href="#2-2-安装ElasticSearch-amp-Kibana" class="headerlink" title="2.2 安装ElasticSearch&amp;Kibana"></a>2.2 安装ElasticSearch&amp;Kibana</h3><p><a href="http://hub.daocloud.io/">Docker镜像工厂</a>，分别搜索“elasticsearch”和“kibana”，选取“<strong>社区镜像</strong>”作为来源，找到“library/elasticsearch”和“library/kibana”，版本同一。</p><p>Kibana是为Elasticsearch设计的开源分析和可视化平台。</p><ul><li><p>在指定文件夹下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vi docker<span class="literal">-compose</span>.yml</span><br></pre></td></tr></table></figure></li><li><p>并复制下面内容到docker-compose.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">elasticsearch:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/elasticsearch:6.5.4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">  <span class="attr">kibana:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/kibana:6.5.4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch_url=ip:9200</span>   <span class="comment"># 此处ip为自己对应主机地址</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker<span class="literal">-compose</span> logs <span class="operator">-f</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器查看，成功</p><ul><li><p>浏览<a href="http://192.168.6.33:9200/：">http://192.168.6.33:9200/：</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/elasticsearch/es_success.PNG" alt=""></p></li><li><p>浏览<a href="http://192.168.6.33:5601">http://192.168.6.33:5601</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/elasticsearch/kb_success.PNG" alt=""></p></li></ul></li></ul><h3 id="2-3-安装IK分词器"><a href="#2-3-安装IK分词器" class="headerlink" title="2.3 安装IK分词器"></a>2.3 安装IK分词器</h3><p>Es默认的分词器对中文的支持是不友好的，Github下载<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">地址</a>，版本还是要统一。</p><p>还是使用docker安装：</p><ul><li><p>查看es容器的CONTAINER ID，进入es容器内部：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">docker_elasticsearch</span>]<span class="comment"># docker exec -it &lt;CONTAINER ID&gt; bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fddcec4fe9e7</span> <span class="type">elasticsearch</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>进入bin目录，执行bin目录下的脚本文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cd bin</span><br></pre></td></tr></table></figure></li><li><p>IK分词器对于es来说就是一个插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ./elastic<span class="built_in">search-plugin</span> install </span><br><span class="line">      https://github.com/medcl/elastic<span class="built_in">search-analysis</span><span class="literal">-ik</span>/releases/download/v6.<span class="number">5.4</span>/</span><br><span class="line">              elastic<span class="built_in">search-analysis</span><span class="literal">-ik</span><span class="literal">-6</span>.<span class="number">5.4</span>.zip</span><br></pre></td></tr></table></figure><blockquote><p>由于在容器内安装IK分词器，如果把容器<code>down</code>掉，这个IK分词器就没了，重启就可以了</p></blockquote></li><li><p>记得重启es容器，分词器才会生效，重启es就可以了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker restart &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Kibana中测试，使用GitHub推荐<a href="https://github.com/medcl/elasticsearch-analysis-ik#quick-example">方法</a>；在Dev Tool中：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">_analyze</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"analyzer"</span>: <span class="string">"ik_max_word",</span></span><br><span class="line">  <span class="meta">"text"</span>:<span class="string">"我是Java工程师.你呢?"</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>得到输出“</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"java"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"ENGLISH"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"工程师"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"工程"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"师"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"你"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"呢"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、ElasticSearch介绍&quot;&gt;&lt;a href=&quot;#1、ElasticSearch介绍&quot; class=&quot;headerlink&quot; title=&quot;1、ElasticSearch介绍&quot;&gt;&lt;/a&gt;1、ElasticSearch介绍&lt;/h2&gt;
    
    </summary>
    
    
      <category term="搜索引擎" scheme="https://mysticalguest.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticSearch" scheme="https://mysticalguest.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Java及JVM简介</title>
    <link href="https://mysticalguest.github.io/2020/08/28/Java/JVM%E7%AE%80%E4%BB%8B/"/>
    <id>https://mysticalguest.github.io/2020/08/28/Java/JVM%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-28T14:49:08.862Z</published>
    <updated>2020-09-08T15:43:22.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><h3 id="1-1-你是否也遇到过这些问题"><a href="#1-1-你是否也遇到过这些问题" class="headerlink" title="1.1 你是否也遇到过这些问题?"></a>1.1 你是否也遇到过这些问题?</h3><a id="more"></a><ul><li><p>运行着的线上系统突然卡死，系统无法访问，甚至直接OOM（Out Of Memory）!</p></li><li><p>想解决线上 JVM GC（ JVM垃圾回收 ）问题，但却无从下手。</p></li><li><p>新项目上线，对各种JVM参数设置一脸茫然，直接默认吧，然后就错了。</p></li><li><p>每次面试之前都要重新背一遍J的一些原理概念性的东西，然而面试官却经常问你在实际项目中如何调优JVM参数，如何解决GC、OOM等问题，一脸懵逼。</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/JVM.PNG" alt="JVM"></p><p>我们通常都是学习基础的技能，在此基础上学习更复杂的功能。</p><h3 id="1-2-开发人员如何看待上层框架"><a href="#1-2-开发人员如何看待上层框架" class="headerlink" title="1.2 开发人员如何看待上层框架"></a>1.2 开发人员如何看待上层框架</h3><ul><li><p>一些有一定工作经验的开发人员，打心眼儿里觉得SSM、微服务等上层技术才是重点，基础技术并不重要，这其实是一种本末倒置的“病态“。</p></li><li><p>如果我们把核心类库的 API 比做数学公式的话，那么 Java 虚拟机的知识就好比公式的推导过程</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/Composition-principle.PNG" alt=""></p><blockquote><p>计算机系统体系对我们来说越来越远，在不了解底层实现方式的前提下，通过高级语言很容易编写程序代码。但事实上计算机并不认识高级语言。</p></blockquote><h3 id="1-3-架构师每天都在思考什么"><a href="#1-3-架构师每天都在思考什么" class="headerlink" title="1.3 架构师每天都在思考什么?"></a>1.3 架构师每天都在思考什么?</h3><ul><li><p>应该如何让我的系统更快?</p></li><li><p>如何避免系统出现瓶颈?</p></li></ul><h3 id="1-4-知乎上有条帖子：应该如何看招聘信息，直通年薪50万"><a href="#1-4-知乎上有条帖子：应该如何看招聘信息，直通年薪50万" class="headerlink" title="1.4 知乎上有条帖子：应该如何看招聘信息，直通年薪50万+?"></a>1.4 知乎上有条帖子：应该如何看招聘信息，直通年薪50万+?</h3><ul><li>参与现有系统的性能优化，重构，保证平台性能和稳定性</li><li>根据业务场景和需求，决定技术方向，做技术选型</li><li>能够独立架构和设计海量数据下高并发分布式解决方案，满足功能和非功能需求</li><li>解决各类潜在系统风险，核心功能的架构与代码编写</li><li>分析系统瓶颈，解决各种疑难杂症,性能调优等</li></ul><h3 id="1-5-为什么要学JVM？"><a href="#1-5-为什么要学JVM？" class="headerlink" title="1.5 为什么要学JVM？"></a>1.5 为什么要学JVM？</h3><ul><li>面试的需要：入职BATJ（京东）、T（头条）MD（滴滴）、P（拼多多）K（快手）Q（趣头条）等一线大厂不光关注技术的广度，更关注技术的深度，JVM技术是大厂面试的必备技能，掌握越深越好</li><li>中高级程序员、架构师必备技能：架构师每天都在思考如何让我的系统更快，如何避免系统出现性能瓶颈。单纯的依靠物理机不足以解决问题，分析系统性能、调优系统瓶颈离不了对JVM中内存、垃圾回收、字节码指令、性能监控工具、调优参数的熟练掌握。</li><li>精进技术、极客（好奇与行动）追求：JVM是Java生态的核心价值的体现，垃圾回收算法、JIT（ just in time 的缩写，也就是即时编译编译器，AOT：提前编译器）、底层原理值得每个程序员去探索。同时，JVM作为跨语言的平台，对于深入理解Scala、Kotlin、JavaScript、Jython、Groovy也很有帮助。Java最前沿最成熟垃圾回收算法。</li></ul><h3 id="1-6-Java-vs-C"><a href="#1-6-Java-vs-C" class="headerlink" title="1.6 Java  vs  C++"></a>1.6 Java  vs  C++</h3><p>以C语言代表的语言是高级语言的开端了，Java借鉴了C和C++的有点，并摈弃其缺点；缺点主要就是<strong>内存动态分配</strong>和<strong>垃圾收集技术</strong>。</p><p>分配内存想要再次使用就要垃圾回收，否则就成一次性内存了。对于C语言来说，就需要程序员自己分配内存自己回收；Java是自动管理内存的。对于自动管理内存的弊端就是不了解Java内部的内存结构和工作机制，对于项目调优就没办法了，理解为黑盒？心中胆怯，没底？</p><p>垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发的效率，但是，垃圾收集也不是万能的，懂得JVM内部的内存结构、工作机制，是设计高扩展性应用和诊断运行时问题的基础，也是Java工程师进阶的必备能力。</p><h2 id="2、Java及JVM简介"><a href="#2、Java及JVM简介" class="headerlink" title="2、Java及JVM简介"></a>2、Java及JVM简介</h2><p>栈管运行，堆管存储？Java半解释型，半编译型语言？</p><p><a href="https://docs.oracle.com/javase/specs/index.html">Java虚拟机官方文档下载</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/hotspot.PNG" alt="HotSpot" style="zoom: 70%;" /></p><p><a href="https://www.tiobe.com/tiobe-index/">TIOBE语言热度排行榜</a></p><h3 id="2-1-Java生态圈"><a href="#2-1-Java生态圈" class="headerlink" title="2.1 Java生态圈"></a>2.1 Java生态圈</h3><p>Java是目前应用最为广泛的软件开发平台之一。随着Java以及Java社区的不断壮大，Java也早已不再是简简单单的一门计算机语言了,它更是一个平台、一种文化、一个社区。</p><ul><li><p><strong>作为一个平台</strong>，Java虚拟机扮演着举足轻重的作用。</p><p>Groovy、 Scala、 JRuby、Kot]in等都是Java平台的一部分</p></li><li><p><strong>作为一种文化</strong>，Java几乎成为了“开源”的代名词</p><ul><li>第三方开源软件和框架。如 Tomcat、 struts, My Batis, Spring等。</li><li>就连UDK和JM自身也有不少开源的实现,如 OpenJDK、 Harmony（开源的JVM）</li></ul></li><li><p><strong>作为一个社区</strong>，Java拥有全世界最多的技术拥护者和开源社区支持，有数不清的论坛和资料。从桌面应用软件、嵌入式开发到企业级应用、后台服务器、中间件，都可以看到Java的身影。其应用形式之复杂、参与人数之众多也令人咋舌</p></li></ul><h3 id="2-2-Java：跨平台的语言"><a href="#2-2-Java：跨平台的语言" class="headerlink" title="2.2 Java：跨平台的语言"></a>2.2 Java：跨平台的语言</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/Cross-platform.PNG" style="zoom:80%;" /></p><h3 id="2-3-JVM虚拟机规范"><a href="#2-3-JVM虚拟机规范" class="headerlink" title="2.3 JVM虚拟机规范"></a>2.3 JVM虚拟机规范</h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-1.html#jvms-1">The Java Virtual Machine Specification, Java SE 8 Edition</a></p><p>Java虚拟机是Java平台的基石。 它是技术的组成部分，负责硬件和操作系统的独立性，编译代码的小巧大小以及保护用户免受恶意程序攻击的能力。</p><p>编译代码的小巧（小尺寸）：在一个程序中用到了基本数据类型和类，在编译字节码文件时对应一个常量池，运行的时候对应运行常量池，通过常量指向，避免去字节码文件加载大量数据和类，以保证字节码文件的小尺寸，</p><h3 id="2-4-JVM：跨语言的平台"><a href="#2-4-JVM：跨语言的平台" class="headerlink" title="2.4 JVM：跨语言的平台"></a>2.4 JVM：跨语言的平台</h3><p>Java：跨平台的语言</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/Cross-language.PNG" style="zoom:90%;" /></p><p>不仅可以执行Java程序，其他语言也是可以的。只需保证各<strong>自的编译器</strong>编译出的字节码文件遵循Java虚拟机规范即可。在Java虚拟机的<strong>编译器</strong>中运行。</p><p>三大并行难题：CPU、OS、编译器。</p><ul><li><p>随着Java7的正式发布，Java虚拟机的设计者们通过JSR-292规范基本实现在<strong>Java虚拟机平台上运行非Java语言编写的程序。</strong></p></li><li><p>Java虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，<strong>它只关心“字节码”文件</strong>。也就是说Java虚拟机拥有语言无关性，并不会单纯地与Java语言“终身绑定”，只要其他编程语言的编译结果满足并包含Java虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。</p></li></ul><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-1.html#jvms-1">The Java Virtual Machine Specification, Java SE 8 Edition</a></p><p>为了安全起见，Java虚拟机对类文件中的代码施加了严格的语法和结构约束。 但是，Java虚拟机可以托管任何具有<strong>可用有效类文件表示的功能的语言</strong>。 受通用的独立于机器的平台的吸引，其他语言的实现者可以将Java虚拟机作为其语言的交付工具。</p><p>Java不是最强大的语言，但是JVM是最强大的虚拟机。</p><h3 id="2-5-字节码"><a href="#2-5-字节码" class="headerlink" title="2.5 字节码"></a>2.5 字节码</h3><ul><li><p>我们平时说的java字节码，指的是用java语言编译成的字节码。准确的说任何能在JVM平台上执行的字节码格式都是一样的。所以应该统称为<strong>JVM字节码</strong>。</p></li><li><p>不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的JVM上运行。</p></li><li><p>Java 虚拟机与Java 语言并没有必然的联系，它只与特定的二进制文件格式——Class文件格式所关联，Class文件中包含了Java虚拟机指令集（或者称为字节码、 Bytecodes）和符号表，还有一些其他辅助信息。</p></li></ul><h3 id="2-6-多语言混合编程"><a href="#2-6-多语言混合编程" class="headerlink" title="2.6 多语言混合编程"></a>2.6 多语言混合编程</h3><ul><li><p>Java平台上的<strong>多语言混合编程</strong>正成为主流，通过<strong>特定领域的语言</strong>去解决<strong>特定领域的问题</strong>是当前软件干发应对日趋复杂的项目需求的一个方向。</p></li><li><p>试想一下，在一个项目之中，并行处理用Clojure语言编写，展示层使用JRuby/Rails，中间层则是Java，每个应用层都将使用不同的编程语言来完成，而且，接口对每一层的开发者都是透明的，<strong>各种语言之间的交互</strong>不存在任何困难，就像使用自己语言的原生API一样方便，因为它们最终都运行在<strong>一个虚拟机</strong>之上。</p></li><li><p>对这些运行于Java虚拟机之上、Java之外的语言，来自系统级的、底层的支持正在迅速增强，以JSR-292为核心的一系列项目和功能改进（如Da Vinci machine项目、 Nashorn引擎、 Invoke Dynamic指令、java.lang.invoke包等），<strong>推动Java虚拟机从“Java语言的虚拟机”向“多语言虚拟机”的方向发展</strong>。</p></li></ul><h2 id="3、Java发展的重大事件"><a href="#3、Java发展的重大事件" class="headerlink" title="3、Java发展的重大事件"></a>3、Java发展的重大事件</h2><ul><li><p>1990年，在Sun计算机公司中，由 Patrick Naughton、 Mikesheridan及James Gosling领导的小组 Green Team，开发出的新的程序语言，命名为oak，后期命名为Java</p></li><li><p>1995年，Sun正式发布Java和 HotJava产品，Java首次公开亮相。</p></li><li><p>1996年1月23日 Sun Microsystems发布了JDK1.0。</p></li><li><p>1998年，JDK1.2版木发布。同时，sun发布了JSP/ Servlet、EJB规范，以及将Java分成了J2EE（企业级应用）、J2SE（桌面级应用）和J2ME（移动端）。这表明了Java开始向企业、桌面应用和移动设备应用3大领域挺进。</p></li><li><p>2000年，JDK1.3发布， <strong>Java Hotspot Virtual Machine正式发布，成为</strong><br><strong>Java的默认虚拟机</strong>。</p></li><li><p>2002年，JDK1.4发布，古老的 Classic虚拟机退出历史舞台，同期微软.NET发布</p></li><li><p>2003年年底，<strong>Java平台的 Scala正式发布，同年 Groovy也加入了Java阵营</strong>。</p></li><li><p>2004年，JDK1.5发布。同时JDK1.5改名为 JavaSE5.0。</p></li><li><p>2006年，JDK6发布。同年，<strong>Java开源并建立了 OpenJDK</strong>。顺理成章，<strong>Hotspot虚拟机也成为了 OpenJDK中的默认虚拟机</strong>。</p></li><li><p>2007年，Java平台迎来了新伙伴Clojure。</p></li><li><p>2008年，Oracle收购了BEA，得到了JRockit虚拟机。</p></li><li><p>2009年，Twitter宣布把后台大部分程序从Ruby迁移到 Scala，这是Java平台的又一次大规模应用。</p></li><li><p>2010年，Oracle收购了Sun，<strong>获得Java商标和最具价值的 Hotspot虚拟机</strong>，JCP组织管理Java语言，但Oracle话语权比较重。此时，Oracle拥有市场占用率最高的两款虚拟机Hot Spot和 JRockit，并计划在未来对它们进行整合：Hotrockit</p></li><li><p>2011年，JDK7发布。在JDK1.7u4中，正式启用了新的垃圾回收器G1。</p></li><li><p>2014年，算是整合了上述两款虚拟机Hotrockit，从JavaSE8.0后</p></li><li><p>2017年，JDK9发布。将G1设置为默认GC，替代CMS。同年，<strong>IBM的J9开源</strong>，形成了现在的 Open J9社区</p></li><li><p>2018年，Android的Java侵权案判决，Google赔偿Oracle计88亿美元。同年，OracLe宣告 JavaEE成为历史名词，JDBC、JMS、servlet赠予Eclipse基金会。同年，JDK11发布，LTS版本的JDK，<strong>发布革命性的ZGC，调整JDK授权许可</strong></p></li><li><p>2019年，JDK12发布，加入RedHat领导开发的 Shenandoah GC</p></li></ul><p>在JDK11之前，OracleJDK中还会存在一些 OpenJDK中没有的、闭源的功能。但在JDK11中，我们可以认为 OpenJDK和 oracleJDK代码实质上已经完全一致的程度。主要是基于的协议不同，OpenJDK基于OPL协议，OracleJDK基于OPN协议。OpenJDK维护期半年，过了就更新下一版本，OracleJDK持续维护3年</p><h2 id="4、虚拟机与Java虚拟机"><a href="#4、虚拟机与Java虚拟机" class="headerlink" title="4、虚拟机与Java虚拟机"></a>4、虚拟机与Java虚拟机</h2><h3 id="4-1-虚拟机"><a href="#4-1-虚拟机" class="headerlink" title="4.1 虚拟机"></a>4.1 虚拟机</h3><ul><li><p>所谓虚拟机( Virtual Machine)，就是一台虚拟的计算机它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong>。</p><ul><li>大名鼎鼎的 Visual Box，VMware就属于系统虚拟机，它们<strong>完全是对物理计算机的仿真</strong>，提供了一个可运行完整操作系统的软件平台。</li><li>程序虚拟机的典型代表就是Java虚拟机，它<strong>专门为执行单个计算机程序而设计</strong>，在Java虚拟机中执行的指令我们称为Java字节码指令。</li></ul></li><li><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。</p></li></ul><h3 id="4-2-Java虚拟机"><a href="#4-2-Java虚拟机" class="headerlink" title="4.2 Java虚拟机"></a>4.2 Java虚拟机</h3><ul><li><p>Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。</p></li><li><p>JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即时编译器。</p></li><li><p><strong>Java技术的核心就是Java虚拟机</strong>（JVM，Java Virtual Machine）因为所有的Java程序都运行在Java虚拟机内部。</p></li><li><p>作用：</p><p><strong>Java虚拟机就是二进制字节码的运行环境</strong>，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</p></li><li><p>特点</p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul></li></ul><h2 id="5、JVM的位置"><a href="#5、JVM的位置" class="headerlink" title="5、JVM的位置"></a>5、JVM的位置</h2><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/JVM-location.PNG" alt=""></p><p>JⅥM是运行在操作系统之上的，它与硬件没有直接的交互。不同操作系统的JVM是有区别的。</p><h2 id="6、JVM的整体结构"><a href="#6、JVM的整体结构" class="headerlink" title="6、JVM的整体结构"></a>6、JVM的整体结构</h2><ul><li><p>HotSpot VM是目前市面上高性能虚拟机的代表作之一。</p></li><li><p>它采用解释器与即时编译器并存的架构。</p></li><li><p>在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++程序一较高下的地步。</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/overall-structure.PNG" alt=""></p><p>将图示结构分为上中下层：</p><ul><li><p>上层：入口是字节码文件，通过装载器加载到内存中，生成class对象；</p></li><li><p>中层：有对应class的实例了；多线程共享方法区和堆，虚拟机栈（Java栈），本地方法栈和程序计数器是每个线程独有的。</p></li><li><p>下层：有“后端编译器”，将高级语言翻译为机器语言</p></li></ul><h2 id="7、Java代码执行流程"><a href="#7、Java代码执行流程" class="headerlink" title="7、Java代码执行流程"></a>7、Java代码执行流程</h2><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/Implementation-process.png" alt=""></p><p>关于上图中Java编译器（“前端”编译器）的细节不用过多关注，除非涉及开发一门语言；在这个过程中任何一个过程失败，都不能正确生成字节码文件。字节码文件也是跨平台的</p><p>“解析执行”和“编译执行“模块相当于执行引擎，”解析执行“保证响应时间，逐行对字节码解释执行，反复执行的代码称为”热点代码“，“编译执行”有个二次编译，第一编译为字节码的热点代码，将其缓存起来，下次直接调用，转换为机器指令。</p><h2 id="8、JVM的架构模型"><a href="#8、JVM的架构模型" class="headerlink" title="8、JVM的架构模型"></a>8、JVM的架构模型</h2><p>Java编译器输入的指令流基本上是一种基于<strong>栈的指令集架构</strong>，另外一种指令集架构则是基于<strong>寄存器的指令集架构</strong>。HotSpot是基于栈的架构。</p><h3 id="8-1-具体来说：这两种架构之间的区别："><a href="#8-1-具体来说：这两种架构之间的区别：" class="headerlink" title="8.1 具体来说：这两种架构之间的区别："></a>8.1 具体来说：这两种架构之间的区别：</h3><ul><li>基于栈式架构的特点<ul><li>设计和实现更简单，适用于资源受限的系统；（方法，入栈出栈？实现简单）</li><li>避开了寄存器的分配难题：使用零地址（无地址，只有操作数）指令方式分配。（栈的结构？栈顶元素？不需要知道地址？不麻烦）</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现。</li><li>不需要硬件支持，可移植性更好，更好实现跨平台。（栈与内存交互）</li></ul></li><li>基于寄存器架构的特点<ul><li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。</li><li><strong>指令集架构则完全依赖硬件，可移植性差</strong></li><li><strong>性能优秀和执行更高效</strong></li><li>花费更少的指令去完成一项操作。</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主方水洋</li></ul></li></ul><h3 id="8-2-示例"><a href="#8-2-示例" class="headerlink" title="8.2 示例"></a>8.2 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackStructureTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// int i = 1+2;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> k = i+j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后，会在项目的out文件夹下生成字节码文件：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Java/JVM/out-complie.PNG" alt=""></p><p>在“chapter01”下打开cmd执行下面语句进行反编译：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> javap <span class="literal">-v</span> StackStructureTest<span class="class">.<span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>输出：（基于栈的计算流程（以Java虚拟机为例））</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="comment">#23 = Utf8               java/lang/Object</span></span><br><span class="line">&#123;</span><br><span class="line">  public com.chapter01.StackStructureTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial <span class="comment">#1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  this   Lcom/chapter01/StackStructureTest;</span><br><span class="line"></span><br><span class="line">  public <span class="keyword">static</span> void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;)<span class="type">V</span></span><br><span class="line">    <span class="type">flags</span>: <span class="type">ACC_PUBLIC</span>, <span class="type">ACC_STATIC</span></span><br><span class="line">    <span class="type">Code</span>:</span><br><span class="line">      <span class="type">stack</span>=<span class="number">2</span>, <span class="type">locals</span>=<span class="number">4</span>, <span class="type">args_size</span>=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="type">iconst_3</span>  // 定义常量<span class="number">3</span></span><br><span class="line">         <span class="number">1</span>: <span class="type">istore_1</span>  // <span class="number">1</span>是操作数栈的索引位置，将上面常量保存到索引为<span class="number">1</span>的操作数栈中</span><br><span class="line">         <span class="number">2</span>: <span class="type">iconst_4</span></span><br><span class="line">         <span class="number">3</span>: <span class="type">istore_2</span></span><br><span class="line">         <span class="number">4</span>: <span class="type">iload_1</span>   // 将索引<span class="number">1</span>加载进来</span><br><span class="line">         <span class="number">5</span>: <span class="type">iload_2</span>   // 加载索引<span class="number">2</span></span><br><span class="line">         <span class="number">6</span>: <span class="type">iadd</span>      // 求和操作</span><br><span class="line">         <span class="number">7</span>: <span class="type">istore_3</span>  // 将结果存到索引为<span class="number">3</span>的操作数栈中</span><br><span class="line">         <span class="number">8</span>: <span class="type">return</span>    // <span class="number">8</span>行，寄存器的话</span><br><span class="line">      <span class="type">LineNumberTable</span>:</span><br><span class="line">        <span class="type">line</span> <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">        <span class="type">line</span> <span class="number">8</span>: <span class="number">2</span></span><br><span class="line">        <span class="type">line</span> <span class="number">9</span>: <span class="number">4</span></span><br><span class="line">        <span class="type">line</span> <span class="number">10</span>: <span class="number">8</span></span><br><span class="line">      <span class="type">LocalVariableTable</span>:</span><br><span class="line">        <span class="type">Start</span>  <span class="type">Length</span>  <span class="type">Slot</span>  <span class="type">Name</span>   <span class="type">Signature</span></span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="type">args</span>   [<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;</span><br><span class="line">            <span class="number">2</span>       <span class="number">7</span>     <span class="number">1</span>     <span class="type">i</span>   <span class="type">I</span></span><br><span class="line">            <span class="number">4</span>       <span class="number">5</span>     <span class="number">2</span>     <span class="type">j</span>   <span class="type">I</span></span><br><span class="line">            <span class="number">8</span>       <span class="number">1</span>     <span class="number">3</span>     <span class="type">k</span>   <span class="type">I</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">SourceFile</span>: <span class="string">"StackStructureTest.java"</span></span><br></pre></td></tr></table></figure><p>而基于寄存器的计算流程：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax,<span class="number">2</span> //将eax寄存器的值设为<span class="number">1</span></span><br><span class="line">add eax,<span class="number">3</span> //使eax寄存器的值加<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="8-3-总结"><a href="#8-3-总结" class="headerlink" title="8.3 总结"></a>8.3 总结</h3><p><strong>由于跨平台性的设计，Java的指令都是根据栈来设计的。</strong>不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p><p>时至今日，尽管嵌入式平台已经不是Java程序的主流运行平台了（准确来说应该是HotSpot VM的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？</p><p>栈：跨平台性、指令集小、指令多；执行性能比寄存器差</p><h2 id="9、JVM的生命周期"><a href="#9、JVM的生命周期" class="headerlink" title="9、JVM的生命周期"></a>9、JVM的生命周期</h2><h3 id="9-1-虚拟机的启动"><a href="#9-1-虚拟机的启动" class="headerlink" title="9.1 虚拟机的启动"></a>9.1 虚拟机的启动</h3><p>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p><p>自定义的类通过系统类加载器加载，继承自Object，Object需要被引导类加载器加载，Object并不是初始类，一个简单类的执行就需要加载很多类，此时JVM启动</p><h3 id="9-2-虚拟机的执行"><a href="#9-2-虚拟机的执行" class="headerlink" title="9.2 虚拟机的执行"></a>9.2 虚拟机的执行</h3><ul><li><p>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</p></li><li><p>程序开始执行时他才运行，<strong>程序结束时他就停止</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackStructureTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// int i = 1+2;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> k = i+j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，趁还没有结束，在cmd中输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> jps    // 打印当前执行程序中的进程</span><br><span class="line"><span class="number">22272</span> StackStructureTest   // <span class="number">22272</span>端口号</span><br><span class="line"><span class="number">22548</span></span><br><span class="line"><span class="number">24164</span> RemoteMavenServer36</span><br><span class="line"><span class="number">22024</span> Launcher</span><br><span class="line"><span class="number">21388</span> Jps   // JVM就退出了</span><br><span class="line"><span class="variable">$</span> jps    // 结束后</span><br><span class="line"><span class="number">22548</span></span><br><span class="line"><span class="number">24164</span> RemoteMavenServer36</span><br><span class="line"><span class="number">3188</span> Jps</span><br><span class="line"><span class="number">22024</span> Launcher</span><br></pre></td></tr></table></figure></li></ul><ul><li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做<strong>Java虚拟机的进程</strong>。</li></ul><h3 id="9-3-虚拟机的退出"><a href="#9-3-虚拟机的退出" class="headerlink" title="9.3 虚拟机的退出"></a>9.3 虚拟机的退出</h3><p>有如下的几种情况：</p><ul><li><p>程序正常执行结束</p></li><li><p>程序在执行过程中遇到了异常（没有处理的异常）或错误而异常终止</p></li><li><p>由于操作系统用现错误而导致Java虚拟机进程终止</p></li><li><p>某线程调用Runtime类或system类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。</p><p>第6节运行时数据区，就是运行时环境，对应的类就是<code>java.lang.Runtime</code>，这个类是单例的</p></li><li><p>除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。</p></li></ul><h2 id="10、JVM发展历程"><a href="#10、JVM发展历程" class="headerlink" title="10、JVM发展历程"></a>10、JVM发展历程</h2><h3 id="10-1-Sun-Classic-VM"><a href="#10-1-Sun-Classic-VM" class="headerlink" title="10.1 Sun Classic VM"></a>10.1 Sun Classic VM</h3><ul><li><p>早在1996年Java1.0版本的时候，Sun公司发布了一款名为sun classic VM的Java虚拟机，它同时也是<strong>世界上第一款商用Java虚拟机</strong>，JDK1.4时完全被淘汰。</p></li><li><p>这款虚拟机内部只提供解释器。</p><blockquote><p>现在还有及时编译器，因此效率比较低，而及时编译器会把热点代码缓存起来，那么以后使用热点代码的时候，效率就比较高。提升效率就要用JIT编译器。</p></blockquote></li><li><p>如果使用JIT编译器，就需要进行外挂。但是一旦使用了JIT编译器，JIT就会接管虚拟机的执行系统。解释器就不再工作。解释器和编译器不能配合工作。</p><blockquote><p>解释器响应快，编译器寻找热点代码，不用解释器逐行编译。如果只使用高性能编译器，响应时间慢，加上逐行编译指令，就会使程序启动时响应时间过长（卡顿）。其实现今的Java虚拟机的执行速度以不亚于C，更形象地例子，解释器相当于步行，命令响即出发，编译器相当于坐公交车，命令响等公交或转车，两者配合更优。</p></blockquote></li><li><p>现在hotspot内置了此虚拟机。</p></li></ul><h3 id="10-2-Exact-VM"><a href="#10-2-Exact-VM" class="headerlink" title="10.2 Exact VM"></a>10.2 Exact VM</h3><ul><li><p>为了解决上一个虚拟机问题，jdk1.2时，sun提供了此虚拟机。 Exact Memory Management：准确式内存管理</p><ul><li>也可以叫Non-Conservative/Accurate Memory Management</li><li>虚拟机可以知道内存中某个位置的数据具体是什么类型。|</li></ul></li><li><p>具备现代高性能虚拟机的维形</p><ul><li>热点探测（寻找出热点代码进行缓存）</li><li>编译器与解释器混合工作模式</li></ul></li><li><p>只在solaris平台短暂使用，其他平台上还是classic vm，英雄气短，终被Hotspot虚拟机替换</p></li></ul><h3 id="10-3-HotSpot-VM"><a href="#10-3-HotSpot-VM" class="headerlink" title="10.3 HotSpot VM"></a>10.3 HotSpot VM</h3><ul><li><p>HotSpot历史</p><ul><li>最初由一家名为“Longview Technologies”的小公司设计</li><li>1997年，此公司被sun收购；2009年，Sun公司被甲骨文收购。</li><li>JDK1.3时，HotSpot VM成为默认虚拟机</li></ul></li><li><p>目前<strong>Hotspot占有绝对的市场地位，称霸武林</strong>。</p><ul><li>不管是现在仍在广泛使用的JDK6，还是使用比例较多的JDK8中，默认的虚拟机都是HotSpot</li><li>Sun/oracle JDK和openJDK的默认虚拟机</li><li>因此本课程中默认介绍的虚拟机都是HotSpot，相关机制也主要是指HotSpot的Gc机制。（比如其他两个商用虚机都没有方法区的概念）</li></ul></li><li><p>从服务器、桌面到移动端、嵌入式都有应用。</p></li><li>名称中的HotSpot指的就是它的热点代码探测技术。<ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上替换</li><li>通过编译器与解释器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡</li></ul></li></ul><h3 id="10-4-JRockit"><a href="#10-4-JRockit" class="headerlink" title="10.4 JRockit"></a>10.4 JRockit</h3><ul><li><p><strong>专注于服务器端应用</strong></p></li><li><p>它可以<strong>不太关注程序启动速度</strong>，因此<strong>JRockit内部不包含解析器实现</strong>，全部代码都靠即时编译器编译后执行。</p></li><li><p>大量的行业基准测试显示，<strong>JRockit JVM是世界上最快的JVM</strong>。</p></li><li><p>使用JRockit产品，客户已经体验到了显著的性能提高（一些超过了70%）和硬件成本的减少（达50%）。</p></li><li><p>优势：全面的Java运行时解决方案组合</p><ul><li><p>JRockit面向延迟敏感型应用的解决方案JRockit Real Time提供以毫秒或微秒级的JVM响应时间，适合财务、军事指挥、电信网络的需要</p></li><li><p>MissionControl服务套件，它是一组以极低的开销来监控、管理和分析生产环境中的应用程序的工具。</p><blockquote><p>官网<a href="https://www.oracle.com/java/technologies/javase-downloads.html">JMC</a>，监控内存泄露。</p></blockquote></li></ul></li><li><p>原属BEA公司，2008年，JRockit被oracle收购。</p></li><li><p>oracle表达了整合两大优秀虚拟机的工作，大致在JDK8中完成。整合的方式是在HotSpot的基础上，移植JRockit的优秀特性。</p></li><li><p>高斯林（Java之父）：目前就职于谷歌，研究人工智能和水下机器人</p></li></ul><h3 id="10-5-IBM的J9"><a href="#10-5-IBM的J9" class="headerlink" title="10.5 IBM的J9"></a>10.5 IBM的J9</h3><ul><li><p>全称：IBM Technology for Java Virtual Machine，简称IT4J，内部代号：J9</p></li><li><p>市场定位与HotSpot接近，服务器端、桌面应用、嵌入式等多用途VM广泛用于IBM的各种Java产品。</p></li><li><p><strong>目前，有影响力的三大商用虚拟机之一</strong>，也号称是世界上最快的Java虚拟机。</p></li><li><p>2017年左右，IBM发布了开源J9VM，命名为openJ9，交给EClipse基金会管理，也称为Eclipse OpenJ9</p></li></ul><h3 id="10-6-KVM和CDC-CLDC-Hotspot"><a href="#10-6-KVM和CDC-CLDC-Hotspot" class="headerlink" title="10.6 KVM和CDC / CLDC Hotspot"></a>10.6 KVM和CDC / CLDC Hotspot</h3><ul><li><p>oracle在Java ME产品线上的两款虚拟机为：CDC/CLDC HotSpot Implementation VM KVM（Kilobyte）是CLDC-HI早期产品目前移动领域地位尴尬，智能机被Android和ioS二分天下。</p></li><li><p>KVM简单、轻量、高度可移植，面向更低端的设备上还维持自己的一片市场</p><ul><li>智能控制器、传感器</li><li>老人手机、经济欠发达地区的功能手机</li></ul></li><li><p>所有的虚拟机的原则：一次编译，到处运行。</p></li></ul><h3 id="10-7-Azul-VM"><a href="#10-7-Azul-VM" class="headerlink" title="10.7 Azul VM"></a>10.7 Azul VM</h3><ul><li>前面三大“高性能Java虚拟机”使用在通用硬件平台上</li><li><p>这里Azul VW和BEA Liquid VM是<strong>与特定硬件平台绑定、软硬件配合的专有虚拟机</strong></p><ul><li>高性能Java虚拟机中的战斗机。</li></ul></li><li><p>Azul VM是Azul Systems公司在HotSpot基础上进行大量改进，运行于Azul Systems公司的专有硬件Vega系统上的ava虚拟机。</p></li><li><p><strong>每个Azul VM实例都可以管理至少数十个CPU和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的GC时间的垃圾收集器、专有硬件优化的线程调度等优秀特性</strong>。</p></li><li><p>2010年，Azul Systems公司开始从硬件转向软件，发布了自己的Zing JVM，可以在通用x86平台上提供接近于Vega系统的特性。</p></li></ul><h3 id="10-8-Liquid-VM"><a href="#10-8-Liquid-VM" class="headerlink" title="10.8 Liquid VM"></a>10.8 Liquid VM</h3><ul><li><p>高性能Java虚拟机中的战斗机。</p></li><li><p>BEA公司开发的，直接运行在自家Hypervisor系统上Liquid VM即是现在的JRockit VE（Virtual Edition），</p></li><li><p>Liquid VM即是现在的 JRockit VE（Virtual Edition）。Liquid VM不需要操作系统的支持，或者说它自己本身实现了一个专用操作系统的必要功能，如线程调度、文件系统、网络支持等。</p></li><li><p>随着JRockit虚拟机终止开发，Liquid vM项目也停止了。</p></li></ul><h3 id="10-9Apache-Marmony"><a href="#10-9Apache-Marmony" class="headerlink" title="10. 9Apache Marmony"></a>10. 9Apache Marmony</h3><ul><li><p>Apache也曾经推出过与JDK1.5和JDK1.6兼容的Java运行平台Apache Harmony。</p></li><li><p>它是IBM和Intel联合开发的开源JVM，受到同样开源的OpenJDK的压制，Sun坚决不让Harmony获得JCP认证，最终于2011年退役，IBM转而参与OpenJDK</p></li><li><p>虽然目前并没有Apache Harmony被大规模商用的案例，但是它的Java类库代码吸纳进了Android SDK。</p></li></ul><h3 id="10-10-Micorsoft-JVM"><a href="#10-10-Micorsoft-JVM" class="headerlink" title="10.10 Micorsoft JVM"></a>10.10 Micorsoft JVM</h3><ul><li><p>微软为了在IE3浏览器中支持Java Applets，开发了Microsoft JVM。</p></li><li><p>只能在window平台下运行。但确是当时Windows下性能最好的Java VM。</p></li><li><p>1997年，sun以侵犯商标、不正当竞争罪名指控微软成功，赔了sun很多钱。微软windowsXP SP3中抹掉了其VM。现在windows上安装的jdk都是HotSpot。</p></li></ul><h3 id="10-11-Taobao-JVM"><a href="#10-11-Taobao-JVM" class="headerlink" title="10.11 Taobao JVM"></a>10.11 Taobao JVM</h3><ul><li><p>由Ali JVM团队发布。阿里，国内使用Java最强大的公司，覆盖云计算、金融、物流、电商等众多领域，需要解决高并发、高可用、分布式的复合问题。有大量的开源产品。</p></li><li><p><strong>基于OpenJDK开发了自己的定制版本AlibabaJDK</strong>，简称AJDK。是整个阿里Java体系的基石。</p></li><li><p>基于OpenJDK Hotspot VM发布的国内第一个优化、<strong>深度定制且开源的高性能服务器版Java虚拟机。</strong></p><ul><li>创新的GCIH（GC invisible heap）技术实现了off-heap，<strong>即将生命周期较长的Java对象从heap中移到heap之外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</strong></li><li>GCIH中的对象还能够在多个Java虚拟机进程中实现共享</li><li>使用crc32指令实现JVM intrinsic降低JNI的调用开销</li><li>PMU hardware的Java profiling tool和诊断协助功能</li><li>针对大数据场景的ZenGc</li></ul></li><li><p>taobao vm应用在阿里产品上性能高，硬件严重依赖intel的cpu，损失了兼容性，但提高了性能</p><ul><li>目前已经在淘宝、天猫上线，把Oracle官方JVM版本全部替换了。</li></ul></li></ul><h3 id="10-12-Dalvik-VM"><a href="#10-12-Dalvik-VM" class="headerlink" title="10.12 Dalvik VM"></a>10.12 Dalvik VM</h3><ul><li><p>谷歌开发的，应用于Android系统，并在Android2.2中提供了JIT，发展迅猛。</p></li><li><p><strong>Dalvik VM只能称作虚拟机，而不能称作“Java虚拟机”</strong>，它没有遵循 Java虚拟机规范</p></li><li><p>不能直接执行Java的Class文件</p></li><li><p>基于寄存器架构，不是jvm的栈架构。</p></li><li><p>执行的是编译以后的dex（Dalvik Executable）文件。执行效率比较高。</p><ul><li>它执行的dex（Dalvik Executable）文件可以通过class文件转化而来，使用Java语法编写应用程序，可以直接使用大部分的Java API等。</li></ul></li><li><p>Android 5.0使用支持提前编译（Ahead of Time Compilation，AOT）的ART VM替换Dalvik VM。</p></li></ul><h3 id="10-13-Graal-VM"><a href="#10-13-Graal-VM" class="headerlink" title="10.13 Graal VM"></a>10.13 Graal VM</h3><ul><li><p>2018年4月，Oracle Labs公开了Graal VM，号称 “<strong>Run Programs Faster Anywhere</strong>“，勃勃野心。与1995年java的”write once，run anywhere”遥相呼应。</p></li><li><p>Graa VM在HotSpot VM基础上增强而成的<strong>跨语言全栈虚拟机，可以作为“任何语言” 的运行平台使用</strong>。语言包括：Java、Scala、Groovy、Kotlin；C、C++、Javascript、Ruby、Python、R等</p></li><li><p>支持不同语言中混用对方的接口和对象，支持这些语言使用已经编写好的本地库文件</p></li><li><p>工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被Graal VM接受的中间表示。Graal VM提供Truffle工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。</p></li><li><p><strong>如果说HotSpot有一天真的被取代，Graal VM希望最大</strong>。但是Java的软件生态没有丝毫变化。</p></li></ul><h3 id="10-14-总结"><a href="#10-14-总结" class="headerlink" title="10.14 总结"></a>10.14 总结</h3><p>具体JVM的内存结构，其实取决于其实现，不同厂商的JVM，或者同一厂商发布的不同版本，都有可能存在一定差异。主要以oracle HotSpot VM为默认虚拟机。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h2&gt;&lt;h3 id=&quot;1-1-你是否也遇到过这些问题&quot;&gt;&lt;a href=&quot;#1-1-你是否也遇到过这些问题&quot; class=&quot;headerlink&quot; title=&quot;1.1 你是否也遇到过这些问题?&quot;&gt;&lt;/a&gt;1.1 你是否也遇到过这些问题?&lt;/h3&gt;
    
    </summary>
    
    
      <category term="原理" scheme="https://mysticalguest.github.io/categories/%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Java" scheme="https://mysticalguest.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与缓存</title>
    <link href="https://mysticalguest.github.io/2020/08/28/Spring/AdvancedSpringBootCache/"/>
    <id>https://mysticalguest.github.io/2020/08/28/Spring/AdvancedSpringBootCache/</id>
    <published>2020-08-28T04:02:16.963Z</published>
    <updated>2020-09-08T15:47:17.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Spring-Boot与缓存"><a href="#1、Spring-Boot与缓存" class="headerlink" title="1、Spring Boot与缓存"></a>1、Spring Boot与缓存</h2><a id="more"></a><p>缓存应该是每个系统都应考虑的功能，用来加速系统的访问以及提升系统的性能；</p><p>引入缓存中间件，将高频信息从数据库存入缓存，从缓存拿数据；如果缓存中没有，在到数据库中查找吗，继续放入缓存。应用程序和缓存的交互式非常快的。</p><p>还有验证码这些临时性数据就没有必要存在数据库中了，缓存是不错的选择。</p><p>那么为了统一缓存的开发规范以及提升系统的扩展性，J2EE发布了<strong>JSR-107规范</strong>，但由于整合难度大，用的比较少。JSR-107规范定义的都是一些接口，这样的好处就类似JDBC一样，面向接口编程。但市面上的组件不都提供JSR-107的实现。但为了简化开发，Spring更多使用的是自己的<strong>Spring缓存抽象</strong>。</p><h3 id="1-1-JSR107"><a href="#1-1-JSR107" class="headerlink" title="1.1 JSR107"></a>1.1 JSR107</h3><p>Java Caching定义了5个核心接口，分别是<strong>CachingProvider</strong>, <strong>CacheManager</strong>, <strong>Cache</strong>, <strong>Entry</strong> 和 <strong>Expiry</strong>。</p><ul><li><p><strong>CachingProvider</strong>定义了创建、配置、获取、管理和控制多个<strong>CacheManager</strong>。一个应用可以在运行期访问多个CachingProvider。</p></li><li><p><strong>CacheManager</strong>定义了创建、配置、获取、管理和控制多个唯一命名的<strong>Cache</strong>，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</p></li><li><p><strong>Cache</strong>是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有。</p></li><li><p><strong>Entry</strong>是一个存储在Cache中的key-value对。</p></li><li><p><strong>Expiry</strong> 每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Advanced/JSR.png" alt="JSR" style="zoom:80%;" /></p><h3 id="1-2-Spring缓存抽象"><a href="#1-2-Spring缓存抽象" class="headerlink" title="1.2 Spring缓存抽象"></a>1.2 Spring缓存抽象</h3><p>Spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术；</p><p>并支持使用JCache（JSR-107）注解简化我们开发；</p><ul><li><p>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合；</p></li><li><p>Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache等；</p></li><li><p>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</p></li><li><p>使用Spring缓存抽象时我们需要关注以下两点；</p><ul><li>确定方法需要被缓存以及他们的缓存策略</li><li>从缓存中读取之前缓存存储的数据</li></ul></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Advanced/CacheManager.png" alt="CacheManager" style="zoom:80%;" /></p><h3 id="1-3-几个重要概念-amp-缓存注解"><a href="#1-3-几个重要概念-amp-缓存注解" class="headerlink" title="1.3 几个重要概念&amp;缓存注解"></a>1.3 几个重要概念&amp;缓存注解</h3><div class="table-container"><table><thead><tr><th><strong>Cache</strong></th><th>缓存接口，定义缓存操作。实现有：<strong>RedisCache</strong>、<strong>EhCacheCache</strong>、<strong>ConcurrentMapCache</strong>等</th></tr></thead><tbody><tr><td><strong>CacheManager</strong></td><td><strong>缓存管理器，管理各种缓存（Cache）组件</strong></td></tr><tr><td><strong>@Cacheable</strong></td><td><strong>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</strong></td></tr><tr><td><strong>@CacheEvict</strong></td><td><strong>清空缓存</strong></td></tr><tr><td><strong>@CachePut</strong></td><td><strong>保证方法被调用，又希望结果被缓存。</strong></td></tr><tr><td><strong>@EnableCaching</strong></td><td><strong>开启基于注解的缓存</strong></td></tr><tr><td><strong>keyGenerator</strong></td><td><strong>缓存数据时key生成策略</strong></td></tr><tr><td><strong>serialize</strong></td><td><strong>缓存数据时value序列化策略</strong></td></tr></tbody></table></div><p>都是作用于缓存，不作用于数据库？</p><h3 id="1-4-搭建基本环境"><a href="#1-4-搭建基本环境" class="headerlink" title="1.4 搭建基本环境"></a>1.4 搭建基本环境</h3><ul><li>创建出department和employee表</li></ul><ul><li>创建javaBean封装数据</li></ul><ul><li>整合MyBatis操作数据库<ul><li>配置数据源信息</li><li>使用注解版的MyBatis</li><li>@MapperScan指定需要扫描的mapper接口所在的包</li></ul></li></ul><h2 id="2、快速体验缓存"><a href="#2、快速体验缓存" class="headerlink" title="2、快速体验缓存"></a>2、快速体验缓存</h2><p>缓存SpEL可用元数据</p><div class="table-container"><table><thead><tr><th><strong>名字</strong></th><th><strong>位置</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>methodName</td><td>root object</td><td>当前被调用的方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>root object</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root object</td><td>当前被调用的目标对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root object</td><td>当前被调用的目标对象类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root object</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root object</td><td>当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”,  “cache2”})），则有两个cache</td><td>#root.caches[0].name</td></tr><tr><td><em>argument name</em></td><td>evaluation context</td><td>方法参数的名字. 可以直接 #参数名 ，也可以使用 #p0或#a0 的形式，0代表参数的索引；</td><td>#iban 、 #a0 、 #p0</td></tr><tr><td>result</td><td>evaluation context</td><td>方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache put’的表达式 ’cache evict’的表达式beforeInvocation=false）</td><td>#result</td></tr></tbody></table></div><p>步骤：</p><h3 id="2-1-开启基于注解的缓存-EnableCaching"><a href="#2-1-开启基于注解的缓存-EnableCaching" class="headerlink" title="2.1 开启基于注解的缓存 @EnableCaching"></a>2.1 开启基于注解的缓存 @EnableCaching</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringinitializrApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Start..."</span>);</span><br><span class="line">    SpringApplication.run(SpringinitializrApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"Success..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-标注缓存注解即可"><a href="#2-2-标注缓存注解即可" class="headerlink" title="2.2 标注缓存注解即可"></a>2.2 标注缓存注解即可</h3><p>将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；</p><p>CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；</p><h3 id="2-3-Cacheable"><a href="#2-3-Cacheable" class="headerlink" title="2.3 @Cacheable"></a>2.3 @Cacheable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DepartmentController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  DepartmentService departmentService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/service/dept/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Department <span class="title">getDepart</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.getDepartment(id);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-几个属性："><a href="#2-3-1-几个属性：" class="headerlink" title="2.3.1 几个属性："></a>2.3.1 几个属性：</h4><div class="table-container"><table><thead><tr><th>@Cacheable的属性</th><th>详情</th><th>用法</th></tr></thead><tbody><tr><td>cacheNames/value</td><td>指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存</td><td></td></tr><tr><td>key</td><td>缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值</td><td>编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]<br>getEmp[2]</td></tr><tr><td>keyGenerator</td><td>key的生成器；可以自己指定key的生成器的组件id</td><td>key/keyGenerator：二选一使用</td></tr><tr><td>cacheManager</td><td>指定缓存管理器；或者cacheResolver指定获取解析器</td><td></td></tr><tr><td>condition</td><td>指定符合条件的情况下才缓存；</td><td>condition = “#id&gt;0”<br/>condition = “#a0&gt;1”：第一个参数的值&gt;1的时候才进行缓存</td></tr><tr><td>unless</td><td>否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断</td><td>unless = “#result == null”<br>unless = “#a0==2”:如果第一个参数的值是2，结果不缓存</td></tr><tr><td>sync</td><td>是否使用异步模式</td></tr></tbody></table></div><h4 id="2-3-2-应用举例"><a href="#2-3-2-应用举例" class="headerlink" title="2.3.2 应用举例"></a>2.3.2 应用举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DepartmentService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @Cacheable(cacheNames = "dept", key = "#id")</span></span><br><span class="line">  <span class="comment">// @Cacheable(cacheNames = &#123;"dept", "tdept"&#125;, key = "#id") 多缓存名</span></span><br><span class="line">  <span class="comment">// @Cacheable(cacheNames = "dept", key = "#root.args[0]", condition = "#id&gt;0")</span></span><br><span class="line">  <span class="comment">// @Cacheable(cacheNames = "dept", key = "#root.args[0]", unless = "#result == null")</span></span><br><span class="line">  <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"dept"</span>, key = <span class="string">"#root.args[0]"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"查询"</span>+id+<span class="string">"号部门"</span>);</span><br><span class="line">    Department dept = departmentMapper.getDeptById(id);</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-运行主程序"><a href="#2-3-3-运行主程序" class="headerlink" title="2.3.3 运行主程序"></a>2.3.3 运行主程序</h4><p>访问<a href="http://localhost:8088/service/dept/1，查看控制台，然后在刷新浏览器再查看控制台，发现后台并不执行数据库查询：">http://localhost:8088/service/dept/1，查看控制台，然后在刷新浏览器再查看控制台，发现后台并不执行数据库查询：</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Advanced/cacheable-test.PNG" alt="Cacheable"></p><h4 id="2-3-4-分析缓存的工作原理以及工作步骤"><a href="#2-3-4-分析缓存的工作原理以及工作步骤" class="headerlink" title="2.3.4 分析缓存的工作原理以及工作步骤"></a>2.3.4 分析缓存的工作原理以及工作步骤</h4><p>结合以上例子来：</p><ul><li><p>自动配置类入手：<code>CacheAutoConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CacheManager<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnBean</span>(</span>&#123;CacheAspectSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">  <span class="title">value</span> </span>= &#123;CacheManager<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">  <span class="title">name</span> </span>= &#123;<span class="string">"cacheResolver"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;CacheProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureBefore</span>(</span>&#123;HibernateJpaAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;</span><br><span class="line">  CouchbaseAutoConfiguration<span class="class">.<span class="keyword">class</span>, </span></span><br><span class="line"><span class="class">  <span class="title">HazelcastAutoConfiguration</span>.<span class="title">class</span>, </span></span><br><span class="line"><span class="class">  <span class="title">RedisAutoConfiguration</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123;CacheAutoConfiguration.CacheConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CacheAutoConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String VALIDATOR_BEAN_NAME = <span class="string">"cacheAutoConfigurationValidator"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CacheAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CacheManagerCustomizers <span class="title">cacheManagerCustomizers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ObjectProvider&lt;List&lt;CacheManagerCustomizer&lt;?&gt;&gt;&gt; customizers</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CacheManagerCustomizers((List)customizers.getIfAvailable());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    CacheConfigurationImportSelector() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">      CacheType[] types = CacheType.values();</span><br><span class="line">      String[] imports = <span class="keyword">new</span> String[types.length];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; types.length; ++i) &#123;</span><br><span class="line">        imports[i] = CacheConfigurations.getConfigurationClass(types[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> imports;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放了一些缓存管理的自定义器（<code>CacheManagerCustomizers</code>）等；</p></li><li><p>关注一下<code>@Import({CacheAutoConfiguration.CacheConfigurationImportSelector.class})</code>，查看源码来到上面代码中的<code>CacheConfigurationImportSelector</code>方法；在方法体中调用的<code>selectImports</code>打上断点，debug来查看给容器中导入了哪些缓存组件：缓存的配置类</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Advanced/CacheConfigurationImportSelector.png" alt="CacheConfigurationImportSelector"></p></li><li><p>哪个配置类默认生效？配置文件加入以下配置，然后运行<strong>主程序</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开自动配置报告</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>可以看到控制台：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO<span class="literal">-CONFIGURATION</span> REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   SimpleCacheConfiguration matched:</span><br><span class="line">      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration </span><br><span class="line">            automatic cache type (CacheCondition)</span><br><span class="line">      - @ConditionalOnMissingBean (types: org.springframework.cache.CacheManager; </span><br><span class="line">            SearchStrategy: all) did not find any beans (OnBeanCondition)</span><br><span class="line">      </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass </span><br><span class="line">            did not find required classes <span class="string">'javax.jms.ConnectionFactory'</span>, </span><br><span class="line">            <span class="string">'org.apache.activemq.ActiveMQConnectionFactory'</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.CglibAutoProxyConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">            - @ConditionalOnProperty (spring.aop.proxy<span class="literal">-target</span><span class="literal">-class</span>=true) </span><br><span class="line">            did not find property <span class="string">'proxy-target-class'</span> (OnPropertyCondition)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>可以看出是<code>SimpleCacheConfiguration</code>配置类生效；给容器中注册了一个<code>CacheManager</code>：<code>ConcurrentMapCacheManager</code></p></li><li><p>可以获取和创建ConcurrentMapCache类型的缓存组件；其的作用将数据保存在ConcurrentMap中；</p></li></ul><h4 id="2-3-5-Cacheable运行流程"><a href="#2-3-5-Cacheable运行流程" class="headerlink" title="2.3.5 @Cacheable运行流程"></a>2.3.5 @Cacheable运行流程</h4><ul><li><p>方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；</p><p>（CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</p></li><li><p>去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；</p><p>key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；</p><p>SimpleKeyGenerator生成key的默认策略；</p><ul><li>如果没有参数；key=new SimpleKey()；</li><li>如果有一个参数：key=参数的值</li><li>如果有多个参数：key=new SimpleKey(params)；</li></ul></li><li><p>没有查到缓存就调用目标方法；</p></li><li>将目标方法返回的结果，放进缓存中</li></ul><blockquote><p>@Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据。</p></blockquote><p>核心：</p><ul><li>使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件</li><li>key使用keyGenerator生成的，默认是SimpleKeyGenerator</li></ul><h3 id="2-4-CacheEvict"><a href="#2-4-CacheEvict" class="headerlink" title="2.4 @CacheEvict"></a>2.4 @CacheEvict</h3><h3 id="2-5-CachePut"><a href="#2-5-CachePut" class="headerlink" title="2.5 @CachePut"></a>2.5 @CachePut</h3><p>默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将数据保存在    ConcurrentMap<Object, Object>中</p><p>开发中使用缓存中间件；redis、memcached、ehcache；</p><p>三、整合redis作为缓存</p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p><p>1、安装redis：使用docker；</p><p>2、引入redis的starter</p><p>3、配置redis</p><p>4、测试缓存</p><p>原理：CacheManager===Cache 缓存组件来实际给缓存中存取数据</p><p>1）、引入redis的starter，容器中保存的是 RedisCacheManager；</p><p>2）、RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache通过操作redis缓存数据的</p><p>3）、默认保存数据 k-v 都是Object；利用序列化保存；如何保存为json</p><p>1、引入了redis的starter，cacheManager变为 RedisCacheManager；</p><p>2、默认创建的 RedisCacheManager 操作redis的时候使用的是 RedisTemplate<Object, Object></p><p>3、RedisTemplate<Object, Object> 是 默认使用jdk的序列化机制</p><p>4）、自定义CacheManager；</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Spring-Boot与缓存&quot;&gt;&lt;a href=&quot;#1、Spring-Boot与缓存&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Boot与缓存&quot;&gt;&lt;/a&gt;1、Spring Boot与缓存&lt;/h2&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot自定义starter</title>
    <link href="https://mysticalguest.github.io/2020/08/28/Spring/SpringBootCustomStarters/"/>
    <id>https://mysticalguest.github.io/2020/08/28/Spring/SpringBootCustomStarters/</id>
    <published>2020-08-28T02:20:52.976Z</published>
    <updated>2020-09-10T09:47:26.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、SpringBoot自定义starters"><a href="#1、SpringBoot自定义starters" class="headerlink" title="1、SpringBoot自定义starters"></a>1、SpringBoot自定义starters</h2><a id="more"></a><p>SpringBoot的强大点就是把所有的场景抽象成starter场景启动器。</p><p>尽管已经定义好了，但依然可能无法满足我们的需求。</p><h3 id="1-1-starter："><a href="#1-1-starter：" class="headerlink" title="1.1 starter："></a>1.1 starter：</h3><ul><li><p>这个场景需要使用到的依赖是什么？</p></li><li><p>如何编写自动配置</p><p>以<code>WebMvcAutoConfiguration.class</code>为例；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br></pre></td></tr></table></figure><ul><li>自动配置类要能加载</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure><ul><li><p>模式：</p><blockquote><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p></blockquote></li></ul><h3 id="1-2-步骤"><a href="#1-2-步骤" class="headerlink" title="1.2 步骤"></a>1.2 步骤</h3><ul><li>首先在IDEA创建两个基础Maven项目：starter和autoconfiguration工程</li><li>启动器模块</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.custom.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.custom.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-spring-boot-starter-autoconfiguration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自动配置模块</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.custom.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-spring-boot-starter-autoconfiguration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>custom-spring-boot-starter-autoconfiguration<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写可配置属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"custom.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String prefix;</span><br><span class="line">  <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> suffix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloProperties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">"-"</span> +name + helloProperties.getSuffix();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写属性生效的自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  HelloProperties helloProperties;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">    service.setHelloProperties(helloProperties);</span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同样，想要配置类生效，就要在resources/META-INF/spring.factories编写路径</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.custom.starter.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure><ul><li>最后将这2个项目都安装到Maven仓库中，点击IDEA右边<strong>Maven Projects</strong>，在两个项目的<strong>Lifecycle</strong>下点击<strong>install</strong>安装即可。</li></ul><h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>创建一个新的项目，测试上面我们自定义的starters</p><ul><li>在项目的pom.xml文件中引入，自定义starters</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自定义的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.custom.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>控制类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  HelloService helloService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloService.sayHello(<span class="string">"starter"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">custom.hello.prefix</span>=<span class="string">CUSTOM</span></span><br><span class="line"><span class="meta">custom.hello.suffix</span>=<span class="string">HELLO WORLD</span></span><br></pre></td></tr></table></figure><h2 id="2、更多SpringBoot整合示例"><a href="#2、更多SpringBoot整合示例" class="headerlink" title="2、更多SpringBoot整合示例"></a>2、更多SpringBoot整合示例</h2><p><a href="https://github.com/spring-projects/spring-framework">GitHub示例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、SpringBoot自定义starters&quot;&gt;&lt;a href=&quot;#1、SpringBoot自定义starters&quot; class=&quot;headerlink&quot; title=&quot;1、SpringBoot自定义starters&quot;&gt;&lt;/a&gt;1、SpringBoot自定义starters&lt;/h2&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot启动配置原理</title>
    <link href="https://mysticalguest.github.io/2020/08/27/Spring/SpringBootStartupConfigPrinciple/"/>
    <id>https://mysticalguest.github.io/2020/08/27/Spring/SpringBootStartupConfigPrinciple/</id>
    <published>2020-08-27T09:56:02.101Z</published>
    <updated>2020-09-10T05:09:44.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、启动配置原理"><a href="#1、启动配置原理" class="headerlink" title="1、启动配置原理"></a>1、启动配置原理</h2><h3 id="1-1-几个重要的事件回调机制"><a href="#1-1-几个重要的事件回调机制" class="headerlink" title="1.1 几个重要的事件回调机制"></a>1.1 几个重要的事件回调机制</h3><a id="more"></a><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>在主程序类中打上断点，Debug，进行研究。</p><h3 id="1-2-启动流程："><a href="#1-2-启动流程：" class="headerlink" title="1.2 启动流程："></a>1.2 启动流程：</h3><ul><li>创建SpringApplication对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringApplication.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> run(<span class="keyword">new</span> Object[]&#123;source&#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> SpringApplication(sources)).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用<code>initialize(sources);</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 保存主配置类</span></span><br><span class="line">  <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断当前是否一个web应用, 即是否导入web模块</span></span><br><span class="line">  <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">  <span class="comment">// 从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer</span></span><br><span class="line">  <span class="comment">// 然后保存起来, 不着急用</span></span><br><span class="line">  setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">      ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  <span class="comment">// 从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  <span class="comment">// 从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">  <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到ApplicationContextInitializer：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/initializer.png" alt="initializer"></p><p>找到的Listener：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/listener.png" alt="listener"></p><ul><li>运行run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">  stopWatch.start();</span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">  configureHeadlessProperty();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">  <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">  listeners.starting();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//封装命令行参数</span></span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">          args);</span><br><span class="line">    <span class="comment">//准备环境</span></span><br><span class="line">    ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">          applicationArguments);</span><br><span class="line">    <span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">      </span><br><span class="line">    Banner printedBanner = printBanner(environment);</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">    context = createApplicationContext();</span><br><span class="line">      </span><br><span class="line">    analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">    <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">    <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">    <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">    prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">          printedBanner);</span><br><span class="line">    <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded()；</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">    <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">    refreshContext(context);</span><br><span class="line">    <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">    <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">    afterRefresh(context, applicationArguments);</span><br><span class="line">    <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">    listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">              .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、事件监听机制"><a href="#2、事件监听机制" class="headerlink" title="2、事件监听机制"></a>2、事件监听机制</h2><p>来实现一下1.1节中提到的4个组件；</p><h3 id="2-1-实现自定义ApplicationContextInitializer"><a href="#2-1-实现自定义ApplicationContextInitializer" class="headerlink" title="2.1 实现自定义ApplicationContextInitializer"></a>2.1 实现自定义ApplicationContextInitializer</h3><p>Ctrl+n搜索ApplicationContextInitializer，选择ApplicationContextInitializer，Ctrl+h查看SpringBoot已经实现的所有Initializer：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/ApplicationContextInitializer.PNG" alt="ApplicationContextInitializer"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloApplicationContextInitializer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> </span></span><br><span class="line"><span class="class">    <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 来监听ioc容器的启动</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-实现自定义SpringApplicationRunListener"><a href="#2-2-实现自定义SpringApplicationRunListener" class="headerlink" title="2. 2 实现自定义SpringApplicationRunListener"></a>2. 2 实现自定义SpringApplicationRunListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloSpringApplicationRunListener.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//必须有的构造器, 传过来Spring应用和命令行参数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听容器开始</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment configurableEnvironment)</span> </span>&#123;</span><br><span class="line">      Object o = configurableEnvironment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">      System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 容器环境加载完成</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext, </span></span></span><br><span class="line"><span class="function"><span class="params">      Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上两个组件想要起作用，必须配置（META-INF/spring.factories）；在我们引入的每个Jar包里，点开其目录结构中都有META-INF文件夹，里面有个spring.factories文件；</p><p>我们就要在resources文件夹下创建META-INF/spring.factories，并写入：</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">copy Reference</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.initializr.initializer.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.initializr.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure><h3 id="2-3-实现自定义ApplicationRunner"><a href="#2-3-实现自定义ApplicationRunner" class="headerlink" title="2.3 实现自定义ApplicationRunner"></a>2.3 实现自定义ApplicationRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要放在容器中的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-实现自定义CommandLineRunner"><a href="#2-4-实现自定义CommandLineRunner" class="headerlink" title="2.4 实现自定义CommandLineRunner"></a>2.4 实现自定义CommandLineRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要放在容器中的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(strings));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行查看控制台有定义输出即可：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/custom-listener.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、启动配置原理&quot;&gt;&lt;a href=&quot;#1、启动配置原理&quot; class=&quot;headerlink&quot; title=&quot;1、启动配置原理&quot;&gt;&lt;/a&gt;1、启动配置原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-几个重要的事件回调机制&quot;&gt;&lt;a href=&quot;#1-1-几个重要的事件回调机制&quot; class=&quot;headerlink&quot; title=&quot;1.1 几个重要的事件回调机制&quot;&gt;&lt;/a&gt;1.1 几个重要的事件回调机制&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot与数据访问</title>
    <link href="https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDataAccess/"/>
    <id>https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDataAccess/</id>
    <published>2020-08-18T15:27:51.497Z</published>
    <updated>2020-09-10T09:45:34.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、整合基本JDBC与数据源"><a href="#1、整合基本JDBC与数据源" class="headerlink" title="1、整合基本JDBC与数据源"></a>1、整合基本JDBC与数据源</h2><h3 id="1-1-Spring官网查看各种场景JDBC有关的场景启动器。"><a href="#1-1-Spring官网查看各种场景JDBC有关的场景启动器。" class="headerlink" title="1.1 Spring官网查看各种场景JDBC有关的场景启动器。"></a>1.1 Spring<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">官网</a>查看各种场景JDBC有关的场景启动器。</h3><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li>默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源</li><li>数据源的相关配置都在DataSourceProperties里面</li></ul><h3 id="1-2-自动配置原理"><a href="#1-2-自动配置原理" class="headerlink" title="1.2 自动配置原理"></a>1.2 自动配置原理</h3><p><code>org.springframework.boot.autoconfigure.jdbc</code></p><ul><li>参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</li><li>SpringBoot默认可以支持以下数据源：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource</span><br><span class="line">HikariDataSource</span><br><span class="line">BasicDataSource</span><br></pre></td></tr></table></figure><ul><li>自定义数据源类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;DataSource<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">  <span class="title">name</span> </span>= &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">  Generic() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">    <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>DataSourceAutoConfiguration.class</code>中，有<code>DataSourceInitializer</code>继承自<code>ApplicationListener</code></p><p>作用：</p><ul><li><p>runSchemaScripts()；运行建表语句</p></li><li><p>runDataScripts()；运行插入数据的sql语句</p></li><li><p>默认只需要将文件命名为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="attr">默认规则：必须命名schema.sql，schema-all.sql；</span></span><br></pre></td></tr></table></figure></li><li><p>可以使用配置文件指定位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>操作数据库：自动配置了JdbcTemplate操作数据库</p></li></ul><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><p>在Maven<a href="https://mvnrepository.com/">公共库</a>中搜索Druid，找到其Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中加入配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源基本配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 与DataSourceProperties.class下的属性一一对应</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.156:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#    schema:</span></span><br><span class="line"><span class="comment">#      - classpath:department.sql</span></span><br><span class="line">    <span class="comment"># 数据源其他配置, 底部这种颜色是因为DataSourceProperties.class下没有这些属性,</span></span><br><span class="line">    <span class="comment"># 并不能绑定到数据库的配置里</span></span><br><span class="line">    <span class="comment"># 但DruidDataSource.java中有这些属性</span></span><br><span class="line">    <span class="comment"># 想要生效, 自己配置, config.DruidConfig</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>想要配置生效，导入druid数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置Druid的监控</span></span><br><span class="line">  <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">      <span class="keyword">new</span> StatViewServlet(), </span><br><span class="line">      <span class="string">"/druid/*"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">// 默认就是允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、配置一个web监控的filter</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>); <span class="comment">// 排除拦截</span></span><br><span class="line"></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  bean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前写的<code>SpringinitializrApplicationTests</code>类的<code>testJDBC()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(dataSource.getClass());</span><br></pre></td></tr></table></figure><p>语句打上断点，debug测试方法，查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/druid_config.PNG" alt="druid config"></p><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><p>同样在Maven<a href="https://mvnrepository.com/">公共库</a>中搜索MyBatis Spring Boot Starter，找到其Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-MyBatis-Spring-Boot-Starter-简介"><a href="#3-1-MyBatis-Spring-Boot-Starter-简介" class="headerlink" title="3.1 MyBatis-Spring-Boot-Starter 简介"></a>3.1 MyBatis-Spring-Boot-Starter 简介</h3><p>MyBatis-Spring-Boot-Starter类似一个中间件，链接Spring Boot和MyBatis，构建基于Spring Boot的MyBatis应用程序。</p><p>MyBatis-Spring-Boot-Starter 当前版本是 2.1.3，发布于2020年6月</p><p>MyBatis-Spring-Boot-Starter是个集成包，因此对MyBatis、MyBatis-Spring和SpringBoot的jar包都存在依赖，如下所示：</p><div class="table-container"><table><thead><tr><th>MyBatis-Spring-Boot-Starter</th><th>MyBatis-Spring</th><th>Spring Boot</th><th>Java</th></tr></thead><tbody><tr><td><strong>2.1</strong></td><td>2.0 (need 2.0.2+ for enable all features)</td><td>2.1 or higher</td><td>8 or higher</td></tr><tr><td><strong>1.3</strong></td><td>1.3</td><td>1.5</td><td>6 or higher</td></tr></tbody></table></div><h3 id="3-2-分析依赖"><a href="#3-2-分析依赖" class="headerlink" title="3.2 分析依赖"></a>3.2 分析依赖</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/mybatis.png" alt="mybatis"></p><p>依赖会引入<code>spring-boot-starter-jdbc</code>，<code>mybatis</code>的jar包，<code>mybatis-spring</code>中间整合包以及<code>mybatis-spring-boot-autoconfigure</code>自动配置包。</p><h3 id="3-3-使用步骤"><a href="#3-3-使用步骤" class="headerlink" title="3.3 使用步骤"></a>3.3 使用步骤</h3><ul><li>配置数据源相关属性</li><li>给数据库建表</li><li>创建JavaBean</li><li>注解版</li></ul><h3 id="3-4-注解版"><a href="#3-4-注解版" class="headerlink" title="3.4 注解版"></a>3.4 注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DepartmentMapper.java</span></span><br><span class="line"><span class="comment">// 指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  useGeneratedKeys = true: 使用自动生成的主键</span></span><br><span class="line"><span class="comment">  keyProperty = "id": 指明主键字段, id属性式用来封装主键的</span></span><br><span class="line"><span class="comment">  插入的department后, 主键会重新封装进来, 才会有值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">  <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问方式：</p><ul><li>插入：<a href="http://localhost:8088/dept?departmentName=AA">http://localhost:8088/dept?departmentName=AA</a></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/insert_department.PNG" alt="insert department"></p><ul><li>查询：<a href="http://localhost:8088/dept/1">http://localhost:8088/dept/1</a></li></ul><p>问题：自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyBatisConfig.java</span></span><br><span class="line"><span class="comment">// 由于上面的org.apache.ibatis.session.Configuration, 所以这里使用全类名</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用注解版MyBatis时, 本来数据库department表中字段是departmentName,</span></span><br><span class="line"><span class="comment">  如果将其改为department_name后, 就取不到值了, 如果不使用注解版, 可以直接在配置文件中配置驼峰命名规则,</span></span><br><span class="line"><span class="comment">  但现在只能使用配置类了</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开启驼峰命名法规则</span></span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有，当我们实体类增多，每个映射文件都需要<code>@Mapper</code>注解？可以在<strong>启动类中</strong>使用<code>MapperScan</code>批量扫描所有的Mapper接口；</p><p>点击<code>MapperScan</code>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;MapperScannerRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MapperScan</span> </span>&#123;</span><br><span class="line">  String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends Annotation&gt; annotationClass() <span class="keyword">default</span> Annotation<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">  Class&lt;?&gt; markerInterface() <span class="keyword">default</span> Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">sqlSessionTemplateRef</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">sqlSessionFactoryRef</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends MapperFactoryBean&gt; factoryBean() <span class="keyword">default</span> MapperFactoryBean<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面可以配置<code>basePackages()</code>参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.initializr.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringinitializrApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Start..."</span>);</span><br><span class="line">    SpringApplication.run(SpringinitializrApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"Success..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-配置文件版"><a href="#3-5-配置文件版" class="headerlink" title="3.5 配置文件版"></a>3.5 配置文件版</h3><p>MyBatis代码都托管到了GitHub，去<a href="https://github.com/mybatis/mybatis-3">GitHub</a>查看配置文件写法，<a href="http://www.mybatis.org/mybatis-3/">官方文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使配置文件生效：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 指定sql映射文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>更多使用参照<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">官方文档</a></p><h2 id="4、整合SpringData的JPA模块"><a href="#4、整合SpringData的JPA模块" class="headerlink" title="4、整合SpringData的JPA模块"></a>4、整合SpringData的JPA模块</h2><h3 id="4-1-SpringData简介"><a href="#4-1-SpringData简介" class="headerlink" title="4.1 SpringData简介"></a>4.1 SpringData简介</h3><p>SpringData<a href="https://spring.io/projects/spring-data">官方文档</a></p><p>Spring Data项目的目的是为了简化构建基于Spring框架应用的数据访问技术，包括非关系数据库、Map-Reduce框架、云数据服务等等；另外一位包含对关系数据库的访问支持。</p><ul><li><p>Spring Data包含多个子项目：</p><ul><li><a href="https://github.com/spring-projects/spring-data-commons">Spring Data Commons</a></li><li><a href="https://spring.io/projects/spring-data-jdbc">Spring Data JDBC</a></li><li><a href="https://spring.io/projects/spring-data-jdbc-ext">Spring Data JDBC Ext</a></li><li><a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA</a></li><li><a href="https://github.com/spring-projects/spring-data-keyvalue">Spring Data KeyValue</a></li><li><a href="https://spring.io/projects/spring-data-ldap">Spring Data LDAP</a></li><li><a href="https://spring.io/projects/spring-data-mongodb">Spring Data MongoDB</a></li><li><a href="https://spring.io/projects/spring-data-redis">Spring Data Redis</a></li><li><a href="https://spring.io/projects/spring-data-rest">Spring Data REST</a></li><li>……</li><li><a href="https://spring.io/projects/spring-data-solr">Spring Data for Apache Solr</a></li><li><a href="https://spring.io/projects/spring-data-neo4j">Spring Data Neo4j</a></li></ul></li><li><p>Spring Data特点</p><p>SpringData为我们提供使用统一的API来对数据访问层进行操作；这主要是 Spring Data Commons项目来实现的。Spring Data Commons让我们在使用关系型或者非关系型数据访问技术时都基于Spring提供的统一标准，标准包含了CRUD(创建、获取、更新、删除)、査询、排序和分页的相关操作。</p></li><li><p>统一的Repository接口</p><ul><li><code>Repository&lt;T, ID extends Serializable&gt;</code>：统一接口</li><li><code>RevisionRepository&lt;T, ID extends Serializable, N extends Number&amp; Comparable&lt;N&gt;&gt;</code>：基于乐观锁机制</li><li><code>CrudRepository&lt;T, ID extends Serializable&gt;</code>：基本CRUD操作</li><li><code>PagingAndSortingRepository&lt;T, ID extends Serializable&gt;</code>：基本CRUD及分页</li></ul></li><li><p>提供数据访问模板类xxxTemplate</p><ul><li>如：MongoTemplate、RedisTemplate等</li></ul></li><li>JPA (Java Persistence API，Java持久层API) 与Spring Data<ul><li>JpaRepository基本功能</li><li>定义符合规范的方法命名</li><li>@Query自定义查询，定制查询SQL</li><li>Specification查询（Spring Data JPA支持JPA2.0的Criteria查询）</li></ul></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA.png" alt="JPA" style="zoom:80%;" /></p><p>应用面向Spring Data编程，使用其提供模板。</p><h3 id="4-2-整合SpringData-JPA"><a href="#4-2-整合SpringData-JPA" class="headerlink" title="4.2 整合SpringData JPA"></a>4.2 整合SpringData JPA</h3><p>引入启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入JPA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看视图：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/starter-data-jpa.PNG" alt="starter-data-jpa" style="zoom:80%;" /></p><ul><li>可以看出，其导入了很多Spring业务功能模块，比如AOP和事务（Spring-tx）等；</li><li>还可以看出其底层是用hibernate实现的，其中使用<code>hibernate-entitymanager</code>管理<code>hibernate-jpa-*-ap</code>，进行操作。</li></ul><p>依然需要配置数据源，用JPA操作数据库。</p><p>JPA：ORM（Object Relational Mapping）；</p><ul><li>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个Dao接口来操作实体类对应的数据表（称为Repository）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本的配置JpaProperties</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="comment"># 控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>编写controller类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    User user = userRepository.findOne(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 有自增组件</span></span><br><span class="line">    User save = userRepository.save(user);</span><br><span class="line">    <span class="keyword">return</span> save;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写了两个简单的方法用来做测验</p><ul><li><p>启动主程序查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-table-not-found.PNG" alt="JPA-table-not-found"></p><p>可以看出，我们的配置<code>ddl-auto: update</code>生效了，当我们第一次启动项目，数据库中没有user表时，项目会自动为我们创建的。</p><p>然后依次访问：<a href="http://localhost:8088/user/1">http://localhost:8088/user/1</a></p><p>和<a href="http://localhost:8088/user?lastName=Tom&amp;email=tom@vip.com">http://localhost:8088/user?lastName=Tom&amp;email=tom@vip.com</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-test.PNG" alt="JPA-test"></p><p>查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-console.PNG" alt="JPA-console"></p><p>最后返回数据库是由数据的。</p></li></ul><p>测试成功啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、整合基本JDBC与数据源&quot;&gt;&lt;a href=&quot;#1、整合基本JDBC与数据源&quot; class=&quot;headerlink&quot; title=&quot;1、整合基本JDBC与数据源&quot;&gt;&lt;/a&gt;1、整合基本JDBC与数据源&lt;/h2&gt;&lt;h3 id=&quot;1-1-Spring官网查看各种场景JDBC有关的场景启动器。&quot;&gt;&lt;a href=&quot;#1-1-Spring官网查看各种场景JDBC有关的场景启动器。&quot; class=&quot;headerlink&quot; title=&quot;1.1 Spring官网查看各种场景JDBC有关的场景启动器。&quot;&gt;&lt;/a&gt;1.1 Spring&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter&quot;&gt;官网&lt;/a&gt;查看各种场景JDBC有关的场景启动器。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>电子商务课程复习</title>
    <link href="https://mysticalguest.github.io/2020/08/18/CSharp/CSharpReview/"/>
    <id>https://mysticalguest.github.io/2020/08/18/CSharp/CSharpReview/</id>
    <published>2020-08-18T09:44:24.536Z</published>
    <updated>2020-09-02T08:16:27.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1章-计算机、Internet与Visual-C-简介"><a href="#第1章-计算机、Internet与Visual-C-简介" class="headerlink" title="第1章 计算机、Internet与Visual C#简介"></a>第1章 计算机、Internet与Visual C#简介</h2><a id="more"></a><h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="1-1-填空题"><a href="#1-1-填空题" class="headerlink" title="1.1 填空题"></a>1.1 填空题</h4><ul><li>计算机只能直接理解其本身的<strong>机器</strong>语言，这种语言是由1和0构成的。</li><li>计算机处理数据时由一组指令控制，这组指令称为计算机<strong>程序</strong>。</li><li>本章介绍的3种语言是机器语言、<strong>汇编语言</strong>和<strong>高级语言</strong>。</li><li>将高级语言程序变成机器语言程序称为<strong>编译器</strong>。</li><li>Visual Studio是开发C#程序的<strong>集成开发环境（IDE）</strong>。</li><li>C语言是作为<strong>UNIX</strong>操作系统的开发语言而著称的。</li><li>Web服务分别用<strong>XML</strong>和<strong>SOAP</strong>在Internet上标记和发送消息。</li></ul><h4 id="2-2-判断题（更正过的）"><a href="#2-2-判断题（更正过的）" class="headerlink" title="2.2 判断题（更正过的）"></a>2.2 判断题（更正过的）</h4><ul><li>UML主要用于设计面向对象系统。</li><li>C#是面向对象语言。</li><li>C#是多个.NET语言之一（还有Visual Basic与Visual C++）。</li><li>面向对象编程（针对事情）是比过程式编程更自然的建模方式。</li><li>计算机只能直接理解其机器语言。</li><li>MSIL是公共中间格式，不管原.NET语言是什么，所有.NET程序都要编译成这种格式。</li><li>.NET框架可以移植到非Windows平台</li></ul><h2 id="第2章-Visual-C-2008-Express简介"><a href="#第2章-Visual-C-2008-Express简介" class="headerlink" title="第2章 Visual C# 2008 Express简介"></a>第2章 Visual C# 2008 Express简介</h2><h3 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="2-1-填空题"><a href="#2-1-填空题" class="headerlink" title="2.1 填空题"></a>2.1 填空题</h4><ul><li><strong>可视化编程</strong>技术可以创建GUI而不用编写任何代码。</li><li><strong>方案</strong>是一个或多个工程，一起形成Visual C#程序。</li><li><strong>自动隐藏</strong>特性在鼠标指针移到窗口区外时隐藏窗口。</li><li><strong>工具提示</strong>在鼠标指针放到图标上时显示。</li><li><strong>Solution Explorer</strong>窗口可以浏览方案文件。</li><li>加号框表示Solution Explorer中的树可以<strong>展开</strong>。</li><li>属性窗口的属性按<strong>字母顺序</strong>或<strong>类别</strong>排序</li><li>窗体的<strong>Text</strong>属性指定窗体标题栏中显示的文本。</li><li><strong>工具栏</strong>可以直观地将控件加进窗体中。</li><li>用<strong>动态帮助</strong>根据当前上下文显示相关帮助文章。</li><li><strong>TextAlign</strong>属性指定文本在卷标边界中的对齐方式。</li></ul><h4 id="2-2-判断题（更正过的）-1"><a href="#2-2-判断题（更正过的）-1" class="headerlink" title="2.2 判断题（更正过的）"></a>2.2 判断题（更正过的）</h4><ul><li>标题栏显示IDE的方式。</li><li>图钉图标切换，自动隐藏，而X框关闭窗口。</li><li>工具栏图标表示各种菜单命令。</li><li>工具箱包括表示控件的图标。</li><li>窗体有标题栏，卷标没有（但有卷标文本）。</li><li>控制属性可以用属性窗口修改。 </li><li>图形框通常显示图形。</li><li>Visual C#文件扩展名为.cs。</li><li>窗体背景颜色用BackColor属性设置。</li></ul><h2 id="第3章-C-程序简介"><a href="#第3章-C-程序简介" class="headerlink" title="第3章 C#程序简介"></a>第3章 C#程序简介</h2><p>简单程序：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.WriteLine()和console.Write()区别在于最后是否有换行。</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Welcome</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Hello world!"</span>);</span><br><span class="line">    <span class="comment">//使用formating</span></span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0&#125;\n&#123;1&#125;"</span>,<span class="string">"Welcome to"</span>, <span class="string">"C# Programming!"</span>);</span><br><span class="line">    <span class="comment">//读入加转换</span></span><br><span class="line">    Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="comment">//输出指定长度,如果需要在左侧则使用&#123;0，-20&#125;表示</span></span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0,4&#125;&#123;1,20:C&#125;"</span>, year, acc ount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="3-1-填空题"><a href="#3-1-填空题" class="headerlink" title="3.1 填空题"></a>3.1 填空题</h4><ul><li><strong>左花括号（ { ）</strong>开始方法体，<strong>右花括号（ } ）</strong>结束方法体。</li><li>每条语句以<strong>分号</strong>结束。</li><li><strong>if</strong>是决策语句。</li><li>单行注释以<strong>//</strong>开始。</li><li><strong>空行、空格</strong>和<strong>制表符</strong>称为空白符，新行符也是空白符。</li><li><strong>关键字</strong>保留给C#使用。</li><li>C#程序从<strong>Main</strong>方法开始执行。</li><li>方法<strong>Console.WriteLine()</strong>和<strong>Console.Write()</strong>在控制台窗口显示信息。</li></ul><h4 id="3-2-判断题（更正过的）"><a href="#3-2-判断题（更正过的）" class="headerlink" title="3.2 判断题（更正过的）"></a>3.2 判断题（更正过的）</h4><ul><li>注释不在程序执行时导致操作，而是建档程序和改进其可读性。</li><li>C#是大小写相关的，所以number和NuMbEr是不同变量。</li><li>求余运算符（%）也可以在C#中处理非整数算子。</li><li>*、/和%同一优先级，而+和-低一级。</li></ul><h2 id="第4章-类与对象简介"><a href="#第4章-类与对象简介" class="headerlink" title="第4章 类与对象简介"></a>第4章 类与对象简介</h2><p>Main是个特殊方法，在程序执行时自动调用，但大多数方法并不自动调用。</p><p>习惯上，方法名从大写字母开始，后续单词首字母大写。</p><p>get和set方法的使用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GradeBook</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">string</span> courseName;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GradeBook</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    CourseName = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 之后直接使用CourseName获取到其变量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> CourseName</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> courseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">    courseName = <span class="keyword">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*更好的get和set方法：</span></span><br><span class="line"><span class="comment">  *public string CourseName&#123;get; set;&#125;</span></span><br><span class="line"><span class="comment">  *称为：自实现属性</span></span><br><span class="line"><span class="comment">  *直接写出来，声明+实现一起出现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Hello\n&#123;0&#125;"</span>, CourseName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GradeBookTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    GradeBook myGradeBook = <span class="keyword">new</span> GradeBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让Main方法执行程序的关键部分是static关键字，表示这个Main方法是静态方法，调用是不必先创建这个类的对象。</p><p>可以在需要时声明新的类类型，因此C#称为可扩展语言。</p><h3 id="关于using指令"><a href="#关于using指令" class="headerlink" title="关于using指令"></a>关于using指令</h3><p>注意上面的程序，这个指令告诉编译器程序使用System名字空间中的类，如Console类。默认情况下，GradeBook类和GradeBookTest类在相同名字空间，一个类使用同一名字空间的另一个类，不需要using指令。</p><p>没有显式放进一个名字空间的类隐式放进全局名字空口。</p><p>实际上也可以不用using指令，使用类的<strong>完全限定类名</strong>，包括完全名字空间和类名，System.Console.WriteLine();</p><h3 id="GradeBook类带实例变量与属性"><a href="#GradeBook类带实例变量与属性" class="headerlink" title="GradeBook类带实例变量与属性"></a>GradeBook类带实例变量与属性</h3><p>GradeBook类的每个实例包含每个实例变量的一个副本。</p><h3 id="访问修饰符public与private"><a href="#访问修饰符public与private" class="headerlink" title="访问修饰符public与private"></a>访问修饰符public与private</h3><p>用private声明的变量与方法只能在声明这个方法的类中访问。</p><p>用private声明的实例变量称为信息隐藏。在GradeBook类中，属性CourseName操纵实例变量courseName。</p><h3 id="设置与读取专用实例变量、属性"><a href="#设置与读取专用实例变量、属性" class="headerlink" title="设置与读取专用实例变量、属性"></a>设置与读取专用实例变量、属性</h3><p><strong>属性（Property）</strong> 是类（class）、结构（structure）和接口（interface）的命名（named）成员。类或结构中的成员变量或方法称为 <strong>域（Field）</strong>。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用 <strong>访问器（accessors）</strong> 让私有域的值可被读写或操作。</p><p>尽管可以定义get和set方法，但C#<strong>属性</strong>更方便。</p><p>上面程序GradeBook类中的CourseName就是属性。属性声明可以有get访问函数、set访问函数或两者皆有。</p><p>定义属性后，可以在代码中像变量一样使用。可以用赋值运算符对属性赋值，其执行属性set函数代码。</p><h3 id="get和set访问方法"><a href="#get和set访问方法" class="headerlink" title="get和set访问方法"></a>get和set访问方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = gradeBook.CourseName;</span><br></pre></td></tr></table></figure><p>用户不能直接操纵实例变量courseName，因为它是专用的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradeBook.CourseBook = <span class="string">"OS"</span>;</span><br></pre></td></tr></table></figure><p>这时文本“OS”传入隐式参数value，执行set访问方法。注意value在set访问方法中隐式声明和初始化，在set方法体中声明局部变量value会发生编译错误。set方法完成任务后不返回任何数据。</p><p>声明顺序不做要求。</p><p>在公用属性中，get方法可以是公用的，set方法可以是专用的。</p><h3 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h3><p>C#语言的类型分为两类——值类型与引用类型。C#的简单类型都是值类型。值类型的变量（如int）只包含这个类型的值。例如：<code>int count = 7</code>表示：int类型的变量count，只能包含像7这样的整数。</p><p>引用类型的变量（也称为引用）包含存储变量所引用数据的内存地址。这个变量在程序中称为引用一个对象。即引用类型（GradeBook）的变量（gradeBook）包含该类型对象的引用（内存地址）。</p><p>引用类型实例变量默认初始化为null。string是个引用类型实例变量。</p><p>值为null的字符串变量不是空串。空串表示””或string.Empty。null表示引用的不是对象。空串是不含字符的string对象。</p><h3 id="用构造函数初始化对象"><a href="#用构造函数初始化对象" class="headerlink" title="用构造函数初始化对象"></a>用构造函数初始化对象</h3><p>默认情况下，编译器在没有显式提供构造函数的类中提供一个没有变元的默认构造方法，因此任何类都有函数。默认构造方法不修改实例变量的默认值。如果声明类的任何构造函数，则C#不对这个类创建默认构造函数。</p><p>构造函数名必须与类名相同。与方法不同，构造函数不指定返回类型（连void也没有）。</p><h3 id="浮点数与decimal类型"><a href="#浮点数与decimal类型" class="headerlink" title="浮点数与decimal类型"></a>浮点数与decimal类型</h3><p>float、double和decimal可以在内存中存储实数。float和double类型称为浮点类型，它们与decimal的主要区别在于：decimal变量精确存储有限范围的实数，而浮点数只存储实数的近似值，但取值范围大得多。</p><div class="table-container"><table><thead><tr><th>简单类型</th><th></th><th>有效位</th><th></th><th></th></tr></thead><tbody><tr><td>float</td><td>单精度浮点数</td><td>7</td><td></td><td></td></tr><tr><td>double</td><td>双精度浮点数</td><td>15~16</td><td></td><td>精度是float的2倍</td></tr><tr><td>decimal</td><td></td><td>28~29</td><td>7.33M或7.33m</td><td>需要double变量2倍内存</td></tr></tbody></table></div><p>整数直接赋值给上面3种类型，隐式转换成这些类型。</p><p>格式项{0:C}将数据格式化为金额值：$3.3</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/format.PNG" alt=""></p><h3 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="4-1-填空题"><a href="#4-1-填空题" class="headerlink" title="4.1 填空题"></a>4.1 填空题</h4><ul><li>房子的蓝图就像对象的类。</li><li>运算符new创建关键字右边所指定的对象。</li><li>默认情况下，没有显式在名字空间中声明的类隐式放在全局名字空间。</li><li>类的每个对象维护属性复制时，表示属性的字段也称为实例变量。</li><li>Convert方法ToDecimal返回decimal值。</li><li>Console方法ReadLine读取字符，直到遇到新行符，然后用string返回这些字符（不包含新行符）。</li><li>对于自实现属性，编译器自动生成专用实例变量及其get与set方法。</li></ul><h4 id="4-2-判断题"><a href="#4-2-判断题" class="headerlink" title="4.2 判断题"></a>4.2 判断题</h4><ul><li>方法和属性体用左右花括号定界。</li><li>实例变量默认初始化，局部变量不是。</li><li>源代码中的实数值称为浮点数直接输，默认类型为float。</li></ul><h2 id="第5章-控制语句：第一部分"><a href="#第5章-控制语句：第一部分" class="headerlink" title="第5章 控制语句：第一部分"></a>第5章 控制语句：第一部分</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>解决问题的过程（procedure）称为算法（algorithm），包括：</p><ul><li>执行的操作（action）</li><li>执行的操作的顺序（order）</li></ul><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>伪代码是人为的非正式语言，帮助程序员开发算法。</p><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><p>程序中的语句按编写的顺序一条一条地执行，称为顺序执行。</p><p>指定下一个执行的语句不是紧邻其后的语句，这称为控制转移。</p><p>结构化编程更清晰、更易调试与修改并且不容易出错。</p><p>研究表明，所有程序都可以只用三种控制结构，即顺序结构、选择结构和重复结构。</p><p><strong>顺序结构</strong>是C#内置的，除非另外指定，计算机总是按编写的顺序一条一条地执行。</p><p><strong>选择结构</strong>有三种，称为选择语句。</p><p>if语句称为单选择语句，if…else语句称为双选择语句，switch语句称为多选择语句。</p><p>C#提供四种重复结构，称为重复语句（也称为迭代语句或循环），重复语句有while、do…while、for与foreach。</p><p><strong>控制语句小结</strong>：C#只有三种控制语句，分别是顺序结构、选择结构（三种）和重复语句（四种）。</p><p>C#提供条件运算符（? :），可以代替if…else语句。是C#中唯一的三元运算符（ternary operator），操作数和条件运算符一起形成条件表达式（conditional expression）。</p><p><strong>垂悬else问题</strong>：C#编译器总是将else与最接近的if相关联，除非用花括号指定。（就近原则）</p><p>放在花括号中的一组语句称为<strong>块</strong>。</p><p><strong>简单类型间的显式和隐式转换</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> average;</span><br><span class="line"><span class="keyword">int</span> total,gradeCounter;</span><br><span class="line">average = (<span class="keyword">double</span>)total / gradeCounter;</span><br></pre></td></tr></table></figure><p>这里使用double类型转换符称为显式转换，这是的计算式浮点数除以整数，要保证操作数的数据类型一致，C#将int操作数提升为double（提升操作，也称为隐式转换）。</p><p><strong>C#支持复合赋值运算符</strong></p><p>分别为：+=，-=，*=，/=和%=</p><p><strong>也支持自增自减</strong>，前置和后置</p><p>C#也是强类型语言，即要求所有变量都具有类型。</p><h3 id="课后习题-4"><a href="#课后习题-4" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="5-1-填空题"><a href="#5-1-填空题" class="headerlink" title="5.1 填空题"></a>5.1 填空题</h4><ul><li>将一组指令重复特定次数称为<strong>计数器控制或确定</strong>重复。</li><li>事先不知道一组指令的重复次数，可以用标记（记号，标志或哑元）值终止重复。</li></ul><h4 id="5-2-判断题"><a href="#5-2-判断题" class="headerlink" title="5.2 判断题"></a>5.2 判断题</h4><ul><li>指定计算机程序执行语句的顺序称为程序控制。</li></ul><h2 id="第6章-控制语句：第二部分"><a href="#第6章-控制语句：第二部分" class="headerlink" title="第6章 控制语句：第二部分"></a>第6章 控制语句：第二部分</h2><p><strong>for循环语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> counter = <span class="number">1</span>; counter &lt;= <span class="number">10</span>; counter++, total += counter )</span><br><span class="line">&#123;</span><br><span class="line">  statement/empty statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch多选择语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(grade / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    ++aCount;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    ++bCount;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break语句</p><p>continue语句在循环结构中执行时跳过该结构体的其余语句，进入下一轮循环。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>有&amp;&amp;（条件与）、||（条件或）、&amp;（布尔逻辑与）、|（布尔逻辑或）、^（布尔逻辑异或）和!（逻辑非）。</p><p>只有逻辑非是一元运算符。</p><p>短路求值：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gender == <span class="string">'F'</span>) &amp;&amp; (++age &gt;= <span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>将在gender不等于“F”时立即停止（整个表达式为假）。</p><p>布尔逻辑（&amp;和|）不进行短路求值，所以如果用布尔表达式++age&gt;=会执行，age值会发生改变。</p><h3 id="课后习题-5"><a href="#课后习题-5" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="6-1-填空题"><a href="#6-1-填空题" class="headerlink" title="6.1 填空题"></a>6.1 填空题</h4><ul><li>通常，for语句用于计数器控制循环，while语句用于标记控制循环。</li></ul><h4 id="6-2-判断题"><a href="#6-2-判断题" class="headerlink" title="6.2 判断题"></a>6.2 判断题</h4><ul><li>switch选择结构的每个case中可以使用break语句退出当前case结构，也可以使用return语句。</li></ul><h2 id="第7章-方法详述"><a href="#第7章-方法详述" class="headerlink" title="第7章 方法详述"></a>第7章 方法详述</h2><p>分治法（divide and conquer）：经验表明，要开发和维护大程序，最好的办法是从更容易管理的小块和小组件开始。</p><h3 id="C-代码包装"><a href="#C-代码包装" class="headerlink" title="C#代码包装"></a>C#代码包装</h3><p>代码包装的三种常见途径是方法、类和名字空间。</p><p>方法（函数、过程）可以将程序模块化，用户定义方法。分治，复用。</p><h3 id="静态方法，静态变量和Math类"><a href="#静态方法，静态变量和Math类" class="headerlink" title="静态方法，静态变量和Math类"></a>静态方法，静态变量和Math类</h3><p>所有Math方法都是静态的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine( Math.Sqrt( a + b * c ) )</span><br></pre></td></tr></table></figure><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/Math.PNG" alt="Math"></p><p><strong>静态常量</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.PI</span><br><span class="line">Math.E</span><br></pre></td></tr></table></figure><p>这些变量在Math类中声明，修饰符为public与const。任何用关键字const声明的变量都是常量，声明之后不能改变数值。</p><p>前面提到，属性的变量也称为实例变量，类的每个对象在内存中有这个变量的不同实例。但静态变量，类的每个对象在内存中没有这个变量的不同实例。类的对象包含静态变量时，这个类的所有对象共享静态变量的同一备份。</p><p><strong>为什么Main方法声明为static？</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span> args[]</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main方法声明为static是执行环境可以调用Main方法而不必创建类的实例。</p><p>string args[]可以省略，public也可以省略，void也可替换为int</p><p><strong>用字符串接合组装字符串</strong></p><p>C#中生成string对象时可以用运算符+（或复合赋值运算符+=）将小字符串组装成大字符串。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> result = <span class="number">9.35000</span>;</span><br><span class="line">Console.WriteLine(<span class="string">"Maximum is: "</span> + result);</span><br></pre></td></tr></table></figure><p>控制台输出为：Maximum is: 9.35</p><p>布尔值也会隐式转换成string。</p><h3 id="关于方法的声明与使用"><a href="#关于方法的声明与使用" class="headerlink" title="关于方法的声明与使用"></a>关于方法的声明与使用</h3><p>可以用三种方式调用方法。</p><h3 id="方法调用堆栈云激活记录"><a href="#方法调用堆栈云激活记录" class="headerlink" title="方法调用堆栈云激活记录"></a>方法调用堆栈云激活记录</h3><p>堆栈是后进先出（LIFO）数据结构。</p><p>程序调用方法是，被调的方法要知道如何放回调用者，因此把调用者的返回地址压入程序执行堆栈（也称方法调用堆栈）。</p><p>程序执行堆栈还包含程序执行期间每个方法调用使用的局部变量。这个数据存放成程序执行堆栈的一部分，称为方法调用的激活记录( activation record)或堆栈帧( stack frame)。进行方法调用时，这个方法调用的激活记录压进程序执行堆栈。方法返回调用者时，这个方法调用的激活记录出栈，程序不再知道这些局部变量。如果局部变量保存对象引用，是具有该对象引用的程序中唯一变量，则包含这个局部变量的激活记录出栈时，程序不能再访问这个对象，最终会在“内存回收”时从内存中删除。<br>当然，计算机的内存量有限,因此只能用一定量的内存存储程序执行堆栈中的激活记录。如果发生的方法调用太多，程序执行堆栈无法存储其激活记录,则会发生堆栈溢出错误。</p><h3 id="变元提升与类型转换"><a href="#变元提升与类型转换" class="headerlink" title="变元提升与类型转换"></a>变元提升与类型转换</h3><p>方法调用的另一个重要特性是变元提升——隐式地将变元值变成方法参数所需要的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine( Math.Sqrt( <span class="number">4</span> ) );</span><br></pre></td></tr></table></figure><p>虽然Sqrt方法要求double变元，但也可以使用整型值，打印数值2.0。方法声明的参数表使C#将int值4转换成double值4.0，然后传入Sqrt方法。</p><p>隐式转换要求满足升级规则，否则必须显式转换。</p><p>所有简单类型都可以隐式转换为object类型。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/Implicit.PNG" alt="Implicit"></p><h3 id="NET框架类库"><a href="#NET框架类库" class="headerlink" title=".NET框架类库"></a>.NET框架类库</h3><p>许多预定义类组成相关类的名字空间。名字空间组成.NET框架类库（即FCL）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br></pre></td></tr></table></figure><p>程序可以使用System名字空间的类名，不必用完全限定名。</p><p>C#的一个强大之处是FCL的名字空间中有许多类。</p><p align="center">  <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/FCL_namespace.PNG">  <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/FCL_namespace_next.PNG" alt="FCL"></p><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><p>可以用随机数生成器<strong>对象</strong>产生随机byte、int与double值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Random randomNumbers = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">// Next方法产生值：0&lt;=randomValue&lt;=+2147483646</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next();</span><br><span class="line"><span class="comment">// 返回0、1、2、3、4、5。变元6称为比例因子，表示Next要产生的数值的个数</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next( <span class="number">6</span> );</span><br><span class="line"><span class="comment">// 返回1、2、3、4、5、6</span></span><br><span class="line"><span class="keyword">int</span> randomValue = <span class="number">1</span> + randomNumber.Next( <span class="number">6</span> );</span><br><span class="line"><span class="comment">// 返回1、2、3、4、5、6</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next( <span class="number">1</span>, <span class="number">7</span> );</span><br></pre></td></tr></table></figure><p>Next返回的值实际上是伪随机数——通过复杂数学计算产生的数值序列。用当前时间作为种子。</p><h3 id="比例缩放与移动随机数"><a href="#比例缩放与移动随机数" class="headerlink" title="比例缩放与移动随机数"></a>比例缩放与移动随机数</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回<span class="number">2</span>、<span class="number">5</span>、<span class="number">8</span>、<span class="number">11</span>、<span class="number">14</span></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">2</span> + <span class="number">3</span> * randomNumber.Next( <span class="number">5</span> )</span><br></pre></td></tr></table></figure><h3 id="随机数可重复性与测试-调试"><a href="#随机数可重复性与测试-调试" class="headerlink" title="随机数可重复性与测试/调试"></a>随机数可重复性与测试/调试</h3><p>要保证运行和调试是随机数一致</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random randomNumbers = <span class="keyword">new</span> Random( seedValue );</span><br></pre></td></tr></table></figure><p>seedValue变元（int类型）提供随机数计算的种子。如果每次使用相同的seedValue，则Random对象产生相同的随机数列。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Status &#123; CONTINUE, WON, LOST &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> DiceNames</span><br><span class="line">&#123;</span><br><span class="line">  SNAKE_EYES = <span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line">  TREY = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明作用域"><a href="#声明作用域" class="headerlink" title="声明作用域"></a>声明作用域</h3><ul><li><p>参数声明的作用域是声明所在的方法体。</p></li><li><p>局部变量声明的作用域从声明点开始，到声明所在块结束为此。</p></li><li><p>for语句首部初始化部分出现的局部变量声明的作用域是for语句体和首部的其他表达式。</p></li><li><p>类的方法、属性、字段的作用域是整个类体。这就使类的非静态方法与属性可以使用类的任何方法、属性、字段，不管声明顺序如何。同样，<strong>静态属性与方法可以使用类的任何静态成员</strong>。</p></li></ul><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>一个类中可以声明同名方法，只要其参数集不同（参数个数、类型和顺序），称为方法重载。</p><p><strong>区别重载方法</strong></p><p>编译器根据签名区别重载方法，签名是方法名和参数个数、类型与顺序地组合。</p><p><strong>重载方法的返回类型</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Square</span>(<span class="params"> <span class="keyword">int</span> x </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Square</span>(<span class="params"> <span class="keyword">int</span> y </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y * y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面2个方法<strong>签名相同</strong>，返回值类型不同，会产生编译错误。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">Factorial</span>(<span class="params"> <span class="keyword">long</span> number </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// base case</span></span><br><span class="line">  <span class="keyword">if</span>(number &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> number * Factorial( number <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值与按引用传递变元"><a href="#按值与按引用传递变元" class="headerlink" title="按值与按引用传递变元"></a>按值与按引用传递变元</h3><p>参数声明中使用关键字ref可以按引用将变量传递给方法——被调方法可以修改调用者的原变量。ref关键字用于调用方法中已经初始化的变量。</p><p>在参数前面加上关键字out可以建立输出参数，告诉编译器这个变元按引用传入被调方法，被调方法对调用者的原变量赋值。如果方法中没有在每个执行路径上对输出参数赋值，则编译器报错。</p><p>一个方法只能通过return语句向调用者返回一个值，但指定多个输出参数（ref或out）可以返回多个值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReferenceAndOutParameters</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">5</span>; <span class="comment">// initialize y to 5</span></span><br><span class="line">  <span class="keyword">int</span> z; <span class="comment">// declare z, but does not initilize it</span></span><br><span class="line">  </span><br><span class="line">  SquareRef(<span class="keyword">ref</span> y);</span><br><span class="line">  SquareOut(<span class="keyword">out</span> z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SquareRef</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x = x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SquareOut</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="课后习题-6"><a href="#课后习题-6" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="7-1-填空题"><a href="#7-1-填空题" class="headerlink" title="7.1 填空题"></a>7.1 填空题</h4><ul><li>数据只能从堆栈<strong>顶</strong>增加和取出。</li><li>将控制从被调方法返回调用者的三种方法是：<strong>return</strong>，<strong>return expression</strong>或<strong>方法右花括号处</strong></li><li>程序执行堆栈包含程序执行期间每次调用方法时局部变量的内存。这个数据存放在程序执行堆栈中，称为方法调用的<strong>活动记录</strong>或<strong>堆栈顶</strong>。</li></ul><h2 id="第8章-数组"><a href="#第8章-数组" class="headerlink" title="第8章 数组"></a>第8章 数组</h2><p>前面说过，类型可以分为两类——值类型和引用类型。数组是引用类型。</p><p>我们通常意义上的数组实际上是内存中数组实例的引用。</p><p>数组的元素可以是值类型或引用类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span>;</span><br><span class="line">b=<span class="number">6</span>;</span><br><span class="line"><span class="comment">// 索引应为非负整数或整型表达式</span></span><br><span class="line">c[a + b] +=<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 将元素c[11]加2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组的Length属性确定数组长度</span></span><br><span class="line"><span class="comment">// 注意数组的Length属性不能改变，因为它没有set方法</span></span><br><span class="line">c.Length</span><br></pre></td></tr></table></figure><p>数组索引值应为int、uint、long、ulong类型或可以隐式升级为这些类型的值。</p><p><strong>声明与创建数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>[] array2;</span><br><span class="line">array2 = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">12</span>];</span><br><span class="line"><span class="comment">// 每个元素接收默认值, 数组简单类型元素为0, 布尔元素为false, 引用为null</span></span><br></pre></td></tr></table></figure><p><strong>改变数组长度</strong></p><p>虽然数组是定长实体，但可以用静态Array方法Resize改变数组长度。这个方法创建指定长度的新数组，将原数组内容复制到新数组，并<strong>将收到的变量设置为引用新数组的第一个</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">Array.Resize( <span class="keyword">ref</span> array3, <span class="number">10</span> );</span><br></pre></td></tr></table></figure><p>如果新数组比旧数组小，则后面的内容被截尾。</p><p><strong>使用数组初始化器</strong></p><p>逗号分隔的表达式清单（称为初始化清单），放在花括号中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array4 = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br></pre></td></tr></table></figure><p>编译器遇到包括初始化清单的数组声明时，首先计算清单中的初始化器个数，确定数组长度，然后在“幕后”建立相应的new操作。</p><p>声明常量全部用大写字母。</p><p><strong>用数组元素作为计数器</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RollDie</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"> <span class="keyword">string</span>[] args </span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Random randomNumbers = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">int</span>[] frequency = <span class="keyword">new</span> <span class="keyword">int</span>[ <span class="number">7</span> ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> roll = <span class="number">1</span>; roll &lt;= <span class="number">6000</span>; roll++)</span><br><span class="line">      ++frequency[ randomNumber.Next(<span class="number">1</span>, <span class="number">7</span>) ];</span><br><span class="line">    </span><br><span class="line">    Console.writeLine(<span class="string">"&#123;0&#125;&#123;1, 10&#125;"</span>, <span class="string">"Face"</span>, <span class="string">"Frequency"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> face = <span class="number">1</span>; face &lt; frequency.Length; face++)</span><br><span class="line">      Console.writeLine(<span class="string">"&#123;0, 4&#125;&#123;1, 10&#125;"</span>, face, frequency[face]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Face Frequency</span><br><span class="line">   1       956</span><br><span class="line">   2       981</span><br><span class="line">   3      1001</span><br><span class="line">   4      1030</span><br><span class="line">   5      1035</span><br><span class="line">   6       997</span><br></pre></td></tr></table></figure><p><strong>foreach语句</strong></p><p>foreach语句只能访问数组元素，不能修改元素。否则编译错误。</p><p><strong>隐式类型局部变量</strong></p><p>C#提供了隐式类型局部变量特性，是编译器可以根据变量初始化值类型推出局部变量的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">7</span>; <span class="comment">// 编译器推出变量x类型为int，因为编译器认为7之类的整数是int类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">-123.45</span>; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">var</span> array5 = <span class="keyword">new</span>[] (<span class="number">32</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">18</span>, <span class="number">95</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure><p><strong>将数组与数组元素传入方法</strong></p><p>指定不带方括号的数组名。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyArray</span>(<span class="params"><span class="keyword">double</span>[] a</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法调用语句</span></span><br><span class="line"><span class="keyword">double</span>[] array6 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">24</span>];</span><br><span class="line">ModifyArray( array6 );</span><br><span class="line"><span class="comment">// 接收double数组的引用, a与array6是相同对象</span></span><br></pre></td></tr></table></figure><p><strong>按值与按引用传递数组</strong></p><p>C#中“存储”数组之类对象的变量并不实际存储对象本身，而是存储对象的引用（即存储对象的计算机内存地址）。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>二维的多维数组也称为数值表，把信息放在行和列中。</p><p>c#支持两种二维数组——矩形数组和齿状数组。</p><p><strong>矩形数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[ , ] array7 = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>编译器在每行的初始化器个数不同时产生一个错误，因为矩形数组的每一行要长度相同。</p><p><strong>齿状数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jagged = &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数组jagged本身是三个元素的数组，各引用一个int值的一维数组。</p><p>注意矩形数组与齿状数组的数组生成表达式差别。jagged数组后面是两组方括号，表示这是个int数组的数组。在数组初始化器中，C#要求用new关键字创建每一行的数组对象。</p><p><strong>用数组生成表达式创建二维数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[,] array8;</span><br><span class="line">array8 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 3行4列</span></span><br><span class="line"><span class="comment">// 齿状数组不能如此</span></span><br><span class="line"><span class="keyword">int</span>[][] array9 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>]; <span class="comment">// error</span></span><br><span class="line"><span class="comment">// 而是</span></span><br><span class="line"><span class="keyword">int</span>[][] a;</span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][]; <span class="comment">// 2行</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><strong>游长变元表（Variable-length argument lists）</strong></p><p>可以创建接收任意个变元的方法。</p><p>一维数组型变元前面加上关键字params在方法参数表中，表示这个方法接收任意个变元，类型为数组<strong>元素</strong>类型。params修饰符的这个用法只能在参数表最后一个项目中出现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Average</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">double</span>[] numbers</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> total = <span class="number">0.0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">double</span> d <span class="keyword">in</span> numbers)</span><br><span class="line">    total += d;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> total / numbers.Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> d1 = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">double</span> d2 = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">double</span> d3 = <span class="number">10.0</span>;</span><br><span class="line">  </span><br><span class="line">  Console.WriteLine( Average(d1, d2) ); <span class="comment">// 15.0</span></span><br><span class="line">  Console.WriteLine( Average(d1, d2, d3) ); <span class="comment">// 20.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用命令行变元</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArgTest</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span>(args.Length == <span class="number">0</span>)</span><br><span class="line">      Console.WriteLine(<span class="string">"The number of arg is 0!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">var</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        Console.WriteLine(arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ArgTest.exe 1 2 3</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="课后习题-7"><a href="#课后习题-7" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="8-1-填空题"><a href="#8-1-填空题" class="headerlink" title="8.1 填空题"></a>8.1 填空题</h4><ul><li>清单与数值表可以存放在<strong>数组</strong>中。</li><li>命令行变元存放在<strong>strings数组，通常称args</strong>中。</li></ul><h2 id="第9章-LINQ与泛型集合简介"><a href="#第9章-LINQ与泛型集合简介" class="headerlink" title="第9章 LINQ与泛型集合简介"></a>第9章 LINQ与泛型集合简介</h2><p>一组预包装数据结构——.NET框架集合类。</p><p>LINQ（language Integrated Query，语言集成查询表达式）。利用LINQ可以编写与SQL查询相识的查询表达式，从各种数据源，不限于数据库，还有数组和list驱动信息，选择符合一组条件的元素，称为筛选。</p><p>声明式编程：LINQ指定的不是读取结果所要的<strong>步骤</strong>，而是所选元素要满足的<strong>条件</strong>。</p><p>指定式编程：指定执行任务所有的步骤，面向对象是指示式编程的子集。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">LINQWithArray</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] values = &#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> filtered = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">where</span> <span class="keyword">value</span> &gt; <span class="number">4</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>;</span><br><span class="line">    </span><br><span class="line">    Display(filtered); <span class="comment">// 9 5 7 8 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sorted = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">orderby</span> <span class="keyword">value</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>;</span><br><span class="line">    </span><br><span class="line">    Display(sorted); <span class="comment">// 0 1 2 3 4 5 7 8 9</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sortedAndfiltered = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">where</span> <span class="keyword">value</span> &gt; <span class="number">4</span></span><br><span class="line">      <span class="keyword">orderby</span> <span class="keyword">value</span></span><br><span class="line">      <span class="comment">// orderby value desending 都是降序</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    Display(sortedAndfiltered); <span class="comment">// 9 8 7 5 5</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// IEnumerable&lt;int&gt;是个接口，描述的对象可迭代</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; results</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> element <span class="keyword">in</span> results)</span><br><span class="line">      Console.WriteLine(<span class="string">" &#123;0&#125;"</span>, element);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用泛型方法显示LINQ查询结果</strong></p><p>泛型方法，指定一个类型参数表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Display&lt;T&gt;(IEnumerable&lt;T&gt; results)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">foreach</span>(T element <span class="keyword">in</span> results)</span><br><span class="line">    Console.WriteLine(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Employee[] employees;</span><br><span class="line"><span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">Display(employees);</span><br><span class="line">Display(array);</span><br></pre></td></tr></table></figure><p>T是类型变元的占位符。调用泛型方法时，编译器根据调用中的变元指定每个类型表示的类型。</p><p>T可以在参数表和方法体中多次出现，也可以作为返回值。</p><h3 id="集合简介"><a href="#集合简介" class="headerlink" title="集合简介"></a>集合简介</h3><p>.NET框架类库提供了几个类（称为集合），可以存储相关对象集合。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/List.PNG" alt="List"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collection.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListCollection</span></span><br><span class="line">&#123;</span><br><span class="line">  List&lt;<span class="keyword">string</span>&gt; items = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"red"</span>);</span><br><span class="line">  items.Insert(<span class="number">0</span>, <span class="string">"yellow"</span>); <span class="comment">// yellow, red</span></span><br><span class="line">  items.Add(<span class="string">"yellow"</span>); <span class="comment">// yellow, red, yellow</span></span><br><span class="line">  items.Remove(<span class="string">"yellow"</span>); <span class="comment">// red, yellow</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用LINQ查询泛型集合"><a href="#用LINQ查询泛型集合" class="headerlink" title="用LINQ查询泛型集合"></a>用LINQ查询泛型集合</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Collection.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LINQListCollection</span></span><br><span class="line">&#123;</span><br><span class="line">  List&lt;<span class="keyword">string</span>&gt; items = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"aQua"</span>);</span><br><span class="line">  items.Add(<span class="string">"RusT"</span>);</span><br><span class="line">  items.Add(<span class="string">"yElLow"</span>);</span><br><span class="line">  items.Add(<span class="string">"rEd"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// List&lt;string&gt; items = new List&lt;string&gt;&#123;"aQua", "RusT", "yElLow", "rEd"&#125;;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> startWithR = </span><br><span class="line">    <span class="keyword">from</span> item <span class="keyword">in</span> items</span><br><span class="line">    <span class="keyword">let</span> uppercasedString = item.ToUpper()</span><br><span class="line">    <span class="keyword">where</span> uppercasedString.StartsWith(<span class="string">"R"</span>)</span><br><span class="line">    <span class="keyword">orderby</span> uppercasedString</span><br><span class="line">    <span class="keyword">select</span> uppercasedString;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> startWithR)</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125; "</span>, item); <span class="comment">// RED RUST</span></span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"rUby"</span>);</span><br><span class="line">  items.Add(<span class="string">"SaFfRon"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> startWithR)</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125; "</span>, item); <span class="comment">// RED RUBY RUST </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>查询只创建一次，但对结果迭代得到两个不同的列表。这里演示了LINQ的延迟执行——查询<strong>只在访问结果时才执行</strong>，而不是在定义查询时执行。一次创建，多次执行，数据改变，返回结果。</p></blockquote><h3 id="课后习题-8"><a href="#课后习题-8" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="9-1-填空题"><a href="#9-1-填空题" class="headerlink" title="9.1 填空题"></a>9.1 填空题</h4><ul><li>集合类专门用于存储对象组和提供组织、存储与读取对象的方法。</li></ul><h2 id="第10章-再论类与对象"><a href="#第10章-再论类与对象" class="headerlink" title="第10章 再论类与对象"></a>第10章 再论类与对象</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>.Format(<span class="string">"&#123;0:D2&#125;:&#123;1:D2&#125;:&#123;2:D2&#125;"</span>, hour, minute, second);</span><br></pre></td></tr></table></figure><p>Format()返回格式化字符串，而不是在控制台显示。</p><h3 id="用this引用访问当前对象成员"><a href="#用this引用访问当前对象成员" class="headerlink" title="用this引用访问当前对象成员"></a>用this引用访问当前对象成员</h3><p>每个对象都可以用关键字this引用自己。调用特点对象的非静态方法时，方法体隐式用关键字this引用这个对象的实例变量和其他成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleTime</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hour;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleTime</span>(<span class="params"><span class="keyword">int</span> hour</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">this</span>.hour = hour;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">BuildString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">this</span>.ToString();</span><br><span class="line">    ToString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    reutrn <span class="keyword">string</span>.Format(<span class="string">"0:D2"</span>, <span class="keyword">this</span>.hour);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h3><p>类可以用关键字this定义属性式的类成员，称为索引器，可以像数组一样用索引访问元素清单。索引器的好处是可以定义整数索引和非整数索引。</p><p>索引器在类中像属性一样定义，用关键字this定义，不能用static修饰。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">string</span>[] names = &#123;<span class="string">"length"</span>, <span class="string">"width"</span>, <span class="string">"height"</span>&#125;;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span>[] dimensions = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">3</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Box</span>(<span class="params"><span class="keyword">double</span> length, <span class="keyword">double</span> width, <span class="keyword">double</span> heght</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    dimensions[<span class="number">0</span>] = length;</span><br><span class="line">    dimensions[<span class="number">1</span>] = width;</span><br><span class="line">    dimensions[<span class="number">2</span>] = height;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> <span class="keyword">this</span>[<span class="keyword">int</span> index]</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( (index&lt;<span class="number">0</span>) || (index&gt;=dimensions.Length) )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> dimensions[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( (index&gt;=<span class="number">0</span>) || (index&lt;dimensions.Length) )</span><br><span class="line">        dimensions[index] = vlaue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> <span class="keyword">this</span>[<span class="keyword">string</span> name]</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i]))</span><br><span class="line">        ++i;</span><br><span class="line">      <span class="keyword">return</span> (i == naems.Length) ? <span class="number">-1</span> : dimensions[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i]))</span><br><span class="line">        ++i;</span><br><span class="line">      <span class="keyword">if</span>(i != names.Length)</span><br><span class="line">        dimensions[i] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BoxTest.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoxTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Box box = <span class="keyword">new</span> Box(<span class="number">30</span>, <span class="number">30</span> ,<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// box[0] 30</span></span><br><span class="line">    <span class="comment">// box[1] 30</span></span><br><span class="line">    <span class="comment">// box[2] 30</span></span><br><span class="line">    box[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">    box[<span class="string">"width"</span>]=<span class="number">20</span>;</span><br><span class="line">    <span class="comment">// box[0] 10</span></span><br><span class="line">    <span class="comment">// box[1] 20</span></span><br><span class="line">    <span class="comment">// box[2] 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引器可以重载。</p><h3 id="重载构造函数"><a href="#重载构造函数" class="headerlink" title="重载构造函数"></a>重载构造函数</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Time</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hour;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> minute;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"></span>) : <span class="title">this</span>(<span class="params"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"><span class="keyword">int</span> h</span>) : <span class="title">this</span>(<span class="params">h, <span class="number">0</span>, <span class="number">0</span></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"><span class="keyword">int</span> h, <span class="keyword">int</span> m</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    SetTime(h ,m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params">Time time</span>) : <span class="title">this</span>(<span class="params">time.Hour, time.Minute</span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SetTime</span>(<span class="params"><span class="keyword">int</span> h, <span class="keyword">int</span> m</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Hour = h;</span><br><span class="line">    Minute = m;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> Hour</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个类外不能使用set方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      hour = ((<span class="keyword">value</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="keyword">value</span>&lt;<span class="number">24</span>) ? <span class="keyword">value</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> Minute</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的this引用用法称为构造函数初始化器，易维护。</p><h3 id="默认与无参数构造函数"><a href="#默认与无参数构造函数" class="headerlink" title="默认与无参数构造函数"></a>默认与无参数构造函数</h3><p>注意上面Time无参构造函数，显式初始化Time对象，为每个参数传递三个参数0。如果省略无参构造函数，则无法用表达式<code>new Time()</code>创建对象，会发生编译错误。</p><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>类可以引用其他类的对象，作为成员。这个功能称为合成，也称为“有”（has-a）关系。</p><p>Employee类中引用其他对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> Date birthDate;</span><br><span class="line">  <span class="keyword">private</span> Date hireDate;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存回收与析构函数"><a href="#内存回收与析构函数" class="headerlink" title="内存回收与析构函数"></a>内存回收与析构函数</h3><p>Garbage Collection and Destructors</p><p>如果管理资源的对象失去所有引用，而还没有显式释放资源，则程序不能再访问和释放这个资源。这就产生了资源泄露。</p><p>公共语言运行环境（CLR）进行自动内存管理，用内存回收单元（Garbage Collection）释放对象不再需要的内存，其他对象可以使用这个内存。</p><p>对象失去所有引用时，成为可析构对象。每个对象有个特殊成员，称为析构函数。</p><p>析构函数由内存回收单元调用，在内存回收单元释放对象内存之前用于进行对象的终止整理工作。</p><h3 id="静态类成员"><a href="#静态类成员" class="headerlink" title="静态类成员"></a>静态类成员</h3><p>static Class Members</p><p>某些情况下，类的所有对象要共享某个变量的一个副本。这时就要使用静态变量。静态变量表示类信息，类的所有对象共享同一数据。静态变量的作用域是类体。</p><ul><li>类的公用静态成员访问方法：<strong>类名</strong>和点号运算符<code>Math.PI</code>；</li><li>类的专用静态成员只能通过类的方法和属性访问。</li></ul><p>如果没有Employee类的对象，则成员count任然可以引用，弹药通过静态属性Count，如<code>Employee.Count</code>C#的字符串对象创建后不能修改。</p><p>声明为静态的方法不能直接访问非静态类成员，因为即使类对象不存在，也可以调用静态方法。静态方法也不能使用this引用，this引用要引用特定类对象。</p><h3 id="只读实例变量"><a href="#只读实例变量" class="headerlink" title="只读实例变量"></a>只读实例变量</h3><p>readonly Instance Variables</p><p>C#提供了readonly关键字，可以指定对象的实例变量不能修改，想修改会发生错误。</p><p>构造函数可以多次对readonly实例变量赋值。</p><p>声明为const的成员要在编译时赋值，常量成员的值不能在编译时确定要用readonly关键字声明。如果构造函数不初始化readonly声明的成员，则编译器产生一个警告。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Increment</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> INCREMENT;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Increment</span>(<span class="params"><span class="keyword">int</span> incrementValue</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    INCREMENT = incrementValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="软件复用性"><a href="#软件复用性" class="headerlink" title="软件复用性"></a>软件复用性</h3><p>Software Reusability</p><p>类库，快速程序开发（RAD），FCL，CLR</p><h3 id="数据抽象与封装"><a href="#数据抽象与封装" class="headerlink" title="数据抽象与封装"></a>数据抽象与封装</h3><p>Data Abstraction and Encapsulation</p><p>信息隐藏：类通常对类的客户隐藏其实现细节。</p><p>数据抽象：描述类的功能而不管其实现细节。</p><p>int、double与char类的类型，还有队列都是抽象数据类型（ADT）。抽象数据类型（ADT）实际上包含两个概念，即数据表达和该数据允许的操作。</p><h3 id="internal-Access"><a href="#internal-Access" class="headerlink" title="internal Access"></a>internal Access</h3><p>目前为止我们所定义的类，只能用两个访问修饰符声明：public与internal。顶级类。C#支持嵌套类——定义在其他类中的类。除了public与internal，类还可以声明为private或protected。如果类声明没有访问修饰符，默认internal访问。声明为internal的方法。实例变量和其他成员可以让同一汇编中的所有代码访问，而其他汇编中的代码则不行。同一汇编中，internal相当于public。</p><h3 id="Class-View-and-Object-Browser"><a href="#Class-View-and-Object-Browser" class="headerlink" title="Class View and Object Browser"></a>Class View and Object Browser</h3><p>使用Class View窗口</p><p>使用Object Browser</p><h3 id="对象初始化器"><a href="#对象初始化器" class="headerlink" title="对象初始化器"></a>对象初始化器</h3><p>Object Initializers</p><p>创建对象并在同一语句中将其属性初始化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ObjectInitialzerTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Time aTime = <span class="keyword">new</span> Time&#123;Hour=<span class="number">14</span>, Minutre=<span class="number">145</span>, Second=<span class="number">12</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    Time anotherTime = <span class="keyword">new</span> Time&#123;Minute=<span class="number">45</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理delegate"><a href="#代理delegate" class="headerlink" title="代理delegate"></a>代理delegate</h3><p>代理对象保存一个方法的引用。代理可以把方法看成数据，通过代理可以将方法赋值给一个变量，将这个方法与其他方法相互传递。</p><p>代理类型只是描述一组具有特定参数和特定返回类型的方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Delegates</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 委托一个接收int并返回布尔值的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ,<span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建NumberPredicate委托类型的实例</span></span><br><span class="line">    NumberPredicate evenPredicate = IsEven;</span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; evenNumbers = FilterArray(numbers, evenPredicate);</span><br><span class="line">    <span class="comment">// evenNumber: 2 4 6 8 10</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; oddNumbers = FilterArray(numbers, IsOdd);</span><br><span class="line">    <span class="comment">// oddNumber: 1 3 5 7 9</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> list&lt;<span class="keyword">int</span>&gt; <span class="title">FilterArray</span>(<span class="params"><span class="keyword">int</span>[] intArray, NumberPredicate predicate</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      List&lt;<span class="keyword">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">int</span> item <span class="keyword">in</span> inArray)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate(item))</span><br><span class="line">          result.Add(item);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsEven</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">return</span> (number%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsOdd</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">return</span> (number%<span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>由于IsEven方法的签名与NumberPredicate代理的签名匹配</strong>，因此可以用NumberPredicate类型的变量引用IsEven方法。</p><h3 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h3><p>lambda表达式首先是个参数表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Lambda</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ,<span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    NumberPredicate evenPredicate = number =&gt; (number%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    evenPredicate(<span class="number">4</span>); <span class="comment">// True</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; evenNumbers = FilterArray(numbers, evenPredicate);</span><br><span class="line">    <span class="comment">// evenNumber: 2 4 6 8 10</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; oddNumbers = FilterArray(numbers, (<span class="keyword">int</span> number) =&gt; (number%<span class="number">2</span> == <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// evenNumber: 1 3 5 7 9</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; numberOver5 = FilterArray(numbers, number =&gt; &#123;<span class="keyword">return</span> number&gt;<span class="number">5</span>; &#125; );</span><br><span class="line">    <span class="comment">// 6 7 8 9 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> list&lt;<span class="keyword">int</span>&gt; <span class="title">FilterArray</span>(<span class="params"><span class="keyword">int</span>[] intArray, NumberPredicate predicate</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      List&lt;<span class="keyword">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">int</span> item <span class="keyword">in</span> inArray)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate(item))</span><br><span class="line">          result.Add(item);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数表后面是lambda运算符（=&gt;，读作go to）和一个表示函数体的表达式。</p><p>没有指定返回类型，返回类型可以从返回值或代理的返回值推定。</p><p>同样，lambda表达式定义的方法要与代理类型定义的方法有相同签名。</p><h3 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h3><p>Anonymous Types可以创建简单类，用于存储数据，不必编写类定义。</p><p>匿名类型的属性都是公用和不可变的。匿名类型是只读的，创建对象之后不能修改属性值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Lambda</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> bob1 = <span class="keyword">new</span> &#123;Name = <span class="string">"Bob Smith"</span>, Age = <span class="number">37</span>&#125;;</span><br><span class="line">    bob.ToString(); <span class="comment">// &#123;Name = Bob Smith, Age = 37&#125;</span></span><br><span class="line">    <span class="keyword">var</span> bob2 = <span class="keyword">new</span> &#123;Name = <span class="string">"Bob Smith"</span>, Age = <span class="number">37</span>&#125;;</span><br><span class="line">    bob1.Equals(bob2); <span class="comment">// True</span></span><br><span class="line">    <span class="comment">// 两者属性值相同，声明顺序相同</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LINQ中的匿名类型</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = </span><br><span class="line">  <span class="keyword">from</span> e <span class="keyword">in</span> employees</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">new</span> &#123;e.FirstName, Last = e.LastName&#125;;</span><br></pre></td></tr></table></figure><h3 id="课后习题-9"><a href="#课后习题-9" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="10-1-填空题"><a href="#10-1-填空题" class="headerlink" title="10.1 填空题"></a>10.1 填空题</h4><ul><li><strong>最低权限原则</strong>要求代码只能分配完成指定任务所需的访问量。</li><li>编译器将类库工程监理在所谓<strong>动态链接库</strong>的汇编中。</li></ul><h4 id="10-2-判断题"><a href="#10-2-判断题" class="headerlink" title="10.2 判断题"></a>10.2 判断题</h4><ul><li>lambda表达式必须返回一个值。</li></ul><h2 id="第11章-面向对象编程：继承"><a href="#第11章-面向对象编程：继承" class="headerlink" title="第11章 面向对象编程：继承"></a>第11章 面向对象编程：继承</h2><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>Base Classes and Derived Classes</p><p>继承形成了树状层次结构。</p><p>并非每个类关系都是继承关系。“有”关系，类的成员是其他类对象的引用。</p><h3 id="protected成员"><a href="#protected成员" class="headerlink" title="protected成员"></a>protected成员</h3><p>protected介于公用与专用之间，基类的protected成员可以让基类成员和派生类成员访问。所有非专用基类成员在派生类中保持原访问修饰符。</p><h3 id="基类和派生类的关系"><a href="#基类和派生类的关系" class="headerlink" title="基类和派生类的关系"></a>基类和派生类的关系</h3><p>C#中除object以外的每个类都扩展现有类。object是唯一没有基类的类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommissionEmployee类显式扩展（继承自）object类（FCL中的System.Object）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommissionEmployee</span> : <span class="title">object</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数不继承，但隐式调用object类的构造函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseCommissionEmployee</span> : <span class="title">CommissionEmployee</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">decimal</span> baseSalary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构造函数初始化器和关键字base调用基类构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BaseCommissionEmployee</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">decimal</span> sales, <span class="keyword">decimal</span> salary</span>): <span class="title">base</span>(<span class="params">name, sales</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    BaseSalary = salary;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">decimal</span> BaseSalary&#123;<span class="keyword">get</span>; <span class="keyword">set</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">decimal</span> <span class="title">Earnings</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字virtual与abstract表示派生类中可以覆盖基类方法。</p><p>使用父类private实例变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseCommissionEmployee</span> : <span class="title">CommissionEmployee</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">decimal</span> <span class="title">Earnings</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseSalary + <span class="keyword">base</span>.Earnings();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h3><p>Constructors in Derived Classes</p><p>派生类构造函数在执行自己的任务之前要显示（通过base引用和构造函数初始化器）或隐式（调用基类默认构造函数或无参构造函数）调用直接基类的构造函数。链中最后一个调用的构造函数总是object类的构造函数。</p><h3 id="继承和软件工程"><a href="#继承和软件工程" class="headerlink" title="继承和软件工程"></a>继承和软件工程</h3><p>Software Engineering with Inheritance</p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/object.PNG" alt="object"></p><h2 id="第12章-多态、接口与运算符重载"><a href="#第12章-多态、接口与运算符重载" class="headerlink" title="第12章 多态、接口与运算符重载"></a>第12章 多态、接口与运算符重载</h2><h3 id="多态举例"><a href="#多态举例" class="headerlink" title="多态举例"></a>多态举例</h3><p>程序通过基类变量调用方法时，发生多态——执行时，根据引用对象的类型调用这个方法的正确派生类版本。</p><p>程序通过向下转换技术显式将基类引用转换为派生类类型，程序可以调用基类中没有的派生类方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PolymorphismTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    BaseCommissionEmployee baseCommissionEmployee = <span class="keyword">new</span> BaseCommissionEmployee(<span class="string">"Bob"</span>, <span class="number">5000</span>, <span class="number">300</span>);</span><br><span class="line">    </span><br><span class="line">    CommissionEmployee commissionEmployee = baseCommissionEmployee;</span><br><span class="line">    </span><br><span class="line">    CommissionEmployee.ToString();</span><br><span class="line">    CommissionEmployee.Earnings();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类与方法"><a href="#抽象类与方法" class="headerlink" title="抽象类与方法"></a>抽象类与方法</h3><p>定义不实例化为任何对象的类，抽象类。抽象基类。</p><p>抽象类用关键字abstract声明。抽象类通常包含一个或几个抽象方法。</p><p>抽象属性声明形式如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> property</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数和静态方法不能声明为abstract。派生类不能覆盖静态方法。</p><p>不能实例化抽象基类的对象，但可以用抽象基类声明变量，保存这些抽象类派生的任何具体类的对象引用。程序通常用这种变量多态操纵派生类对象。可以用抽象基类名调用抽象基类中声明的静态方法。</p><p>as运算符进行向下转换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> employee = currentEmployee <span class="keyword">as</span> BaseCommissionEmployee;</span><br></pre></td></tr></table></figure><h3 id="sealed方法与类"><a href="#sealed方法与类" class="headerlink" title="sealed方法与类"></a>sealed方法与类</h3><p>基类中声明为sealed的方法不能在派生类中覆盖，声明为static和private的方法隐含sealed，因为派生类中不能覆盖（但派生类可以声明与基类中专用方法同名的新方法）。同时声明override与sealed的派生方法可以覆盖基类方法。</p><p>声明为sealed的类不能作为基类（不能扩展）。</p><h3 id="创建与使用接口"><a href="#创建与使用接口" class="headerlink" title="创建与使用接口"></a>创建与使用接口</h3><p>Creating and Using Interfaces</p><p>接口定义和标准化人与系统交互的方式。</p><p>软件对象也是通过接口通信。</p><p>所有接口成员隐式声明为public与abstract。</p><p>每个接口可以扩展一个或多个其他接口。</p><p>实现这个接口的具体类要声明接口中指定了签名的每个接口成员。实现接口而不实现其所有成员的类是个抽象类，要声明为abstract，每个未实现的接口成员要包含一个abstract声明。</p><p>和公用抽象类一样，接口通常为公用类型，因此通常在单独文件中声明，文件名与接口名相同，文件扩展名为.cs。</p><p><strong>声明接口IPayable</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IPayable.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建Invoice类</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Invoice.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Invoice</span> : <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改Employee类，实现IPayable接口</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Employee.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.NET框架类库公共接口</strong></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/interface.PNG" alt=""></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/interface_next.PNG" alt="interface"></p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>使运算符适用于类对象，这个过程称为运算符重载。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComplexNumber.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComplexNumber</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> Real &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> Imaginary &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ComplexNumber</span>(<span class="params"><span class="keyword">double</span> a, <span class="keyword">double</span> b</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Real = a;</span><br><span class="line">    Imaginary = b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>.Format( <span class="string">"&#123;0&#125; &#123;1&#125; &#123;2&#125;i"</span>,</span><br><span class="line">                        Real, (Imaginary &lt; <span class="number">0</span> ? <span class="string">"-"</span>:<span class="string">"+"</span>), Math.Abs(Imaginary))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ComplexNumber <span class="keyword">operator</span> +(ComplexNumber x, ComplexNumber y)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">reutrn new <span class="title">ComplexNumber</span>(<span class="params">x.Real+y.Real, x.Imaginary+y.Imaginary</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OperatorOverloading.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComplexTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ComplexNumber x, y;</span><br><span class="line">    x = <span class="keyword">new</span> ComplexNumber(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    y = <span class="keyword">new</span> ComplexNumber(<span class="number">4</span>, <span class="number">-2</span>);</span><br><span class="line">    </span><br><span class="line">    x+y; <span class="comment">// (2+4i)+(4-2i)=(6+2i)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第13章-异常处理"><a href="#第13章-异常处理" class="headerlink" title="第13章 异常处理"></a>第13章 异常处理</h2><p>异常就是程序执行期间发生的问题。</p><p>异常处理使应用程序能够解决异常。异常处理可实现清晰，健壮和更多容错的程序。</p><h3 id="异常处理概述"><a href="#异常处理概述" class="headerlink" title="异常处理概述"></a>异常处理概述</h3><p>Exception Handling Overview</p><p>程序员可以决定处理任何异常——所有异常，某种类型的所有异常或相关类型的所有异常。</p><h3 id="例子：除数为0不用异常处理"><a href="#例子：除数为0不用异常处理" class="headerlink" title="例子：除数为0不用异常处理"></a>例子：除数为0不用异常处理</h3><p>其他信息（称为堆栈跟踪）显示异常名称和导致异常的执行路径。</p><p>堆栈跟踪中的每一行“ at”都表示发生异常时正在执行的特定方法中的一行代码。该信息说明异常的起源，以及达到该点之前进行了哪些方法调用。</p><p>当Convert方法ToInt32接收到不代表有效整数的字符串时，将发生<code>FormatException</code>。即使发生异常并且已打印堆栈跟踪，程序也可能继续执行。在这种情况下，应用程序可能会产生错误的结果。</p><h3 id="使用异常处理"><a href="#使用异常处理" class="headerlink" title="使用异常处理"></a>使用异常处理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DivideByZeroTest.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DivideByZeroTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DivideByZeroTestForm</span> : <span class="title">Form</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DivideByZeroTestForm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从用户那里获得2个整数</span></span><br><span class="line">    <span class="comment">// 将分子除以分母</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">divideButton_click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      outputLabel.Text = <span class="string">""</span>; <span class="comment">// 清除标签OutputLabel</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">int</span> numerator = Convert.ToInt32( numeratorTextBox.Text );</span><br><span class="line">        <span class="keyword">int</span> denominator = Convert.ToInt32( denominatorTextBox.Text );</span><br><span class="line">        <span class="keyword">int</span> result = numerator / denominator;</span><br><span class="line">        outputLabel.Text = result.ToString();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(FormatException)</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBox.Show( <span class="string">"You must enter two integers."</span>,</span><br><span class="line">                          <span class="string">"Invalid Number Format"</span>, MessageBoxButtons.OK,</span><br><span class="line">                          MessageBoxIcon.Error );                                   </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> ( DivideByZeroException divideByZeroExceptionParameter )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBox.Show( divideByZeroExceptionParameter.Message,</span><br><span class="line">                          <span class="string">"Attempted to Divide by Zero"</span>, MessageBoxButtons.OK,</span><br><span class="line">                          MessageBoxIcon.Error );                                  </span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/divide.PNG" alt="DivideByZeroTest.cs"></p><p>另一种有效的方法：</p><p><code>Int32.TryParse</code>方法将字符串转换为int值。该方法需要两个参数-一个是要解析的字符串，另一个是要将转换后的值存储在其中的变量。如果成功解析了字符串，则该方法返回true。如果无法转换字符串，则将值0分配给第二个参数。</p><p><strong>Enclosing Code in a try Block（用try块界定代码）</strong></p><p>try块包含可能引发异常的代码以及发生异常时被跳过的代码。</p><p>catch块至多只能有一个参数。</p><p><strong>Catching Exceptions（捕获异常）</strong></p><p>当try块中发生异常时，相应的catch块将捕获该异常并进行处理。一个try块之后必须至少有一个catch块。catch块指定一个异常参数，该参数表示catch块可以处理的异常。catch块也可以不指定异常类型或标识符，这种catch块（称为通用catch子句），捕获所有异常类型。</p><p><strong>未捕获异常</strong></p><p>未捕获的异常（或未处理的异常）是没有匹配的catch块的异常。</p><p><strong>Termination Model of Exception Handling（异常处理的终止模型）</strong></p><p>当程序或CLR中调用的方法检测到问题时，该方法或CLR会引发异常。发生异常的点称为抛出点。如果try块中发生异常，则try块立即终止，程序控制将立即转移到后面第一个异常参数类型与所有抛出类型匹配的catch块中。处理异常后，程序控制在最后一个catch块之后恢复。这称为异常处理的终止模型</p><h3 id="NET-Exception层次"><a href="#NET-Exception层次" class="headerlink" title=".NET Exception层次"></a>.NET Exception层次</h3><p>C#中的异常处理机制只能抛出和捕获Exception类（命名空间System）及其派生类的对象。</p><p>其他.NET语言（如C++）引发的异常可以通过常规catch子句捕获。</p><p><strong>SystemException类</strong></p><p>Exception类是.NET异常类层次结构的基类。从Exception派生的一个最重要的类是SystemException。CLR产生SystemException，可以在程序执行期间的任何时候发生。</p><p>如果程序尝试访问超出范围的数组索引，则CLR会引发IndexOutOfRangeException类型的异常。尝试使用空引用会导致NullReferenceException。</p><p>catch块可以使用基类类型来捕获相关异常的层次结构。指定异常类型参数的catch块可以捕获所有异常。仅当基类和所有派生类的处理行为相同时，此技术才有意义。</p><p><strong>确定方法抛出什么异常（Determining Which Exceptions a Method Throws）</strong></p><h3 id="finally块"><a href="#finally块" class="headerlink" title="finally块"></a>finally块</h3><p>程序经常动态地请求和释放资源。操作系统通常会阻止多个程序处理文件。因此，该程序应关闭文件（即释放资源），以便其他程序可以使用它。如果未关闭文件，则会发生资源泄漏。</p><p>处理资源时经常会发生异常。无论程序是否遇到异常，该程序都应在不再需要该文件时将其关闭。<strong>C#提供了finally块，无论是否发生异常，该块都可以保证执行</strong>。<br>这使得finally块非常适合从相应的try块中释放资源。</p><p>try块中的局部变量无法在相应的finally块中访问，因此必须在try块之前声明必须在两者中访问的变量。</p><p><strong>using语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(ExampleObject e = <span class="keyword">new</span> ExampleObject())</span><br><span class="line">&#123;</span><br><span class="line">  e.SomeMethod&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简化取得资源、在try块中使用资源和在相应finally中释放资源的代码。文件处理程序，保证文件不再使用时正确关闭。</p><p>using语句代码等效于</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ExampleObject e = <span class="keyword">new</span> ExampleObject();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    e.SomeMethod();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( e != <span class="literal">null</span> )</span><br><span class="line">      ( ( IDisposable ) e ).Dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Exception Properties</strong></p><p>类Exception的属性用于制定错误消息，指示捕获到的异常。属性Message存储与Exception对象关联的错误消息。属性StackTrace包含一个表示方法调用堆栈的字符串</p><p>发生异常时，程序员可能会使用其他错误消息或指示新的异常类型。原始异常对象存储在InnerException属性中。</p><p><strong>类异常提供其他属性：</strong></p><ul><li>HelpLink指定描述问题的帮助文件的位置。</li><li>Source指定引起异常的应用程序或对象的名称。</li><li>TargetSite指定异常发生的方法。</li></ul><p>最近调用的方法出现在堆栈的顶部。第一种方法（Main）出现在底部。</p><p>StackTrace表示抛出点处方法调用堆栈的状态。内部异常信息包括内部异常堆栈跟踪。</p><h3 id="用户定义异常类（User-Defined-Exception-Classes）"><a href="#用户定义异常类（User-Defined-Exception-Classes）" class="headerlink" title="用户定义异常类（User-Defined Exception Classes）"></a>用户定义异常类（User-Defined Exception Classes）</h3><p>用户定义的异常类应直接或间接从名称空间System的Exception类派生。</p><p>用户定义的异常应定义三个构造函数：</p><ul><li>无参数构造函数</li><li>接收字符串参数的构造函数（错误消息）</li><li>接收字符串参数和Exception参数的构造函数（错误消息和内部异常对象）</li></ul><h2 id="第14章-图形用户界面概念：第一部分"><a href="#第14章-图形用户界面概念：第一部分" class="headerlink" title="第14章 图形用户界面概念：第一部分"></a>第14章 图形用户界面概念：第一部分</h2><p>图形用户界面（GUI）允许用户在视觉上与程序进行交互。</p><p>GUI控件是可以在屏幕上显示信息或使用户能够与应用程序交互的对象。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/controller.PNG" alt="controller"></p><h3 id="Windows-Forms"><a href="#Windows-Forms" class="headerlink" title="Windows Forms"></a>Windows Forms</h3><p>Form是出现在计算机桌面上的图形元素； 它可以是对话框，窗口或MDI窗口。组件是实现IComponent接口的类的实例，该接口定义了组件必须实现的行为，例如如何加载组件。诸如按钮或标签的控件在运行时具有图形表示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第1章-计算机、Internet与Visual-C-简介&quot;&gt;&lt;a href=&quot;#第1章-计算机、Internet与Visual-C-简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 计算机、Internet与Visual C#简介&quot;&gt;&lt;/a&gt;第1章 计算机、Internet与Visual C#简介&lt;/h2&gt;
    
    </summary>
    
    
      <category term="积累" scheme="https://mysticalguest.github.io/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="C#" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Docker</title>
    <link href="https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDocker/"/>
    <id>https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDocker/</id>
    <published>2020-08-18T01:10:32.096Z</published>
    <updated>2020-09-07T09:03:39.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Docker简介"><a href="#1、Docker简介" class="headerlink" title="1、Docker简介"></a>1、Docker简介</h2><p>类似于虚拟机技术，但不是一个虚拟机，却实现了虚拟机技术里的资源隔离，性能远远高于虚拟机。<br><a id="more"></a></p><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>如图，将用一个实例来讲述Docker的来源：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/docker-story.png" alt="Docker" style="zoom:80%;" /></p><p>用户A使用的电脑是Windows原生系统，需要自己安装驱动和软件等，但如果用户B也使用同样方法，就也得自己再装一遍，其他人也一样，过于麻烦。</p><p>那么就有了Windows镜像系统，用户A把系统装好后，包括安装好的驱动和软件等，打包成镜像，其他用户也就有了。</p><p>Docker就类似于这种镜像机制。</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><ul><li>docker主机(Host)：安装了d ocker程序的机器（Docker直接安装在操作系统之上）</li><li>docker客户端(Client)：连接docker主机进行操作</li><li>docker仓库(Registry)：用来保存各种打包好的软件镜像；公共、私人仓库</li><li>docker镜像(Images)：软件打包好的镜像；放在docker仓库中</li><li>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</li></ul><p>使用Docker的步骤：</p><ul><li>安装Docker</li><li>去Docker仓库找到这个软件对应的镜像</li><li>使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</li><li>对容器的启动停止就是对软件的启动停止</li></ul><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h3 id="3-1-安装linux虚拟机"><a href="#3-1-安装linux虚拟机" class="headerlink" title="3.1 安装linux虚拟机"></a>3.1 安装linux虚拟机</h3><ul><li>VMWare、VirtualBox</li><li>创建新虚拟机或打开已创建的虚拟机，这里选择CentOS</li></ul><h3 id="3-2-在linux虚拟机上安装docker，步骤"><a href="#3-2-在linux虚拟机上安装docker，步骤" class="headerlink" title="3.2 在linux虚拟机上安装docker，步骤"></a>3.2 在linux虚拟机上安装docker，步骤</h3><ul><li>检查内核版本，必须是3.10及以上</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uname -r</span></span><br></pre></td></tr></table></figure><ul><li>不是3.10及以上的，使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum update</span></span><br></pre></td></tr></table></figure><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><ul><li>添加软件源（设置yum源）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><ul><li>可以查看所有仓库中所有docker版本，并选择特定版本安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure><ul><li>安装docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-18.03.1.ce</span></span></span><br></pre></td></tr></table></figure><ul><li>启动docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br></pre></td></tr></table></figure><ul><li>验证安装是否成功（有client和service两部分表示docker安装启动都成功了）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br></pre></td></tr></table></figure><ul><li>停止docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop docker</span></span><br></pre></td></tr></table></figure><ul><li>开机启动docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><ul><li><p>更换docker的镜像源</p><ul><li><p>修改或创建daemon.json文件：<code>vi /etc/docker/daemon.json</code>将以下配置写入到文件中，保存并退出（不会操作的百度下vi命令吧）：</p></li><li><p>Docker中国官方镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中科大镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>网易163镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阿里云跟daocloud镜像加速需要注册账号，阿里云<a href="https://www.aliyun.com/">官网</a>，登录之后选择控制台，找到<strong>容器镜像服务</strong>，在镜像加速器下有个加速地址，复制添加上即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://xxxxxxxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启docker：<code>systemctl restart docker</code></p></li></ul></li></ul><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="4-1-镜像操作"><a href="#4-1-镜像操作" class="headerlink" title="4.1 镜像操作"></a>4.1 镜像操作</h3><div class="table-container"><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table></div><p>Docker Hub<a href="https://hub.docker.com/">仓库</a></p><h3 id="4-2-容器操作"><a href="#4-2-容器操作" class="headerlink" title="4.2 容器操作"></a>4.2 容器操作</h3><p>软件镜像（例：QQ安装程序）——运行镜像——产生一个容器（正在运行的软件，运行的QQ）</p><p>步骤：</p><ul><li>搜索镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search tomcat</span><br></pre></td></tr></table></figure><ul><li>拉取镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull tomcat</span></span><br></pre></td></tr></table></figure><ul><li>根据镜像启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// --name给容器起名</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mytomcat -d tomcat:latest</span></span><br></pre></td></tr></table></figure><ul><li>查看运行中的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure><ul><li>停止运行中的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop &lt;容器的id&gt;/&lt;容器的name&gt;</span></span><br></pre></td></tr></table></figure><ul><li>查看所有的容器（包括运行中和已停止的）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure><ul><li>启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start &lt;容器id&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除一个容器（注意和删除镜像的区别）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm 容器id</span></span><br></pre></td></tr></table></figure><ul><li>启动一个做了端口映射的tomcat（可以不用起名），一个镜像可以做</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8888:8080 tomcat</span></span><br></pre></td></tr></table></figure><blockquote><p>-d：后台运行<br>-p：将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p></blockquote><ul><li>查看容器的日志</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs &lt;container-name&gt;/&lt;container-id&gt;</span></span><br></pre></td></tr></table></figure><p>更多命令，可以参考每一个镜像的<a href="https://docs.docker.com/engine/reference/commandline/docker/">文档</a></p><h2 id="5、安装MySQL示例"><a href="#5、安装MySQL示例" class="headerlink" title="5、安装MySQL示例"></a>5、安装MySQL示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br></pre></td></tr></table></figure><ul><li>错误的启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql01 -d mysql</span></span><br></pre></td></tr></table></figure><p>用<code>docker ps</code>观察到，mysql退出了；为什么呢？使用<code>docker logs &lt;mysql的id&gt;</code>，得到错误日志：三个参数必须指定一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and </span><br><span class="line">MYSQL_RANDOM_ROOT_PASSWORD</span><br></pre></td></tr></table></figure><ul><li>正确的启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure><ul><li>还应做端口映射</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure><ul><li>几个其他的高级操作</li></ul><p>-v：把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</p><p>改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw </span></span><br><span class="line">-d mysql:tag</span><br></pre></td></tr></table></figure><p>不用配置文件，指定mysql的一些配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character</span></span><br><span class="line">-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Docker简介&quot;&gt;&lt;a href=&quot;#1、Docker简介&quot; class=&quot;headerlink&quot; title=&quot;1、Docker简介&quot;&gt;&lt;/a&gt;1、Docker简介&lt;/h2&gt;&lt;p&gt;类似于虚拟机技术，但不是一个虚拟机，却实现了虚拟机技术里的资源隔离，性能远远高于虚拟机。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Servlet</title>
    <link href="https://mysticalguest.github.io/2020/08/16/Spring/SpringBootServlet/"/>
    <id>https://mysticalguest.github.io/2020/08/16/Spring/SpringBootServlet/</id>
    <published>2020-08-16T04:18:39.084Z</published>
    <updated>2020-09-10T09:34:43.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置嵌入式Servlet容器"><a href="#1、配置嵌入式Servlet容器" class="headerlink" title="1、配置嵌入式Servlet容器"></a>1、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><a id="more"></a><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/tomcat-pom.png" alt="tomcat"></p><p>问题？</p><h3 id="1-1-如何定制和修改Servlet容器的相关配置；"><a href="#1-1-如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1.1 如何定制和修改Servlet容器的相关配置；"></a>1.1 如何定制和修改Servlet容器的相关配置；</h3><ul><li>修改和server有关的配置（ServerProperties{也是EmbeddedServletContainerCustomizer}）；</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8088</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure><ul><li>编写一个<code>EmbeddedServletContainerCustomizer</code>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">      container.setPort(<span class="number">8083</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-注册Servlet三大组件（Servlet、Filter、Listener）"><a href="#1-2-注册Servlet三大组件（Servlet、Filter、Listener）" class="headerlink" title="1.2 注册Servlet三大组件（Servlet、Filter、Listener）"></a>1.2 注册Servlet三大组件（Servlet、Filter、Listener）</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><ul><li>ServletRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">    <span class="keyword">new</span> CustomServlet(),</span><br><span class="line">    <span class="string">"/myServlet"</span></span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FilterRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">  registrationBean.setFilter(<span class="keyword">new</span> CustomFilter());</span><br><span class="line">  registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">  <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletListenerRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ServletListenerRegistrationBean&lt;CustomListener&gt; registrationBean = </span><br><span class="line"><span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> CustomListener());</span><br><span class="line">  <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(</span><br><span class="line">  name = &#123;<span class="string">"dispatcherServletRegistration"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(</span><br><span class="line">  value = &#123;DispatcherServlet<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">  <span class="title">name</span> </span>= &#123;<span class="string">"dispatcherServlet"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet </span></span></span><br><span class="line"><span class="function"><span class="params">  dispatcherServlet)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">    dispatcherServlet, </span><br><span class="line">    <span class="keyword">new</span> String[]&#123;<span class="keyword">this</span>.serverProperties.getServletMapping()&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">  <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">  registration.setName(<span class="string">"dispatcherServlet"</span>);</span><br><span class="line">  registration.setLoadOnStartup(<span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">    registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、SpringBoot能不能支持其他的Servlet容器？"><a href="#2、SpringBoot能不能支持其他的Servlet容器？" class="headerlink" title="2、SpringBoot能不能支持其他的Servlet容器？"></a>2、SpringBoot能不能支持其他的Servlet容器？</h2><p>在之前写定制嵌入式的Servlet容器相关的规则配置类的时候</p><p>在<code>ServletConfig.class</code>中用的<code>ConfigurableEmbeddedServletContainer</code>声明的变量，选中，点击Ctrl+h，会在右侧显示它的继承树：</p><p>可配置的嵌入式容器工程</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/other-servlet.PNG" alt="other servlet"></p><h2 id="3、替换为其他嵌入式Servlet容器"><a href="#3、替换为其他嵌入式Servlet容器" class="headerlink" title="3、替换为其他嵌入式Servlet容器"></a>3、替换为其他嵌入式Servlet容器</h2><p>默认支持：</p><h3 id="3-1-Tomcat（默认使用）"><a href="#3-1-Tomcat（默认使用）" class="headerlink" title="3.1 Tomcat（默认使用）"></a>3.1 Tomcat（默认使用）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Jetty（长链接，例如聊天）"><a href="#3-2-Jetty（长链接，例如聊天）" class="headerlink" title="3.2 Jetty（长链接，例如聊天）"></a>3.2 Jetty（长链接，例如聊天）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入除Tomcat外的其他Servlet: jetty --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Undertow（不支持JSP）"><a href="#3-3-Undertow（不支持JSP）" class="headerlink" title="3.3 Undertow（不支持JSP）"></a>3.3 Undertow（不支持JSP）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入除Tomcat外的其他Servlet: undertow --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-嵌入式Servlet容器自动配置原理"><a href="#3-4-嵌入式Servlet容器自动配置原理" class="headerlink" title="3.4 嵌入式Servlet容器自动配置原理"></a>3.4 嵌入式Servlet容器自动配置原理</h3><p>在自动配置包里的<code>EmbeddedServletContainerAutoConfiguration.class</code>：嵌入式的Servlet容器自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(-<span class="number">2147483648</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">// 导入<span class="title">BeanPostProcessorsRegistrar</span></span>; 给容器中导入一些组件</span><br><span class="line"><span class="comment">// 导入了EmbeddedServletContainerCustomizerBeanPostProcessor</span></span><br><span class="line"><span class="comment">// 后置处理器: bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Undertow</span>.<span class="title">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">    <span class="title">value</span> </span>= &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedUndertow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Server</span>.<span class="title">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">    <span class="title">value</span> </span>= &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedJetty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="comment">// 判断当前是否引入了Tomcat依赖</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">  // 判断当前容器没有用户自己定义EmbeddedServletContainerFactory: 嵌入式的Servlet容器工厂</span><br><span class="line">  <span class="comment">// 作用: 创建嵌入式的Servlet容器</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">    value = &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedTomcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取嵌入式的Servlet容器</span></span><br><span class="line">  <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(ServletContextInitializer... var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/EmbeddedServletContainerFactory.PNG" alt="EmbeddedServletContainerFactory"></p><ul><li>EmbeddedServletContainer（嵌入式的Servlet容器）</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/EmbeddedServletContainer.PNG" alt="EmbeddedServletContainer"></p><ul><li>以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个Tomcat</span></span><br><span class="line">  Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">  <span class="comment">// 配置Tomcat的基本环镜</span></span><br><span class="line">  File baseDir = </span><br><span class="line"><span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory : <span class="keyword">this</span>.createTempDir(<span class="string">"tomcat"</span>);</span><br><span class="line">  tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">  Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">  tomcat.getService().addConnector(connector);</span><br><span class="line">  <span class="keyword">this</span>.customizeConnector(connector);</span><br><span class="line">  tomcat.setConnector(connector);</span><br><span class="line">  tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">this</span>.configureEngine(tomcat.getEngine());</span><br><span class="line">  Iterator var5 = <span class="keyword">this</span>.additionalTomcatConnectors.iterator();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">      Connector additionalConnector = (Connector)var5.next();</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">  <span class="comment">// 将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们对嵌入式容器的配置修改是怎么生效？</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="attr">ServerProperties</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line">EmbeddedServletContainerCustomizer()</span><br></pre></td></tr></table></figure><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><ul><li>容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化之前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer)bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.getCustomizers().iterator();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值</span></span><br><span class="line">  <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">    EmbeddedServletContainerCustomizer customizer = </span><br><span class="line">      (EmbeddedServletContainerCustomizer)var2.next();</span><br><span class="line"></span><br><span class="line">    customizer.customize(bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 从容器中获取所有这葛类型的组件: EmbeddedServletContainerCustomizer</span></span><br><span class="line">      <span class="comment">// 定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">      <span class="keyword">this</span>.customizers = </span><br><span class="line">        <span class="keyword">new</span> ArrayList(</span><br><span class="line">          <span class="keyword">this</span>.beanFactory.getBeansOfType(</span><br><span class="line">            EmbeddedServletContainerCustomizer<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>, <span class="title">false</span>).<span class="title">values</span>()</span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line"></span><br><span class="line">      Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">      <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServerProperties也是定制器，步骤：<ul><li>SpringBoot根据导入的依赖情况，给容器中添加相应的嵌入式容器工厂，EmbeddedServletContainerFactory[TomcatEmbeddedServletContainerFactory]</li><li>容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；只要是嵌入式的Servlet容器工厂，后置处理器就工作；</li><li>后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</li></ul></li></ul><h2 id="4、嵌入式Servlet容器启动原理"><a href="#4、嵌入式Servlet容器启动原理" class="headerlink" title="4、嵌入式Servlet容器启动原理"></a>4、嵌入式Servlet容器启动原理</h2><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat？</p><p>获取嵌入式的Servlet容器工厂：</p><ul><li>SpringBoot应用启动运行run方法</li><li>refreshContext(context)；SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></li><li>refresh(context)，<strong>刷新刚才创建好的ioc容器；</strong>查看<code>AbstractApplicationContext.class</code>源码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">    <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">      <span class="keyword">this</span>.initApplicationEventMulticaster();</span><br><span class="line">      <span class="keyword">this</span>.onRefresh();</span><br><span class="line">      <span class="keyword">this</span>.registerListeners();</span><br><span class="line">      <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeansException var9) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.warn(</span><br><span class="line">          <span class="string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> </span><br><span class="line">          + var9</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">      <span class="keyword">this</span>.cancelRefresh(var9);</span><br><span class="line">      <span class="keyword">throw</span> var9;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>onRefresh()，web的ioc容器重写了onRefresh方法</p></li><li><p>webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p></li><li>获取嵌入式的Servlet容器工厂：**</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure><p>从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><ul><li><strong>使用容器工厂获取嵌入式的Servlet容器</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.embeddedServletContainer = </span><br><span class="line">  containerFactory.getEmbeddedServletContainer(getSelfInitializer());</span><br></pre></td></tr></table></figure><ul><li>嵌入式的Servlet容器创建对象并启动Servlet容器；</li></ul><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>IOC容器启动创建嵌入式的Servlet容器</strong></p><h2 id="5、使用外置的Servlet容器"><a href="#5、使用外置的Servlet容器" class="headerlink" title="5、使用外置的Servlet容器"></a>5、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>优点：简单、便携；</p><p>缺点：默认不支持JSP、优化定制比较复杂（使用定制器{ServerProperties、自定义EmbeddedServletContainerCustomizer}，自己编写嵌入式Servlet容器的创建工厂{EmbeddedServletContainerFactory}）；</p><p>外置的Servlet容器：外面安装Tomcat—-应用war包的方式打包；</p><h3 id="5-1-创建JSPweb项目教程："><a href="#5-1-创建JSPweb项目教程：" class="headerlink" title="5.1 创建JSPweb项目教程："></a>5.1 创建JSPweb项目教程：</h3><ul><li>使用Spring Initializr新建项目：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jspweb.PNG" alt="jsp web"></p><ul><li>剩下都是Next，得到项目结构：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jsp-project-structure.PNG" alt="Structure"></p><ul><li>生成webapp文件夹（可手动创建，也可用以下方法）：</li></ul><p>点击编译器右上的Project Structure按钮—&gt;Modules—&gt;项目展开—&gt;Web—&gt;Web Resource Directories</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webapp.png" alt="webapp"></p><p>双击Web Resource Directory下的路径，弹出对话框：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webapp-dialog.PNG" alt="webapp dialog"></p><p>点击OK，然后在弹出对话框点Yes即可；</p><ul><li>部署描述图生成XML文件：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/deployment-webxml.png" alt="web.xml"></p><p>将默认的路径<code>...\WEB-INF\web.xml</code>改为<code>...\src\main\webapp\WEB-INF\web.xml</code>，点击OK即可，最后Apply—&gt;OK</p><p>如何启动？</p><ul><li>服务器整合进IDEA</li></ul><p>编译器上方Edit Configurations…</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/tomcat.png" alt="tomcat"></p><p>添加本地Tomcat配置即可：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/mytomcat.PNG" alt="tomcat"></p><p>配置完后添加部署项目：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/deployment-tomcat-project.png" alt="deploy"></p><p>出现对话框，选择第二个暴露的就行</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/select-artifacts-to-deploy.PNG" alt="select artifacts to deploy"></p><p>最后Apply—&gt;OK。运行Tomcat即可</p><h3 id="5-2-步骤"><a href="#5-2-步骤" class="headerlink" title="5.2 步骤"></a>5.2 步骤</h3><ul><li>必须创建一个war项目；（利用IDEA创建好目录结构）</li><li>将嵌入式的Tomcat指定为provided；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传入SpringBoot应用的主程序</span></span><br><span class="line">    <span class="keyword">return</span> application.sources(SpringBootWebJspApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动服务器就可以使用。</li></ul><h3 id="5-3-原理"><a href="#5-3-原理" class="headerlink" title="5.3 原理"></a>5.3 原理</h3><ul><li><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p></li><li><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>{SpringBootServletInitializer}，启动ioc容器；</p></li></ul><p>servlet3.0（规范文档）</p><h3 id="5-4-查看8-2-4-Shared-libraries-runtimes-pluggability条内容："><a href="#5-4-查看8-2-4-Shared-libraries-runtimes-pluggability条内容：" class="headerlink" title="5.4 查看8.2.4 Shared libraries / runtimes pluggability条内容："></a>5.4 查看<code>8.2.4 Shared libraries / runtimes pluggability</code>条内容：</h3><p>规则：</p><ul><li>服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例；</li><li>ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</li><li>还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类</li></ul><h3 id="5-5-流程"><a href="#5-5-流程" class="headerlink" title="5.5 流程"></a>5.5 流程</h3><ul><li><p>启动Tomcat</p></li><li><p>org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p></li><li><p>SpringServletContainerInitializer将<code>@HandlesTypes(WebApplicationInitializer.class)</code>标注的所有这个类型的类都传入到onStartup方法的Set<Class<?>&gt;；为这些WebApplicationInitializer类型的类创建实例；</p></li><li><p>每一个WebApplicationInitializer都调用自己的onStartup；</p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/WebApplicationInitializer.PNG" alt="WebApplicationInitializer"></p><ul><li>相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</li><li>SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringBootServletInitializer.class</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、创建SpringApplicationBuilder</span></span><br><span class="line">  SpringApplicationBuilder builder = <span class="keyword">this</span>.createSpringApplicationBuilder();</span><br><span class="line">  StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">  environment.initPropertySources(servletContext, (ServletConfig)<span class="keyword">null</span>);</span><br><span class="line">  builder.environment(environment);</span><br><span class="line">  builder.main(<span class="keyword">this</span>.getClass());</span><br><span class="line">  ApplicationContext parent = <span class="keyword">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">  <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">    servletContext.setAttribute(</span><br><span class="line">      WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, </span><br><span class="line">      (Object)<span class="keyword">null</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    builder.initializers(</span><br><span class="line">      <span class="keyword">new</span> ApplicationContextInitializer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ParentContextApplicationContextInitializer(parent)</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  builder.initializers(</span><br><span class="line">    <span class="keyword">new</span> ApplicationContextInitializer[]&#123;</span><br><span class="line">      <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext)</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">  builder = <span class="keyword">this</span>.configure(builder);</span><br><span class="line">  <span class="comment">// 使用builder创建一个Spring应用</span></span><br><span class="line">  SpringApplication application = builder.build();</span><br><span class="line">  <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; </span><br><span class="line">AnnotationUtils.findAnnotation(<span class="keyword">this</span>.getClass(), Configuration<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">    application.getSources().add(<span class="keyword">this</span>.getClass());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Assert.state(</span><br><span class="line">    !application.getSources().isEmpty(), </span><br><span class="line">    <span class="string">"No SpringApplication sources have been defined.</span></span><br><span class="line"><span class="string">      Either override the configure method or add an @Configuration annotation"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">    application.getSources().add(ErrorPageFilterConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//启动Spring应用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring的应用就启动并且创建IOC容器</li></ul><p>查看上面run方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">  stopWatch.start();</span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line">  SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">  listeners.starting();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">    ConfigurableEnvironment environment = </span><br><span class="line">      <span class="keyword">this</span>.prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"></span><br><span class="line">    Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line">    context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">    <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">    <span class="keyword">this</span>.prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">    <span class="comment">//刷新IOC容器</span></span><br><span class="line">    <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">    <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">    listeners.finished(context, (Throwable)<span class="keyword">null</span>);</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(</span><br><span class="line">        <span class="keyword">this</span>.getApplicationLog(), </span><br><span class="line">        stopWatch</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleRunFailure(context, listeners, (FailureAnalyzers)analyzers, var9);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动Servlet容器，再启动SpringBoot应用</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、配置嵌入式Servlet容器&quot;&gt;&lt;a href=&quot;#1、配置嵌入式Servlet容器&quot; class=&quot;headerlink&quot; title=&quot;1、配置嵌入式Servlet容器&quot;&gt;&lt;/a&gt;1、配置嵌入式Servlet容器&lt;/h2&gt;&lt;p&gt;SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot错误机制</title>
    <link href="https://mysticalguest.github.io/2020/08/15/Spring/SpringBootError/"/>
    <id>https://mysticalguest.github.io/2020/08/15/Spring/SpringBootError/</id>
    <published>2020-08-15T13:55:49.569Z</published>
    <updated>2020-09-10T09:41:57.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、错误处理机制"><a href="#1、错误处理机制" class="headerlink" title="1、错误处理机制"></a>1、错误处理机制</h2><h3 id="1-1-SpringBoot默认的错误处理机制"><a href="#1-1-SpringBoot默认的错误处理机制" class="headerlink" title="1.1 SpringBoot默认的错误处理机制"></a>1.1 SpringBoot默认的错误处理机制</h3><a id="more"></a><p>默认效果：</p><ul><li>浏览器，返回一个默认的错误页面</li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/error-page.PNG" alt="error page" style="zoom: 80%;"></p><p>浏览器发送请求的请求头：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/chrome-header.png" alt="chrome header" style="zoom: 90%;"></p><ul><li>如果是其他客户端，默认响应一个json数据</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/json-error.PNG" alt="json"></p><p>客户端的请求头：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/postman-header.PNG" alt="postman header"></p><h3 id="1-2-原理："><a href="#1-2-原理：" class="headerlink" title="1.2 原理："></a>1.2 原理：</h3><ul><li><p>可以参照<code>ErrorMvcAutoConfiguration</code>；错误处理的自动配置；查看这个类的源码</p></li><li><p>这个配置类给容器中添加了以下组件：</p><ul><li><code>DefaultErrorAttributes</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 帮我们在页面共享信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">  errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">  addStatus(errorAttributes, requestAttributes);</span><br><span class="line">  addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">  addPath(errorAttributes, requestAttributes);</span><br><span class="line">  <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>BasicErrorController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">      request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">      </span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 产生json数据，其他客户端来到这个方法处理</span></span><br><span class="line">  <span class="meta">@RequestMapping</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">        isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>ErrorPageCustomizer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorProperties</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String path = <span class="string">"/error"</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>DefaultErrorViewResolver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">    Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">  <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">    modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">  String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">  TemplateAvailabilityProvider provider = </span><br><span class="line">    <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line">  <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-步骤"><a href="#1-3-步骤" class="headerlink" title="1.3 步骤"></a>1.3 步骤</h3><p>一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><ul><li>响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">  HttpServletResponse response, </span></span></span><br><span class="line"><span class="function"><span class="params">  HttpStatus status, </span></span></span><br><span class="line"><span class="function"><span class="params">  Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">  <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">    ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、如何定制错误响应："><a href="#2、如何定制错误响应：" class="headerlink" title="2、如何定制错误响应："></a>2、如何定制错误响应：</h2><h3 id="2-1-如何定制错误的页面"><a href="#2-1-如何定制错误的页面" class="headerlink" title="2.1 如何定制错误的页面"></a>2.1 如何定制错误的页面</h3><ul><li>有模板引擎的情况下；</li></ul><p>error/状态码; 将错误页面命名为<code>错误状态码.html</code>放在模板引擎文件夹里面的error文件夹下，发生此状态码的错误就会来到  对应的页面；</p><p>我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>页面能获取的信息；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">timestamp：时间戳</span></span><br><span class="line"><span class="attr">status：状态码</span></span><br><span class="line"><span class="attr">error：错误提示</span></span><br><span class="line"><span class="attr">exception：异常对象</span></span><br><span class="line"><span class="attr">message：异常消息</span></span><br><span class="line"><span class="attr">errors：JSR303数据校验的错误都在这里</span></span><br></pre></td></tr></table></figure><ul><li>没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</li><li>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面</li></ul><h3 id="2-2-如何定制错误的json数据"><a href="#2-2-如何定制错误的json数据" class="headerlink" title="2.2 如何定制错误的json数据"></a>2.2 如何定制错误的json数据</h3><ul><li>自定义异常处理&amp;返回定制json数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只要出现异常，SpringMVC就会调用这个方法，把异常对象传进来</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"user not exist"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上方法没有自适应效果，浏览器和客户端返回都是JSON数据</p><p>我们可以看到源码中，<code>BasicErrorController</code>类是用来处理自适应的</p><ul><li>转发到/error进行自适应响应效果处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * AbstractErrorController.class中</span></span><br><span class="line"><span class="comment">      * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">      .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"user not exist"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    <span class="comment">// 转发到/error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将我们的定制数据携带出去；</p><p>出现错误以后，会来到/error请求，会被<code>BasicErrorController.class</code>处理，响应出去可以获取的数据是由<code>getErrorAttributes</code>得到的（是<code>AbstractErrorController.class</code>（ErrorController）规定的方法）；</p><ul><li>完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</li><li>页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</li><li>自定义：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = </span><br><span class="line">      <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">    map.put(<span class="string">"company"</span>, <span class="string">"MysteryGuest"</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容</p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/myexception.PNG" alt="custom exception"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、错误处理机制&quot;&gt;&lt;a href=&quot;#1、错误处理机制&quot; class=&quot;headerlink&quot; title=&quot;1、错误处理机制&quot;&gt;&lt;/a&gt;1、错误处理机制&lt;/h2&gt;&lt;h3 id=&quot;1-1-SpringBoot默认的错误处理机制&quot;&gt;&lt;a href=&quot;#1-1-SpringBoot默认的错误处理机制&quot; class=&quot;headerlink&quot; title=&quot;1.1 SpringBoot默认的错误处理机制&quot;&gt;&lt;/a&gt;1.1 SpringBoot默认的错误处理机制&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot应用</title>
    <link href="https://mysticalguest.github.io/2020/08/14/Spring/SpringBootCRUD/"/>
    <id>https://mysticalguest.github.io/2020/08/14/Spring/SpringBootCRUD/</id>
    <published>2020-08-14T02:51:27.737Z</published>
    <updated>2020-09-10T09:52:37.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Restful风格简介"><a href="#1、Restful风格简介" class="headerlink" title="1、Restful风格简介"></a>1、Restful风格简介</h2><a id="more"></a><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以<strong>更简洁</strong>，<strong>更有层次</strong>，<strong>更易于实现缓存</strong>等机制。</p><h3 id="1-2-URL定义"><a href="#1-2-URL定义" class="headerlink" title="1.2 URL定义"></a>1.2 URL定义</h3><ul><li><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。 </p><p>分别对应：添加、 删除、修改、查询。 </p></li><li><p>传统方式操作资源</p><ul><li>查询GET：<a href="http://127.0.0.1/query.action?id=1">http://127.0.0.1/query.action?id=1</a></li><li>新增POST：<a href="http://127.0.0.1/save.action">http://127.0.0.1/save.action</a></li><li>更新POST：<a href="http://127.0.0.1/update.action">http://127.0.0.1/update.action</a></li><li>删除GET或POST：<a href="http://127.0.0.1/delete.action?id=1">http://127.0.0.1/delete.action?id=1</a></li></ul></li></ul><blockquote><p>可以通过 GET、 POST、 PUT、 PATCH、 DELETE 等方式对服务端的资源进行操作。其中，GET 用于查询资源，POST 用于创建资源，PUT 用于更新服务端的资源的全部信息，PATCH 用于更新服务端的资源的部分信息，DELETE 用于删除服务端的资源。</p></blockquote><ul><li>使用RESTful操作资源<ul><li>查询用户信息列表GET：<a href="http://127.0.0.1/users">http://127.0.0.1/users</a></li><li>查看某个用户信息GET：<a href="http://127.0.0.1/users/001">http://127.0.0.1/users/001</a></li><li>新建用户信息POST：<a href="http://127.0.0.1/users">http://127.0.0.1/users</a></li><li>更新用户信息（全部字段）PUT：<a href="http://127.0.0.1/users/001">http://127.0.0.1/users/001</a></li><li>更新用户信息（部分字段）PATCH：<a href="http://127.0.0.1/users/001">http://127.0.0.1/users/001</a></li><li>删除用户信息DELETE：<a href="http://127.0.0.1/users/001">http://127.0.0.1/users/001</a></li></ul></li></ul><h3 id="1-3-API设计风格基本规则"><a href="#1-3-API设计风格基本规则" class="headerlink" title="1.3 API设计风格基本规则"></a>1.3 API设计风格基本规则</h3><ul><li>使用名词而不是动词<ul><li>/getAllUsers</li><li>/updateUser</li><li>/deleteUser/001</li></ul></li><li>使用子资源表达关系（如果一个资源与另外一个资源有关系，使用子资源）<ul><li>返回所有用户GET：/getUser/</li><li>返回001用户GET： /getUser/001</li></ul></li></ul><p><strong>总而言之restful是一种旧技术新风格</strong></p><h2 id="2、RestfulCRUD"><a href="#2、RestfulCRUD" class="headerlink" title="2、RestfulCRUD"></a>2、RestfulCRUD</h2><h3 id="2-1-默认访问首页"><a href="#2-1-默认访问首页" class="headerlink" title="2.1 默认访问首页"></a>2.1 默认访问首页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">  <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-国际化"><a href="#2-2-国际化" class="headerlink" title="2.2 国际化"></a>2.2 国际化</h3><ul><li>编写国际化配置文件；</li><li>使用ResourceBundleMessageSource管理国际化资源文件</li><li>在页面使用fmt:message（JSP）取出国际化内容</li></ul><p>Spring Boot都自动配置好了，唯一要做的就是编写国际化配置文件了</p><p><strong>步骤</strong></p><ul><li>编写国际化配置文件，抽取页面需要显示的国际化消息</li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/globalization.PNG" alt="globalization"></p><ul><li>SpringBoot自动配置好了管理国际化资源文件的组件；</li></ul><p>Ctrl+N搜索<code>MessageSourceAutoConfiguration</code>类，查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">  value = &#123;MessageSource<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">  <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(-<span class="number">2147483648</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(&#123;MessageSourceAutoConfiguration.ResourceBundleCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span></span></span><br><span class="line"><span class="class">@<span class="title">ConfigurationProperties</span>(</span></span><br><span class="line"><span class="class">  <span class="title">prefix</span> </span>= <span class="string">"spring.messages"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">private</span> String basename = <span class="string">"messages"</span>; <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">      <span class="comment">// 设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">      messageSource.setBasenames(</span><br><span class="line">        StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">          StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">      messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">    messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>去页面获取国际化的值；</li></ul><p>Thymeleaf官方<a href="https://www.thymeleaf.org/documentation.html">文档</a>查看message</p><p>主配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置国际化资源路径</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/login</span></span><br><span class="line"><span class="comment">#设置国际化编码格式</span></span><br><span class="line"><span class="meta">spring.messages.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><p>HTML文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#&#123;login.rememberme&#125;]]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.signin&#125;"</span>&gt;</span></span><br><span class="line">  Sign in</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">  name = &#123;<span class="string">"locale"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == </span><br><span class="line">    org.springframework.boot.autoconfigure.web.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的就是根据请求头带来的区域信息获取Locale进行国际化</p><ul><li>点击链接切换国际化</li></ul><p>自定义组件<code>MyLocaleResolver</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">    String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">    Locale locale = Locale.getDefault();</span><br><span class="line">    <span class="comment">// 是否携带语言信息</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">      String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">      locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> locale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后个组件添加进容器，在配置文件<code>SpringMVCConfig</code>类文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区域信息解析器组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-登录"><a href="#2-3-登录" class="headerlink" title="2.3 登录"></a>2.3 登录</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><ul><li>禁用模板引擎的缓存</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><ul><li><p>页面修改完成以后ctrl+F9：重新编译；</p></li><li><p>登陆错误消息的显示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-拦截器进行登陆检查"><a href="#2-4-拦截器进行登陆检查" class="headerlink" title="2.4 拦截器进行登陆检查"></a>2.4 拦截器进行登陆检查</h3><p>拦截器组件类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//目标方法执行之前</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object user = httpServletRequest.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">      httpServletRequest.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">      httpServletRequest.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(</span><br><span class="line">        httpServletRequest, </span><br><span class="line">        httpServletResponse</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//已登陆，放行请求</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    Object o, </span></span></span><br><span class="line"><span class="function"><span class="params">    ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">  WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// super.addInterceptors(registry);</span></span><br><span class="line">      <span class="comment">// "/**"表示任意多层路径下的任意请求</span></span><br><span class="line">      <span class="comment">// 静态资源；  *.css , *.js</span></span><br><span class="line">      <span class="comment">// SpringBoot已经做好了静态资源映射</span></span><br><span class="line">      registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">"/index.html"</span>, <span class="string">"/"</span>, <span class="string">"/login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、CRUD-员工列表"><a href="#3、CRUD-员工列表" class="headerlink" title="3、CRUD-员工列表"></a>3、CRUD-员工列表</h2><h3 id="3-1-RestfulCRUD：CRUD满足Rest风格；"><a href="#3-1-RestfulCRUD：CRUD满足Rest风格；" class="headerlink" title="3.1 RestfulCRUD：CRUD满足Rest风格；"></a>3.1 RestfulCRUD：CRUD满足Rest风格；</h3><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><div class="table-container"><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—-GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—-POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—-PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—-DELETE</td></tr></tbody></table></div><h3 id="3-2-thymeleaf公共页面元素抽取"><a href="#3-2-thymeleaf公共页面元素抽取" class="headerlink" title="3.2 thymeleaf公共页面元素抽取"></a>3.2 thymeleaf公共页面元素抽取</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><p>页面示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他页面使用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-引入片段的时候传入参数："><a href="#3-3-引入片段的时候传入参数：" class="headerlink" title="3.3 引入片段的时候传入参数："></a>3.3 引入片段的时候传入参数：</h3><p>父页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='main.html')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sidebar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:href</span>=<span class="string">"@&#123;main.html&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">fill</span>=<span class="string">"none"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke</span>=<span class="string">"currentColor"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">s</span></span></span><br><span class="line"><span class="tag">               <span class="attr">troke-linecap</span>=<span class="string">"round"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">          Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-添加操作"><a href="#3-4-添加操作" class="headerlink" title="3.4 添加操作"></a>3.4 添加操作</h3><p>添加页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;addEmployee&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name@163.com"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 提交的是部门的id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept: $&#123;departments&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"2020/01/01"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—-Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="3-5-修改操作"><a href="#3-5-修改操作" class="headerlink" title="3.5 修改操作"></a>3.5 修改操作</h3><p>修改添加二合一表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要区分员工修改还是添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"$&#123;employee!=null&#125;?@&#123;updateEmployee&#125;:@&#123;addEmployee&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 发送put请求修改原数据 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">    2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">    3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- th:if="$&#123;employee!=null&#125;"修改页面采用put方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee.id&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.lastName&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name@163.com"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.email&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender&#125;==1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender&#125;==0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 提交的是部门的id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;dept.id == employee.department.id&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept: $&#123;departments&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"2020/01/01"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;#dates.format(employee.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;employee!=null&#125;?'修改':'添加'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-删除操作"><a href="#3-6-删除操作" class="headerlink" title="3.6 删除操作"></a>3.6 删除操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-success"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;addEmployeePage&#125;"</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-sm"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp: $&#123;employees&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/employee/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;form th:action="@&#123;/employee/&#125;+$&#123;emp.id&#125;" method="post"&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--   &lt;input type="hidden" name="_method" value="delete"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--   &lt;button type="submit" class="btn btn-sm btn-danger"&gt;删除&lt;/button&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;/form&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- th:attr自定义标签属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/employee/&#125;+$&#123;emp.id&#125;"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span></span><br><span class="line">              删除</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将表单放在里面，每个删除按钮就会有个表单，放在外面简洁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"deleteEmpForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Restful风格简介&quot;&gt;&lt;a href=&quot;#1、Restful风格简介&quot; class=&quot;headerlink&quot; title=&quot;1、Restful风格简介&quot;&gt;&lt;/a&gt;1、Restful风格简介&lt;/h2&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Web开发</title>
    <link href="https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/"/>
    <id>https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/</id>
    <published>2020-08-09T07:17:01.661Z</published>
    <updated>2020-09-10T05:05:37.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、使用Spring-Boot："><a href="#1、使用Spring-Boot：" class="headerlink" title="1、使用Spring Boot："></a>1、使用Spring Boot：</h2><ul><li>创建Spring Boot应用，选中我们需要的模块</li><li>Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</li><li>自己编写业务代码</li></ul><a id="more"></a><p>回顾自动配置原理</p><p>这个场景Spring Boot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？等等</p><ul><li>xxxxAutoConfiguration：帮我们给容器中自动配置组件</li><li>xxxxProperties：配置类来封装配置文件的内容</li></ul><h2 id="2、Spring-Boot对静态资源的映射规则"><a href="#2、Spring-Boot对静态资源的映射规则" class="headerlink" title="2、Spring Boot对静态资源的映射规则"></a>2、Spring Boot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">  prefix = <span class="string">"spring.resources"</span>,</span><br><span class="line">  ignoreUnknownFields = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 可以设置和静态资源有关的参数，比如缓存时间</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-依赖的方式"><a href="#2-1-依赖的方式" class="headerlink" title="2.1 依赖的方式"></a>2.1 依赖的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(</span><br><span class="line">  <span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(</span><br><span class="line">    <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;</span><br><span class="line">  ).setCachePeriod(cachePeriod)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(</span><br><span class="line">  <span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties.getStaticLocations()</span><br><span class="line">  ).setCachePeriod(cachePeriod)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源</p><p>webjars：以jar包的方式引入静态资源</p></li></ul><p>webjars<a href="https://www.webjars.org/">官网</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webjars-jquery.PNG" alt="webjars-jquery"></p><p>访问方式：<a href="http://localhost:8088/webjars/jquery/3.5.1/jquery.js">http://localhost:8088/webjars/jquery/3.5.1/jquery.js</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jquery-webjars --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-“-”访问当前项目的任何资源（静态资源的文件夹）"><a href="#2-2-“-”访问当前项目的任何资源（静态资源的文件夹）" class="headerlink" title="2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）"></a>2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）</h3><p>继续读<code>addResourceHandlers</code>方法，如果处理不了，就去静态<code>staticPathPattern</code>路径去找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER;</span><br><span class="line">  <span class="keyword">this</span>.dispatchTraceRequest = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.dispatchOptionsRequest = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.ignoreDefaultModelOnRedirect = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.logResolvedException = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.mediaTypes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">  <span class="keyword">this</span>.staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">  <span class="keyword">this</span>.async = <span class="keyword">new</span> WebMvcProperties.Async();</span><br><span class="line">  <span class="keyword">this</span>.servlet = <span class="keyword">new</span> WebMvcProperties.Servlet();</span><br><span class="line">  <span class="keyword">this</span>.view = <span class="keyword">new</span> WebMvcProperties.View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>它添加了个位置<code>addResourceLocations</code>，这个里面的<code>resourceProperties</code>有个<code>getStaticLocations()</code>方法，点进去，有个常量<code>RESOURCE_LOCATIONS</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  RESOURCE_LOCATIONS = <span class="keyword">new</span> String[CLASSPATH_RESOURCE_LOCATIONS.length + </span><br><span class="line">    SERVLET_RESOURCE_LOCATIONS.length];</span><br><span class="line">  System.arraycopy(SERVLET_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, <span class="number">0</span>, </span><br><span class="line">    SERVLET_RESOURCE_LOCATIONS.length);</span><br><span class="line">  System.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, </span><br><span class="line">    SERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就找到了以下文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;; <span class="comment">// 当前项目的根路径</span></span><br><span class="line"><span class="comment">// 和</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">  <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">  <span class="string">"classpath:/resources/"</span>, </span><br><span class="line">  <span class="string">"classpath:/static/"</span>, </span><br><span class="line">  <span class="string">"classpath:/public/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>src/mian/java</code>和<code>src/main/resources</code>都是类路径</p><p>如果要访问<code>localhost:8088/*.js</code>资源，没有人为处理，那么会自动去上面这些路径，静态资源文件夹里找这些文件</p></blockquote><p>访问方式：<a href="http://localhost:8088/asserts/img/childhood_dreams.jpg">http://localhost:8088/asserts/img/childhood_dreams.jpg</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/static.PNG" alt="static"></p><h3 id="2-3-欢迎页设置，静态资源文件夹下的所有index-html页面"><a href="#2-3-欢迎页设置，静态资源文件夹下的所有index-html页面" class="headerlink" title="2.3 欢迎页设置，静态资源文件夹下的所有index.html页面"></a>2.3 欢迎页设置，静态资源文件夹下的所有index.html页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping welcomePageHandlerMapping</span><br><span class="line">    (ResourceProperties resourceProperties) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping(</span><br><span class="line">    resourceProperties.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customizeResourceHandlerRegistration</span><span class="params">(ResourceHandlerRegistration registration)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.resourceHandlerRegistrationCustomizer != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer.customize(registration);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring最顶层的组件，保存每个请求谁来处理</p><p>点进<code>getWelcomePage()</code>方法</p><p><code>this.mvcProperties.getStaticPathPattern()</code>还被谁映射，点进去看源码就是<code>/**</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] var1 = <span class="keyword">this</span>.getStaticWelcomePageLocations();</span><br><span class="line">  <span class="keyword">int</span> var2 = var1.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">    String location = var1[var3];</span><br><span class="line">    Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(location);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">        resource.getURL();</span><br><span class="line">        <span class="keyword">return</span> resource;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要遍历，说明欢迎页还挺多的</p><p>点进<code>getStaticWelcomePageLocations()</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] getStaticWelcomePageLocations() &#123;</span><br><span class="line">  String[] result = <span class="keyword">new</span> String[<span class="keyword">this</span>.staticLocations.length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; ++i) &#123;</span><br><span class="line">    String location = <span class="keyword">this</span>.staticLocations[i];</span><br><span class="line">    <span class="keyword">if</span> (!location.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      location = location + <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[i] = location + <span class="string">"index.html"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还是这个<code>staticLocations</code>静态文件夹</p><p>静态文件夹路径都拼接上<code>index.html</code></p></blockquote><p>访问方式：<a href="http://localhost:8088/">http://localhost:8088/</a>    就会找index页面</p><h3 id="2-4-网站图标"><a href="#2-4-网站图标" class="headerlink" title="2.4 网站图标"></a>2.4 网站图标</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置喜欢的图标</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  value = &#123;<span class="string">"spring.mvc.favicon.enabled"</span>&#125;,</span><br><span class="line">  matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">    mapping.setOrder(-<span class="number">2147483647</span>);</span><br><span class="line">    mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, </span><br><span class="line">      <span class="keyword">this</span>.faviconRequestHandler()));</span><br><span class="line">    <span class="keyword">return</span> mapping;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">    requestHandler.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">    <span class="keyword">return</span> requestHandler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有的<code>**/favicon.ico</code>都是在静态文件夹下找</p></blockquote><h3 id="2-5-自定义路径"><a href="#2-5-自定义路径" class="headerlink" title="2.5 自定义路径"></a>2.5 自定义路径</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/hello/,classpath:initializr/</span></span><br></pre></td></tr></table></figure><p>多路径用都好隔开，一旦启用自定义路径，那么默认的静态资源路径就不能使用了</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p align="center">  <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/template-engine.png" alt="template-engine" style="zoom: 80%;"></p><p>Spring Boot推荐的Thymeleaf：语法更简单，功能更强大</p><h3 id="3-1-引入Thymeleaf，引入starter："><a href="#3-1-引入Thymeleaf，引入starter：" class="headerlink" title="3.1 引入Thymeleaf，引入starter："></a>3.1 引入Thymeleaf，引入starter：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看引入的库，发现引入的2.1.6版本的，太低了</p><p>Thymeleaf的<a href="https://github.com/thymeleaf/thymeleaf/releases">版本发布</a></p><p>Spring官网<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/howto-spring-mvc.html#howto-use-thymeleaf-3">Thymeleaf 3的使用</a></p><p>切换版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf主程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf布局支持程序 Thymeleaf3要求layout2以上版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf2和layout1适配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties里面的会属性覆盖Spring Boot默认的版本号</p><p>thymeleaf-layout-dialect的<a href="https://github.com/ultraq/thymeleaf-layout-dialect/releases">版本发布</a></p><h3 id="3-2-Thymeleaf使用及语法"><a href="#3-2-Thymeleaf使用及语法" class="headerlink" title="3.2 Thymeleaf使用及语法"></a>3.2 Thymeleaf使用及语法</h3><p>还是在<code>spring-boot-autoconfigure</code>自动配置包里：添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(</span><br><span class="line">  name = &#123;<span class="string">"org.thymeleaf.templatemode.TemplateMode"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thymeleaf3Configuration</span> </span>&#123;</span><br><span class="line">  Thymeleaf3Configuration() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">  <span class="title">static</span> <span class="title">class</span> <span class="title">Thymeleaf3ViewResolverConfiguration</span> <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class">      <span class="title">AbstractThymeleafViewResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thymeleaf3ViewResolverConfiguration(ThymeleafProperties properties, </span><br><span class="line">        SpringTemplateEngine templateEngine) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">super</span>(properties, templateEngine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureTemplateEngine</span><span class="params">(ThymeleafViewResolver resolver, </span></span></span><br><span class="line"><span class="function"><span class="params">        SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Method setTemplateEngine;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        setTemplateEngine = ReflectionUtils.findMethod(</span><br><span class="line">          resolver.getClass(), </span><br><span class="line">          <span class="string">"setTemplateEngine"</span>, </span><br><span class="line">          <span class="keyword">new</span> Class[]&#123;Class.forName(</span><br><span class="line">            <span class="string">"org.thymeleaf.ITemplateEngine"</span>, </span><br><span class="line">            <span class="keyword">true</span>, </span><br><span class="line">            resolver.getClass().getClassLoader()</span><br><span class="line">          )&#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var5);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ReflectionUtils.invokeMethod(setTemplateEngine, resolver, <span class="keyword">new</span> Object[]&#123;templateEngine&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">    name = &#123;<span class="string">"defaultTemplateResolver"</span>&#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTemplateResolverConfiguration</span> <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class">      <span class="title">AbstractTemplateResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DefaultTemplateResolverConfiguration(ThymeleafProperties properties, </span><br><span class="line">        ApplicationContext applicationContext) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">super</span>(properties, applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringResourceTemplateResolver <span class="title">defaultTemplateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      SpringResourceTemplateResolver resolver = <span class="keyword">super</span>.defaultTemplateResolver();</span><br><span class="line">      Method setCheckExistence = ReflectionUtils.findMethod(</span><br><span class="line">        resolver.getClass(), </span><br><span class="line">        <span class="string">"setCheckExistence"</span>, </span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;Boolean.TYPE&#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      ReflectionUtils.invokeMethod(</span><br><span class="line">        setCheckExistence, </span><br><span class="line">        resolver, </span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>.getProperties().isCheckTemplate()&#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们引入的是3+版本，所以只有3+版本生效；</p><p>配置了哪些属性？在文件<code>ThymeleafProperties</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">  prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">  <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">  <span class="keyword">private</span> String mode = <span class="string">"HTML5"</span>;</span><br><span class="line">  <span class="keyword">private</span> Charset encoding;</span><br><span class="line">  <span class="keyword">private</span> MimeType contentType;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> cache;</span><br><span class="line">  <span class="keyword">private</span> Integer templateResolverOrder;</span><br><span class="line">  <span class="keyword">private</span> String[] viewNames;</span><br><span class="line">  <span class="keyword">private</span> String[] excludedViewNames;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在<code>classpath:/templates/</code>，Thymeleaf就能自动渲染</p><p>Thymeleaf语法还是参照<a href="https://www.thymeleaf.org/">官方网</a>的<a href="https://www.thymeleaf.org/documentation.html">官方文档</a></p><h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><ul><li>导入Thymeleaf的名称空间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用Thymeleaf语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;text&#125;"</span>&gt;</span>这里是div信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-语法规则"><a href="#3-4-语法规则" class="headerlink" title="3.4 语法规则"></a>3.4 语法规则</h3><p><code>th:text</code>：改变当前元素里面的文本内容；</p><p><strong>th</strong>：任意html属性；替换原生属性的值，例：th:class覆盖class</p><div class="table-container"><table><thead><tr><th style="text-align:center">Feature</th><th style="text-align:center">Detail</th><th style="text-align:center">Attribute</th></tr></thead><tbody><tr><td style="text-align:center">Fragment inclusion</td><td style="text-align:center">片段包含：jsp:include</td><td style="text-align:center">th:insert<br/>th:replace</td></tr><tr><td style="text-align:center">Fragment iteration</td><td style="text-align:center">遍历：c:forEach</td><td style="text-align:center">th:each</td></tr><tr><td style="text-align:center">Conditional evaluation</td><td style="text-align:center">条件判断：c:if</td><td style="text-align:center">th:if<br/>th:unless<br/>th:switch<br/>th:case</td></tr><tr><td style="text-align:center">Local variable definition</td><td style="text-align:center">声明变量：c:set</td><td style="text-align:center">th:object<br/>th:with</td></tr><tr><td style="text-align:center">General attribute modification</td><td style="text-align:center">任意属性修改支持prepend, append</td><td style="text-align:center">th:attr<br/>th:attrprepend<br/>th:attrappend</td></tr><tr><td style="text-align:center">Specific attribute modification</td><td style="text-align:center">修改制定属性默认值</td><td style="text-align:center">th:value<br/>th:href<br/>th:src<br/>…</td></tr><tr><td style="text-align:center">Text (tag body modification)</td><td style="text-align:center">修改标签体内容</td><td style="text-align:center">th:text(转义特殊字符)<br/>th:utext(不转义特殊字符)</td></tr><tr><td style="text-align:center">Fragment specification</td><td style="text-align:center">声明片段</td><td style="text-align:center">th:fragment</td></tr><tr><td style="text-align:center">Fragment removal</td><td style="text-align:center"></td><td style="text-align:center">th:remove</td></tr></tbody></table></div><h3 id="3-5-表达式"><a href="#3-5-表达式" class="headerlink" title="3.5 表达式"></a>3.5 表达式</h3><ul><li><p>Simple expressions: (表达式语法)</p><ul><li>Variable Expressions: ${…}: 获取变量值; OGNL;</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">1)</span> <span class="string">获取对象的属性、调用方法</span></span><br><span class="line"> <span class="meta">2)</span> <span class="string">使用内置的基本对象</span></span><br><span class="line"><span class="comment">   #ctx : the context object.</span></span><br><span class="line"><span class="comment">   #vars: the context variables.</span></span><br><span class="line"><span class="comment">   #locale : the context locale.</span></span><br><span class="line"><span class="comment">   #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">   #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">   #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">   #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line"> </span><br><span class="line">   <span class="meta">$&#123;session.foo&#125;</span> <span class="string">// Retrieves the session atttribute 'foo'</span></span><br><span class="line"><span class="comment">   # 附录都有演示</span></span><br><span class="line"> <span class="meta">3)</span> <span class="string">内置的一些工具对象</span></span><br><span class="line"><span class="comment">   #execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">   #messages : methods for obtaining externalized messages inside variables expressions, </span></span><br><span class="line"><span class="comment"># in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">   #uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">   #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">   #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">   #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">   #numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">   #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">   #objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">   #bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">   #arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">   #lists : methods for lists.</span></span><br><span class="line"><span class="comment">   #sets : methods for sets.</span></span><br><span class="line"><span class="comment">   #maps : methods for maps.</span></span><br><span class="line"><span class="comment">   #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">   #ids : methods for dealing with id attributes that might be repeated </span></span><br><span class="line"><span class="comment"># (for example, as a result of an iteration).</span></span><br></pre></td></tr></table></figure><ul><li>Selection Variable Expressions: *{…}: 选择表达式, 和${}在功能上是一样的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">补充: 配合th:object="$&#123;session.user&#125;"进行使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Message Expressions: #{…}: 获取国际化内容</li><li>Link URL Expressions: @{…}: 定义URL</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#123;/order/process(execId=$&#123;execId&#125;,execType='FAST')&#125;</span><br></pre></td></tr></table></figure><ul><li>Fragment Expressions: ~{…}: 片段引用表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 插入片段文档</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Literals(字面量)</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,…</span></span><br><span class="line"><span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line"><span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line"><span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br></pre></td></tr></table></figure><ul><li>Text operations:(文本操作)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line"><span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br></pre></td></tr></table></figure><ul><li>Arithmetic operations:(数学运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line"><span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br></pre></td></tr></table></figure><ul><li>Boolean operations:(布尔运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br></pre></td></tr></table></figure><ul><li>Comparisons and equality:(比较运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line"><span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br></pre></td></tr></table></figure><ul><li>Conditional operators:(条件运算, 也支持3元运算符)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line"><span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line"><span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br></pre></td></tr></table></figure><ul><li>Special tokens:(特殊符号)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p>可以参阅官方文档<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-developing-web-applications.html">Developing web applications</a></p><h3 id="4-1-Spring-Boot为Spring-MVC提供了自动配置，可与大多数应用程序完美配合。"><a href="#4-1-Spring-Boot为Spring-MVC提供了自动配置，可与大多数应用程序完美配合。" class="headerlink" title="4.1 Spring Boot为Spring MVC提供了自动配置，可与大多数应用程序完美配合。"></a>4.1 Spring Boot为Spring MVC提供了自动配置，可与大多数应用程序完美配合。</h3><p>自动配置会在Spring的默认设置之上添加以下功能：</p><ul><li><p>包含<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver Bean</code>。</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（就是View对象），视图对象决定如何渲染（转发？重定向？等））</li><li><code>ContentNegotiatingViewResolver</code>：组合所有的视图解析器的</li><li><p>如何定制：我们可以自己给容器中添加一个视图解析器，自动将其组合进来</p></li><li><p>Ctrl+N输入<code>DispatchServlet.class</code>在它的<code>doDispatch</code>方法前面设置断点，Debug运行，浏览器访问页面，查看控制台。看DispatchServlet里用到的视图解析器是什么？得到如图：</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/viewResolver.png" alt="viewResolver"></p></li><li><p>支持提供静态资源，包括对WebJars的支持（请参见下文）。</p></li><li><p>自动注册<code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> bean。</p><ul><li><code>Converter</code>：转换器，类型转换使用。例如前端文本转后台Integer</li><li><code>Formatter</code>：格式化器，2020.08.13===Date</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件中配置日期格式化的规则</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">  name = &#123;<span class="string">"date-format"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat()); <span class="comment">// 日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自己添加的格式化器，我们只需要放在容器中即可</li></ul></li><li><p>支持<code>HttpMessageConverters</code>（请参见下文）。</p><ul><li>HttpMessageConverter：SpringMVC中用来转换HTTP请求和响应的；例：User对象以JSON形式写出</li><li><code>HttpMessageConverters</code>是从容器中确定的，获取所有的HttpMessageConverter</li><li>自己给容器中添加HttpMessageConverter，只需将自己的组件注册在容器中（@Bean, @Component）</li></ul></li><li><p>自动注册<code>MessageCodesResolver</code>（请参见下文）。</p><ul><li>定义错误代码生成规则（例：JSR303校验时）</li></ul></li><li><p>静态<code>index.html</code>支持。</p></li><li><p>自定义<code>Favicon</code>支持（请参阅下文）。</p></li><li><p>自动使用<code>ConfigurableWebBindingInitializer</code> bean（请参见下文）。</p><ul><li>我们可以配置一个<code>ConfigurableWebBindingInitializer</code>来替换默认的；（添加到容器中）</li><li>初始化<code>WebDataBinder</code>（web数据绑定器）；</li><li>web数据绑定器的功能：请求数据=====绑定到JavaBean中</li></ul></li></ul><p><code>org.springframework.boot.autoconfigure.web</code>：web的所有自动配置场景。</p><p>如果您想保留Spring Boot MVC功能，而只想添加其他MVC配置（拦截器，格式化程序，视图控制器等），则可以添加自己的类型为<code>WebMvcConfigurerAdapter</code>的<code>@Configuration</code>类，但无需<code>@EnableWebMvc</code>。如果希望提供<code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>或<code>ExceptionHandlerExceptionResolver</code>的自定义实例，则可以声明一个提供此类组件的<code>WebMvcRegistrationsAdapter</code>实例。</p><p>如果要完全控制Spring MVC，则可以添加用<code>@EnableWebMvc</code>注释的自己的<code>@Configuration</code>。</p><h3 id="4-2-扩展SpringMVC"><a href="#4-2-扩展SpringMVC" class="headerlink" title="4.2 扩展SpringMVC"></a>4.2 扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要实现以上Spring配置文件的内容，编写一个配置类（@Configuration），是<code>WebMvcConfigurerAdapter</code>类型；不能标注<code>@EnableWebMvc</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">    <span class="comment">//浏览器发送 /addViewController 请求来到 thymeleaf</span></span><br><span class="line">    registry.addViewController(<span class="string">"/addViewController"</span>).setViewName(<span class="string">"thymeleaf"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><p>原理：</p><ul><li>WebMvcAutoConfiguration是SpringMVC的自动配置类</li><li>在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进其父类<code>DelegatingWebMvcConfiguration</code>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DelegatingWebMvcConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//自动装配, 从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">  <span class="meta">@Autowired</span>(</span><br><span class="line">    required = <span class="keyword">false</span></span><br><span class="line">  )</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        <span class="comment">// 一个参考实现; 将所有的WebMvcConfigurer相关配置都来一起调用;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebMvcConfigurerComposite</code>类中的一个实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">  Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">    WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">    delegate.addViewControllers(registry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>容器中所有的WebMvcConfigurer都会一起起作用（包括我们自己写的）；</li><li>我们的配置类也会被调用；<ul><li>效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</li></ul></li></ul><h3 id="4-3-全面接管SpringMVC"><a href="#4-3-全面接管SpringMVC" class="headerlink" title="4.3 全面接管SpringMVC"></a>4.3 全面接管SpringMVC</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了（静态资源也不能访问了）</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><p>原理：为什么@EnableWebMvc自动配置就失效了？</p><ul><li>@EnableWebMvc的核心</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看<code>DelegatingWebMvcConfiguration</code>类的源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在找到<code>WebMvcAutoConfiguration</code>类，查看签名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurerAdapter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, </span></span><br><span class="line"><span class="class">  <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ConditionalOnMissingBean()</code>：容器中没有这个组件的时候，这个自动配置类才生效</p><ul><li>@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</li><li>导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能。</li></ul><h2 id="5、如何修改Spring-Boot的默认配置"><a href="#5、如何修改Spring-Boot的默认配置" class="headerlink" title="5、如何修改Spring Boot的默认配置"></a>5、如何修改Spring Boot的默认配置</h2><p>模式：</p><ul><li>Spring Boot在自动配置很多组件时，先看容器中有没有用户自己配置的（@Bean, @Component）,如果有就用用户配置的，如果没有才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</li><li>在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li><li>在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、使用Spring-Boot：&quot;&gt;&lt;a href=&quot;#1、使用Spring-Boot：&quot; class=&quot;headerlink&quot; title=&quot;1、使用Spring Boot：&quot;&gt;&lt;/a&gt;1、使用Spring Boot：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建Spring Boot应用，选中我们需要的模块&lt;/li&gt;
&lt;li&gt;Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来&lt;/li&gt;
&lt;li&gt;自己编写业务代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与日志</title>
    <link href="https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/"/>
    <id>https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/</id>
    <published>2020-08-08T14:52:19.278Z</published>
    <updated>2020-09-14T01:40:35.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>故事：有一个开发人员，开发一个大型系统；</p><a id="more"></a><blockquote><p>遇到重要数据，喜欢<code>System.out.println(&quot;&quot;)</code>，将关键数据打印在控制台</p><p>去掉？写在一个文件？方便？</p><p>框架来记录系统的一些运行时信息，日志框架：first.jar</p><p>高大上的几个功能？异步模式？自动规定？等等？：second.jar</p><p>将以前的框架卸下来？换上新的框架，更新修改之前相关API：third.jar</p><p>JDBC—-数据库驱动：</p><ul><li>写了一个统一的接口层：暂时叫做日志门面（日志的一个抽象层）：fourth.jar</li><li>给项目中导入具体的日志实现就行了，我们之前的日志框架都是实现的抽象层</li></ul></blockquote><h2 id="2、市面上的日志框架"><a href="#2、市面上的日志框架" class="headerlink" title="2、市面上的日志框架"></a>2、市面上的日志框架</h2><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…</p><h3 id="2-1-下表行间无任何对应关系"><a href="#2-1-下表行间无任何对应关系" class="headerlink" title="2.1 下表行间无任何对应关系"></a>2.1 下表行间无任何对应关系</h3><div class="table-container"><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL( Jakarta Commons Logging)</td><td>Log4j</td></tr><tr><td>SLF4j( Simple Logging Facade for Java)</td><td>JUL( java. util.logging)</td></tr><tr><td>jboss-logging</td><td>Log4j2</td></tr><tr><td></td><td>Logback</td></tr></tbody></table></div><p>左边选一个门面（抽象层）、右边选一个实现</p><p>选哪个呢？排除法</p><h3 id="2-2-日志门面：slf4j"><a href="#2-2-日志门面：slf4j" class="headerlink" title="2.2 日志门面：slf4j"></a>2.2 日志门面：slf4j</h3><p>Jboss-logging：普通程序员用不了</p><p>JCL：最后一次更新是在2014年，廉颇老矣，尚能饭否？</p><p>剩下slf4j理所应当</p><h3 id="2-3-日志实现：logback"><a href="#2-3-日志实现：logback" class="headerlink" title="2.3 日志实现：logback"></a>2.3 日志实现：logback</h3><p>log4j、logback和slf4j都是一个人写的，适配性好，log4j不错但有性能问题，但升级消耗太大，就重写了logback</p><p>所有log4j没有logback先进，JUL是Java自带的，怕日志市场被占，比较简略</p><p>log4j2是借log4j之名，由Apache公司重新做的框架，设计地非常好，由于太好还没适配</p><h3 id="2-4-Spring-Boot怎么做的呢？"><a href="#2-4-Spring-Boot怎么做的呢？" class="headerlink" title="2.4 Spring Boot怎么做的呢？"></a>2.4 Spring Boot怎么做的呢？</h3><p>Spring框架默认是用JCL日志框架</p><p>Spring Boot选用slf4j和logback</p><h2 id="3、slf4j的使用"><a href="#3、slf4j的使用" class="headerlink" title="3、slf4j的使用"></a>3、slf4j的使用</h2><p>如何在系统中使用slf4j？<a href="http://www.slf4j.org/">官方文档</a></p><ul><li><p>以后开发的时候，日志记录方法得调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法</p></li><li><p>参见用户手册<a href="http://www.slf4j.org/manual.html">SLF4J user manual</a>给系统中导入slf4j的jar和logback的实现jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然默认用的是logback的实现，如果想要其他实现也可以，毕竟slf4j是抽象层，实现用什么都行</p></blockquote><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/SLF4J-user-manual.png" alt="Spring Boot"></p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><ul><li><p>如果系统中只导入了slf4j，我们要进行日志记录，就会返回空值，因为没有任何实现</p></li><li><p>正确用法：我的应用程序面向slf4j编程，调用它的方法进行日志记录，在程序中也导入日志实现，虽然调用slf4j接口，但logback会实现，记录到文件或控制台</p></li><li><p>如果slf4j要绑定log4j，log4j出现比较早，没想到要适配slf4j，所以两者绑定要有一个适配层（slf4j实现的），适配层相当于上面实现了slf4j的具体方法，而在方法里面要进行真正日志记录的时候，又调了log4j的API，要用log4j还要导入适配层即可<br>JUL同理</p></li><li><p>slf4j也有简单日志实现也能用，或者slf4j没有什么操作的实现包，也是输出空值</p></li><li><p>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p></li><li>slf4j只提供抽象层，用哪个实现就写那个的配置文件</li></ul><h2 id="4、遗留问题"><a href="#4、遗留问题" class="headerlink" title="4、遗留问题"></a>4、遗留问题</h2><p>开发某个系统时：使用{slf4j+logback}，依赖Spring框架（commons-logging），依赖Hibernate框架（Jboss-logging），依赖MyBatis框架等等可能一大堆</p><p>出现什么问题，系统中日志杂交？</p><p>现在就要做同一日志记录，即使是别的框架和我一起使用slf4j进行输出？</p><p>进入<a href="http://www.slf4j.org/">slf4j官方文档</a>的<a href="http://www.slf4j.org/legacy.html">legacy APIs</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/legacy.png" alt="Spring Boot"></p><p>统一slf4j，使用其他包替换原有日志框架，替换的意思就是，例如要把原框架里面对Commons-logging的依赖排除掉</p><p>但如果我现在用的Spring框架缺少Commons-logging就运行不起来了，Spring底层记录日志就需要Commons-logging，那怎么办呢？就用jcl-over-slf4j.jar替换这个包，Spring要用的类这个替换包例还是有的，就不会报错了</p><p>但新的包实现怎么办呢？新的包调入slf4j，而slf4j又调到真正的实现中，其他框架不同日志框架同理替换</p><p>其他组合方式也是如此</p><p>如何让系统中所有的日志都统一到slf4j：</p><ul><li>将系统中其他日志框架先排除去</li><li>用中间包来替换原有的日志框架</li><li>我们导入slf4j其他的实现</li></ul><h2 id="5、Spring-Boot日志关系"><a href="#5、Spring-Boot日志关系" class="headerlink" title="5、Spring Boot日志关系"></a>5、Spring Boot日志关系</h2><p>每个启动器（场景）都要依赖的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot使用它来做日志功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖图示：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/slf4j-uml.png" alt="Spring Boot"></p><p>总结：</p><ul><li><p>Spring Boot底层也是使用slf4j+logback的方式进行日志记录</p></li><li><p>Spring Boot也是把其他的日志都替换成了slf4j</p></li><li><p>中间替换包，以<code>jcl-over-slf4j.jar</code>为例：</p><p>在项目的依赖包中找到其对应jar包：（中间转换包）</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jcl-over-slf4j.PNG" alt="Spring Boot"></p></li><li><p>从图中看出，虽然包名用的Apache的，但实现却是使用的<code>SLF4JLogFactory()</code>的日志工厂</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = </span><br><span class="line">    <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉！</p><p>Spring框架用的是commons-logging：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，我们唯一需要做的是，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉。</p><h2 id="6、日志使用"><a href="#6、日志使用" class="headerlink" title="6、日志使用"></a>6、日志使用</h2><h3 id="6-1-默认配置"><a href="#6-1-默认配置" class="headerlink" title="6.1 默认配置"></a>6.1 默认配置</h3><p>当我们初始化项目运行后，自己没有配置日志，但控制台是由输出信息的</p><p>Spring Boot默认帮我们配置好了日志，直接使用就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoggerFactory是记录器工厂，记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 日志的级别</span></span><br><span class="line"><span class="comment">    * 由低到高：trace&lt;debug&lt;info&lt;waring&lt;error</span></span><br><span class="line"><span class="comment">    * 可以调整输出的日志级别</span></span><br><span class="line"><span class="comment">    * 只打印高级别即以后（更高级别）的信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  logger.trace(<span class="string">"这是跟踪轨迹日志...trace..."</span>);</span><br><span class="line">  logger.debug(<span class="string">"这是调试日志...debug"</span>);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spring Boot默认使用的是info级别的，输出info级别即以后的内容</span></span><br><span class="line"><span class="comment">    * 没有指定级别的就用Spring Boot默认规定的级别（root级别）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  logger.info(<span class="string">"这是信息日志...info..."</span>);</span><br><span class="line">  logger.warn(<span class="string">"这是警告信息...warning..."</span>);</span><br><span class="line">  logger.error(<span class="string">"这是错误信息日志，异常捕获...error..."</span>);</span><br><span class="line">  <span class="comment">// 也可以通过配置文件修改级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志的输出格式</p><ul><li>%d：表示时间</li><li>%thread：表示线程名</li><li>%-5level：级别从左显示5个字符宽度</li><li>%logger{50}：表示logger名字最长50个字符，否则按照句点分割</li><li>%msg：日志消息</li><li>%n：换行</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># trace及以后的级别生效</span></span><br><span class="line"><span class="meta">logging.level.com.initializr</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成springboot日志文件</span></span><br><span class="line"><span class="comment"># 可以用决定路径</span></span><br><span class="line"><span class="comment"># 如果不指定路径，就在当前项目下生成</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用logging.path可以不使用logging.file，使用spring.log默认文件</span></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建文件夹，并生成日志文件</span></span><br><span class="line"><span class="comment">#logging.path=/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; === [%thread] === %-5level %logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure><h3 id="6-2-自定义日志、指定配置"><a href="#6-2-自定义日志、指定配置" class="headerlink" title="6.2 自定义日志、指定配置"></a>6.2 自定义日志、指定配置</h3><p>可从<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-logging.html">官方文档-日志</a>参见第26.5条Custom log configuration</p><p>给类路径下放上每个日志框架自己的配置文件即可，Spring Boot就不使用默认配置了</p><div class="table-container"><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table></div><p><code>logback.xml</code>：直接就被日志框架识别了</p><p><code>logback-spring.xml</code>：日志框架就不直接加载日志的配置项，由Spring Boot解析日志配置，可以使用Spring Boot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev, staging"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以指定某段配置只在某个环境下生效</p><p>否则就会报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Logback configuration error detected: </span><br><span class="line">ERROR <span class="keyword">in</span> ch.qos.logback.core.joran.spi.Interpreter@<span class="number">23</span>:<span class="number">39</span> - </span><br><span class="line">no applicable action <span class="keyword">for</span> [<span class="type">springProfile</span>]...</span><br></pre></td></tr></table></figure><p>使用<code>logback-spring.xml</code>配置文件时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制台打印 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、切换日志框架"><a href="#7、切换日志框架" class="headerlink" title="7、切换日志框架"></a>7、切换日志框架</h2><h3 id="7-1-现在我们想用log4j实现"><a href="#7-1-现在我们想用log4j实现" class="headerlink" title="7.1 现在我们想用log4j实现"></a>7.1 现在我们想用log4j实现</h3><p>根据之前的原理，就要除去有关log4j的转换包，用原始包；还要导出logback的jar包</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-logback.png" alt="Spring Boot"></p><p>IDEA-&gt;在<code>pom.xml</code>文件中鼠标右键-&gt;Diagrams-&gt;Show Dependencies-&gt;选择要除去的jar包-&gt;鼠标右键-&gt;Exclude</p><p>其他的JCL和JCL有的框架还要用，所有转换包要留着</p><p>但log4j-over-slf4j.jar要去掉，这是个替换包，里面的log4j都用处slf4j了，但现在我们要用log4j了，而不是替换，所以也将其排除</p><p>最终：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/excluded.PNG" alt="Spring Boot"></p><p>面向slf4j编程，用log4j实现</p><p>导入一个适配层的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看其源码，自动导入了log4j的框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以按照slf4j的日志适配图，进行相关的切换</p><p>得到最终的pom.xml文件配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-切换至log4j2"><a href="#7-2-切换至log4j2" class="headerlink" title="7.2 切换至log4j2"></a>7.2 切换至log4j2</h3><p>参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">官方文档</a>表13.3. Spring Boot technical starters</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-starter-logging.png" alt="Spring Boot"></p><p>按照之前的操作将<code>spring-boot-start-logging.jar</code>除去</p><p>在pom.xml文件中导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、日志框架&quot;&gt;&lt;a href=&quot;#1、日志框架&quot; class=&quot;headerlink&quot; title=&quot;1、日志框架&quot;&gt;&lt;/a&gt;1、日志框架&lt;/h2&gt;&lt;p&gt;故事：有一个开发人员，开发一个大型系统；&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot配置</title>
    <link href="https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/"/>
    <id>https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/</id>
    <published>2020-08-07T11:29:02.683Z</published>
    <updated>2020-09-10T10:02:05.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><a id="more"></a><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><p>Spring Boot使用一个全局配置文件，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改Spring Boot自动配置的默认值（Spring Boot在底层都给我们自动配置好）</p><p>YAML(YAML Ain’t a Markup Language)</p><ul><li>YAML 不是一种标记语言的递归缩写</li><li>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</li></ul><p>标记语言</p><ul><li>以前的配置文件，大多都使用XML文件</li><li>YAML以数据为中心，比JSON，XML等更适合做配置文件</li></ul><p>例子</p><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p><code>key:(空格)value</code>表示一对键值对</p><p>以<strong>空格</strong>的缩进来控制层级关系，只要是做对齐的一列数据，都是统一层级的</p><p>属性和值也是大小写敏感</p><h3 id="2-2-值的写法"><a href="#2-2-值的写法" class="headerlink" title="2.2 值的写法"></a>2.2 值的写法</h3><h4 id="字面量：普通值（数字，字符串，布尔）"><a href="#字面量：普通值（数字，字符串，布尔）" class="headerlink" title="字面量：普通值（数字，字符串，布尔）"></a>字面量：普通值（数字，字符串，布尔）</h4><p><code>key: value</code>字面直接来写</p><p>字符串默认不用加上单引号或双引号</p><ul><li><p>双引号：不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思</p><p>name: “Hello \n World”，输出：Hello 换行 World</p></li><li><p>单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>name: ‘Hello \n World’，输出：Hello \n World</p></li></ul><h4 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h4><p><code>key: value</code>在下一行来写对象的属性和值的关系，注意缩进</p><p>对象还是<code>key: value</code>的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">(name:</span> <span class="string">Tom,age</span> <span class="number">20</span><span class="string">)</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h4><p>用<code>- value</code>表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,</span> <span class="string">dog,</span> <span class="string">pig]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置文件值注入"><a href="#2-3-配置文件值注入" class="headerlink" title="2.3 配置文件值注入"></a>2.3 配置文件值注入</h3><p>配置文件<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">MysteryGuest</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1999</span><span class="string">/01/09</span></span><br><span class="line">  <span class="attr">map:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">China</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hubei</span></span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">niuniu</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><code>@ConfigurationProperties</code>的方式</li></ul><p><code>javaBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个数组中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>: 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person": 配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后就有自动提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>@Value</code>的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 另一种方式，Spring的底层注解</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 类似以前</span></span><br><span class="line"><span class="comment">    * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">    *     &lt;property name="name" value="MysteryGuest"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    * &lt;bean&gt;标签相当于<span class="doctag">@Compoent</span></span></span><br><span class="line"><span class="comment">    * &lt;property&gt;标签中的value相当于<span class="doctag">@Value</span></span></span><br><span class="line"><span class="comment">    * value的参数可以是字面量、$&#123;key&#125;从环境变量或配置文件获取值、#&#123;SpEL&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Value获取值和-ConfigurationProperties获取值比较"><a href="#2-4-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2.4 @Value获取值和@ConfigurationProperties获取值比较"></a>2.4 @Value获取值和@ConfigurationProperties获取值比较</h3><div class="table-container"><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个一个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL（例：#{}）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装（例：Map）</td><td>支持</td><td>不支持</td></tr></tbody></table></div><p>属性名匹配规则（Relaxed binding，松散绑定）</p><ul><li><p>person.firstName：使用标准方式</p></li><li><p>person.first-name：大写用-</p></li><li><p>person.first_name：大写用_</p></li><li><p>PERSON_FIRST_NAEM：</p><p>推荐系统属性使用这种写法</p></li></ul><p>配置文件（yml和properties）都能获取值</p><p>如果说我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用<code>@value</code></p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用<code>@ConfigurationProperties</code></p><h3 id="2-5-配置文件注入值校验"><a href="#2-5-配置文件注入值校验" class="headerlink" title="2.5 配置文件注入值校验"></a>2.5 配置文件注入值校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// JSR303数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Email</span> <span class="comment">// @value不支持</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、-PropertySource和-ImportResource"><a href="#3、-PropertySource和-ImportResource" class="headerlink" title="3、@PropertySource和@ImportResource"></a>3、@PropertySource和@ImportResource</h2><p><code>@PropertySource</code>用来加载指定的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>@ImportResource</code>导入Spring的配置文件，让配置文件里面的内容生效</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别</p><p>想让Spring的配置文件生效，加载进来，<code>@ImportResource</code>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-1-Spring-Boot推荐给容器中添加组件的方式"><a href="#3-1-Spring-Boot推荐给容器中添加组件的方式" class="headerlink" title="3.1 Spring Boot推荐给容器中添加组件的方式"></a>3.1 Spring Boot推荐给容器中添加组件的方式</h3><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.initializr.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Bean既可以标记在类上，也可以作为元注解</p><p><strong>推荐使用全注解的方式</strong></p><ul><li>配置类———-Spring配置文件</li><li>使用@Bean给容器中添加组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>指明当前类是一个配置类，就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以前在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">// 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"配置类给容器中添加组件了..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="4-1-随机数"><a href="#4-1-随机数" class="headerlink" title="4.1 随机数"></a>4.1 随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.uuid&#125;  $&#123;random.<span class="keyword">int</span>&#125;  $&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;  $&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"><a href="#4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值" class="headerlink" title="4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"></a>4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.name=MysticalGuest$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.birth=<span class="number">1999</span>/<span class="number">01</span>/<span class="number">09</span></span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=v2</span><br><span class="line">person.list=[a, b, c]</span><br><span class="line">person.pet.name=$&#123;person.hello:hello&#125;$&#123;person.name&#125;<span class="string">'s dog</span></span><br><span class="line"><span class="string"># 如果文件中没有定义person.hello，那么取后面的hello值</span></span><br><span class="line"><span class="string">person.pet.age=6</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><h3 id="5-1-多Profile文件"><a href="#5-1-多Profile文件" class="headerlink" title="5.1 多Profile文件"></a>5.1 多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p><p>默认使用application.properties/yml的配置</p><h3 id="5-2-yml支持多文档块方式"><a href="#5-2-yml支持多文档块方式" class="headerlink" title="5.2 yml支持多文档块方式"></a>5.2 yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3-激活指定profile"><a href="#5-3-激活指定profile" class="headerlink" title="5.3 激活指定profile"></a>5.3 激活指定profile</h3><ul><li>指定激活开发环境配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li><p>编辑运行配置参数</p><p><code>--spring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/profile.png" alt="Spring Boot"></p><ul><li><p>命令行</p><p>打包后运行项目，切换端口，配置传入命令行参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.profiles.active=dev</span><br></pre></td></tr></table></figure></li><li><p>虚拟机参数</p><p><code>-Dspring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/vm.png" alt="Spring Boot"></p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot启动会扫描以下位置的<code>application.properties</code>或者<code>application.yml</code>文件作为 Spring Boot的默认配置文件</p><ul><li><p>file: ./config/       file为当前项目目录</p></li><li><p>file: ./</p></li><li><p>classpath: /config/</p></li><li><p>classpath: /</p></li><li><p>以上是按照<strong>优先级从高到低</strong>的顺序，所有位置的文件都会被加载，<strong>高优先</strong><br><strong>级配置</strong>内容会<strong>覆盖低优先级配置</strong>内容；Spring Boot会从这4个位置全部加载主配置文件，<strong>互补配置</strong></p></li><li><p>我们也可以通过配置<code>spring.config.location</code>来改变默认配置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置，指定配置文件和默认加载的主配置文件</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.config.location=D:/application.properties</span><br></pre></td></tr></table></figure><p>  以便运维的时候修改某些配置</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p>Spring Boot支持多种外部配置方式，也可以从以下位置加载配置，优先级从高到底，高优先级的配置覆盖第优先级的配置，所有的配置会形成互补配置</p><p>这些方式优先级如下，可以参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-external-config.html">官方文档</a></p><ol><li><strong>命令行参数</strong></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-server</span>.port=<span class="number">8089</span> -<span class="literal">-server</span>.context<span class="literal">-path</span>=/initcmd</span><br></pre></td></tr></table></figure><ol><li><p>来自 java: comp/env的JNDI属性</p></li><li><p>Java系统属性( System getProperties() )</p></li><li><p>操作系统环境变量</p></li><li><p>RandomValuePropertySource配置的Random.*属性值</p></li><li><p><strong>jar包外部的application-{profile}.properties或application.yml（带spring.profile）配置文件</strong></p><blockquote><p>由jar包外向jar包内进行寻找，优先加载带profile</p></blockquote></li><li><p><strong>jar包内部的application-{profile}-properties或application.yml（spring profile)配置文件</strong></p></li><li><p><strong>jar包外部的application.properties或applcation.yml（不带spring.profile）配置文件</strong></p></li><li><p><strong>jar包内部的application.properties或application.yml（不带spring.profile）配置文件</strong></p></li><li><p>@Configuration注解类上的@PropertySource</p></li><li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p></li></ol><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置依据<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/common-application-properties.html">官方文档</a></p><ul><li><p>Spring Boot启动的时候加载主配置类，开启了自动配置功能<code>@EnableAuto Configuratio</code></p></li><li><p>@EnableAutoConfiguration作用</p><ul><li>利用<code>EnableAutoConfigurationlmportSelector</code>给容器中导入一些组件?<br>可以查看<code>selectImports()</code>方法的内容</li><li>List<String> configurations = getCandidateConfigurations(annotation Metadata, attributes)获取候选的配置</li><li>SpringFactorfesLoader.loadFactoryNames()<br>扫描所有jar包类路径下 META-INF/ spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoconfiguration.class类（类名）对应的值，然后把他们添加在器中</li><li>将类路径下 META-INF/spring.factories里面配置的所有 EnableAutoConfiguration的值加入到了容器中</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line"><span class="attr">...</span></span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br></pre></td></tr></table></figure><p> 每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中，用他们来做自动配置</p><ul><li>每一个自动配置类进行自动配置功能</li></ul><h2 id="8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理"><a href="#8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理" class="headerlink" title="8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理"></a>8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(</span>&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">  <span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">  value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">  matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 已经和Spring Boot的配置文件映射了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  <span class="comment">// 只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.properties = properties;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">    CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">    filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">    filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">    filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@Configuration</code>表示这是一个配置类，和之前编写的配置文件一样，也可以给容器中添加组件</p></li><li><p><code>@EnableConfigurationProperties</code>启用指定类ConfigurationProperties功能，将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中，就可以用了</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着，配置文件能配置什么可以参照某个功能对应的这个属性类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">  prefix = <span class="string">"spring.http.encoding"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</code>从配置文件中获取指定的值和bean的属性进行绑定</p></blockquote><ul><li><p><code>@ConditionalOnWebApplication</code>是Spring底层@Conditional注解，根据不同条件，如果满足指定的条件，整个配置类里面的配置就会生效；</p><p>这个注解是判断当前应用是否是web应用，如果是，当前配置类生效</p></li><li><p><code>@ConditionalOnClass</code>判断当前项目有没有指定类CharacterEncodingFilter.class</p></li><li><p><code>CharacterEncodingFilter.class</code>是SpringMVC中进行乱码解决的过滤器，以前都是配置在web.xml中的</p></li><li><p><code>@ConditionalOnProperty</code>判断配置文件中是否存在某个配置spring.http.encoding.enabled，如果不存在，判断也是成立的</p><p>即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的</p></li></ul><p>一句话解释这个配置类，根据当前不同的条件，决定这个配置类是否生效？</p><p>一旦这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的</p><h3 id="8-2-Spring-Boot精髓"><a href="#8-2-Spring-Boot精髓" class="headerlink" title="8.2 Spring Boot精髓"></a>8.2 Spring Boot精髓</h3><ul><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有Spring Boot默认写好的自动配置类</li><li>我们再来看这个自动配置类中到底配置了哪些组件（只要有我们要用的组件，我们就不需要再来配置了，否则，自己配置添加，不满意也可以改）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值</li></ul><p><code>xxxAutoConfiguration</code>：自动配置类，给容器中添加组件</p><p><code>xxxproperties</code>：封装配置文件中相关属性</p><h3 id="8-3-细节"><a href="#8-3-细节" class="headerlink" title="8.3 细节"></a>8.3 细节</h3><p>在HttpEncodingAutoConfiguration配置里中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">  CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">  filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">  filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">  filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">  <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法上也有一个注解，判断容器中是否配置了这个组件，如果没有则生效，进行配置</p></blockquote><ul><li><p><code>@Conditional</code>派生注解</p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置文件里面的所有内容才生效</p></li></ul><div class="table-container"><table><thead><tr><th>Conditional扩属注解</th><th>作用(判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>Conditionalon NotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table></div><blockquote><p>虽然自动配置类很多，但大多都需要一定条件才会生效</p><p>之前解析过程中，虽然加载了很多自动配置类，但不是所有的都生效</p></blockquote><ul><li>现在重要的是我们怎么知道哪些配置类生效了</li></ul><p>我们可以启用debug属性</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启Spring的debug，默认false</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>运行后观察控制台输出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO<span class="literal">-CONFIGURATION</span> REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">  DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required <span class="class"><span class="keyword">class</span> </span></span><br><span class="line"><span class="class">      '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>';</span></span><br><span class="line"><span class="class">      @<span class="title">ConditionalOnMissingClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">unwanted</span> <span class="title">class</span> (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">      - @<span class="title">ConditionalOnWebApplication</span> (<span class="title">required</span>) <span class="title">found</span> <span class="title">StandardServletEnvironment</span> </span></span><br><span class="line"><span class="class">      (<span class="title">OnWebApplicationCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Negative</span> <span class="title">matches</span>:</span></span><br><span class="line"><span class="class">-----------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">ActiveMQAutoConfiguration</span>:</span></span><br><span class="line"><span class="class">      <span class="title">Did</span> <span class="title">not</span> <span class="title">match</span>:</span></span><br><span class="line"><span class="class">        - @<span class="title">ConditionalOnClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">required</span> </span></span><br><span class="line"><span class="class">        <span class="title">classes</span> '<span class="title">javax</span>.<span class="title">jms</span>.<span class="title">ConnectionFactory</span>', </span></span><br><span class="line"><span class="class">        '<span class="title">org</span>.<span class="title">apache</span>.<span class="title">activemq</span>.<span class="title">ActiveMQConnectionFactory</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Unconditional</span> <span class="title">classes</span>:</span></span><br><span class="line"><span class="class">----------------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">boot</span>.<span class="title">autoconfigure</span>.<span class="title">context</span>.<span class="title">ConfigurationPropertiesAutoConfiguration</span></span></span><br><span class="line"><span class="class">    ...</span></span><br></pre></td></tr></table></figure><ul><li>Positive matches：自动配置类启用的<br>Negative matches：没有启动，没有匹配成功的自动配置类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;#1、配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、配置文件&quot;&gt;&lt;/a&gt;1、配置文件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
