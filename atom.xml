<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longing(MysteryGuest的博客)</title>
  
  <subtitle>心向星光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mysticalguest.github.io/"/>
  <updated>2020-08-13T04:07:50.059Z</updated>
  <id>https://mysticalguest.github.io/</id>
  
  <author>
    <name>MysticalGuest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring/SpringBootWeb</title>
    <link href="https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/"/>
    <id>https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/</id>
    <published>2020-08-09T07:17:01.661Z</published>
    <updated>2020-08-13T04:07:50.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h2 id="1、使用Spring-Boot："><a href="#1、使用Spring-Boot：" class="headerlink" title="1、使用Spring Boot："></a>1、使用Spring Boot：</h2><ul><li>创建Spring Boot应用，选中我们需要的模块</li><li>Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</li><li>自己编写业务代码</li></ul><p>回顾自动配置原理</p><p>这个场景Spring Boot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？等等</p><ul><li>xxxxAutoConfiguration：帮我们给容器中自动配置组件</li><li>xxxxProperties：配置类来封装配置文件的内容</li></ul><h2 id="2、Spring-Boot对静态资源的映射规则"><a href="#2、Spring-Boot对静态资源的映射规则" class="headerlink" title="2、Spring Boot对静态资源的映射规则"></a>2、Spring Boot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.resources"</span>,</span><br><span class="line">    ignoreUnknownFields = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 可以设置和静态资源有关的参数，比如缓存时间</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-依赖的方式"><a href="#2-1-依赖的方式" class="headerlink" title="2.1 依赖的方式"></a>2.1 依赖的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(cachePeriod));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源</p><p>webjars：以jar包的方式引入静态资源</p></li></ul><p>webjars<a href="https://www.webjars.org/">官网</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webjars-jquery.PNG" alt="webjars-jquery"></p><p>访问方式：<a href="http://localhost:8088/webjars/jquery/3.5.1/jquery.js">http://localhost:8088/webjars/jquery/3.5.1/jquery.js</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jquery-webjars --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-“-”访问当前项目的任何资源（静态资源的文件夹）"><a href="#2-2-“-”访问当前项目的任何资源（静态资源的文件夹）" class="headerlink" title="2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）"></a>2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(cachePeriod));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果处理不了，就去静态<code>staticPathPattern</code>路径去找</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER;</span><br><span class="line">    <span class="keyword">this</span>.dispatchTraceRequest = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.dispatchOptionsRequest = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.ignoreDefaultModelOnRedirect = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.logResolvedException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.mediaTypes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    <span class="keyword">this</span>.staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">    <span class="keyword">this</span>.async = <span class="keyword">new</span> WebMvcProperties.Async();</span><br><span class="line">    <span class="keyword">this</span>.servlet = <span class="keyword">new</span> WebMvcProperties.Servlet();</span><br><span class="line">    <span class="keyword">this</span>.view = <span class="keyword">new</span> WebMvcProperties.View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>它添加了个位置<code>addResourceLocations</code>，这个里面的<code>resourceProperties</code>有个<code>getStaticLocations()</code>方法，点进去，有个常量<code>RESOURCE_LOCATIONS</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        RESOURCE_LOCATIONS = <span class="keyword">new</span> String[CLASSPATH_RESOURCE_LOCATIONS.length + SERVLET_RESOURCE_LOCATIONS.length];</span><br><span class="line">        System.arraycopy(SERVLET_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, <span class="number">0</span>, SERVLET_RESOURCE_LOCATIONS.length);</span><br><span class="line">        System.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, SERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就找到了以下文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;; <span class="comment">// 当前项目的根路径</span></span><br><span class="line"><span class="comment">// 和</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>src/mian/java</code>和<code>src/main/resources</code>都是类路径</p><p>如果要访问<code>localhost:8088/*.js</code>资源，没有人为处理，那么会自动去上面这些路径，静态资源文件夹里找这些文件</p></blockquote><p>访问方式：<a href="http://localhost:8088/asserts/img/childhood_dreams.jpg">http://localhost:8088/asserts/img/childhood_dreams.jpg</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/static.PNG" alt="static"></p><h3 id="2-3-欢迎页设置，静态资源文件夹下的所有index-html页面"><a href="#2-3-欢迎页设置，静态资源文件夹下的所有index-html页面" class="headerlink" title="2.3 欢迎页设置，静态资源文件夹下的所有index.html页面"></a>2.3 欢迎页设置，静态资源文件夹下的所有index.html页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcAutoConfiguration.<span class="function">WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping(resourceProperties.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customizeResourceHandlerRegistration</span><span class="params">(ResourceHandlerRegistration registration)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.resourceHandlerRegistrationCustomizer != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer.customize(registration);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring最顶层的组件，保存每个请求谁来处理</p><p>点进<code>getWelcomePage()</code>方法</p><p><code>this.mvcProperties.getStaticPathPattern()</code>还被谁映射，点进去看源码就是<code>/**</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] var1 = <span class="keyword">this</span>.getStaticWelcomePageLocations();</span><br><span class="line">  <span class="keyword">int</span> var2 = var1.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">    String location = var1[var3];</span><br><span class="line">    Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(location);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">        resource.getURL();</span><br><span class="line">        <span class="keyword">return</span> resource;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要遍历，说明欢迎页还挺多的</p><p>点进<code>getStaticWelcomePageLocations()</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] getStaticWelcomePageLocations() &#123;</span><br><span class="line">  String[] result = <span class="keyword">new</span> String[<span class="keyword">this</span>.staticLocations.length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; ++i) &#123;</span><br><span class="line">    String location = <span class="keyword">this</span>.staticLocations[i];</span><br><span class="line">    <span class="keyword">if</span> (!location.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      location = location + <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[i] = location + <span class="string">"index.html"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还是这个<code>staticLocations</code>静态文件夹</p><p>静态文件夹路径都拼接上<code>index.html</code></p></blockquote><p>访问方式：<a href="http://localhost:8088/">http://localhost:8088/</a>    就会找index页面</p><h3 id="2-4-网站图标"><a href="#2-4-网站图标" class="headerlink" title="2.4 网站图标"></a>2.4 网站图标</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置喜欢的图标</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  value = &#123;<span class="string">"spring.mvc.favicon.enabled"</span>&#125;,</span><br><span class="line">  matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">    mapping.setOrder(-<span class="number">2147483647</span>);</span><br><span class="line">    mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, <span class="keyword">this</span>.faviconRequestHandler()));</span><br><span class="line">    <span class="keyword">return</span> mapping;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">    requestHandler.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">    <span class="keyword">return</span> requestHandler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有的<code>**/favicon.ico</code>都是在静态文件夹下找</p></blockquote><h3 id="2-5-自定义路径"><a href="#2-5-自定义路径" class="headerlink" title="2.5 自定义路径"></a>2.5 自定义路径</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/hello/,classpath:initializr/</span></span><br></pre></td></tr></table></figure><p>多路径用都好隔开，一旦启用自定义路径，那么默认的静态资源路径就不能使用了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web开发&quot;&gt;&lt;a href=&quot;#Web开发&quot; class=&quot;headerlink&quot; title=&quot;Web开发&quot;&gt;&lt;/a&gt;Web开发&lt;/h2&gt;&lt;h2 id=&quot;1、使用Spring-Boot：&quot;&gt;&lt;a href=&quot;#1、使用Spring-Boot：&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Boot与日志</title>
    <link href="https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/"/>
    <id>https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/</id>
    <published>2020-08-08T14:52:19.278Z</published>
    <updated>2020-08-11T04:15:18.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>故事：有一个开发人员，开发一个大型系统；</p><a id="more"></a><blockquote><p>遇到重要数据，喜欢<code>System.out.println(&quot;&quot;)</code>，将关键数据打印在控制台</p><p>去掉？写在一个文件？方便？</p><p>框架来记录系统的一些运行时信息，日志框架：first.jar</p><p>高大上的几个功能？异步模式？自动规定？等等？：second.jar</p><p>将以前的框架卸下来？换上新的框架，更新修改之前相关API：third.jar</p><p>JDBC—-数据库驱动：</p><ul><li>写了一个统一的接口层：暂时叫做日志门面（日志的一个抽象层）：fourth.jar</li><li>给项目中导入具体的日志实现就行了，我们之前的日志框架都是实现的抽象层</li></ul></blockquote><h2 id="2、市面上的日志框架"><a href="#2、市面上的日志框架" class="headerlink" title="2、市面上的日志框架"></a>2、市面上的日志框架</h2><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…</p><h3 id="2-1-下表行间无任何对应关系"><a href="#2-1-下表行间无任何对应关系" class="headerlink" title="2.1 下表行间无任何对应关系"></a>2.1 下表行间无任何对应关系</h3><div class="table-container"><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL( Jakarta Commons Logging)</td><td>Log4j</td></tr><tr><td>SLF4j( Simple Logging Facade for Java)</td><td>JUL( java. util.logging)</td></tr><tr><td>jboss-logging</td><td>Log4j2</td></tr><tr><td></td><td>Logback</td></tr></tbody></table></div><p>左边选一个门面（抽象层）、右边选一个实现</p><p>选哪个呢？排除法</p><h3 id="2-2-日志门面：slf4j"><a href="#2-2-日志门面：slf4j" class="headerlink" title="2.2 日志门面：slf4j"></a>2.2 日志门面：slf4j</h3><p>Jboss-logging：普通程序员用不了</p><p>JCL：最后一次更新是在2014年，廉颇老矣，尚能饭否？</p><p>剩下slf4j理所应当</p><h3 id="2-3-日志实现：logback"><a href="#2-3-日志实现：logback" class="headerlink" title="2.3 日志实现：logback"></a>2.3 日志实现：logback</h3><p>log4j、logback和slf4j都是一个人写的，适配性好，log4j不错但有性能问题，但升级消耗太大，就重写了logback</p><p>所有log4j没有logback先进，JUL是Java自带的，怕日志市场被占，比较简略</p><p>log4j2是借log4j之名，由Apache公司重新做的框架，设计地非常好，由于太好还没适配</p><h3 id="2-4-Spring-Boot怎么做的呢？"><a href="#2-4-Spring-Boot怎么做的呢？" class="headerlink" title="2.4 Spring Boot怎么做的呢？"></a>2.4 Spring Boot怎么做的呢？</h3><p>Spring框架默认是用JCL日志框架</p><p>Spring Boot选用slf4j和logback</p><h2 id="3、slf4j的使用"><a href="#3、slf4j的使用" class="headerlink" title="3、slf4j的使用"></a>3、slf4j的使用</h2><p>如何在系统中使用slf4j？<a href="http://www.slf4j.org/">官方文档</a></p><ul><li><p>以后开发的时候，日志记录方法得调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法</p></li><li><p>参见用户手册<a href="http://www.slf4j.org/manual.html">SLF4J user manual</a>给系统中导入slf4j的jar和logback的实现jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然默认用的是logback的实现，如果想要其他实现也可以，毕竟slf4j是抽象层，实现用什么都行</p></blockquote><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/SLF4J-user-manual.png" alt="Spring Boot"></p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><ul><li><p>如果系统中只导入了slf4j，我们要进行日志记录，就会返回空值，因为没有任何实现</p></li><li><p>正确用法：我的应用程序面向slf4j编程，调用它的方法进行日志记录，在程序中也导入日志实现，虽然调用slf4j接口，但logback会实现，记录到文件或控制台</p></li><li><p>如果slf4j要绑定log4j，log4j出现比较早，没想到要适配slf4j，所以两者绑定要有一个适配层（slf4j实现的），适配层相当于上面实现了slf4j的具体方法，而在方法里面要进行真正日志记录的时候，又调了log4j的API，要用log4j还要导入适配层即可<br>JUL同理</p></li><li><p>slf4j也有简单日志实现也能用，或者slf4j没有什么操作的实现包，也是输出空值</p></li><li><p>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p></li><li>slf4j只提供抽象层，用哪个实现就写那个的配置文件</li></ul><h2 id="4、遗留问题"><a href="#4、遗留问题" class="headerlink" title="4、遗留问题"></a>4、遗留问题</h2><p>开发某个系统时：使用{slf4j+logback}，依赖Spring框架（commons-logging），依赖Hibernate框架（Jboss-logging），依赖MyBatis框架等等可能一大堆</p><p>出现什么问题，系统中日志杂交？</p><p>现在就要做同一日志记录，即使是别的框架和我一起使用slf4j进行输出？</p><p>进入<a href="http://www.slf4j.org/">slf4j官方文档</a>的<a href="http://www.slf4j.org/legacy.html">legacy APIs</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/legacy.png" alt="Spring Boot"></p><p>统一slf4j，使用其他包替换原有日志框架，替换的意思就是，例如要把原框架里面对Commons-logging的依赖排除掉</p><p>但如果我现在用的Spring框架缺少Commons-logging就运行不起来了，Spring底层记录日志就需要Commons-logging，那怎么办呢？就用jcl-over-slf4j.jar替换这个包，Spring要用的类这个替换包例还是有的，就不会报错了</p><p>但新的包实现怎么办呢？新的包调入slf4j，二slf4j又调到真正的实现中，其他框架不同日志框架同理替换</p><p>其他组合方式也是如此</p><p>如何让系统中所有的日志都同一到slf4j：</p><ul><li>将系统中其他日志框架先排除去；</li><li>用中间包来替换原有的日志框架</li><li>我们导入slf4j其他的实现</li></ul><h2 id="5、Spring-Boot日志关系"><a href="#5、Spring-Boot日志关系" class="headerlink" title="5、Spring Boot日志关系"></a>5、Spring Boot日志关系</h2><p>每个启动器（场景）都要依赖的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot使用它来做日志功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖图示：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/slf4j-uml.png" alt="Spring Boot"></p><p>总结：</p><ul><li><p>Spring Boot底层也是使用slf4j+logback的方式进行日志记录</p></li><li><p>Spring Boot也是把其他的日志都替换成了slf4j</p></li><li><p>中间替换包，以<code>jcl-over-slf4j.jar</code>为例：</p><p>在项目的依赖包中找到其对应jar包：（中间转换包）</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jcl-over-slf4j.PNG" alt="Spring Boot"></p></li><li><p>从图中看出，虽然包名用的Apache的，但实现却是使用的<code>SLF4JLogFactory()</code>的日志工厂</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupport</span></span><br><span class="line"><span class="string">ed_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉！</p><p>Spring框架用的是commons-logging：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">      &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;exclusion&gt;</span><br><span class="line">  &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，我们唯一需要做的是，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉。</p><h2 id="6、日志使用"><a href="#6、日志使用" class="headerlink" title="6、日志使用"></a>6、日志使用</h2><h3 id="6-1-默认配置"><a href="#6-1-默认配置" class="headerlink" title="6.1 默认配置"></a>6.1 默认配置</h3><p>当我们初始化项目运行后，自己没有配置日志，但控制台是由输出信息的</p><p>Spring Boot默认帮我们配置好了日志，直接使用就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoggerFactory是记录器工厂，记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志的级别</span></span><br><span class="line"><span class="comment">     * 由低到高：trace&lt;debug&lt;info&lt;waring&lt;error</span></span><br><span class="line"><span class="comment">     * 可以调整输出的日志级别</span></span><br><span class="line"><span class="comment">     * 只打印高级别即以后（更高级别）的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.trace(<span class="string">"这是跟踪轨迹日志...trace..."</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是调试日志...debug"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Boot默认使用的是info级别的，输出info级别即以后的内容</span></span><br><span class="line"><span class="comment">     * 没有指定级别的就用Spring Boot默认规定的级别（root级别）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.info(<span class="string">"这是信息日志...info..."</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是警告信息...warning..."</span>);</span><br><span class="line">    logger.error(<span class="string">"这是错误信息日志，异常捕获...error..."</span>);</span><br><span class="line">    <span class="comment">// 也可以通过配置文件修改级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志的输出格式</p><ul><li>%d：表示时间</li><li>%thread：表示线程名</li><li>%-5level：级别从左显示5个字符宽度</li><li>%logger{50}：表示logger名字最长50个字符，否则按照句点分割</li><li>%msg：日志消息</li><li>%n：换行</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># trace及以后的级别生效</span></span><br><span class="line"><span class="meta">logging.level.com.initializr</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成springboot日志文件</span></span><br><span class="line"><span class="comment"># 可以用决定路径</span></span><br><span class="line"><span class="comment"># 如果不指定路径，就在当前项目下生成</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用logging.path可以不使用logging.file，使用spring.log默认文件</span></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建文件夹，并生成日志文件</span></span><br><span class="line"><span class="comment">#logging.path=/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; === [%thread] === %-5level %logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure><h3 id="6-2-自定义日志、指定配置"><a href="#6-2-自定义日志、指定配置" class="headerlink" title="6.2 自定义日志、指定配置"></a>6.2 自定义日志、指定配置</h3><p>可从<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-logging.html">官方文档-日志</a>参见第26.5条Custom log configuration</p><p>给类路径下放上每个日志框架自己的配置文件即可，Spring Boot就不使用默认配置了</p><div class="table-container"><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table></div><p><code>logback.xml</code>：直接就被日志框架识别了</p><p><code>logback-spring.xml</code>：日志框架就不直接加载日志的配置项，由Spring Boot解析日志配置，可以使用Spring Boot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev, staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以指定某段配置只在某个环境下生效</p><p>否则就会报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Logback configuration error detected: </span><br><span class="line">ERROR <span class="keyword">in</span> ch.qos.logback.core.joran.spi.Interpreter@<span class="number">23</span>:<span class="number">39</span> - no applicable action <span class="keyword">for</span> [<span class="type">springProfile</span>]...</span><br></pre></td></tr></table></figure><p>使用<code>logback-spring.xml</code>配置文件时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制台打印 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、切换日志框架"><a href="#7、切换日志框架" class="headerlink" title="7、切换日志框架"></a>7、切换日志框架</h2><h3 id="7-1-现在我们想用log4j实现"><a href="#7-1-现在我们想用log4j实现" class="headerlink" title="7.1 现在我们想用log4j实现"></a>7.1 现在我们想用log4j实现</h3><p>根据之前的原理，就要除去有关log4j的转换包，用原始包；还要导出logback的jar包</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-logback.png" alt="Spring Boot"></p><p>IDEA-&gt;在<code>pom.xml</code>文件中鼠标右键-&gt;Diagrams-&gt;Show Dependencies-&gt;选择要除去的jar包-&gt;鼠标右键-&gt;Exclude</p><p>其他的JCL和JCL有的框架还要用，所有转换包要留着</p><p>但log4j-over-slf4j.jar要去掉，这是个替换包，里面的log4j都用处slf4j了，但现在我们要用log4j了，而不是替换，所以也将其排除</p><p>最终：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/excluded.PNG" alt="Spring Boot"></p><p>面向slf4j编程，用log4j实现</p><p>导入一个适配层的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看其源码，自动导入了log4j的框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以按照slf4j的日志适配图，进行相关的切换</p><p>得到最终的pom.xml文件配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-切换至log4j2"><a href="#7-2-切换至log4j2" class="headerlink" title="7.2 切换至log4j2"></a>7.2 切换至log4j2</h3><p>参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">官方文档</a>表13.3. Spring Boot technical starters</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-starter-logging.png" alt="Spring Boot"></p><p>按照之前的操作将<code>spring-boot-start-logging.jar</code>除去</p><p>在pom.xml文件中导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、日志框架&quot;&gt;&lt;a href=&quot;#1、日志框架&quot; class=&quot;headerlink&quot; title=&quot;1、日志框架&quot;&gt;&lt;/a&gt;1、日志框架&lt;/h2&gt;&lt;p&gt;故事：有一个开发人员，开发一个大型系统；&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot配置</title>
    <link href="https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/"/>
    <id>https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/</id>
    <published>2020-08-07T11:29:02.683Z</published>
    <updated>2020-08-08T15:43:08.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><p>Spring Boot使用一个全局配置文件，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><a id="more"></a><p>配置文件的作用：修改Spring Boot自动配置的默认值（Spring Boot在底层都给我们自动配置好）</p><p>YAML(YAML Ain’t a Markup Language)</p><ul><li>YAML 不是一种标记语言的递归缩写</li><li>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</li></ul><p>标记语言</p><ul><li>以前的配置文件，大多都使用XML文件</li><li>YAML以数据为中心，比JSON，XML等更适合做配置文件</li></ul><p>例子</p><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p><code>key:(空格)value</code>表示一对键值对</p><p>以<strong>空格</strong>的缩进来控制层级关系，只要是做对齐的一列数据，都是统一层级的</p><p>属性和值也是大小写敏感</p><h3 id="2-2-值的写法"><a href="#2-2-值的写法" class="headerlink" title="2.2 值的写法"></a>2.2 值的写法</h3><h4 id="字面量：普通值（数字，字符串，布尔）"><a href="#字面量：普通值（数字，字符串，布尔）" class="headerlink" title="字面量：普通值（数字，字符串，布尔）"></a>字面量：普通值（数字，字符串，布尔）</h4><p><code>key: value</code>字面直接来写</p><p>字符串默认不用加上单引号或双引号</p><ul><li><p>双引号：不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思</p><p>name: “Hello \n World”，输出：Hello 换行 World</p></li><li><p>单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>name: ‘Hello \n World’，输出：Hello \n World</p></li></ul><h4 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h4><p><code>key: value</code>在下一行来写对象的属性和值的关系，注意缩进</p><p>对象还是<code>key: value</code>的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">(name:</span> <span class="string">Tom,age</span> <span class="number">20</span><span class="string">)</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h4><p>用<code>- value</code>表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,</span> <span class="string">dog,</span> <span class="string">pig]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置文件值注入"><a href="#2-3-配置文件值注入" class="headerlink" title="2.3 配置文件值注入"></a>2.3 配置文件值注入</h3><p>配置文件<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">MysteryGuest</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1999</span><span class="string">/01/09</span></span><br><span class="line">  <span class="attr">map:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">China</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hubei</span></span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">niuniu</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><code>@ConfigurationProperties</code>的方式</li></ul><p><code>javaBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个数组中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>: 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person": 配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后就有自动提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>@Value</code>的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另一种方式，Spring的底层注解</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似以前</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="name" value="MysteryGuest"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean&gt;标签相当于<span class="doctag">@Compoent</span></span></span><br><span class="line"><span class="comment">     * &lt;property&gt;标签中的value相当于<span class="doctag">@Value</span></span></span><br><span class="line"><span class="comment">     * value的参数可以是字面量、$&#123;key&#125;从环境变量或配置文件获取值、#&#123;SpEL&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Value获取值和-ConfigurationProperties获取值比较"><a href="#2-4-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2.4 @Value获取值和@ConfigurationProperties获取值比较"></a>2.4 @Value获取值和@ConfigurationProperties获取值比较</h3><div class="table-container"><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个一个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL（例：#{}）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装（例：Map）</td><td>支持</td><td>不支持</td></tr></tbody></table></div><p>属性名匹配规则（Relaxed binding，松散绑定）</p><ul><li><p>person.firstName：使用标准方式</p></li><li><p>person.first-name：大写用-</p></li><li><p>person.first_name：大写用_</p></li><li><p>PERSON_FIRST_NAEM：</p><p>推荐系统属性使用这种写法</p></li></ul><p>配置文件（yml和properties）都能获取值</p><p>如果说我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用<code>@value</code></p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用<code>@ConfigurationProperties</code></p><h3 id="2-5-配置文件注入值校验"><a href="#2-5-配置文件注入值校验" class="headerlink" title="2.5 配置文件注入值校验"></a>2.5 配置文件注入值校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// JSR303数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span> <span class="comment">// @value不支持</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、-PropertySource和-ImportResource"><a href="#3、-PropertySource和-ImportResource" class="headerlink" title="3、@PropertySource和@ImportResource"></a>3、@PropertySource和@ImportResource</h2><p><code>@PropertySource</code>用来加载指定的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>@ImportResource</code>导入Spring的配置文件，让配置文件里面的内容生效</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别</p><p>想让Spring的配置文件生效，加载进来，<code>@ImportResource</code>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-1-Spring-Boot推荐给容器中添加组件的方式"><a href="#3-1-Spring-Boot推荐给容器中添加组件的方式" class="headerlink" title="3.1 Spring Boot推荐给容器中添加组件的方式"></a>3.1 Spring Boot推荐给容器中添加组件的方式</h3><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org</span></span></span><br><span class="line"><span class="tag"><span class="string">/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.initializr.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Bean既可以标记在类上，也可以作为元注解</p><p><strong>推荐使用全注解的方式</strong></p><ul><li>配置类———-Spring配置文件</li><li>使用@Bean给容器中添加组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>指明当前类是一个配置类，就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以前在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="4-1-随机数"><a href="#4-1-随机数" class="headerlink" title="4.1 随机数"></a>4.1 随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.uuid&#125;  $&#123;random.<span class="keyword">int</span>&#125;  $&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;  $&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"><a href="#4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值" class="headerlink" title="4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"></a>4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.name=MysticalGuest$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.birth=<span class="number">1999</span>/<span class="number">01</span>/<span class="number">09</span></span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=v2</span><br><span class="line">person.list=[a, b, c]</span><br><span class="line">person.pet.name=$&#123;person.hello:hello&#125;$&#123;person.name&#125;<span class="string">'s dog</span></span><br><span class="line"><span class="string"># 如果文件中没有定义person.hello，那么取后面的hello值</span></span><br><span class="line"><span class="string">person.pet.age=6</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><h3 id="5-1-多Profile文件"><a href="#5-1-多Profile文件" class="headerlink" title="5.1 多Profile文件"></a>5.1 多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p><p>默认使用application.properties/yml的配置</p><h3 id="5-2-yml支持多文档块方式"><a href="#5-2-yml支持多文档块方式" class="headerlink" title="5.2 yml支持多文档块方式"></a>5.2 yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3-激活指定profile"><a href="#5-3-激活指定profile" class="headerlink" title="5.3 激活指定profile"></a>5.3 激活指定profile</h3><ul><li>指定激活开发环境配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li><p>编辑运行配置参数</p><p><code>--spring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/profile.png" alt="Spring Boot"></p><ul><li><p>命令行</p><p>打包后运行项目，切换端口，配置传入命令行参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.profiles.active=dev</span><br></pre></td></tr></table></figure></li><li><p>虚拟机参数</p><p><code>-Dspring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/vm.png" alt="Spring Boot"></p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot启动会扫描以下位置的<code>application.properties</code>或者<code>application.yml</code>文件作为 Spring Boot的默认配置文件</p><ul><li><p>file: ./config/       file为当前项目目录</p></li><li><p>file: ./</p></li><li><p>classpath: /config/</p></li><li><p>classpath: /</p></li><li><p>以上是按照<strong>优先级从高到低</strong>的顺序，所有位置的文件都会被加载，<strong>高优先</strong><br><strong>级配置</strong>内容会<strong>覆盖低优先级配置</strong>内容；Spring Boot会从这4个位置全部加载主配置文件，<strong>互补配置</strong></p></li><li><p>我们也可以通过配置<code>spring.config.location</code>来改变默认配置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置，指定配置文件和默认加载的主配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.config.location=D:/application.properties</span><br></pre></td></tr></table></figure><p>以便运维的时候修改某些配置</p></li></ul><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p>Spring Boot支持多种外部配置方式，也可以从以下位置加载配置，优先级从高到底，高优先级的配置覆盖第优先级的配置，所有的配置会形成互补配置</p><p>这些方式优先级如下，可以参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-external-config.html">官方文档</a></p><ol><li><p><strong>命令行参数</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-server</span>.port=<span class="number">8089</span> -<span class="literal">-server</span>.context<span class="literal">-path</span>=/initcmd</span><br></pre></td></tr></table></figure></li><li><p>来自 java: comp/env的JNDI属性</p></li><li><p>Java系统属性( System getProperties() )</p></li><li><p>操作系统环境变量</p></li><li><p>RandomValuePropertySource配置的Random.*属性值</p></li><li><p><strong>jar包外部的application-{profile}.properties或application.yml（带spring.profile）配置文件</strong></p><blockquote><p>由jar包外向jar包内进行寻找，优先加载带profile</p></blockquote></li><li><p><strong>jar包内部的application-{profile}-properties或application.yml（spring profile)配置文件</strong></p></li><li><p><strong>jar包外部的application.properties或applcation.yml（不带spring.profile）配置文件</strong></p></li><li><p><strong>jar包内部的application.properties或application.yml（不带spring.profile）配置文件</strong></p></li><li><p>@Configuration注解类上的@PropertySource</p></li><li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p></li></ol><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置依据<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/common-application-properties.html">官方文档</a></p><ul><li><p>Spring Boot启动的时候加载主配置类，开启了自动配置功能<code>@EnableAuto Configuratio</code></p></li><li><p>@EnableAutoConfiguration作用</p><ul><li>利用<code>EnableAutoConfigurationlmportSelector</code>给容器中导入一些组件?<br>可以查看<code>selectImports()</code>方法的内容</li><li>List<String> configurations = getCandidateConfigurations(annotation Metadata, attributes)获取候选的配置</li><li>SpringFactorfesLoader.loadFactoryNames()<br>扫描所有jar包类路径下 META-INF/ spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoconfiguration.class类（类名）对应的值，然后把他们添加在器中</li><li>将类路径下 META-INF/spring.factories里面配置的所有 EnableAutoConfiguration的值加入到了容器中</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br></pre></td></tr></table></figure><p> 每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中，用他们来做自动配置</p><ul><li>每一个自动配置类进行自动配置功能</li></ul><h2 id="8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理"><a href="#8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理" class="headerlink" title="8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理"></a>8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(</span>&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 已经和Spring Boot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">    <span class="comment">// 只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@Configuration</code>表示这是一个配置类，和之前编写的配置文件一样，也可以给容器中添加组件</p></li><li><p><code>@EnableConfigurationProperties</code>启用指定类ConfigurationProperties功能，将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中，就可以用了</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着，配置文件能配置什么可以参照某个功能对应的这个属性类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</code>从配置文件中获取指定的值和bean的属性进行绑定</p></blockquote><ul><li><p><code>@ConditionalOnWebApplication</code>是Spring底层@Conditional注解，根据不同条件，如果满足指定的条件，整个配置类里面的配置就会生效；</p><p>这个注解是判断当前应用是否是web应用，如果是，当前配置类生效</p></li><li><p><code>@ConditionalOnClass</code>判断当前项目有没有指定类CharacterEncodingFilter.class</p></li><li><p><code>CharacterEncodingFilter.class</code>是SpringMVC中进行乱码解决的过滤器，以前都是配置在web.xml中的</p></li><li><p><code>@ConditionalOnProperty</code>判断配置文件中是否存在某个配置spring.http.encoding.enabled，如果不存在，判断也是成立的</p><p>即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的</p></li></ul><p>一句话解释这个配置类，根据当前不同的条件，决定这个配置类是否生效？</p><p>一旦这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的</p><h3 id="8-2-Spring-Boot精髓"><a href="#8-2-Spring-Boot精髓" class="headerlink" title="8.2 Spring Boot精髓"></a>8.2 Spring Boot精髓</h3><ul><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有Spring Boot默认写好的自动配置类</li><li>我们再来看这个自动配置类中到底配置了哪些组件（只要有我们要用的组件，我们就不需要再来配置了，否则，自己配置添加，不满意也可以改）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值</li></ul><p><code>xxxAutoConfiguration</code>：自动配置类，给容器中添加组件</p><p><code>xxxproperties</code>：封装配置文件中相关属性</p><h3 id="8-3-细节"><a href="#8-3-细节" class="headerlink" title="8.3 细节"></a>8.3 细节</h3><p>在HttpEncodingAutoConfiguration配置里中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">    CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">    filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">    filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法上也有一个注解，判断容器中是否配置了这个组件，如果没有则生效，进行配置</p></blockquote><ul><li><p><code>@Conditional</code>派生注解</p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置文件里面的所有内容才生效</p></li></ul><div class="table-container"><table><thead><tr><th>Conditional扩属注解</th><th>作用(判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>Conditionalon NotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table></div><blockquote><p>虽然自动配置类很多，但大多都需要一定条件才会生效</p><p>之前解析过程中，虽然加载了很多自动配置类，但不是所有的都生效</p></blockquote><ul><li>现在重要的是我们怎么知道哪些配置类生效了</li></ul><p>我们可以启用debug属性</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启Spring的debug，默认false</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>运行后观察控制台输出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO<span class="literal">-CONFIGURATION</span> REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>';</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">unwanted</span> <span class="title">class</span> (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">      - @<span class="title">ConditionalOnWebApplication</span> (<span class="title">required</span>) <span class="title">found</span> <span class="title">StandardServletEnvironment</span> (<span class="title">OnWebApplicati</span></span></span><br><span class="line"><span class="class"><span class="title">onCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Negative</span> <span class="title">matches</span>:</span></span><br><span class="line"><span class="class">-----------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">ActiveMQAutoConfiguration</span>:</span></span><br><span class="line"><span class="class">      <span class="title">Did</span> <span class="title">not</span> <span class="title">match</span>:</span></span><br><span class="line"><span class="class">         - @<span class="title">ConditionalOnClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">required</span> <span class="title">classes</span> '<span class="title">javax</span>.<span class="title">jms</span>.<span class="title">ConnectionFactory</span>', '<span class="title">org</span>.<span class="title">apach</span></span></span><br><span class="line"><span class="class"><span class="title">e</span>.<span class="title">activemq</span>.<span class="title">ActiveMQConnectionFactory</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Unconditional</span> <span class="title">classes</span>:</span></span><br><span class="line"><span class="class">----------------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">boot</span>.<span class="title">autoconfigure</span>.<span class="title">context</span>.<span class="title">ConfigurationPropertiesAutoConfiguration</span></span></span><br><span class="line"><span class="class">    ...</span></span><br></pre></td></tr></table></figure><ul><li>Positive matches：自动配置类启用的<br>Negative matches：没有启动，没有匹配成功的自动配置类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;#1、配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、配置文件&quot;&gt;&lt;/a&gt;1、配置文件&lt;/h2&gt;&lt;h3 id=&quot;1-1-文件类型&quot;&gt;&lt;a href=&quot;#1-1-文件类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 文件类型&quot;&gt;&lt;/a&gt;1.1 文件类型&lt;/h3&gt;&lt;p&gt;Spring Boot使用一个全局配置文件，配置文件名是固定的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门，源码解析</title>
    <link href="https://mysticalguest.github.io/2020/08/07/Spring/SpringBootStart/"/>
    <id>https://mysticalguest.github.io/2020/08/07/Spring/SpringBootStart/</id>
    <published>2020-08-07T01:38:45.171Z</published>
    <updated>2020-08-08T07:06:22.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Spring-Boot简介"><a href="#1、Spring-Boot简介" class="headerlink" title="1、Spring Boot简介"></a>1、Spring Boot简介</h2><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><a id="more"></a><p>J2EE开发的一站式解决方案</p><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，<a href="https://martinfowler.com/">Martin Fowler</a>微服务<a href="https://martinfowler.com/microservices/">论文</a></p><p>微服务：架构风格（服务微化）</p><p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元</p><p>一个应用应该是一组小型服务：可以通过HTTP的方式进行互通</p><p>单体应用</p><p>环境约束（我的开发环境）：</p><ul><li>JDK8：java version “1.8.0_131”</li><li>Maven3.x：Apache Maven 3.6.3</li><li>IntelliJ IDEA2019.2</li><li>SpringBoot 1.5.9.RELEASE</li></ul><h2 id="3、Spring-Boot-HelloWorld"><a href="#3、Spring-Boot-HelloWorld" class="headerlink" title="3、Spring Boot HelloWorld"></a>3、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送请求，服务器接收请求并处理，响应”Hello World”字符串</p><h3 id="3-1-创建一个Maven工程"><a href="#3-1-创建一个Maven工程" class="headerlink" title="3.1 创建一个Maven工程"></a>3.1 创建一个Maven工程</h3><h3 id="3-2-导入依赖Spring-Boot相关的依赖"><a href="#3-2-导入依赖Spring-Boot相关的依赖" class="headerlink" title="3.2 导入依赖Spring Boot相关的依赖"></a>3.2 导入依赖Spring Boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-编写一个主程序"><a href="#3-3-编写一个主程序" class="headerlink" title="3.3 编写一个主程序"></a>3.3 编写一个主程序</h3><p>启动Spring Boot应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"Hello %s!"</span>, name);</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写相关的Controller、Service层"><a href="#3-4-编写相关的Controller、Service层" class="headerlink" title="3.4 编写相关的Controller、Service层"></a>3.4 编写相关的Controller、Service层</h3><h3 id="3-5-运行主程序测试"><a href="#3-5-运行主程序测试" class="headerlink" title="3.5 运行主程序测试"></a>3.5 运行主程序测试</h3><h3 id="3-6-简化部署"><a href="#3-6-简化部署" class="headerlink" title="3.6 简化部署"></a>3.6 简化部署</h3><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/getting-started-first-application.html#getting-started-first-application-executable-jar">Spring官方部署文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件可以将应用打包成一个可执行的jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要运行该应用程序，请使用java -jar命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::  (v1.5.9.RELEASE)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">....... . . . (log output here)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">........ Started Example in 2.536 seconds (JVM running for 2.864)</span></span><br></pre></td></tr></table></figure><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="5-1-POM文件"><a href="#5-1-POM文件" class="headerlink" title="5.1 POM文件"></a>5.1 POM文件</h3><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ctrl+鼠标左键查看底层源码，上面这个父项目还依赖于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现真正管理Spring Boot应用里面的所有依赖版本</p><p>Spring Boot的版本仲裁中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Dependency versions --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.14.5<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">maven-war-plugin.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">maven-war-plugin.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">versions-maven-plugin.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">versions-maven-plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以后我们导入依赖默认是不需要写版本（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h3 id="5-2-导入的依赖"><a href="#5-2-导入的依赖" class="headerlink" title="5.2 导入的依赖"></a>5.2 导入的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-<strong>web</strong></p><ul><li>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件</li><li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">更多启动器</a></li><li>Spring Boot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</li></ul><h3 id="5-3-主程序类，主入口类"><a href="#5-3-主程序类，主入口类" class="headerlink" title="5.3 主程序类，主入口类"></a>5.3 主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法来启动Spring Boot应用</p><p>点击这个注解（annotation）查看源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"exclude"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"excludeName"</span></span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">// spring boot定义的注解</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot的配置类，标注在某个类上，表示这是一个Spring Boot的配置类</p><p>点击这个注解（annotation）查看源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// spring定义的注解</span></span><br></pre></td></tr></table></figure><blockquote><p>配置类上来标注这个注解</p><p>配置类—-配置文件：配置类也是容器中的一个组件：<code>@Commponent</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br></pre></td></tr></table></figure><blockquote><p>开启自动配置功能</p><p>以前我们需要配置的东西，Spring Boot帮我们自动配置，这个注解告诉Spring Boot开启自动配置功能，这样自动配置才能生效</p></blockquote><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br></pre></td></tr></table></figure><blockquote><p>自动配置包</p></blockquote><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>Spring的底层注解<code>@import</code>，给容器中导入一个组件</p><p>导入的组件由<code>Registrar.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// metadata是注解的原信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry </span></span></span><br><span class="line"><span class="function"><span class="params">registry)</span> </span>&#123;</span><br><span class="line">        AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(</span><br><span class="line">metadata)).getPackageName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>将主配置类（<code>@SpringBootApplication</code>标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</strong></p></blockquote><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Registrar.PNG" alt="Spring Boot"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>给容器中导入组件，这是导入那些组件的选择器</p><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationImportSelector</span> <span class="keyword">extends</span> <span class="title">AutoConfigurationImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnableAutoConfigurationImportSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().equals(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>) ? (<span class="title">Boolean</span></span></span><br><span class="line">)this.getEnvironment().getProperty("spring.boot.enableautoconfiguration", Boolean.class, true) : true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再查看其父类的源码</p><p>里面有一个<code>selectImports</code>方法，将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中</p><p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）：就是给容器中这个场景所需要的所有组件，并配置好这些组件</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/AutoConfiguration.PNG" alt="Spring Boot"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作</p><p><code>selectImports</code>会调用该类里的<code>getCandidateConfigurations</code>方法</p><p><code>getCandidateConfigurations</code>又调用了<code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)</code></p><p>Spring Boot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作</p><p>以前我们需要自己配置的东西，自动配置类帮我们</p><p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-1.5.9.RELEASE.jar</code></p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块，向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目：</p><ul><li><p>主程序已经生成好了，我们只需要添加自己的逻辑即可</p></li><li><p>resources文件夹中的目录结构</p><ul><li>static：保存所有的静态资源：js, css, images</li><li>templates：保存所以的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面），可以使用官方推荐模板引擎（Freemarker, Thymeleaf）</li><li>application.properties：Spring Boot应用的配置文件，虽然Spring Boot有默认配置，但我们可以修改一些默认配置</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Spring-Boot简介&quot;&gt;&lt;a href=&quot;#1、Spring-Boot简介&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Boot简介&quot;&gt;&lt;/a&gt;1、Spring Boot简介&lt;/h2&gt;&lt;p&gt;简化Spring应用开发的一个框架&lt;/p&gt;
&lt;p&gt;整个Spring技术栈的一个大整合&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>处理机调度与进程死锁</title>
    <link href="https://mysticalguest.github.io/2020/07/17/OS/DispatchandDeadlock/"/>
    <id>https://mysticalguest.github.io/2020/07/17/OS/DispatchandDeadlock/</id>
    <published>2020-07-17T10:00:00.000Z</published>
    <updated>2020-07-21T11:37:42.207Z</updated>
    
    <content type="html"><![CDATA[<p>处理机调度与进程死锁笔记整理</p><a id="more"></a><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><h2 id="1-调度类型"><a href="#1-调度类型" class="headerlink" title="1 调度类型"></a>1 调度类型</h2><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Course/OS/DispatchDeadlock/DispatchType.PNG" alt=""></p><h3 id="1-1-三类调度"><a href="#1-1-三类调度" class="headerlink" title="1.1 三类调度"></a>1.1 三类调度</h3><ul><li><p>长程调度——作业调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>决定哪个作业可以进入系统</p></li><li><p>中程调度——内存调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>决定将哪个（些）进程调入内存</p><p>​        <i class="fa fa-paper-plane" aria-hidden="true"></i>  换入：取决于管理系统并发度的需求；</p><p>​        <i class="fa fa-paper-plane" aria-hidden="true"></i>  换出：进程的存储需求。</p></li><li><p>短程调度——进程调度</p></li></ul><p>决定哪个进程将获得CPU</p><ul><li>长程调度程序执行频率较低；</li><li>中程调度程序执行频率稍高；</li><li>短程调度程序执行频率最高。</li></ul><h3 id="1-2-调度的时机和策略"><a href="#1-2-调度的时机和策略" class="headerlink" title="1.2 调度的时机和策略"></a>1.2 调度的时机和策略</h3><ul><li><p>何时调度？</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>有任务终止时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>处理器的空闲时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>终端用户登录时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>有更紧急任务到达时</p></li><li><p>调度哪个？</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>先来先服务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>优先级</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>实时性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>服务时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>I/O需求</p></li></ul><h3 id="1-3-调度算法的评价准则"><a href="#1-3-调度算法的评价准则" class="headerlink" title="1.3 调度算法的评价准则"></a>1.3 调度算法的评价准则</h3><h4 id="1-3-1-面向用户，与性能相关"><a href="#1-3-1-面向用户，与性能相关" class="headerlink" title="1.3.1 面向用户，与性能相关"></a>1.3.1 面向用户，与性能相关</h4><ul><li><p>周转时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>从提交到完成之间的时间间隔</p></li><li><p>响应时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>从提交到开始接收响应之间的时间间隔</p></li><li><p>截止期限</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程完成的最后期限</p></li></ul><h4 id="1-3-2-面向用户，与性能无关"><a href="#1-3-2-面向用户，与性能无关" class="headerlink" title="1.3.2 面向用户，与性能无关"></a>1.3.2 面向用户，与性能无关</h4><ul><li><p>可预测性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>希望提供给用户的服务能够随着时间的流逝展现给用户一贯相同的特性，而与系统执行的其他工作无关。</p></li></ul><h4 id="1-3-3-面向系统，与性能相关"><a href="#1-3-3-面向系统，与性能相关" class="headerlink" title="1.3.3 面向系统，与性能相关"></a>1.3.3 面向系统，与性能相关</h4><ul><li><p>吞吐量</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>单位时间内完成的进程数目</p></li><li><p>处理器利用率</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>处理器处于忙的状态的时间百分比</p></li></ul><h4 id="1-3-4-面向系统，与性能无关"><a href="#1-3-4-面向系统，与性能无关" class="headerlink" title="1.3.4 面向系统，与性能无关"></a>1.3.4 面向系统，与性能无关</h4><ul><li><p>公平性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程被公平对待</p></li><li><p>强制优先级</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程被指定优先级，调度策略优先选择高优先级进程</p></li><li><p>平衡资源</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>保持系统中所有资源处于繁忙状态，较少适用紧缺资源的进程应该受到照顾</p></li></ul><h3 id="1-4-调度模式"><a href="#1-4-调度模式" class="headerlink" title="1.4 调度模式"></a>1.4 调度模式</h3><ul><li>抢占（剥夺）——对有实时性或响应时间要求的任务，必须采用抢占式调度</li><li>非抢占（非剥夺）——对没有响应时间要求的任务，可采用非抢占式调度</li></ul><h3 id="1-5-优先级的使用"><a href="#1-5-优先级的使用" class="headerlink" title="1.5 优先级的使用"></a>1.5 优先级的使用</h3><ul><li><p>每个进程被指定一个优先级，调度程序总是选择具有较高优先级的进程。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>纯粹的优先级调度方案可能会导致第优先级进程长时间处于饥饿状态</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>一个进程的优先级可随着它的时间或执行历史而变化</p></li></ul><h2 id="2-调度算法"><a href="#2-调度算法" class="headerlink" title="2 调度算法"></a>2 调度算法</h2><h3 id="2-1-几种常用调度算法的比较"><a href="#2-1-几种常用调度算法的比较" class="headerlink" title="2.1 几种常用调度算法的比较"></a>2.1 几种常用调度算法的比较</h3><div class="table-container"><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">FCFS(先来先服务)</th><th style="text-align:center">RR(轮转)</th><th style="text-align:center">SPN(最短进程优先)</th><th style="text-align:center">SRT(最短剩余时间)</th><th style="text-align:center">HRRN(最高响应比优先)</th><th style="text-align:center">优先级高者优先</th><th style="text-align:center">反馈法多队里</th></tr></thead><tbody><tr><td style="text-align:center">选择依据</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><script type="math/tex">max((w+s)/s)</script></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">调度方式</td><td style="text-align:center">非抢占式</td><td style="text-align:center">抢占式（按时间片）</td><td style="text-align:center">非抢占式</td><td style="text-align:center">抢占式（进程到达时）</td><td style="text-align:center">非抢占式</td><td style="text-align:center"></td><td style="text-align:center">抢占式（时间片）</td></tr><tr><td style="text-align:center">响应时间</td><td style="text-align:center">可能很高</td><td style="text-align:center">对于短进程提供良好的响应时间</td><td style="text-align:center"></td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center"></td><td style="text-align:center">不突出</td></tr><tr><td style="text-align:center">开销</td><td style="text-align:center">最小</td><td style="text-align:center">低</td><td style="text-align:center">可能高</td><td style="text-align:center">可能高</td><td style="text-align:center">可能高</td><td style="text-align:center"></td><td style="text-align:center">可能高</td></tr><tr><td style="text-align:center">对进程的作用</td><td style="text-align:center">不利于短作业（进程）和I/O繁忙作业</td><td style="text-align:center">公平对待</td><td style="text-align:center">不利于长作业（进程）</td><td style="text-align:center">不利于长作业（进程）</td><td style="text-align:center">较好均衡个</td><td style="text-align:center"></td><td style="text-align:center">偏爱I/O繁忙型进程</td></tr><tr><td style="text-align:center">“饥饿”问题</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td><td style="text-align:center">无</td><td style="text-align:center"></td><td style="text-align:center">可能</td></tr></tbody></table></div><h3 id="2-2-补充"><a href="#2-2-补充" class="headerlink" title="2.2 补充"></a>2.2 补充</h3><h4 id="2-2-1-HRRN"><a href="#2-2-1-HRRN" class="headerlink" title="2.2.1 HRRN"></a>2.2.1 HRRN</h4><ul><li><p>公式：<script type="math/tex">R=(w+s)/s</script>，其中：</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>R：响应比</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>w：等待处理器的时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>预计的服务时间</p></li></ul><h4 id="2-2-2-优先级高者优先"><a href="#2-2-2-优先级高者优先" class="headerlink" title="2.2.2 优先级高者优先"></a>2.2.2 优先级高者优先</h4><ul><li>约定：数小代表优先级高</li></ul><h4 id="2-2-3-传统的UNIX调度"><a href="#2-2-3-传统的UNIX调度" class="headerlink" title="2.2.3 传统的UNIX调度"></a>2.2.3 传统的UNIX调度</h4><ul><li><p>多级反馈</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>每个优先级队列中使用轮转方法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>使用1秒抢占方式</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>每秒都会重新计算每个进程的优先级</p></li></ul><h3 id="2-3-线程调度"><a href="#2-3-线程调度" class="headerlink" title="2.3 线程调度"></a>2.3 线程调度</h3><ul><li><p>负载分配</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统维护一个就绪线程的全局队列，每个处理器只要空闲就从队列中选择一个线程。</p></li><li><p>组调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>一组相关的线程基于一对一的原则，同时调度到一组处理器上运行。</p></li><li><p>专用处理器调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>组调度的一种极端形式，在一个应用程序执行期间，把一组处理器专门分配给这个应用程序。</p></li><li><p>动态调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>某些应用程序允许动态地改变进程中线程数目，需要动态调度。操作系统负责分配处理器给作业，作业自行调度。</p></li></ul><h2 id="3-多机系统与实时系统调度"><a href="#3-多机系统与实时系统调度" class="headerlink" title="3 多机系统与实时系统调度"></a>3 多机系统与实时系统调度</h2><h3 id="3-1实时调度"><a href="#3-1实时调度" class="headerlink" title="3.1实时调度"></a>3.1实时调度</h3><ul><li><p>实时计算</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统的正确性不仅取决于计算的逻辑结果，还依赖于产生结果的时间。</p></li><li><p>实时任务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>硬实时任务、软实时任务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>周期性任务、非周期性任务</p></li><li><p>实时系统应用的例子</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>目前：实验控制、过程控制、机器人、空中交通管制、电信、军事指挥与控制系统。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>下一代：自动驾驶汽车、具有弹性关节的机器人控制器、智能化生产中系统查找、空间站和海底勘探。</p></li></ul><h3 id="3-2-实时操作系统的特点"><a href="#3-2-实时操作系统的特点" class="headerlink" title="3.2 实时操作系统的特点"></a>3.2 实时操作系统的特点</h3><ul><li><p>可确定性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>按照固定的、预先确定的时间或时间间隔执行操作。</p></li><li><p>可响应性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>为中断提供服务时间。</p></li><li><p>用户控制</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>允许用户细粒度地控制任务优先级，指定一些特性等。</p></li><li><p>可靠性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>性能的损失或降低可能产生灾难性的后果。</p></li><li><p>故障弱化操作</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统在故障时尽可能多地保存其性能和数据的能力。</p></li></ul><h3 id="3-3-实时系统调度的特征"><a href="#3-3-实时系统调度的特征" class="headerlink" title="3.3 实时系统调度的特征"></a>3.3 实时系统调度的特征</h3><ul><li>快速的进程或线程切换。</li><li>体积小（只具备最小限度的功能）。</li><li>迅速响应外部中断的能力。</li><li>通过诸多信号量、信号和时间之类的进程间通信工具，实现多任务处理。</li><li>使用特殊的顺序文件，可以快速存储数据。</li><li>基于优先级的抢占式调度。</li><li>最小化禁止中断的时间间隔。</li><li>用于使任务延迟一段固定的时间或暂停/恢复任务的原语。</li><li>特别的警报和超时设定。</li></ul><h3 id="3-4-实时系统调度算法"><a href="#3-4-实时系统调度算法" class="headerlink" title="3.4 实时系统调度算法"></a>3.4 实时系统调度算法</h3><ul><li><p>静态表法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>执行关于可行调度的静态分析。分析的结果是一个调度，它用于确定在运行时一个任务何时必须开始执行。</p></li><li><p>静态优先级抢占法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>执行一个静态分析，但是没有制定调度，通过给任务制定优先级，使用传统的基于优先级的抢占式调度。</p></li><li><p>基于动态规划调度法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>在运行时动态地确定可行性，可行性分析的结果是一个调度或规划，可用于确定何时分派这个任务。</p></li><li><p>动态尽力调度法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>不执行可行性分析。系统试图满足所有的最后期限，并终止任何已经开始运行但错过最后期限的进程。</p></li></ul><h3 id="3-5-截止时间调度"><a href="#3-5-截止时间调度" class="headerlink" title="3.5 截止时间调度"></a>3.5 截止时间调度</h3><ul><li><p>实时应用程序通常并不关注绝对速度，它关注的是在最有价值的时间完成（或启动）任务。</p></li><li><p>截止时间调度：最早最后截止时间优先。</p></li><li><p>最后期限</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>开始截止时间：任务必须开始的时间。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>完成截止时间：任务必须完成的时间。</p></li></ul><h3 id="3-6-优先级反转"><a href="#3-6-优先级反转" class="headerlink" title="3.6 优先级反转"></a>3.6 优先级反转</h3><ul><li>在任何优先级调度方案中，系统应该不停地执行具有最高优先级的任务。当系统内的环境迫使一个较高优先级的任务去等待一个较低优先级的任务时，优先级反转就会发生。</li><li>优先级：<script type="math/tex">T_1>T_2>T_3</script>，高优先级的<script type="math/tex">T_1</script>被低优先级的<script type="math/tex">T_2</script>占先。</li><li>解决方案：优先级继承。</li></ul><h1 id="进程死锁"><a href="#进程死锁" class="headerlink" title="进程死锁"></a>进程死锁</h1><h2 id="1-死锁存在的条件"><a href="#1-死锁存在的条件" class="headerlink" title="1 死锁存在的条件"></a>1 死锁存在的条件</h2><ul><li>互斥</li><li>无抢占</li><li>保持并等待</li><li>循环等待</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理机调度与进程死锁笔记整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十三 图的应用</title>
    <link href="https://mysticalguest.github.io/2020/07/11/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%89/"/>
    <id>https://mysticalguest.github.io/2020/07/11/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%89/</id>
    <published>2020-07-11T12:23:50.860Z</published>
    <updated>2020-07-21T11:37:42.199Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><p><a href="http://c.biancheng.net/">C语言中文网</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断给定的图G是否是连通图。若连通，则输出该生成树。若不连通，则输出其所有的连通子图（生成森林）</span><br><span class="line">  - 图G分别采用邻接矩阵或邻接表存储表示</span><br><span class="line">  - 实现在该两种存储表示方法下的上述操作</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>深度优先搜索算法的改进。</p><p>如果一次深度优先搜索没有把所有顶点遍历完，即visited数组有false值，那么就可以证明图不是连通的。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge</span><span class="params">(MGraph G, <span class="keyword">bool</span> *b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The spanning tree or forest of this graph is: "</span>);</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DFS( G, <span class="number">0</span>);    <span class="comment">//从任意一点遍历，这里从下标为0的点开始</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">1</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      DFS( G, v);</span><br><span class="line">      *b = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" | "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">JudgeAdjList</span><span class="params">(ALGraph *g, <span class="keyword">bool</span> *b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The spanning tree or forest of this graph is: "</span>);</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERtEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DFSAdjList(g, <span class="number">0</span>, visited);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" | "</span>);</span><br><span class="line">      DFSAdjList(g, i, visited);</span><br><span class="line">      *b = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无向图G（不带权值）采用邻接表结构，试设计一个算法，求图G中从顶点u到顶点v的最短路径。</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>运用Dijkstra(迪杰斯特拉)算法的思想。</p><p>visit[]：这个数组用来标记结点的访问与否，如果该结点被访问，则为1，如果该结点还没有访问，则为0；</p><p>distance[]：这个数组用来记录当前从v到各个顶点的最短路径长度，算法的核心思想就是通过不断修改这个表实现。</p><p>先遍历直达源顶点的所有顶点，距离记为1，置visit[]已访问；</p><p>后面遍历所有其他未访问的顶点，更新distance[]数组。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    实例</span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  0     2</span><br><span class="line"> &#x2F; \   </span><br><span class="line">3   4</span><br><span class="line">程序将以此图作为输入</span><br></pre></td></tr></table></figure><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(ALGraph G, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;<span class="comment">//求 s 到 t 的最短路径</span></span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> visit[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">int</span> distance[MAX_VERTEX_NUM];        <span class="comment">//从 s 到各点的距离</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    distance[i]=INFINITY;</span><br><span class="line">    visit[i]=<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  distance[s]=<span class="number">0</span>;</span><br><span class="line">  visit[s]=<span class="number">1</span>;</span><br><span class="line">  ArcNode *p=G.vertices[s].firstarc;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(p)&#123;   <span class="comment">//先把距离源点距离最近的顶点都遍历完</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[p-&gt;adjvex])&#123;</span><br><span class="line">      distance[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">      visit[p-&gt;adjvex]=<span class="number">1</span>;        <span class="comment">//当前顶点已访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;      <span class="comment">//再求其他顶点</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[G.vertices[i].data])&#123;</span><br><span class="line">      p=G.vertices[i].firstarc;   <span class="comment">//未访问的节点</span></span><br><span class="line">      <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(distance[p-&gt;adjvex]&lt;INFINITY)&#123;</span><br><span class="line">          distance[G.vertices[i].data]=distance[p-&gt;adjvex]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无向图G（不带权值）采用邻接表表示，试设计一个算法，输出从顶点Vi到顶点Vj的所有简单路径。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>利用递归算法，从起始点出发，分别递归遍历它的所有顶点，将遍历过的顶点访问数组置false，并将节点记录进path数组，当遇到目标加点将path数组中顶点全部输出，即为简单路径。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    实例</span><br><span class="line">     0</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  1     2</span><br><span class="line">   \   &#x2F;</span><br><span class="line">     3</span><br><span class="line">程序将以此图作为输入</span><br></pre></td></tr></table></figure><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> path[MAX_VERTEX_NUM];</span><br><span class="line">path[<span class="number">0</span>]=start;     <span class="comment">//记录源点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findAllSimplePath</span><span class="params">(ALGraph G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> path[], <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  ArcNode *p;</span><br><span class="line">  <span class="keyword">int</span> j, n;</span><br><span class="line">  visited[start]=<span class="number">1</span>;  <span class="comment">// 记录已近访问过这个顶点</span></span><br><span class="line">  p=G.vertices[start].firstarc;</span><br><span class="line">  <span class="keyword">while</span> (p)&#123;</span><br><span class="line">    n=p-&gt;adjvex;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="built_in">end</span>)&#123;   <span class="comment">//找到一个路径</span></span><br><span class="line">      path[i+<span class="number">1</span>] = <span class="built_in">end</span>;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-3d"</span>, path[j]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!visited[n])&#123;   <span class="comment">//改点未被遍历</span></span><br><span class="line">      path[i+<span class="number">1</span>]=n;<span class="comment">//存入路径</span></span><br><span class="line">      findAllSimplePath(G, n, <span class="built_in">end</span>, path, i+<span class="number">1</span>); <span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task3.PNG" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图G采用邻接表表示，试设计一个算法，求无向连通图G中距离顶点v最远的一个顶点。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>同题目2的算法思想，既然用Dijkstra算法求出了所有一个点到其他所有顶点的路径，那么取distance数组中的最大值即为最远顶点。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(ALGraph G, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> visit[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">int</span> distance[MAX_VERTEX_NUM];        <span class="comment">//从 s 到各点的距离</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    distance[i]=INFINITY;</span><br><span class="line">    visit[i]=<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  distance[s]=<span class="number">0</span>;</span><br><span class="line">  visit[s]=<span class="number">1</span>;</span><br><span class="line">  ArcNode *p=G.vertices[s].firstarc;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(p)&#123;   <span class="comment">//先把距离源点距离最近的顶点都遍历完</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[p-&gt;adjvex])&#123;</span><br><span class="line">      distance[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">      visit[p-&gt;adjvex]=<span class="number">1</span>;        <span class="comment">//当前顶点已访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;      <span class="comment">//再求其他顶点</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[G.vertices[i].data])&#123;</span><br><span class="line">      p=G.vertices[i].firstarc;   <span class="comment">//未访问的节点</span></span><br><span class="line">      <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(distance[p-&gt;adjvex]&lt;INFINITY)&#123;</span><br><span class="line">          distance[G.vertices[i].data]=distance[p-&gt;adjvex]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">0</span>;    <span class="comment">//最远顶点的位置</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(distance[<span class="built_in">max</span>]&lt;distance[i])</span><br><span class="line">      <span class="built_in">max</span>=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task4.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/&quot;&gt;C语言中文网&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十二 图的存储结构</title>
    <link href="https://mysticalguest.github.io/2020/07/07/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%BA%8C/"/>
    <id>https://mysticalguest.github.io/2020/07/07/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%BA%8C/</id>
    <published>2020-07-07T09:01:10.649Z</published>
    <updated>2020-07-21T11:37:42.193Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><hr><a id="more"></a><hr><h1 id="1-图的定义"><a href="#1-图的定义" class="headerlink" title="1.图的定义"></a>1.图的定义</h1><blockquote><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V, E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p></blockquote><p>对于图的定义，需要注意的几个地方：</p><ul><li>线性表中把数据元素叫元素，树中将数据元素叫结点，图中将数据元素称之为顶点（Vertex）。</li><li>线性表中可以没有数据元素，称之为空表。树中可以没有结点，叫做空树。但在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调顶点集合V有穷非空。</li><li>线性表中，相邻的元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li></ul><h2 id="1-1-各种图定义"><a href="#1-1-各种图定义" class="headerlink" title="1.1 各种图定义"></a>1.1 各种图定义</h2><ul><li>无向边：若顶点<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>之间的边没有方向，则称这条边为无向边（Edge），用无序偶对<script type="math/tex">(v_i, v_j)</script>来表示。</li><li>无向图：图中任意两顶点之间的边都是无向边。</li><li>有向图：若从顶点<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>之间的边有方向，则称这条边为有向边（Edge），也称为弧（Arc）。用有序偶<script type="math/tex"><v_1, v_j></script>来表示，<script type="math/tex">v_i</script>称为弧尾（Tail），<script type="math/tex">v_j</script>称为弧头（Head）。</li><li>有向图：图中任意两个顶点之间的边都是有向边。</li><li>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。即不存在自环和重复边。</li><li>无向完全图：在无向图中，如果任意两顶点之间都存在边。含有n个顶点的无向完全图有<script type="math/tex">\frac{n*(n-1)}{2}</script>条边。</li><li>有向完全图：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧。含有n个顶点的有向完全图有<script type="math/tex">n*(n-1)</script>条边。</li><li>有很少条边或弧的图称为稀疏图反之称之为稠密图。</li><li>有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做权（Weight）。这种带权的图通常称为网（Network）。</li><li>假设有两个图<script type="math/tex">G=(V, \{E\})</script>和<script type="math/tex">G^`=(V^`, \{E^`\})</script>，如果<script type="math/tex">V^`\subseteq V</script>且<script type="math/tex">E^`\subseteq E</script>，则称<script type="math/tex">G^`</script>为<script type="math/tex">G</script>的子图（Subgraph）。</li></ul><h2 id="1-2-连通图相关术语"><a href="#1-2-连通图相关术语" class="headerlink" title="1.2 连通图相关术语"></a>1.2 连通图相关术语</h2><blockquote><p>在无向图G中，如果从顶点<script type="math/tex">v</script>到顶点<script type="math/tex">v^`</script>有路径，则称<script type="math/tex">v</script>和<script type="math/tex">v^`</script>是连通的。如果对于图中任意两个顶点<script type="math/tex">v_i、v_j \in E</script>，<script type="math/tex">v_i</script>和<script type="math/tex">v_j</script>都是连通的，则称G是连通图（Connected Graph）。</p></blockquote><ul><li><p>无向图中的极大连通子图称为连通分量。</p></li><li><p>在有向图G中，如果对于每一对<script type="math/tex">v_i、v_j \in V、v_i\ne v_j</script>，从<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>和从<script type="math/tex">v_j</script>到<script type="math/tex">v_i</script>都存在路径，则称G是强连通图。有向图中的极大强连通子图称做有向图的强连通分量。</p></li><li>一个连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边。</li><li>如果一个有向图恰有一个顶点的入度为0，其余顶点的入度均为1，则是一棵有向树。</li><li>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。</li></ul><h1 id="2-图的存储结构"><a href="#2-图的存储结构" class="headerlink" title="2.图的存储结构"></a>2.图的存储结构</h1><p>图的存储方式一般有两类，用边的集合方式有邻接矩阵，用链式方式有邻接链表、十字链表、邻接多重表、边集数组等。</p><h2 id="2-1-邻接矩阵"><a href="#2-1-邻接矩阵" class="headerlink" title="2.1 邻接矩阵"></a>2.1 邻接矩阵</h2><p>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;           <span class="comment">/* 顶点类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;              <span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100                 <span class="comment">/* 最大顶点树，应由用户定义 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 65535             <span class="comment">/* 用65535来代表无穷大 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  VertexType vexs[MAXVEX];         <span class="comment">/* 顶点表 */</span></span><br><span class="line">  EdgeType arc[MAXVEX][MAXVEX];    <span class="comment">/* 邻接矩阵，可看作表 */</span></span><br><span class="line">  <span class="keyword">int</span> numVertexes, numEdges;       <span class="comment">/* 图中当前的顶点数和边数 */</span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure><p>无向网图的创建代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 建立无向图的邻接矩阵表示 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMGraph</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数： \n"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);     <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)                 <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(&amp;G-&gt;vexs[i]);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;G-&gt;numVertexes; j++)</span><br><span class="line">      G-&gt;arc[i][j] = INFINITY;                      <span class="comment">/* 邻接矩阵初始化 */</span></span><br><span class="line">  <span class="keyword">for</span>(k = <span class="number">0</span>; k&lt;G-&gt;numEdges; k++)&#123;                   <span class="comment">/* 读入numEdges条边，建立邻接矩阵 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入边(vi, vj)上的下标i，下标j和权w: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                    <span class="comment">/* 输入边（vi, vj）上的权w */</span></span><br><span class="line">    G-&gt;arc[i][j]=w;</span><br><span class="line">    G-&gt;arc[j][i]=G-&gt;arc[i][j];                      <span class="comment">/* 因为是无向图，矩阵对称 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以得到，n个顶点和e条边的无向网图的创建，时间复杂度为<script type="math/tex">O(n+n^2+e)</script>，其中对邻接矩阵Garc的初始化耗费了<script type="math/tex">O(n^2)</script>的时间。</p><h2 id="2-2-邻接表"><a href="#2-2-邻接表" class="headerlink" title="2.2 邻接表"></a>2.2 邻接表</h2><p>数组与链表相结合的存储方法称为邻接表（Adjacency List）。图中顶点用一个一维数组存储，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;          <span class="comment">/* 顶点类型由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;             <span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span>          <span class="comment">/* 边表结点 */</span></span><br><span class="line">  <span class="keyword">int</span> adjvex;                     <span class="comment">/* 邻接点域，存储该顶点对应的下标 */</span></span><br><span class="line">  EdgeType weight;                <span class="comment">/* 用于存储权值，对于非网图可以不需要 */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span>          <span class="comment">/* 链域，指向下一个邻接点 */</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>&#123;</span>        <span class="comment">/* 顶点表节点 */</span></span><br><span class="line">  VertexType data;                <span class="comment">/* 顶点域 */</span></span><br><span class="line">  EdgeNode *firstedge;            <span class="comment">/* 边表头指针 */</span></span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  AdjList adjList;</span><br><span class="line">  <span class="keyword">int</span> numVertexes, numEdges;      <span class="comment">/* 图中当前顶点数和边数 */</span></span><br><span class="line">&#125;GraphAdjList;</span><br></pre></td></tr></table></figure><p>无向图的邻接表创建代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 建立图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateALGraph</span><span class="params">(GraphAdjList *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  EdgeNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数： \n"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(&amp;G-&gt;adjList[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;adjList[i].firstedge=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;numEdges; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入边(vi, vj)上的顶点序号：\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;next=G-&gt;adjList[i].firstedge;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;adjList[i].firstedge=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;next=G-&gt;adjList[j].firstedge;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;adjList[j].firstedge=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用头插法来建立两顶点间关系，对于n个顶点e条边来说，很容易得出算法的时间复杂度是<script type="math/tex">O(n+e)</script>。</p><h2 id="2-3-图的基本操作"><a href="#2-3-图的基本操作" class="headerlink" title="2.3 图的基本操作"></a>2.3 图的基本操作</h2><ul><li>为实现遍历必须设置访问标志数组，以防止走回路或未访问到。</li><li>图的遍历规律有两种：深度优先遍历DFS和广度优先遍历BFS。可用邻接矩阵和邻接表实现。</li><li>DFS算法是以递归技术为支持，BFS算法是以队列技术为支持。</li></ul><h2 id="2-4-图的应用"><a href="#2-4-图的应用" class="headerlink" title="2.4 图的应用"></a>2.4 图的应用</h2><p>图的遍历算法是图应用的重要基础。<br>求解生成树、最小生成树、连通分量、拓扑排序、关键路径、单源最短路径及所有顶点之间的最短路径的重要算法应用。</p><h1 id="3-建立图的邻接矩阵存储"><a href="#3-建立图的邻接矩阵存储" class="headerlink" title="3.建立图的邻接矩阵存储"></a>3.建立图的邻接矩阵存储</h1><h2 id="3-1-有向图，无向图，有向网，无向网"><a href="#3-1-有向图，无向图，有向网，无向网" class="headerlink" title="3.1 有向图，无向图，有向网，无向网"></a>3.1 有向图，无向图，有向网，无向网</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERtEX_NUM 20                   <span class="comment">//顶点的最大个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRType int                          <span class="comment">//表示顶点之间的关系的变量类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InfoType char                       <span class="comment">//存储弧或者边额外信息的指针变量类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VertexType int                      <span class="comment">//图中顶点的数据类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;DG=<span class="number">1</span>,DN=<span class="number">2</span>,UDG=<span class="number">3</span>,UDN=<span class="number">4</span>&#125;GraphKind;       <span class="comment">//枚举图的 4 种类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VRType adj;                         <span class="comment">//对于无权图，用 1 或 0 表示是否相邻；对于带权图，直接为权值。</span></span><br><span class="line">    InfoType *info;                     <span class="comment">//弧或边额外含有的信息指针</span></span><br><span class="line">&#125;ArcCell, AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VertexType vexs[MAX_VERtEX_NUM];        <span class="comment">//存储图中顶点数据</span></span><br><span class="line">    AdjMatrix arcs;                         <span class="comment">//二维数组，记录顶点之间的关系</span></span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;                      <span class="comment">//记录图的顶点数和弧（边）数</span></span><br><span class="line">    GraphKind kind;                         <span class="comment">//记录图的种类</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据顶点本身数据，判断出顶点在二维数组中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph * G,VertexType v)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//遍历一维数组，找到变量v</span></span><br><span class="line">  <span class="keyword">for</span> (; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (G-&gt;vexs[i]==v) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果找不到，输出提示语句，返回-1</span></span><br><span class="line">  <span class="keyword">if</span> (i&gt;G-&gt;vexnum) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"no such vertex.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造有向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDG</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="comment">//输入图含有的顶点数和弧的个数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="comment">//依次输入顶点本身的数据</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//初始化二维矩阵，全部归0，指针指向NULL</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">        G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在二维数组中添加弧的数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="comment">//输入弧头和弧尾</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter arc head and arc tail: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">    <span class="comment">//确定顶点位置</span></span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="comment">//排除错误数据</span></span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将正确的弧的数据加入二维数组</span></span><br><span class="line">    G-&gt;arcs[n][m].adj=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造无向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDN</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">        G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the subscript i and j on the side (vi, vj):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1,&amp;v2);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=<span class="number">1</span>;</span><br><span class="line">    G-&gt;arcs[m][n].adj=<span class="number">1</span>;      <span class="comment">//无向图的二阶矩阵沿主对角线对称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造有向网，和有向图不同的是二阶矩阵中存储的是权值。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">      G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">      G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v1,&amp;v2,&amp;w);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造无向网。和无向图唯一的区别就是二阶矩阵中存储的是权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDN</span><span class="params">(MGraph* G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">      G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">      G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the two vertices of the edge and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v1,&amp;v2,&amp;w);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=w;</span><br><span class="line">    G-&gt;arcs[m][n].adj=w;      <span class="comment">//矩阵对称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-邻接矩阵的深度和广度优先搜索"><a href="#4-邻接矩阵的深度和广度优先搜索" class="headerlink" title="4.邻接矩阵的深度和广度优先搜索"></a>4.邻接矩阵的深度和广度优先搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">写出上述建立图的深度和广度优先搜索序列。</span><br><span class="line">         示例</span><br><span class="line">          v1</span><br><span class="line">        /    \</span><br><span class="line">       v2     v3</span><br><span class="line">      /  \   /</span><br><span class="line">    v4 -- v5</span><br><span class="line">程序运行将以这个图作为输入。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>深度优先搜索</p><p>深度优先搜索的过程类似于树的先序遍历</p><p>所谓深度优先搜索，是从图中的一个顶点出发，每次遍历当前访问顶点的临界点，一直到访问的顶点没有未被访问过的临界点为止。然后采用依次回退的方式，查看来的路上每一个顶点是否有其它未被访问的临界点。访问完成后，判断图中的顶点是否已经全部遍历完成，如果没有，以未访问的顶点为起始点，重复上述过程。</p><p>深度优先搜索是一个不断<a href="http://c.biancheng.net/view/3400.html">回溯</a>的过程。</p><p>广度优先搜索</p><p>广度优先搜索类似于树的层次遍历</p><p>从图中的某一顶点出发，遍历每一个顶点时，依次遍历其所有的邻接点，然后再从这些邻接点出发，同样依次访问它们的邻接点。按照此过程，直到图中所有被访问过的顶点的邻接点都被访问到。</p><p>最后还需要做的操作就是查看图中是否存在尚未被访问的顶点，若有，则以该顶点为起始点，重复上述遍历的过程。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;<span class="literal">false</span>,<span class="literal">true</span>&#125;<span class="keyword">bool</span>;               <span class="comment">//定义bool型常量</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAX_VERtEX_NUM];               <span class="comment">//设置全局数组，记录标记顶点是否被访问过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span>                       <span class="comment">//广度优先搜索的实现需要借助队列</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FirstAdjVex</span><span class="params">(MGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  <span class="comment">//查找与数组下标为v的顶点之间有边的顶点，返回它在数组中的下标</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( G.arcs[v][i].adj )&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NextAdjVex</span><span class="params">(MGraph G,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">  <span class="comment">//从前一个访问位置w的下一个位置开始，查找之间有边的顶点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = w+<span class="number">1</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(G.arcs[v][i].adj)&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visitVex</span><span class="params">(MGraph G, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,G.vexs[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(MGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  visited[v] = <span class="literal">true</span>;<span class="comment">//标记为true</span></span><br><span class="line">  visitVex( G,  v); <span class="comment">//访问第v 个顶点</span></span><br><span class="line">  <span class="comment">//从该顶点的第一个边开始，一直到最后一个边，对处于边另一端的顶点调用DFS函数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> w = FirstAdjVex(G,v); w&gt;=<span class="number">0</span>; w = NextAdjVex(G,v,w))&#123;</span><br><span class="line">    <span class="comment">//如果该顶点的标记位false，证明未被访问，调用深度优先搜索函数</span></span><br><span class="line">    <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">      DFS(G,w);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(MGraph G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对于每个标记为false的顶点调用深度优先搜索函数</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="comment">//如果该顶点的标记位为false，则调用深度优先搜索函数</span></span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      DFS( G, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 队列操作 */</span></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue ** Q)</span></span>&#123;</span><br><span class="line">  (*Q)=(Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">  (*Q)-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顶点元素v进队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Queue **Q,VertexType v)</span></span>&#123;</span><br><span class="line">  Queue * element=(Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">  element-&gt;data=v;</span><br><span class="line">  element-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  Queue * temp=(*Q);</span><br><span class="line">  <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    temp=temp-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  temp-&gt;next=element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头元素出队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(Queue **Q,<span class="keyword">int</span> *u)</span></span>&#123;</span><br><span class="line">  (*u)=(*Q)-&gt;next-&gt;data;</span><br><span class="line">  (*Q)-&gt;next=(*Q)-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Q-&gt;next==<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(MGraph G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对于每个标记为false的顶点调用深度优先搜索函数</span></span><br><span class="line">  Queue * Q;</span><br><span class="line">  InitQueue(&amp;Q);</span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      visited[v]=<span class="literal">true</span>;</span><br><span class="line">      visitVex(G, v);</span><br><span class="line">      EnQueue(&amp;Q, G.vexs[v]);</span><br><span class="line">      <span class="keyword">while</span> (!QueueEmpty(Q)) &#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        DeQueue(&amp;Q, &amp;u);</span><br><span class="line">        u=LocateVex(&amp;G, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w=FirstAdjVex(G, u); w&gt;=<span class="number">0</span>; w=NextAdjVex(G, u, w)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">            visited[w]=<span class="literal">true</span>;</span><br><span class="line">            visitVex(G, w);</span><br><span class="line">            EnQueue(&amp;Q, G.vexs[w]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p>以下演示的是图采用邻接矩阵存储结构的有向图和无向图的建立。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS12/practice12_task1.PNG" alt="DS"></p><hr><h1 id="5-建立图的邻接表存储"><a href="#5-建立图的邻接表存储" class="headerlink" title="5.建立图的邻接表存储"></a>5.建立图的邻接表存储</h1><h2 id="5-1-有向图，无向图，有向网，无向网"><a href="#5-1-有向图，无向图，有向网，无向网" class="headerlink" title="5.1 有向图，无向图，有向网，无向网"></a>5.1 有向图，无向图，有向网，无向网</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_VERTEX_NUM 20<span class="comment">//最大顶点个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  VertexType int<span class="comment">//顶点数据的类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  InfoType int<span class="comment">//图中弧或者边包含的信息的类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;DG=<span class="number">1</span>,DN=<span class="number">2</span>,UDG=<span class="number">3</span>,UDN=<span class="number">4</span>&#125;GraphKind;       <span class="comment">//枚举图的 4 种类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;<span class="literal">false</span>,<span class="literal">true</span>&#125;<span class="keyword">bool</span>;               <span class="comment">//定义bool型常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> adjvex;<span class="comment">//邻接点在数组中的位置下标</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span><span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">  <span class="keyword">int</span> weight;  <span class="comment">//权值</span></span><br><span class="line">  InfoType * info;<span class="comment">//信息域</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">  VertexType data;<span class="comment">//顶点的数据域</span></span><br><span class="line">  ArcNode * firstarc;<span class="comment">//指向邻接点的指针</span></span><br><span class="line">&#125;VNode, AdjList[MAX_VERTEX_NUM];<span class="comment">//存储各链表头结点的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  AdjList vertices;<span class="comment">//图中顶点的数组</span></span><br><span class="line">  <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//记录图中顶点数和边或弧数</span></span><br><span class="line">  GraphKind kind;<span class="comment">//记录图的种类</span></span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立有向图图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDGALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the vertex number on the edge (vi, vj): "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立无向图图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDNALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the vertex number on the edge (vi, vj): "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[j].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[j].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立有向网的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDGALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立无向网的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDNALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[j].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[j].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-邻接表的广度和深度优先搜索"><a href="#6-邻接表的广度和深度优先搜索" class="headerlink" title="6.邻接表的广度和深度优先搜索"></a>6.邻接表的广度和深度优先搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">写出上述建立图的深度和广度优先搜索序列。</span><br><span class="line">         示例</span><br><span class="line">          v0</span><br><span class="line">        /    \</span><br><span class="line">       v1 --  v2</span><br><span class="line">程序运行将以这个图作为输入。</span><br></pre></td></tr></table></figure><h2 id="6-1-源代码"><a href="#6-1-源代码" class="headerlink" title="6.1 源代码"></a>6.1 源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(ALGraph *g,<span class="keyword">int</span> i,<span class="keyword">int</span> *visited)</span></span>&#123;</span><br><span class="line">  ArcNode *p;</span><br><span class="line">  visited[i]=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[i].data);</span><br><span class="line">  p=g-&gt;vertices[i].firstarc;</span><br><span class="line">  <span class="keyword">while</span>( p )&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[p-&gt;adjvex])&#123;</span><br><span class="line">      DFS(g,p-&gt;adjvex,visited);</span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraDFS</span><span class="params">(ALGraph *g)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      DFS(g,i,visited);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraBFS</span><span class="params">(ALGraph *g)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line">  Queue *q;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g-&gt;vexnum; i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  InitQueue(&amp;q);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[i].data);</span><br><span class="line">      visited[i]=<span class="number">1</span>;</span><br><span class="line">      EnQueue(&amp;q, i);</span><br><span class="line">      <span class="keyword">while</span>(!QueueEmpty(q))&#123;</span><br><span class="line">        DeQueue(&amp;q,&amp;i);</span><br><span class="line">        ArcNode *p = g-&gt;vertices[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span>( p )&#123;</span><br><span class="line">          <span class="keyword">if</span>(!visited[p-&gt;adjvex])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[p-&gt;adjvex].data);</span><br><span class="line">            visited[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">            EnQueue(&amp;q,p-&gt;adjvex);</span><br><span class="line">          &#125;</span><br><span class="line">          p=p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-运行截图"><a href="#6-2-运行截图" class="headerlink" title="6.2 运行截图"></a>6.2 运行截图</h2><p>以下演示的是图采用邻接表存储结构的无向图和有向网的建立。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS12/practice12_task2.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十一 树</title>
    <link href="https://mysticalguest.github.io/2020/07/04/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%80/"/>
    <id>https://mysticalguest.github.io/2020/07/04/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%80/</id>
    <published>2020-07-04T12:39:12.883Z</published>
    <updated>2020-07-21T11:37:42.190Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><p><a href="http://c.biancheng.net/">C语言中文网</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建立树的孩子兄弟表示法存储</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p><strong>孩子兄弟表示法：</strong>任意一棵树，它的节点的第一个孩子如果存在就是唯一的，它的右兄弟存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟</p><p>给定一颗树，可以找到唯一的一颗二叉树与之对应，因此，可以用一颗二叉树来表示一颗树的结构。如图：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">              A                                                                  A</span><br><span class="line">                                                                              &#x2F;</span><br><span class="line">​       &#x2F;      |     \                                                    B</span><br><span class="line">                                                                     &#x2F;        \</span><br><span class="line">​    B        C       D                                           E          C</span><br><span class="line">                                                                     \            \</span><br><span class="line">  &#x2F;    \               |                                             F           D</span><br><span class="line">                                                                                  &#x2F;</span><br><span class="line">E       F             G                                                       G</span><br><span class="line">                                                                              &#x2F;</span><br><span class="line">​                  &#x2F;    |    \                                              H</span><br><span class="line">                                                                              \</span><br><span class="line">​                H     I       J                                               I</span><br><span class="line">                                                                                  \</span><br><span class="line">​                                                                                    J</span><br></pre></td></tr></table></figure><blockquote><p>和二叉树建树的方法相同，递归的思想，先建立左子树，左子树建立完（即遇到结束标志字符’#’），退层建立右子树。</p><p>所以按照将树转化为二叉树，然后输入先序序列来建这棵树。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg. ABE#F##C#DGH#I#J#####</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatCSTree</span><span class="params">(CSTree *t)</span></span>&#123;</span><br><span class="line">  ElemType ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">'#'</span>) &#123;</span><br><span class="line">    (*t)=<span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    (*t)=(CSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">    (*t)-&gt;data=ch;</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;firstchild));</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;nextsibling));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在树的孩子兄弟表示法下，求取树T的高度。</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>既然我们可以将树转化为孩子兄弟表示法，这种方法用二叉链表的形式实现，那么我们考虑用求二叉树深度的方法来求树的深度。</p><p>区别在于，孩子兄弟表示法中每个节点的右子树是这个节点的兄弟，在原树中并不占深度，所以只需修改算法的求右子树高度的部分即可。</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg. ABE#F##C#DGH#I#J#####</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = depth(t-&gt;firstchild)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> nd = depth(t-&gt;nextsibling);</span><br><span class="line">    <span class="keyword">return</span> fd&gt;nd? fd:nd;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树采用孩子兄弟表示法存储。</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">fch</td><td style="text-align:center">data</td><td style="text-align:center">nsib</td><td style="text-align:center">level</td></tr></tbody></table></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">编写算法，将树中所有结点层次值置入每个结点的level域，并要求由根开始逐层输出树中的各条边，边的输出格式为（ki,kj）</span><br><span class="line">        示例</span><br><span class="line">         A           转化为                A</span><br><span class="line">      &#x2F;  |  \      孩子兄弟表示           &#x2F;</span><br><span class="line">     B   C   D                        B</span><br><span class="line">    &#x2F; \  |                          &#x2F;   \</span><br><span class="line">   E   F G                         E      C</span><br><span class="line">                                    \    &#x2F;  \</span><br><span class="line">                                     F  G    D</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>要输出树中各边，存在边，即两节点在树中是父子关系</p><p>在孩子兄弟表示法中，就是与这个节点的左孩子节点，和左孩子节点的所有右孩子节点有边，</p><p>所以一个递归打印当前节点和左孩子构成的边，另一个递归打印当前节点与其左孩子的所有右孩子节点所构成的边。</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">  <span class="keyword">int</span> level;</span><br><span class="line">&#125;CSNode, *CSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg. ABE#F##CG##D###</span></span><br><span class="line">CSTree T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(CSTree t, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;data==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;firstchild, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;firstchild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;nextsibling, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;nextsibling, x);</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatCSTree</span><span class="params">(CSTree *t)</span></span>&#123;</span><br><span class="line">  ElemType ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">'#'</span>) &#123;</span><br><span class="line">    (*t)=<span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    (*t)=(CSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">    (*t)-&gt;data=ch;</span><br><span class="line">    (*t)-&gt;level=layer(T, ch);</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;firstchild));</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;nextsibling));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">borderNextSibling</span><span class="params">(CSTree t, CSTree nt)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c%c, "</span>, t-&gt;data, nt-&gt;data);</span><br><span class="line">  <span class="keyword">if</span>(nt-&gt;nextsibling)</span><br><span class="line">    borderNextSibling(t, nt-&gt;nextsibling);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">border</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;firstchild)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c%c, "</span>, t-&gt;data, t-&gt;firstchild-&gt;data);</span><br><span class="line">      <span class="keyword">if</span>(t-&gt;firstchild-&gt;nextsibling)</span><br><span class="line">        borderNextSibling(t, t-&gt;firstchild-&gt;nextsibling);</span><br><span class="line">    &#125;</span><br><span class="line">    border(t-&gt;firstchild);</span><br><span class="line">    border(t-&gt;nextsibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task3.PNG" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">已知树采用孩子兄弟表示法表示试编写算法按如下的凹入方式打印树。</span><br><span class="line">        示例</span><br><span class="line">         A                     A</span><br><span class="line">      /  |  \                   B</span><br><span class="line">     B   C   D                   E  </span><br><span class="line">    / \  |                       F</span><br><span class="line">   E   F G                      C</span><br><span class="line">                                 G</span><br><span class="line">                                D</span><br><span class="line">利用树的先序遍历完成；</span><br><span class="line">细化访问visit（）操作：先打空格，在输出结点；打印输出的空格数目和结点所在的层次号有关。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>首先不考虑前面的每个元素前面的空格，得到打印序列是ABEFCGD，发现这是孩子兄弟表示法的前序遍历结果，然后利用上面第二题的算法获得每个元素的层号，然后打印空格，就可以实现凹入方式打印这棵树了。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CSTree T;  <span class="comment">// 全局变量</span></span><br><span class="line"><span class="comment">// eg. ABE#F##CG##D###</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(CSTree t, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;data==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;firstchild, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;firstchild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;nextsibling, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;nextsibling, x);</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;layer(T, t-&gt;data); i++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, t-&gt;data);</span><br><span class="line">    visit(t-&gt;firstchild);</span><br><span class="line">    visit(t-&gt;nextsibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task4.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/&quot;&gt;C语言中文网&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>高级操作系统</title>
    <link href="https://mysticalguest.github.io/2020/07/01/OS/OS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://mysticalguest.github.io/2020/07/01/OS/OS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-01T13:56:54.676Z</published>
    <updated>2020-07-21T11:37:42.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>文件系统</em></strong></p><p>课堂笔记</p><a id="more"></a><h1 id="1-文件与文件系统"><a href="#1-文件与文件系统" class="headerlink" title="1.文件与文件系统"></a>1.文件与文件系统</h1><p><strong>文件</strong>：具有符号名的一组相关元素的集合。</p><p>通常，文件由<strong>记录</strong>组成，记录用于描述对象的属性，记录又可包含若干个<em>数据项</em>。</p><p><strong>文件系统</strong>是OS中管理文件的子系统，它实现文件的<strong>存储、检索、更新、共享和保护</strong>等，并为用户提供方便有效的文件使用和操作方法。</p><h2 id="1-1-文件系统的功能"><a href="#1-1-文件系统的功能" class="headerlink" title="1.1 文件系统的功能"></a>1.1 文件系统的功能</h2><ul><li><p>文件的按名存取</p></li><li><p>文件目录建立和维护</p></li></ul><p>实现逻辑文件到物理文件的转换</p><p>文件存储空间的分配和管理</p><p>提供合适的文件存取方法</p><p>实现文件的共享、保护和保密</p><p>提供一组可供用户使用的文件操作</p><h2 id="1-2-文件系统的优点"><a href="#1-2-文件系统的优点" class="headerlink" title="1.2 文件系统的优点"></a>1.2 文件系统的优点</h2><p><strong>使用方便</strong>：由于文件系统实现了案名存取，因而用户无需关心文件存放的物理位置<br><strong>数据安全</strong>：文件系统可以提供各种保护措施，防止用户对文件有意或无意的破坏<br><strong>接口统一</strong>：用户可以使用统一的接口来操作各种介质上的文件</p><h2 id="1-3-文件系统的分层结构"><a href="#1-3-文件系统的分层结构" class="headerlink" title="1.3 文件系统的分层结构"></a>1.3 文件系统的分层结构</h2><ul><li><p>文件管理—实现文件的逻辑结构，为用户提供各种文件系统调用，及种文件系统调用，及文件访问权限的设置等工作；</p></li><li><p>目录管理—负责查找文件描述符，进而找到需要访问的文件，及进行访问权限检查等工作;</p></li><li><p>外存映射管理—将文件的逻辑地址转换成磁盘的物理地址，即由逻辑块号找到柱面号、磁道号和扇区号，具体的数据传输操作由设备管理实现。</p></li></ul><h2 id="1-4-文件的存取"><a href="#1-4-文件的存取" class="headerlink" title="1.4 文件的存取"></a>1.4 文件的存取</h2><p>存取方法是操作系统为用户程序提供的使用文件的技术和手段。</p><p>存取方法（决定和影响着文件的物理结构）</p><p>​    -顺序存取：若当前存取的记录是Ri，则下次必存取Ri+1</p><p>​    -直接（随机）存取</p><p>​    -索引存取</p><p>​    -按（键）值存取</p><h2 id="1-5-文件的操作"><a href="#1-5-文件的操作" class="headerlink" title="1.5 文件的操作"></a>1.5 文件的操作</h2><p>对记录的操作：检索、插入、删除、修改</p><p>对文件的操作：创建文件、删除文件、打开文件、关闭文件、读文件、写文件</p><h1 id="2-文件目录与文件检索"><a href="#2-文件目录与文件检索" class="headerlink" title="2 文件目录与文件检索"></a>2 文件目录与文件检索</h1><ul><li><p>通过文件目录实现文件的“按名存取”；</p></li><li><p>文件系统基本功能之一是负责文件目录的建立、维护和检索。</p></li><li><p>存放管理文件所需信息的数据结构即<code>文件目录</code>，一个文件的文件目录即其<code>目录项</code>又称<code>文件控制块FCB</code>（File Control Block）：</p><p>-文件和文件控制块是一一对应的；</p><p>-FCB通常包括：文件名、用户名、类型、文件结构、建立日期、存取权限、物理地址等</p></li></ul><h2 id="2-1-文件目录与目录项"><a href="#2-1-文件目录与目录项" class="headerlink" title="2.1 文件目录与目录项"></a>2.1 文件目录与目录项</h2><p><strong>目录文件</strong>：把FCB集中起来，组成文件，保存于外存，这个文件称作目录文件</p><p><strong>文件检索</strong>：给定一个文件名，查找相应的目录文件找到该文件所对应的目录项</p><h3 id="2-1-1-单级目录"><a href="#2-1-1-单级目录" class="headerlink" title="2.1.1 单级目录"></a>2.1.1 单级目录</h3><p>整个系统只有一张目录表，所有文件均登记在该表中，每个文件占有一项。</p><p>目录表存放在存储设备的固定地方，系统启动时调用内存。</p><p>单级目录的优点是非常简单，但：</p><p>​    -不允许重名</p><p>​    -查找速度慢</p><h3 id="2-1-2-二级目录"><a href="#2-1-2-二级目录" class="headerlink" title="2.1.2 二级目录"></a>2.1.2 二级目录</h3><ul><li><p>系统设置唯一一个主文件目录MFD（Master File Directiry）。</p></li><li><p>每个用户设立一个用户文件目录UFD（User）。UFD由该用户所有文件的FCB构成。</p></li><li><p>每个UFD在MFD中占有一个目录项，其中包括用户名和指向该用户文件的指针。</p></li><li><p>优点：</p></li></ul><p>​    -提高了查找速度<br>​    -解决了重名问题</p><h3 id="2-1-3-多级目录"><a href="#2-1-3-多级目录" class="headerlink" title="2.1.3 多级目录"></a>2.1.3 多级目录</h3><ul><li>树形目录结构，最高层是根目录，最低层是数据文件，其他是目录文件。</li></ul><h3 id="2-1-4-层级目录结构"><a href="#2-1-4-层级目录结构" class="headerlink" title="2.1.4 层级目录结构"></a>2.1.4 层级目录结构</h3><ul><li><p>每一级目录即可以包含下一级目录(即目录文件的目录项)，也可以包含具体文件(即具体文件的目录项)，形成层次关系。</p></li><li><p>多级目录结构采用树形结构，是一棵倒向有根树，树根是根目录；从根向下，每个树枝是一个子目录；而树叶是文件。</p></li><li><p>树型多级目录优点：组织灵活、便于命名、检索高效。</p></li></ul><h3 id="2-1-5-UNIX-Linux目录项"><a href="#2-1-5-UNIX-Linux目录项" class="headerlink" title="2.1.5 UNIX/Linux目录项"></a>2.1.5 UNIX/Linux目录项</h3><p>文件名            inode节点号<br>14字节            2字节<br>0号目录项和索引节点</p><p>思考：UNIX使用i-node的好处是什么?</p><p>➢因为按文件名检索目录文件时，只用到了文件名。当找到该文件名时，才需要它的其它描述信息。所以在把存放该目录文件的盘块从外存调入内存进行比较时，应使一个盘块中包含尽量多的文件名，以<code>减少访问磁盘次数，加快文件检索速度</code>。</p><p>例:设物理块大小为512B,某目录下有128个文件。</p><ul><li><p>原来的FCB占64B，则每物理块能容纳<script type="math/tex">512/64=8</script>个FCB，则该目录文件需占<script type="math/tex">128/8= 16</script>块，查找一个文件的平均访盘次数为:<script type="math/tex">(1+16) /2= 8.5</script>次。</p></li><li><p>采用i-node后:文件名部分有16B，i-node部 分有64B，每物理块能容纳<script type="math/tex">512/16=32</script>个文件名部分或<script type="math/tex">512/64=8</script>个i-node，则该目录的文件名部分需占<script type="math/tex">128/32=4</script>块，i-node部分需占<script type="math/tex">128/8=16</script>块。查找一个文件的平均访盘次数为:<script type="math/tex">(1+4)/2+1=3.5</script>次。</p></li></ul><h1 id="3-文件逻辑结构与数据存储"><a href="#3-文件逻辑结构与数据存储" class="headerlink" title="3 文件逻辑结构与数据存储"></a>3 文件逻辑结构与数据存储</h1><ul><li><p>文件的逻辑结构：用户所看到的文件结构</p><p>-记录式文件，文件由若干记录所构成</p><p>-流式文件，文件由若干字符（字节）序列构成</p></li><li><p>文件的物理结构：文件在外存的存放形式</p><p>-顺序文件:逻辑文件中的信息顺序地存放在相邻的物理块中</p><p>-链接文件:文件中的信息不是顺序排列的，它们可以存放在不相邻的物理块中，通过指针连接成链表索引文件:为每一文件建立一个索引表，用以实现逻辑记录和物理块号之间的映射</p></li></ul><h2 id="3-1-文件结构与文件存储"><a href="#3-1-文件结构与文件存储" class="headerlink" title="3.1 文件结构与文件存储"></a>3.1 文件结构与文件存储</h2><p>物理块是存储介质上连续信息所组成的一个区域。</p><p>块是主存储器和辅助存储设备信息交换的物理单位，每次交换一块或整块数。</p><p>决定块的大小要考虑到用户使用方式、数据传输效率和存储设备类型等多种因素。</p><p>不同类型的存储介质，块的大小常常各不相同；同一类型的存储介质，块的大小也可以不同。</p><p>间隙是块之间不记录用户代码信息的空闲区城。</p><h2 id="3-2-文件的逻辑结构"><a href="#3-2-文件的逻辑结构" class="headerlink" title="3.2 文件的逻辑结构"></a>3.2 文件的逻辑结构</h2><p>文件的逻辑结构是用户所见的信息组织方式。</p><p>文件的逻辑结构分为：流式文件，记录式文件。</p><p>流式文件指文件内的数据不再组成记录，只是依次的一串信息(字节)集合。</p><p>流式文件常按字节数来读取所需信息，也可用插入特殊字符作为分界。</p><p>记录式文件由逻辑记录组成，逻辑记录具有特定的逻辑含意。</p><h2 id="3-3-记录组块和分解"><a href="#3-3-记录组块和分解" class="headerlink" title="3.3 记录组块和分解"></a>3.3 记录组块和分解</h2><p>逻辑记录和块的关系：</p><ul><li><p>逻辑记录是按信息的逻辑含义所划分的单位，块是存储介质上连续的存储区域。</p></li><li><p>逻辑记录存放到文件存储器上时，一个记录可能占用一块或多块，也可能多个存放到一个物理块中。</p></li></ul><p>记录组块—将多个记录置于一个存储块中。</p><p>记录分解—从存储块中分解出逻辑记录。</p><p>块因子—一个存储块中包含多少个记录。</p><h2 id="3-4-记录组块"><a href="#3-4-记录组块" class="headerlink" title="3.4 记录组块"></a>3.4 记录组块</h2><h3 id="3-4-1-需考虑的问题："><a href="#3-4-1-需考虑的问题：" class="headerlink" title="3.4.1 需考虑的问题："></a>3.4.1 需考虑的问题：</h3><ul><li>块的长度是固定的还是可变的?</li></ul><p>​    -大多数系统中，块的固定长度的的。</p><ul><li>与记录的平均大小相比，块的相对大小是多少？</li></ul><p>​    -综合考虑顺序访问的频率和访问的局部性潜能，倾向于用大的块，以减少I/O传送时间。</p><h3 id="3-4-2-记录组块的方法"><a href="#3-4-2-记录组块的方法" class="headerlink" title="3.4.2 记录组块的方法"></a>3.4.2 记录组块的方法</h3><p>固定组块</p><p>可变长度跨越式组块</p><p>可变长度非跨越式组块</p><h1 id="4-文件存储器管理"><a href="#4-文件存储器管理" class="headerlink" title="4.文件存储器管理"></a>4.文件存储器管理</h1><h2 id="4-1-空闲盘块管理"><a href="#4-1-空闲盘块管理" class="headerlink" title="4.1 空闲盘块管理"></a>4.1 空闲盘块管理</h2><p>-》磁盘分配表</p><p>-》常用的空闲空间管理技术</p><p>​    -位示图</p><p>​    -空闲块列表</p><p>​    -空闲区链表</p><p>​    -空闲块索引</p><p>-》文件卷</p><p>​    -一组在辅助存储上可寻址的扇区的集合，操作系统或应用程序用卷来存储数据。一个卷中的扇区在物理上并不需要是连续的，只需要对操作系统或应用程序来讲是连续的。一个卷可能是更小的卷合并或组合后的结果。</p><h2 id="4-2文件存储空间管理"><a href="#4-2文件存储空间管理" class="headerlink" title="4.2文件存储空间管理"></a>4.2文件存储空间管理</h2><h3 id="4-2-1-预分配与动态分配"><a href="#4-2-1-预分配与动态分配" class="headerlink" title="4.2.1 预分配与动态分配"></a>4.2.1 预分配与动态分配</h3><ul><li>预分配策略要求在发出创建文件的请求时，声明该文件的最大大小。</li></ul><p>​    -若不能可靠地估计文件可能的最大大小，通常会多估计一些，以避免分配的空间不够。—浪费</p><ul><li>动态分配只有在需要时才给文件分配空间。</li></ul><p>​    -当创建一个新文件时，是否一次性地分配所需要的最大空间？</p><ul><li>预分配与动态分配</li></ul><p>​    -在分配时，采用什么分配策略?</p><p>​        a.可变大小的连续分区(类似分区式)</p><p>​        b.大小相等但不连续的块(类似页式)</p><p>​        c.采用什么数据结构记录分配给文件的空间?—文件分配表</p><h3 id="4-2-2-分配策略"><a href="#4-2-2-分配策略" class="headerlink" title="4.2.2 分配策略"></a>4.2.2 分配策略</h3><ul><li>文件分配时，需要综合考虑单个文件的效率和整个系统的效率</li></ul><p>​    -连续空间可以提高磁盘访问性能；</p><p>​    -使用可变大小的分区，可以减少由于超额分配而产生的未使用存储空间的派费；</p><p>​    -使用固定大小的分区可以简化空间的再分配；</p><p>​    -数目较多的小分区会增加用于管理分配信息表的大小。</p><ul><li>综合考虑的两种选择:</li></ul><p>​    -可变大小的连续分区</p><p>​        a.大小可变避免了浪費，文件分配表比较小</p><p>​        b.空间很难再次利用</p><p>​    -大小相等但不连续的块</p><p>​        a.小的固定分区提供了更多的灵活性</p><p>​        b.可能需要较大的文件分配表或更复杂的结构</p><h1 id="5-文件的物理结构"><a href="#5-文件的物理结构" class="headerlink" title="5.文件的物理结构"></a>5.文件的物理结构</h1><p>文件的物理结构是指文件在物理存储空间中存放(分配)的形式，亦称为文件的物理组织。</p><p>文件的物理结构涉及：块的划分、记录的排列索引的组织、信息的搜索，其优劣直接影响文件系统的性能。</p><p>文件的物理结构：顺序文件、链式文件、索引文件、直接文件</p><h2 id="5-1-顺序文件（连续文件）"><a href="#5-1-顺序文件（连续文件）" class="headerlink" title="5.1 顺序文件（连续文件）"></a>5.1 顺序文件（连续文件）</h2><ul><li><p>将一个文件存放到文件存储器连续的物理块中，便形成了顺序文件。</p></li><li><p>顺序文件中逻辑记录和物理记录顺序完全一致。通常记录按次序被读出或修改。</p></li><li><p>顺序文件的优点/缺点：读写高效/改变大小困难，磁盘碎片问题。File Allocation Table</p></li></ul><h2 id="5-2-链式文件（串联文件）"><a href="#5-2-链式文件（串联文件）" class="headerlink" title="5.2 链式文件（串联文件）"></a>5.2 链式文件（串联文件）</h2><ul><li><p>链式文件通过链指针将存放文件内容的各物理块联系起来</p></li><li><p>连接结构的优/缺点：文件读写效率低/易于扩展，不存在磁盘碎片问题</p></li></ul><h2 id="5-3-直接文件（哈希文件）"><a href="#5-3-直接文件（哈希文件）" class="headerlink" title="5.3 直接文件（哈希文件）"></a>5.3 直接文件（哈希文件）</h2><ul><li><p>通过hash函数在记录的关键字与其存储地址之间建立关系，据此实现存取即称为直接文件。</p></li><li><p>文件控制块</p></li></ul><h2 id="5-4-索引文件（链式文件的高效实现，现在几乎都采用）"><a href="#5-4-索引文件（链式文件的高效实现，现在几乎都采用）" class="headerlink" title="5.4 索引文件（链式文件的高效实现，现在几乎都采用）"></a>5.4 索引文件（链式文件的高效实现，现在几乎都采用）</h2><p>索引结构是实现非连续存储的另一种方法，适用于数据记录保存有随机存取存储设备上的文件。</p><p>使用索引表，其中登记了存放文件的物理块。</p><p>如果块长4KB (即索引块和数据块长4K)，每个指针(盘块号) 4B，则采用这种索引分配时，允许的文件最大尺寸是多少?</p><p>直接地址: <script type="math/tex">10 * 4KB= 40KB</script></p><p>一级索引: <script type="math/tex">4KB * (4KB/4B) = 4MB</script></p><p>二级索引: <script type="math/tex">4KB * (4KB/4B)^2= 4GB</script></p><p>三级索引: <script type="math/tex">4KB * (4KB/4B)^3 = 4TB</script></p><p>合计大小: <script type="math/tex">40KB+4MB+4GB+4TB</script></p><h1 id="6-文件共享与保护"><a href="#6-文件共享与保护" class="headerlink" title="6.文件共享与保护"></a>6.文件共享与保护</h1><ul><li>访问权限</li></ul><p>​    -无</p><p>​    -知道</p><p>​    -执行</p><p>​    -读</p><p>​    -追加</p><p>​    -更新</p><p>​    -改变保护</p><p>​    -删除</p><ul><li>同时访问</li></ul><p>​    -加锁</p><p>​    -互斥和死锁问题</p><h2 id="6-1-文件共享"><a href="#6-1-文件共享" class="headerlink" title="6.1 文件共享"></a>6.1 文件共享</h2><h3 id="6-1-1-基于目录指针实现文件共享"><a href="#6-1-1-基于目录指针实现文件共享" class="headerlink" title="6.1.1 基于目录指针实现文件共享"></a>6.1.1 基于目录指针实现文件共享</h3><p>允许一个文件可以有多个父目录，即有多个属于不同用户的目录，同时指向同一个文件，即可实现文件共享(但这会破坏树的特性一多个父节点! )</p><h3 id="6-1-2-利用索引节点"><a href="#6-1-2-利用索引节点" class="headerlink" title="6.1.2 利用索引节点"></a>6.1.2 利用索引节点</h3><p>利用索引结点，存放文件的物理地址、文件属性和文件共享与保护相关信息，而不同用户在其文件目录中设置共性文件的别名及指向相应索引结点的指针。</p><h3 id="6-1-3-利用符号链实现共享"><a href="#6-1-3-利用符号链实现共享" class="headerlink" title="6.1.3 利用符号链实现共享"></a>6.1.3 利用符号链实现共享</h3><p>由操作系统为被共享文件的创建一个LINK类型的文件(即该共享文件的路径名，称为符号链)，用户通过在自己的文件目录中包含指向该符号链文件的方法实现文件共享。</p><h2 id="6-2-文件保护"><a href="#6-2-文件保护" class="headerlink" title="6.2 文件保护"></a>6.2 文件保护</h2><p>利用符号链实现共享的优缺点</p><p>优点：只有文件主才拥有指向其索引结点的指针，而其他共享用户则只有该文件的路径名，因此不会因文件主删除一个共享 文件后留下悬空指针的问题。共享者通过符号链访问一个已被删除的共享文件将会访问失败时，则删除符号链。</p><p>缺点：用户访问共享文件时，系统是根据给定的文件路径名逐个分量(名)去查找目录，直至找到该文件的索引结点。因此，可能要多次读盘，开销大。此外，要为每个共享用户建立一条符号链，而由于链本身实际上是一个文件，也要为它分配索引结点，这也要耗费磁盘空间。</p><ul><li>文件保护用于防止文件被破坏。包括两个方面:</li></ul><p>​    一是防止系统崩溃所造成的文件破坏;</p><p>​    二是防止文件主和其他用户有意或无意的非法操作所造成的文件不安全性。</p><ul><li>防止系统崩溃造成文件破坏的方法:</li></ul><p>​    ➢定时转储</p><p>​    ➢多副本</p><ul><li><p>防止非法操作的方法:基本思想是建立三元组: (用户、 对象、存取权限)—访问控制</p></li><li><p>访问矩阵</p></li></ul><p>​    -主体</p><p>​    -对象</p><ul><li>访问权限</li></ul><h2 id="6-3-UNIX文件保护"><a href="#6-3-UNIX文件保护" class="headerlink" title="6.3 UNIX文件保护"></a>6.3 UNIX文件保护</h2><ul><li><p>UNIX/Linux把用户分为3类：文件主、同组用户、其他用户</p></li><li><p>定义3种存取权限：可读r、可写w、可执行x。文件属性共有10位：</p></li></ul><p>​      <code>-rwxrwxrwx</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;文件系统&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;课堂笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>高级操作系统</title>
    <link href="https://mysticalguest.github.io/2020/06/30/OS/DistributedSystem/"/>
    <id>https://mysticalguest.github.io/2020/06/30/OS/DistributedSystem/</id>
    <published>2020-06-30T01:56:43.838Z</published>
    <updated>2020-07-21T11:37:42.210Z</updated>
    
    <content type="html"><![CDATA[<p><strong>课程目标</strong></p><p>1、了解高级系统相关内容（主要包括网络OS与分布式系统的概念、特点、应用额体系结构与软硬件组成等）；</p><p>2、掌握单机操作系统设计实现原理（特别是常见的操作系统习题、试题的了理解和解答方法）。</p><a id="more"></a><h1 id="1-Distributed-Systems"><a href="#1-Distributed-Systems" class="headerlink" title="1 Distributed Systems"></a>1 Distributed Systems</h1><h2 id="1-1-Definition"><a href="#1-1-Definition" class="headerlink" title="1.1 Definition"></a>1.1 Definition</h2><p>一个分布式系统是：独立计算机的集合，对用户而言，它们看起来像是一个统一的系统。</p><ul><li>尚不存在一致性的定义，普遍接受的定义是：</li><li>分布式系统是若干台独立计算机的一种联合体，对用户而言，这个联合体就是一台单独的计算机。</li><li>在这个定义中，前半句说明是对计算机硬件的要求，后半句是对计算机软件的要求，这两项都是对分布式系统的基本的要求。</li></ul><p>另一个角度：</p><ul><li>分布式系统是这样一个系统，它运行在不具有共享内存的多台计算机上，但在用户眼里它却像是一台计算机。</li><li>实质思想：用户不必去关心系统中的多台计算机的存在。</li><li>尽管目前不存在完全满足该条件的系统，但已经有一些原型出现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Machine A               Machine B             Machine C</span><br><span class="line">----------              ----------            ----------</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|       Distributed  Application     分布式应用程序       |</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|       Middleware  Service             中间件服务       |</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|Local OS|              |Local OS|            |Local OS|</span><br><span class="line">----------              ----------            ----------</span><br><span class="line">    |                       |                     |</span><br><span class="line">-----------------------------------------------------------Network</span><br></pre></td></tr></table></figure><blockquote><p><em>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。</em></p></blockquote><p>组织为中间件的分布式系统。<br>请注意，中间件层覆盖了多台计算机。</p><h2 id="1-2-分布式系统的特点"><a href="#1-2-分布式系统的特点" class="headerlink" title="1.2 分布式系统的特点"></a>1.2 分布式系统的特点</h2><h3 id="1-2-1-资源共享-Resource-Sharing"><a href="#1-2-1-资源共享-Resource-Sharing" class="headerlink" title="1.2.1 资源共享 Resource Sharing"></a>1.2.1 资源共享 Resource Sharing</h3><ul><li><strong>硬件资源共享</strong>：专用设备共享 =》 处理资源共享 =》 负载共享与负载均衡</li><li><strong>信息资源共享</strong>：如：电子商务应用共享同一数据对象，协同工作组共享同一数据空间</li><li><strong>软件资源共享</strong>：软件开发组共享同一开发工具，同一类应用任务调用同一处理软件</li><li><strong>资源异构、分布</strong> =》 资源<strong>命名</strong>方案、分布资源<strong>管理</strong>模型、策略与机制是要解决的重点</li><li><strong>互联网络环境</strong> =》 计算机资源共享和多媒体信息资源共享成为研究和开发的热点</li></ul><h3 id="1-2-2-透明性-Transparency"><a href="#1-2-2-透明性-Transparency" class="headerlink" title="1.2.2 透明性 Transparency"></a>1.2.2 透明性 Transparency</h3><ul><li>透明性的基本概念和内容</li></ul><p>机器边界、网络细节和系统状态对用户和应用程序员呈不可见性。多计算机环境 =》 单机环境。例如用户不必知道数据存在何处，进程在何处运行。</p><ul><li>优点</li></ul><p>软件易于研制；资源变动，软件影响小；</p><p>易于实现资源冗余；有利于资源操作移动</p><ul><li>实现难点</li></ul><p>大多数分布计算机系统固有的异构性增加了透明性实现的难度。</p><p>硬件异构性：指令系统不同、数据表示不同。系统配置不同</p><p>软件异构性：操作系统不同、网络协议不同</p><p>局部自治性限制全局透明性</p><div class="table-container"><table><thead><tr><th style="text-align:center">Transparency</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Access 访问</td><td style="text-align:center">隐藏数据表示形式和资源访问方式的差异</td></tr><tr><td style="text-align:center">Location</td><td style="text-align:center">隐藏资源所在的位置</td></tr><tr><td style="text-align:center">Migration 转移</td><td style="text-align:center">隐藏资源可能会移动到另一个位置</td></tr><tr><td style="text-align:center">Relocation 重定位</td><td style="text-align:center">隐藏资源在使用中可能会移动到另一个位置</td></tr><tr><td style="text-align:center">Replication 复写</td><td style="text-align:center">隐瞒资源可以通过多个副本进行部署和分发</td></tr><tr><td style="text-align:center">Concurrency</td><td style="text-align:center">隐瞒资源可能会由几个竞争用户共享</td></tr><tr><td style="text-align:center">Failure</td><td style="text-align:center">隐藏资源的故障和恢复</td></tr><tr><td style="text-align:center">Persistence</td><td style="text-align:center">隐藏（软件）资源是在内存中还是在磁盘上</td></tr></tbody></table></div><p>分布式系统透明性的不同形式。</p><h2 id="1-3-开放性-Openess"><a href="#1-3-开放性-Openess" class="headerlink" title="1.3 开放性 Openess"></a>1.3 开放性 Openess</h2><ul><li>是指系统以各种方式进行<strong>扩展的能力</strong>。核心是要求不同厂家的系统（软硬件）具有<strong>互操作性</strong>（Interoperability）和<strong>可移植性</strong>（Portability）</li></ul><p><strong>互操作性</strong>：不同厂家的系统可有效地相互交换信息</p><p><strong>可移植性</strong>：在较大范围的平台上运行同一软件的功能</p><p><strong>UNIX</strong>是一个优秀的开放式软件系统：开放式结构、源代码可用、硬件无关性；<strong>TCP/IP</strong>协议是另一个开放式系统的例子</p><ul><li>标准化是实现开放性的基本保证</li></ul><p><strong>标准</strong>是已被广泛接受的一种特定实现方法或功能集（接口）。</p><p><strong>开房</strong>放概念是一种思想、设计观点、系统特征。因此，标准并不意味着是最好的、并不总是绝对需要的（尤其是在早期）、不是一成不变的。</p><p>国际标准化组织<strong>ISO</strong>。</p><h2 id="1-4-延展性-Scalability"><a href="#1-4-延展性-Scalability" class="headerlink" title="1.4 延展性 Scalability"></a>1.4 延展性 Scalability</h2><p><strong>延展性的制约：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">Concept</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">Centralized services 集中服务</td><td style="text-align:center">一台适用于所有用户的服务器</td></tr><tr><td style="text-align:center">Centralized data 集中数据</td><td style="text-align:center">一本在线电话簿</td></tr><tr><td style="text-align:center">Centralized algorithms 集中式算法</td><td style="text-align:center">根据完整信息进行路由</td></tr></tbody></table></div><p>Scaling Techniques</p><h2 id="1-5-容错性-Fault-Tolerance"><a href="#1-5-容错性-Fault-Tolerance" class="headerlink" title="1.5 容错性 Fault Tolerance"></a>1.5 容错性 Fault Tolerance</h2><p><strong>基本概念</strong>  系统部分失效是能继续发挥作用的能力。如某个网络节点故障而不影响网络系统正常行为。</p><p>分布计算系统的<strong>资源多重性</strong>为实现容错创造条件：<strong>硬件资源冗余、数据多副本、动态切换</strong>。</p><p>系统容错是提高系统<strong>可靠性</strong>的重要途径。可靠性描述了系统成功运行的寿命特性。</p><p>容错性是分布计算应用的强烈需求：国防应用系统，电子商务应用的电子支付系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;课程目标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、了解高级系统相关内容（主要包括网络OS与分布式系统的概念、特点、应用额体系结构与软硬件组成等）；&lt;/p&gt;
&lt;p&gt;2、掌握单机操作系统设计实现原理（特别是常见的操作系统习题、试题的了理解和解答方法）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript入门</title>
    <link href="https://mysticalguest.github.io/2020/06/30/ts/TypeScript/"/>
    <id>https://mysticalguest.github.io/2020/06/30/ts/TypeScript/</id>
    <published>2020-06-30T00:41:29.115Z</published>
    <updated>2020-07-21T11:37:42.208Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>TypeScript教程</em></strong></p><p><a href="https://www.tslang.cn/">TypeScript官网</a></p><a id="more"></a><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><h2 id="1-1-NPM安装"><a href="#1-1-NPM安装" class="headerlink" title="1.1 NPM安装"></a>1.1 NPM安装</h2><ul><li>在项目中打开终端，执行下面命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm install <span class="literal">-g</span> typescript</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.runoob.com/typescript/ts-install.html">菜鸟教程</a></li></ul><h2 id="1-2-测试"><a href="#1-2-测试" class="headerlink" title="1.2 测试"></a>1.2 测试</h2><p>安装完成后我们可以使用 <code>tsc</code> 命令来执行 TypeScript 的相关代码，以下是查看版本号：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tsc <span class="literal">-v</span></span><br><span class="line">Version <span class="number">3.9</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="1-3-Hello-World"><a href="#1-3-Hello-World" class="headerlink" title="1.3 Hello World"></a>1.3 Hello World</h2><ul><li>然后我们新建一个 <code>test.ts</code> 的文件，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message:string = <span class="string">"Hello World"</span> </span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br></pre></td></tr></table></figure><p><code>.ts</code> 为 TypeScript 代码文件的扩展名。</p><ul><li>然后执行以下命令将 TypeScript 转换为 JavaScript 代码：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tsc test.ts</span><br></pre></td></tr></table></figure><ul><li>这时候再当前目录下（与 test.ts 同一目录）就会生成一个 test.js 文件，代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><ul><li>使用 node 命令来执行 test.js 文件：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> node test.js</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;TypeScript教程&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tslang.cn/&quot;&gt;TypeScript官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://mysticalguest.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TypeScript" scheme="https://mysticalguest.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue整合Axios</title>
    <link href="https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Axios/"/>
    <id>https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Axios/</id>
    <published>2020-06-29T02:07:00.310Z</published>
    <updated>2020-07-21T11:37:42.212Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Vue整合Axios，封装API</em></strong></p><p><a href="https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">Axios官方API</a></p><a id="more"></a><h1 id="1-安装axios"><a href="#1-安装axios" class="headerlink" title="1.安装axios"></a>1.安装axios</h1><ul><li>npm管理：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm i axios <span class="literal">-S</span></span><br></pre></td></tr></table></figure><ul><li>CDN：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-封装axios"><a href="#2-封装axios" class="headerlink" title="2.封装axios"></a>2.封装axios</h1><p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御cSRF等。所以官方也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步<a href="https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">Axios官方API</a>。</p><h2 id="2-2-引入"><a href="#2-2-引入" class="headerlink" title="2.2 引入"></a>2.2 引入</h2><p>在项目的<code>src</code>目录中，新建一个<code>request</code>文件夹，然后在里面新建一个<code>http.js</code>；新建一个apis文件夹，然后在里面新建一个<code>api.js</code>文件。<code>http.js</code>文件用来封装我们的<code>axios</code>，<code>api.js</code>用来统一管理我们的接口。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-lone-blocks */</span></span><br><span class="line"><span class="comment">// axios package</span></span><br><span class="line"><span class="comment">// 引入axios，并加到原型链中</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">Vue.prototype.$store = store;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'/'</span> <span class="comment">// 关键代码</span></span><br></pre></td></tr></table></figure><h2 id="2-3-设置请求时间"><a href="#2-3-设置请求时间" class="headerlink" title="2.3 设置请求时间"></a>2.3 设置请求时间</h2><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认的请求超时时间。超过了10s，告知用户当前请求超时，请刷新等。</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-post请求头设置"><a href="#2-4-post请求头设置" class="headerlink" title="2.4 post请求头设置"></a>2.4 post请求头设置</h2><p>post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为<code>application/x-www-form-urlencoded;charset=UTF-8</code></p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br></pre></td></tr></table></figure><h2 id="2-5-请求拦截器"><a href="#2-5-请求拦截器" class="headerlink" title="2.5 请求拦截器"></a>2.5 请求拦截器</h2><p>在发送请求前可以进行一个请求的拦截，为什么要拦截呢？拦截请求是用来做什么的呢？</p><p>比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span> <span class="comment">//@ 等价于/src这个目录</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==============================</span></span><br><span class="line"><span class="comment">    拦截器</span></span><br><span class="line"><span class="comment">  ============================== */</span></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断vuex中是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">    <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求拦截器config'</span> + config.headers.Authorization);</span><br><span class="line">    <span class="keyword">const</span> token = store.state.token;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'store.state'</span> + store.state);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'token:'</span> + token);</span><br><span class="line">    token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">    <span class="comment">// if (token) &#123;</span></span><br><span class="line">    <span class="comment">//   config.headers.Authorization = token;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error:'</span> + error);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><code>token</code>：一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在<code>main.js</code>中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。</p><p>那么每个请求都携带token，那么如果一个页面不需要用户登录就可以访问的怎么办呢？其实，前端的请求可以携带token，但是后台可以选择不接收的。</p></blockquote><h2 id="2-6-响应拦截器"><a href="#2-6-响应拦截器" class="headerlink" title="2.6 响应拦截器"></a>2.6 响应拦截器</h2><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 请求成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">    <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器'</span> + response.status);</span><br><span class="line">    <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应拦截器'</span> + response.status);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">  <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span></span><br><span class="line">  <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">  <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器error::'</span> + error);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器码: '</span> + error.response.status);</span><br><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">      <span class="comment">// 401: 未登录</span></span><br><span class="line">      <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">      <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'响应拦截器error::401'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'401::'</span> + router);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'401::'</span> + router.currentRoute.fullPath);</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/login'</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 403 token过期</span></span><br><span class="line">        <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">        <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">        <span class="comment">// 跳转登录页面</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">        <span class="comment">// 清除token</span></span><br><span class="line">        localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">        store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          router.replace(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            query: &#123;</span><br><span class="line">              redirect: router.currentRoute.fullPath</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/login'</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。</p><p>例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p></blockquote><h2 id="2-7-封装get方法和post方法"><a href="#2-7-封装get方法和post方法" class="headerlink" title="2.7 封装get方法和post方法"></a>2.7 封装get方法和post方法</h2><p>常用的ajax请求方法有get、post、put等方法，axios对应的也有很多类似的方法。为了简化代码，还是要对其进行一个简单的封装。下面主要封装两个方法：get和post。</p><ul><li>get方法</li></ul><p>通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==============================</span></span><br><span class="line"><span class="comment">    封装get方法和post方法</span></span><br><span class="line"><span class="comment">  ============================== */</span></span><br><span class="line"><span class="comment">// const Domain = "http://255.255.255.0:8000";  // 定义根域名</span></span><br><span class="line"><span class="keyword">const</span> Domain = <span class="string">''</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// url 判断是测试环境 就要拿 测试环境的域名， 正式环境的就要用 正式域名</span></span><br><span class="line">    <span class="keyword">const</span> url = Domain + action;</span><br><span class="line">    axios.get(url, &#123;</span><br><span class="line">      params: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res.data);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>post方法</li></ul><p>原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行<strong>序列化</strong>的操作，所以我们可以通过<code>node</code>的<code>qs</code>模块来序列化我们的参数。这个很重要，如果没有<strong>序列化</strong>操作，后台是拿不到提交的数据的。</p><p>可以通过<code>import QS from &#39;qs&#39;</code>引入qs模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Domain + action;</span><br><span class="line">    axios.post(url, params)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err.data)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>axios.get()</code>方法和<code>axios.post()</code>在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p></blockquote><p>封装完成啦！</p><h1 id="3-接口统一管理"><a href="#3-接口统一管理" class="headerlink" title="3.接口统一管理"></a>3.接口统一管理</h1><p>整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。文件中存放所有的api接口。</p><ul><li>在<code>api.js</code>中引入封装的get和post方法。</li></ul><p>api.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * api接口统一管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span>, post &#125; from '@/request/http'</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  postData(action, params)&#123;</span><br><span class="line">    <span class="keyword">return</span> post(action, params)</span><br><span class="line">  &#125;,</span><br><span class="line">  getData(action, params)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(action, params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在组件中使用：</li></ul><p>任意vue文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;#&quot;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Vue from &#39;vue&#39;;</span><br><span class="line">  import api from &#39;@&#x2F;api&#x2F;api.js&#39;;</span><br><span class="line">  Vue.prototype.$api &#x3D; api;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;#&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value1:&#39;&#39;,</span><br><span class="line">        value2:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      functiondemo(arg)&#123;</span><br><span class="line">        &#x2F;&#x2F; 序列化数据</span><br><span class="line">        let param &#x3D; new URLSearchParams();</span><br><span class="line">       </span><br><span class="line">        param.append(&quot;key1&quot;, this.value1);</span><br><span class="line">        param.append(&quot;key2&quot;, this.value2);</span><br><span class="line">        </span><br><span class="line">        this.$api.postData(&#39;&#x2F;url&#39;, param)</span><br><span class="line">        .then(response &#x3D;&gt; &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其他的api接口，就在<code>api.js</code>中继续往下面扩展就可以了！</p><p>并为每个接口写好注释！</p></blockquote><p>api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在<code>api.js</code>中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就会很麻烦。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Vue整合Axios，封装API&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html&quot;&gt;Axios官方API&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Axios" scheme="https://mysticalguest.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue整合Element-UI</title>
    <link href="https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Element-UI/"/>
    <id>https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Element-UI/</id>
    <published>2020-06-29T01:43:32.825Z</published>
    <updated>2020-07-21T11:37:42.220Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>安装Element-UI</em></strong></p><p><a href="https://element.eleme.cn/">Element-UI官方中文网</a></p><a id="more"></a><h2 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1 安装命令"></a>1 安装命令</h2><ul><li>在项目中打开终端，执行下面命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm i element<span class="literal">-ui</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure><ul><li>CDN</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://element.eleme.cn/#/zh-CN/component/installation">官方教程</a></li></ul><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2 引入"></a>2 引入</h2><p>在项目的<code>src/mian.js</code>中引用element-ui：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="comment">// 引入Element-UI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>上述配置完成就可以使用Element-UI了，直接在组件中使用EL标签即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;安装Element-UI&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://element.eleme.cn/&quot;&gt;Element-UI官方中文网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Element-UI" scheme="https://mysticalguest.github.io/tags/Element-UI/"/>
    
  </entry>
  
  <entry>
    <title>Electron+vue-cli3开发跨平台桌面应用</title>
    <link href="https://mysticalguest.github.io/2020/06/28/Vue/Electron+vue-cli3/"/>
    <id>https://mysticalguest.github.io/2020/06/28/Vue/Electron+vue-cli3/</id>
    <published>2020-06-28T09:52:20.005Z</published>
    <updated>2020-07-21T11:37:42.215Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一步一步搭建Electron+vue-cli3开发平台（亲测有效）</strong></p><p>Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制<br><sup><a href="#fn_沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。" id="reffn_沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。">沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</a></sup><br>网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种方式越来越受到开发者的喜爱。</p><a id="more"></a><p>这篇博客一步一步教你如何使用Electron和vue-cli3，在完全保留vue开发web应用的习惯下，搭建桌面应用。</p><p>这篇博客不涉及Electron和vue的开发教程，仅以实现两者结合为目的，若要深入学习Electron和vue，请访问官方：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://electronjs.org/">Electron</a></td><td style="text-align:center"><a href="https://cn.vuejs.org/">Vue</a></td><td style="text-align:center"><a href="https://cli.vuejs.org/zh/">Vue-cli</a></td><td style="text-align:center"><a href="http://stylus-lang.comm">Stylus</a></td></tr></tbody></table></div><p>学习该框架之前，希望读者需要提前掌握以下技能：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">HTML、CSS、JavaScript</td><td style="text-align:center">Vue2.x</td><td style="text-align:center">Stylus</td></tr></tbody></table></div><h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h1><h2 id="1-1-安装Nodejs"><a href="#1-1-安装Nodejs" class="headerlink" title="1.1 安装Nodejs"></a>1.1 安装Nodejs</h2><p><a href="http://nodejs.cn/download/">Node.js 中文网下载安装</a></p><h2 id="1-2-使用cnpm加速下载"><a href="#1-2-使用cnpm加速下载" class="headerlink" title="1.2 使用cnpm加速下载"></a>1.2 使用cnpm加速下载</h2><p>npm有时下载速度很慢，可以安装cnpm，从国内淘宝镜像下载，执行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">-g</span> cnpm -<span class="literal">-registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后所有的npm命令都可以直接替换成cnpm使用了。</p><h2 id="1-3-为什么不使用electron-vue搭建呢"><a href="#1-3-为什么不使用electron-vue搭建呢" class="headerlink" title="1.3 为什么不使用electron-vue搭建呢"></a>1.3 为什么不使用electron-vue搭建呢</h2><p><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/">Electron-vue官方中文文档</a></p><p>由于SimulatedGREG/electron-vue已经很久没有更新了，而且其生成的工程结构并不是vue-cli3。所以放弃使用。</p><h2 id="1-4-安装-升级vue-cli3"><a href="#1-4-安装-升级vue-cli3" class="headerlink" title="1.4 安装/升级vue-cli3"></a>1.4 安装/升级vue-cli3</h2><ul><li>先执行以下命令，确认下本地安装的vue-cli版本（如果自己的电脑没有安装过vue，跳过前两步到第三步吧！）：</li></ul><p><code>$ vue -V</code>或<code>$ vue --version</code></p><p>在写本篇博客时，我的vue是2.9.6版本。</p><ul><li>如果本地使用的是vue-cli2.x或者更早版本，可先执行下面命令全局卸载：</li></ul><p><code>$ cnpm uninstall vue-cli -g</code></p><blockquote><p>（1）vue-cli3使用了新的npm包名，与旧版本不一样。</p><p>（2）在vue2.9.6下执行上面命令，控制台输入<code>vue -V</code>仍然有输出，解决方法：</p><p>​        a. 当然, 卸载命令还是要执行的: 全局卸载：npm uninstall vue-cli -g;</p><p>​        b. npmrc文件删除掉</p><p>​        c. 检索删除vue-cli文件夹</p><p>​    再试试: <code>vue -V</code>，就不显示版本号了。</p><p>（3）可以忽略上述问题，直接安装最新版本的vue-cli3即可（亲测有效）。</p></blockquote><ul><li>执行以下命令全局安装vue-cli3：</li></ul><p><code>$ cnpm install @vue/cli -g</code></p><ul><li>执行以下命令升级vue-cli3：</li></ul><p><code>$ cnpm update @vue/cli -g</code></p><h2 id="1-5-创建vue项目"><a href="#1-5-创建vue项目" class="headerlink" title="1.5 创建vue项目"></a>1.5 创建vue项目</h2><ul><li>在指定目录下，打开终端，执行以下命令，创建vue项目：</li></ul><p><code>$ vue create electron-vue-demo</code></p><p>这里的项目名称为electron-vue-demo（<em>不能出现大写字母</em>），可根据自己的具体项目改变。</p><ul><li>创建命令执行后，在完成创建之前，会出现以下选项（如果熟悉此步骤可跳过本节内容）：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.<span class="number">4.6</span></span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">  default (babel, eslint) </span><br><span class="line">&gt; Manually select features</span><br></pre></td></tr></table></figure><p>选择 <code>Manually select features</code> （自定义安装）。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, </span><br><span class="line">&lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"> (*) Vuex</span><br><span class="line"> (*) CSS Pre<span class="literal">-processors</span></span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><p>这里选择了常用的模块，请根据实际需求进行选择。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? Use history mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) (Y/n)</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>如果选择了router，这里会询问是否使用history模式。</p><p>vue-router 默认使用hash模式（即通过url#hash来跳转页面），使用URL的hash来模拟一个完整的 URL，当URL改变时，页面不会重新加载。<br> 如果使用history模式，URL就像正常的url，例如 <code>http://yoursite.com/page</code>，比较好看。但是还需要后台配置支持。</p><p>这里我们选择<code>n</code>。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Pick a CSS pre<span class="literal">-processor</span> (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use </span><br><span class="line">arrow keys)</span><br><span class="line">  Sass/SCSS (with dart<span class="literal">-sass</span>) </span><br><span class="line">  Sass/SCSS (with node<span class="literal">-sass</span>) </span><br><span class="line">  Less </span><br><span class="line">&gt; Stylus</span><br></pre></td></tr></table></figure><p>选择CSS预处理模块，这里我们使用<code>Stylus</code>。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">  ESLint with error prevention only </span><br><span class="line">  ESLint + Airbnb config </span><br><span class="line">&gt; ESLint + Standard config </span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><p>选择ESLint代码格式检查工具的配置，选择<code>ESLint + Standard config</code>，标准配置。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure><p><code>Line on save</code>表示在保存代码的时候，进行格式检查。</p><p><code>Lint and fix on commit</code>表示在<code>$ git commit</code>的时候自动纠正格式。</p><p>这里只选择<code>Lint on save</code>。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? </span><br><span class="line">  <span class="keyword">In</span> dedicated config files </span><br><span class="line">&gt; <span class="keyword">In</span> package.json</span><br></pre></td></tr></table></figure><p>这里问把 babel，postcss，eslint 这些配置文件放哪？</p><p><code>In dedicated config files</code>表示独立文件。</p><p><code>In package.json</code>表示放在package.json里。</p><p>这里选择<code>In package.json</code>。</p><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N) N</span><br></pre></td></tr></table></figure><p>是否为以后的项目保留这些设置？选择<code>N</code>。</p><p>然后耐心等待项目安装完成。</p><h2 id="1-6-自动安装Electron"><a href="#1-6-自动安装Electron" class="headerlink" title="1.6 自动安装Electron"></a>1.6 自动安装Electron</h2><ul><li>执行以下命令，进入项目目录：</li></ul><p><code>$ cd electron-vue-demo</code></p><ul><li>然后执行以下命令：</li></ul><p><code>$ vue add electron-builder</code></p><p><code>electron-builder</code>是一个简单又强大的库。解决了打包这个棘手的问题，而且可以应对大部分的打包需求。</p><ul><li>接下来出现配置选项：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Choose Electron Version (Use arrow keys)</span><br><span class="line">  ^<span class="number">7.0</span>.<span class="number">0</span> </span><br><span class="line">  ^<span class="number">8.0</span>.<span class="number">0</span> </span><br><span class="line">&gt; ^<span class="number">9.0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>选择Electron版本，我写这篇博客的时候，选项是上面3个版本，选择最新的即可。</p><p>然后耐心等待安装完成。</p><h2 id="1-7-手动安装Electron"><a href="#1-7-手动安装Electron" class="headerlink" title="1.7 手动安装Electron"></a>1.7 手动安装Electron</h2><ul><li>修改<code>package.json</code>，添加以下7行：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "serve": "vue-cli-service serve",</span><br><span class="line">  "build": "vue-cli-service build",</span><br><span class="line">  "lint": "vue-cli-service lint",</span><br><span class="line">  "electron:build": "vue-cli-service electron:build",// add</span><br><span class="line">  "electron:serve": "vue-cli-service electron:serve",// add</span><br><span class="line">  "postinstall": "electron-builder install-app-deps",// add</span><br><span class="line">  "postuninstall": "electron-builder install-app-deps"// add</span><br><span class="line">&#125;,</span><br><span class="line">"main": "background.js",// add</span><br><span class="line">"dependencies": &#123;</span><br><span class="line">  "core-js": "^3.6.5",</span><br><span class="line">  "vue": "^2.6.11",</span><br><span class="line">  "vue-router": "^3.2.0",</span><br><span class="line">  "vuex": "^3.4.0"</span><br><span class="line">&#125;,</span><br><span class="line">"devDependencies": &#123;</span><br><span class="line">  "@vue/cli-plugin-babel": "~4.4.0",</span><br><span class="line">  "@vue/cli-plugin-eslint": "~4.4.0",</span><br><span class="line">  "@vue/cli-plugin-router": "~4.4.0",</span><br><span class="line">  "@vue/cli-plugin-vuex": "~4.4.0",</span><br><span class="line">  "@vue/cli-service": "~4.4.0",</span><br><span class="line">  "@vue/eslint-config-standard": "^5.1.2",</span><br><span class="line">  "babel-eslint": "^10.1.0",</span><br><span class="line">  "electron": "^9.0.5",// add</span><br><span class="line">  "eslint": "^6.7.2",</span><br><span class="line">  "eslint-plugin-import": "^2.20.2",</span><br><span class="line">  "eslint-plugin-node": "^11.1.0",</span><br><span class="line">  "eslint-plugin-promise": "^4.2.1",</span><br><span class="line">  "eslint-plugin-standard": "^4.0.0",</span><br><span class="line">  "eslint-plugin-vue": "^6.2.2",</span><br><span class="line">  "stylus": "^0.54.7",</span><br><span class="line">  "stylus-loader": "^3.0.2",</span><br><span class="line">  "vue-cli-plugin-electron-builder": "~2.0.0-rc.3",// add</span><br><span class="line">  "vue-template-compiler": "^2.6.11"</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>新建<code>src/background.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app, protocol, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createProtocol,</span><br><span class="line">  installVueDevtools</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue-cli-plugin-electron-builder/lib'</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheme must be registered before the app is ready</span></span><br><span class="line">protocol.registerSchemesAsPrivileged([</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">'app'</span>, <span class="attr">privileges</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span>, <span class="attr">standard</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1000</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration</span></span><br><span class="line">      <span class="comment">// for more info</span></span><br><span class="line">      <span class="comment">// nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span></span><br><span class="line">      webSecurity: <span class="literal">false</span>,</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    <span class="comment">// Load the url of the dev server if in development mode</span></span><br><span class="line">    win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)</span><br><span class="line">    <span class="keyword">if</span> (!process.env.IS_TEST) win.webContents.openDevTools()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createProtocol(<span class="string">'app'</span>)</span><br><span class="line">    <span class="comment">// Load the index.html when not in development</span></span><br><span class="line">    win.loadURL(<span class="string">'app://./index.html'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span><br><span class="line">    <span class="comment">// Install Vue Devtools</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> installVueDevtools()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Vue Devtools failed to install:'</span>, e.toString())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">    process.on(<span class="string">'message'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">'graceful-exit'</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">'SIGTERM'</span>, () =&gt; &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码是1.6小节使用自动化方式安装后生成的。</p><ul><li>安装依赖包</li></ul><p>在项目目录下执行以下命令，安装全部依赖包：</p><p><code>$ cnpm install</code></p><h2 id="1-8-编译并启动APP"><a href="#1-8-编译并启动APP" class="headerlink" title="1.8 编译并启动APP"></a>1.8 编译并启动APP</h2><ul><li>执行以下命令，开始编译APP，并启动开发环境APP：</li></ul><p><code>$ npm run electron:serve</code>或<code>$ yarn electron:serve</code></p><p>首次启动可能会等待很久，加载完后会自动打开APP，等待即可。</p><ul><li>编译成功后，就会出现开发环境的APP了，如下图（Win10启动界面）：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Configuration/Electron/app1.PNG" alt="APP"></p><ul><li>当回到控制台，发现控制台的信息：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INFO  Launching Electron...</span><br><span class="line">Failed to fetch extension, trying <span class="number">4</span> more times</span><br><span class="line">Failed to fetch extension, trying <span class="number">3</span> more times</span><br><span class="line">Failed to fetch extension, trying <span class="number">2</span> more times</span><br><span class="line">Failed to fetch extension, trying <span class="number">1</span> more times</span><br><span class="line">Failed to fetch extension, trying <span class="number">0</span> more times</span><br><span class="line">Vue Devtools failed to install: Error: net::ERR_CONNECTION_TIMED_OUT</span><br></pre></td></tr></table></figure><p>这是因为在请求安装<code>vuejs devtools</code>插件。需要翻墙才能安装成功。可以忽略上面的问题，耐心等待5次请求失败后会自动跳过，上面的成功界面即证实跳过依然编译成功。</p><p>依然有解决方案：</p><p>注释掉<code>src/background.js</code>中的以下代码就行了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span></span><br><span class="line"><span class="comment">      // Install Vue Devtools</span></span><br><span class="line"><span class="comment">      try &#123;</span></span><br><span class="line"><span class="comment">          await installVueDevtools();</span></span><br><span class="line"><span class="comment">      &#125; catch (e) &#123;</span></span><br><span class="line"><span class="comment">          console.error("Vue Devtools failed to install:", e.toString());</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="2-配置项目"><a href="#2-配置项目" class="headerlink" title="2.配置项目"></a>2.配置项目</h1><h2 id="2-1-配置ESLint代码格式检查工具"><a href="#2-1-配置ESLint代码格式检查工具" class="headerlink" title="2.1 配置ESLint代码格式检查工具"></a>2.1 配置ESLint代码格式检查工具</h2><p>ESlint可以高效的检查代码格式，让参与项目的所有工程师都能保持统一的代码风格。其检测精度甚至可以精确到是否多一个空格或者少一个空格。代码格式的统一对提高团队的协同开发效率有很大的帮助，特别是对有代码洁癖的工程师。</p><p>在项目根目录下创建<code>.eslintrc.js</code> （注意文件名前面有个<code>.</code>）</p><p>请粘贴以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'extends'</span>: [</span><br><span class="line">    <span class="string">'plugin:vue/essential'</span>,</span><br><span class="line">    <span class="string">'@vue/standard'</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="comment">// 不检测语句末尾的分号</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'off'</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="comment">// 强制缩进为2个空格</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="comment">// 关闭函数名称跟括号之间的空格检测</span></span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 忽略大括号内的空格</span></span><br><span class="line">    <span class="string">'object-curly-spacing'</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说明下关于indent缩进的配置，要配合项目根目录下的<code>.editorconfig</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*<span class="type">.</span>&#123;<span class="type">js</span>,<span class="type">jsx</span>,<span class="type">ts</span>,<span class="type">tsx</span>,<span class="type">vue</span>&#125;]</span><br><span class="line">indent_style = space   &lt;--这里定义缩进类型是空格还是tab</span><br><span class="line">indent_size = <span class="number">2</span>        &lt;--这里需要与.eslintrc.js的indent对应</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">insert_final_newline = true</span><br></pre></td></tr></table></figure><blockquote><p><code>.editorconfig</code> 用于IDE自动格式化代码<br><code>.eslintrc.js</code> 用于ESlint检测</p></blockquote><p>更多配置可参阅 <a href="https://cloud.tencent.com/developer/doc/1078">ESLint教程</a>。</p><h2 id="2-2-配置vue"><a href="#2-2-配置vue" class="headerlink" title="2.2 配置vue"></a>2.2 配置vue</h2><p>在项目目录下创建vue.config.js，粘贴以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,  </span><br><span class="line">    port: <span class="number">8080</span></span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .set(<span class="string">'src'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .set(<span class="string">'common'</span>, resolve(<span class="string">'src/common'</span>))</span><br><span class="line">      .set(<span class="string">'components'</span>, resolve(<span class="string">'src/components'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>devServer 用于设置开发环境的服务，这里表示在本地8080端口启动web服务。</p><p>chainWebpack 我们给项目目录起了”别名(alias)”，在代码中，我们可以直接用“别名”访问资源，省去了每次输入完整相对路径的麻烦。</p><blockquote><p>在js代码中可直接使用别名，例如：<br>    <code>@/common/js/xxx.js</code> 等价于 <code>src/common/js/xxx.js</code><br>    <code>common/js/xxx.js</code> 等价于 <code>src/common/js/xxx.js</code></p><p>在css或者html中使用别名，需要在别名前加“~”，例如：<br>    <code>@import &quot;~common/stylus/font.styl&quot;</code></p></blockquote><h1 id="3-项目基本设定"><a href="#3-项目基本设定" class="headerlink" title="3.项目基本设定"></a>3.项目基本设定</h1><h2 id="3-1-主进程和渲染进程简介"><a href="#3-1-主进程和渲染进程简介" class="headerlink" title="3.1 主进程和渲染进程简介"></a>3.1 主进程和渲染进程简介</h2><p>在开始下面的步骤之前，很有必要简单了解下Electron的应用架构。</p><ul><li>主进程</li></ul><p>Electron 运行 package.json 的 main 脚本（background.js）的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。</p><ul><li>渲染进程</li></ul><p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。</p><p>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。</p><ul><li>主进程和渲染进程的关系</li></ul><p>主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。</p><p>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p><p>具体可参阅<a href="https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes">官方文档</a>。</p><h2 id="3-2-APP窗口大小"><a href="#3-2-APP窗口大小" class="headerlink" title="3.2 APP窗口大小"></a>3.2 APP窗口大小</h2><p>修改background.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1000</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration</span></span><br><span class="line">      <span class="comment">// for more info</span></span><br><span class="line">      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-3-取消跨域限制"><a href="#3-3-取消跨域限制" class="headerlink" title="3.3 取消跨域限制"></a>3.3 取消跨域限制</h2><p>修改background.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1000</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration</span></span><br><span class="line">      <span class="comment">// for more info</span></span><br><span class="line">      <span class="comment">// nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span></span><br><span class="line">      webSecurity: <span class="literal">false</span>,</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-4-取消菜单栏"><a href="#3-4-取消菜单栏" class="headerlink" title="3.4 取消菜单栏"></a>3.4 取消菜单栏</h2><p>在我们生成的桌面APP中，我们可以看到默认的菜单栏。</p><p>在windows中，菜单栏在APP窗口内的顶部；在macOS中，菜单栏位于电脑屏幕顶部。</p><p>为了方便项目将来也能直接生成纯web应用，尽量把APP的全部功能都做到渲染进程里，这里我们取消菜单栏。</p><p>由于macOS的特殊性，顶部菜单栏无法删除，所以我们针对macOS特殊处理，把菜单栏只保留“关于”和“退出”。</p><p>修改<code>background.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// 添加Menu组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; app, protocol, BrowserWindow, Menu &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  createMenu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置菜单栏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// darwin表示macOS，针对macOS的设置</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> template = [&#123;</span><br><span class="line">      label: <span class="string">'App Demo'</span>,</span><br><span class="line">      submenu: [</span><br><span class="line">        &#123;<span class="attr">role</span>: <span class="string">'about'</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          role: <span class="string">'quit'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">const</span> menu = Menu.buildFromTemplate(template)</span><br><span class="line">    Menu.setApplicationMenu(menu)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// windows及linux系统</span></span><br><span class="line">    Menu.setApplicationMenu(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变后的APP界面样式：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Configuration/Electron/app2.PNG" alt="APP"></p><p>更多关于菜单栏设置，请参阅：<a href="https://electronjs.org/docs/api/menu">Electron官方API</a></p><h2 id="3-5-设置APP窗口图标"><a href="#3-5-设置APP窗口图标" class="headerlink" title="3.5 设置APP窗口图标"></a>3.5 设置APP窗口图标</h2><p>准备windows和macOS两版图标：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Platform</th><th style="text-align:center">File Type</th><th style="text-align:center">Specification</th></tr></thead><tbody><tr><td style="text-align:center">Windows</td><td style="text-align:center">app.ico</td><td style="text-align:center">最小尺寸：256x256</td></tr><tr><td style="text-align:center">MacOS</td><td style="text-align:center">app.png或app.icns</td><td style="text-align:center">最小尺寸：512x512</td></tr></tbody></table></div><p>把图标文件放到<code>public/</code>目录下，项目结构如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|- /dist_electron</span><br><span class="line">   |...</span><br><span class="line">|- /public</span><br><span class="line">   |- app.icns</span><br><span class="line">   |- app.ico</span><br><span class="line">   |- app.png</span><br><span class="line">   |- favicon.ico</span><br><span class="line">   |- index.html</span><br><span class="line">|- /src</span><br><span class="line">   |...</span><br><span class="line">|- .editorconfig    </span><br><span class="line">|- .eslintrc.js</span><br><span class="line">|- .gitignore</span><br><span class="line">|- babel.config.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package<span class="literal">-lock</span>.json</span><br><span class="line">|- README.md</span><br></pre></td></tr></table></figure><p>可以顺便把<code>favicon.ico</code>也修改一下，但是在桌面版APP上是用不到的。如果以后生成纯web项目才会用到。</p><p>修改<code>background.js</code>，让APP窗口应用图标：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">    icon: <span class="string">`<span class="subst">$&#123;__static&#125;</span>/app.ico`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>${__static}</code>对应的是public目录</p><p>现在，Windows系统上可以看到开发环境的APP窗口图标已经生效了。</p><p>MacOS图标请参照4.1章节，并且需要在build后才能生效。</p></blockquote><h2 id="3-6-设置APP窗口标题栏名称"><a href="#3-6-设置APP窗口标题栏名称" class="headerlink" title="3.6 设置APP窗口标题栏名称"></a>3.6 设置APP窗口标题栏名称</h2><p>修改<code>public/index.html</code>，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把'&lt;%= htmlWebpackPlugin.options.title %&gt;'改为App Demo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-打包"><a href="#4-打包" class="headerlink" title="4.打包"></a>4.打包</h1><p>这里我们已经集成了<code>electron-builder</code>工具，可以参阅<a href="https://www.electron.build/">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一步一步搭建Electron+vue-cli3开发平台（亲测有效）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制&lt;br&gt;&lt;sup&gt;&lt;a href=&quot;#fn_沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。&quot; id=&quot;reffn_沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。&quot;&gt;沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种方式越来越受到开发者的喜爱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Electron-Vue" scheme="https://mysticalguest.github.io/tags/Electron-Vue/"/>
    
  </entry>
  
  <entry>
    <title>树的要点归纳</title>
    <link href="https://mysticalguest.github.io/2020/06/26/DS/%E6%A0%91%E7%9A%84%E8%A6%81%E7%82%B9%E5%BD%92%E7%BA%B3/"/>
    <id>https://mysticalguest.github.io/2020/06/26/DS/%E6%A0%91%E7%9A%84%E8%A6%81%E7%82%B9%E5%BD%92%E7%BA%B3/</id>
    <published>2020-06-26T13:02:31.007Z</published>
    <updated>2020-08-07T11:06:57.999Z</updated>
    
    <content type="html"><![CDATA[<p>    <em>数据结构第六章要点归纳</em></p><a id="more"></a><h1 id="1-树的基础知识点"><a href="#1-树的基础知识点" class="headerlink" title="1.树的基础知识点"></a>1.树的基础知识点</h1><h2 id="1-1-树的相关概念"><a href="#1-1-树的相关概念" class="headerlink" title="1.1 树的相关概念"></a>1.1 树的相关概念</h2><ul><li><p>结点拥有的子树数称为节点的<strong>度</strong>（Degree）。</p></li><li><p>度为0的结点称为<strong>叶结点</strong>（Leaf）或<strong>终端结点</strong>；度不为0的结点称为<strong>非终端结点</strong>或<strong>分支节点</strong>。</p></li><li><p>除根节点之外，分支节点也称为<strong>内部结点</strong>。</p></li><li><p>树的度是树内部各结点的度的最大值。</p></li><li><p>如果将树中结点的各子树看成从左至右是有次序的，不能互换的，则称该树为<strong>有序树</strong>，否则称为<strong>无序树</strong>。</p></li><li><p><strong>森林</strong>是$m(m \geq 0)$棵互不相交的树的集合。</p></li></ul><h2 id="1-2-树的存储结构"><a href="#1-2-树的存储结构" class="headerlink" title="1.2 树的存储结构"></a>1.2 树的存储结构</h2><ul><li><p>双亲表示法</p></li><li><p>孩子表示法</p></li><li><p>孩子兄弟表示法</p></li></ul><h2 id="1-3-二叉树的相关概念"><a href="#1-3-二叉树的相关概念" class="headerlink" title="1.3 二叉树的相关概念"></a>1.3 二叉树的相关概念</h2><ul><li><p><strong>斜树</strong>：所有的结点都只有左子树的二叉树叫左斜树。所有结点都只有右子树的二叉树叫右斜树。这二者统称为斜树。</p></li><li><p><strong>满二叉树</strong>：在一颗二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p></li><li><p><strong>完全二叉树</strong>：对一棵具有n个结点的二叉树按层序编号，如果编号为$i(1 \leq i \leq n)$的节点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p></li></ul><ul><li>完全二叉树的特点：</li></ul><p>​    （1）叶子结点只能出现在最下两层。</p><p>​    （2）最下层的叶子一定集中在左部连续位置。</p><p>​    （3）倒数二层，若有叶子结点，一定都在右部连续位置。</p><p>​    （4）如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。</p><p>​    （5）同样结点数的二叉树，完全二叉树的深度最小。</p><h2 id="1-4-二叉树的存储结构"><a href="#1-4-二叉树的存储结构" class="headerlink" title="1.4 二叉树的存储结构"></a>1.4 二叉树的存储结构</h2><ul><li><p>顺序存储结构</p></li><li><p>二叉链表</p></li></ul><h1 id="2-二叉树5个基本性质及灵活应用"><a href="#2-二叉树5个基本性质及灵活应用" class="headerlink" title="2.二叉树5个基本性质及灵活应用"></a>2.二叉树5个基本性质及灵活应用</h1><blockquote><p><strong>二叉树的定义：二叉树(Binary Tree)是n(n≥0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根节点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</strong></p></blockquote><h2 id="2-1-性质1"><a href="#2-1-性质1" class="headerlink" title="2.1 性质1"></a>2.1 性质1</h2><p>在二叉树的第i层上至多有$2^{i-1}$个结点（$i \geq 1$）。</p><h2 id="2-2-性质2"><a href="#2-2-性质2" class="headerlink" title="2.2 性质2"></a>2.2 性质2</h2><p>深度为k的二叉树至多有$2^k-1$个结点（$k \geq1$）。</p><h2 id="2-3-性质3"><a href="#2-3-性质3" class="headerlink" title="2.3 性质3"></a>2.3 性质3</h2><p>对任何一棵二叉树T，如果其终端结点数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。</p><h2 id="2-4-性质4"><a href="#2-4-性质4" class="headerlink" title="2.4 性质4"></a>2.4 性质4</h2><p>具有n个结点的完全二叉树的深度为$\lfloor log_2{n} \rfloor +1$ （$\lfloor x \rfloor$表示不大于x的最大整数）。</p><h2 id="2-5-性质5"><a href="#2-5-性质5" class="headerlink" title="2.5 性质5"></a>2.5 性质5</h2><p>如果对一棵有$n$个结点的完全二叉树（其深度为$\lfloor log_2{n} \rfloor +1$）的结点按层序编号（从第1层到第$\lfloor log_2{n} \rfloor+1$层，每层从左到右），对任一结点$i(1 \leq i \leq n)$有：</p><ol><li>如果$i=1$，则节点$i$是二叉树的根，无双亲；如果$i \geq 1$，则其双亲是节点$\lfloor \frac{i}{2} \rfloor$。</li><li>如果$2i &gt; n$，则结点$i$无左孩子（结点i为叶子节点）；否则其左孩子是结点$2i$。</li><li>如果$2i+1 &gt; n$，则结点$i$无右孩子；否则其右孩子是结点$2i+1$。</li></ol><h1 id="3-二叉树遍历（基础知识掌握）"><a href="#3-二叉树遍历（基础知识掌握）" class="headerlink" title="3.二叉树遍历（基础知识掌握）"></a>3.二叉树遍历（基础知识掌握）</h1><blockquote><p><strong>二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</strong></p></blockquote><h2 id="3-1-前、中、后序遍历"><a href="#3-1-前、中、后序遍历" class="headerlink" title="3.1 前、中、后序遍历"></a>3.1 前、中、后序遍历</h2><h2 id="3-2-二叉树的建立"><a href="#3-2-二叉树的建立" class="headerlink" title="3.2 二叉树的建立"></a>3.2 二叉树的建立</h2><h2 id="3-3-线索二叉树"><a href="#3-3-线索二叉树" class="headerlink" title="3.3 线索二叉树"></a>3.3 线索二叉树</h2><p>3.3.1 对于一个有$n$个结点的二叉链表，每个结点有指向左右孩子的两个指针域，所以一共是$2n$个指针域。而$n$个结点的二叉树一共有$n-1$条分支线数，也就是说，其实是存在$2n-(n-1) =n+1$个空指针域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">       A</span><br><span class="line">     &#x2F;   \</span><br><span class="line">    B     C</span><br><span class="line">   &#x2F; \   &#x2F; \</span><br><span class="line">  D   E F   G</span><br><span class="line"> &#x2F; \ &#x2F;</span><br><span class="line">H  I J </span><br><span class="line">     图3-1</span><br></pre></td></tr></table></figure><p>3.3.2 如上图，中序遍历得到<code>HDIBJEAFCG</code>这样的字符，可以知道，结点I的前驱是D，后继是B，结点F的前驱是A，后继是C。</p><p>3.3.3 指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为<strong>线索二叉树</strong>(Threaded Binary Tree)。</p><p>3.3.4 其实线索二叉树，等于是把一棵二叉树转变成了一个<strong>双向链表</strong>，这样对我们的插入删除结点都带来了方便。</p><p>3.3.5 对二叉树以某种次序遍历使其变为线索二叉树的过程称做是<strong>线索化</strong>。</p><p>3.3.6 在每个节点再增设两个标志域ltag和rtag，只存放0或1数字的布尔型变量，其占用的内存空间要小于像lchild和rchild的指针变量。结点结构如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">lchild</td><td style="text-align:center">ltag</td><td style="text-align:center">data</td><td style="text-align:center">rtag</td><td style="text-align:center">rchild</td></tr></tbody></table></div><p>其中：</p><ul><li>ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。</li><li>rtag为0时指向该结点的右孩子，为1时指向该结点的后继。</li><li>因此对于图3-1的二叉链表图可以修改为图3-2的样子。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">          0A0</span><br><span class="line">       &#x2F;       \</span><br><span class="line">     0B0       0C0</span><br><span class="line">    &#x2F;   \     &#x2F;   \</span><br><span class="line">  0D0   0E1 1F1   1G1</span><br><span class="line">  &#x2F; \    &#x2F;</span><br><span class="line">1H1 1I1 1J1 </span><br><span class="line">         图3-2</span><br></pre></td></tr></table></figure><h2 id="3-4-线索二叉树结构实现"><a href="#3-4-线索二叉树结构实现" class="headerlink" title="3.4 线索二叉树结构实现"></a>3.4 线索二叉树结构实现</h2><ul><li>线索化的过程就是在遍历的过程中修改空指针的过程。</li></ul><ul><li>中序遍历线索化的递归函数代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">BiThrTree pre;<span class="comment">/* 全局变量，始终指向刚刚访问过的节点 */</span></span><br><span class="line"><span class="comment">/* 中序遍历进行中序线索化 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p)&#123;</span><br><span class="line">    InThreading(p-&gt;lchild); <span class="comment">/* 递归左子树线索化 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!p-&gt;lchild)&#123;<span class="comment">/* 没有左孩子 */</span></span><br><span class="line">      p-&gt;LTag=Thread;<span class="comment">/* 前驱线索 */</span></span><br><span class="line">      p-&gt;lchild=pre;<span class="comment">/* 左孩子指针指向前驱 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pre-&gt;rchild)&#123;<span class="comment">/* 前驱没有右孩子 */</span></span><br><span class="line">      p-&gt;RTag=Thread;<span class="comment">/* 后继线索 */</span></span><br><span class="line">      p-&gt;rchild=p;<span class="comment">/* 前驱右孩子指针指向后继（当前结点p） */</span></span><br><span class="line">    &#125;</span><br><span class="line">    pre=p;<span class="comment">/* 保持pre指向p的前驱 */</span></span><br><span class="line">    </span><br><span class="line">    InThreading(p-&gt;rchild); <span class="comment">/* 递归右子树线索化 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>有了线索二叉树后，我们对它进行遍历时发现，其实就等于是操作一个双向链表结构。</p></li><li><p>和双向链表结构一样，在二叉树线索链表上添加一个头结点，如图3-3所示，并另其lchild域的指针指向二叉树的根节点（图中的a），其rchild域的指针指向中序遍历时访问的最后一个结点（图中的b）。</p></li><li>反之，令中序序列中的第一个结点H的lchild域指针和最后一个结点的rchild域指针均指向头结点。这样定义的好处就是我们既可以从第一个节点起顺后继进行遍历，也可以从最后一个结点起顺前驱进行遍历。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     头指针-&gt;| |0#1| | </span><br><span class="line">           a&#x2F;      | </span><br><span class="line">          0A0      |</span><br><span class="line">       &#x2F;       \   |b</span><br><span class="line">     0B0       0C0 |</span><br><span class="line">    &#x2F;   \     &#x2F;   \|</span><br><span class="line">  0D0   0E1 1F1   1G1</span><br><span class="line">  &#x2F; \    &#x2F;</span><br><span class="line">1H1 1I1 1J1 </span><br><span class="line">         图3-3</span><br></pre></td></tr></table></figure><ul><li>遍历代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* T指向头结点，头结点左链lchild指向根节点，头结点右键rchild指向中序遍历的 */</span></span><br><span class="line"><span class="comment">/* 最后一个结点。中序遍历二叉线索链表表示的二叉树T */</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T)</span></span>&#123;</span><br><span class="line">  BiThrTree p;</span><br><span class="line">  p = T-&gt;lchild;<span class="comment">/* p指向根结点 */</span></span><br><span class="line">  <span class="keyword">while</span>(p != T)&#123;<span class="comment">/* 空树或遍历结束时，p==T */</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;LTag==Link)<span class="comment">/* 当LTag==0时循环到中序序列第一个结点 */</span></span><br><span class="line">      p = p-&gt;lchild;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, p-&gt;data);<span class="comment">/* 显示结点数据，可以更改为其他对结点操作 */</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;RTag==Thread &amp;&amp; p-&gt;rchild!=T)&#123;</span><br><span class="line">      p = p-&gt;rchild;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>, p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;rchild;<span class="comment">/* p进至其右子树根 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于是一个链表的扫描，所以时间复杂度为O(n)。</p><p>如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择。</p><h1 id="4-二叉树遍历算法应用"><a href="#4-二叉树遍历算法应用" class="headerlink" title="4.二叉树遍历算法应用"></a>4.二叉树遍历算法应用</h1><p>算法都在<a href="https://mysticalguest.github.io/2020/06/21/数据结构进阶实训九/">二叉树的应用</a>和<a href="https://mysticalguest.github.io/2020/06/26/数据结构进阶实训十/">二叉排序树</a>噢！</p><h1 id="5-树遍历算法应用"><a href="#5-树遍历算法应用" class="headerlink" title="5.树遍历算法应用"></a>5.树遍历算法应用</h1><ul><li>树转换为二叉树</li><li>森林转换为二叉树</li><li>二叉树转换为树</li><li>二叉树转换为森林</li></ul><h2 id="5-1-树的遍历"><a href="#5-1-树的遍历" class="headerlink" title="5.1 树的遍历"></a>5.1 树的遍历</h2><p>两种方式</p><ul><li>一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树。</li><li>另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点。</li><li>比如图5-1中的树，它的先根遍历序列为<code>ABEFCDG</code>，后根遍历序列为<code>EFBCGDA</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     A</span><br><span class="line">   &#x2F; | \</span><br><span class="line">  B  C  D</span><br><span class="line"> &#x2F; \   &#x2F;</span><br><span class="line">E   F G</span><br><span class="line">   图5-1</span><br></pre></td></tr></table></figure><h2 id="5-2-森林的遍历"><a href="#5-2-森林的遍历" class="headerlink" title="5.2 森林的遍历"></a>5.2 森林的遍历</h2><p>两种方式</p><ul><li><strong>前序遍历</strong>：先访问森林中第一棵树的根结点，然后再依次先根遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林。比如图5-2中的森林，前序遍历序列的结果就是<code>ABCDEFGHJI</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   A           E             G</span><br><span class="line"> &#x2F; | \         |            &#x2F; \</span><br><span class="line">B  C  D        F           H   I</span><br><span class="line">                           |</span><br><span class="line">                           J</span><br><span class="line">              图5-2</span><br></pre></td></tr></table></figure><ul><li><strong>后序遍历</strong>：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。比如图5-2中的森林，后序遍历序列的结果就是<code>BCDAFEJHIG</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
    &lt;em&gt;数据结构第六章要点归纳&lt;/em&gt;
&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十 二叉排序树</title>
    <link href="https://mysticalguest.github.io/2020/06/26/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81/"/>
    <id>https://mysticalguest.github.io/2020/06/26/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81/</id>
    <published>2020-06-26T06:31:30.377Z</published>
    <updated>2020-07-21T11:37:42.188Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">判断二叉树是否为正则二叉树。</span><br><span class="line">  - 正则二叉树的定义：指在二叉树中不存在度为1的分支点。</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>利用二叉树遍历递归的思想；<br>先判断当前节点是否正则；<br>然后递归判断该节点的左右子树。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1代表是正则二叉树，0代表不是</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsRegular</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;LChild==<span class="literal">NULL</span> ^ T-&gt;RChild==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        IsRegular(T-&gt;LChild);</span><br><span class="line">        IsRegular(T-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task1.PNG" alt="DS"></p><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断二叉树是否为完全二叉树？</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>一个树是否为完全二叉树，每个节点有以下4中情况：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">情况一：      情况二：      情况三：      情况四：</span><br><span class="line">  A            A            A             A</span><br><span class="line"> &#x2F; \          &#x2F; \          &#x2F; \           &#x2F; \</span><br><span class="line">B   C        B  NULL     NULL B        NULL NULL</span><br></pre></td></tr></table></figure><blockquote><p>规律是：</p><p>（1）如果当前访问的节点的左右孩子是情况三，说明不是完全二叉树，直接返回false；</p><p>（2）如果当前访问的节点的左右孩子是情况1，继续访问其他节点；</p><p>（3）如果当前访问的节点的左右孩子是情况2或者情况4，那么我们定义一个状态（接下来访问的所有节点必须全部是叶子节点）。只要遇到情况2或者情况4，这个状态就开启了。</p><p>算法就是层次遍历所有节点并做判断。</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">IsCBT</span><span class="params">(BiTree bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)    <span class="comment">// 空树</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  BOOL leaf = FALSE;</span><br><span class="line">  SeqQueue Q;</span><br><span class="line">  BiTree p;</span><br><span class="line">  InitQueue(&amp;Q);</span><br><span class="line">  EnterQueue(&amp;Q, bt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line">    DeleteQueue(&amp;Q, &amp;p);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;LChild==<span class="literal">NULL</span> &amp;&amp; p-&gt;RChild!=<span class="literal">NULL</span>)   <span class="comment">// 情况3: 当前节点有右孩子，没有左孩子</span></span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//上述的状态已经发生，但是当前访问到的节点不是叶节点（有左孩子或者右孩子）</span></span><br><span class="line">    <span class="keyword">if</span>(leaf &amp;&amp; (p-&gt;LChild!=<span class="literal">NULL</span>||p-&gt;RChild!=<span class="literal">NULL</span>))</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;LChild!=<span class="literal">NULL</span>)    <span class="comment">//左孩子不为空，加入到队列中去</span></span><br><span class="line">      EnterQueue(&amp;Q, p-&gt;LChild);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;RChild!=<span class="literal">NULL</span>)   <span class="comment">//右孩子不为空，加入到队列中去</span></span><br><span class="line">      EnterQueue(&amp;Q, p-&gt;RChild);</span><br><span class="line">    <span class="comment">//这个if语句就是判断状态是否要发生</span></span><br><span class="line">    <span class="keyword">if</span>((p-&gt;LChild!=<span class="literal">NULL</span> &amp;&amp; p-&gt;RChild==<span class="literal">NULL</span>)||(p-&gt;LChild==<span class="literal">NULL</span> &amp;&amp; p-&gt;RChild==<span class="literal">NULL</span>))</span><br><span class="line">      leaf=TRUE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task2.PNG" alt="DS"></p><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">二叉树二叉链表存储，结点数据域的值为整数，且取值各不相同。</span><br><span class="line">编写代码判断该二叉树是否为二叉排序树。</span><br><span class="line">二叉排序树，又称二叉查找树。它或者是一颗空树，或者是具有下列性质的二叉树。</span><br><span class="line">  - 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</span><br><span class="line">  - 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</span><br><span class="line">  - 它的的左、右子树也分别为二叉排序树。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>由于二叉排序树的中序遍历得到的是一个单调递增的序列；</p><p>所以根据这个想法，我们可以中序遍历这个二叉树，将得到的序列存入temp数组；</p><p>通过检验temp数组的单调递增性来判断这个二叉树是否为二叉排序树。</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">int</span> temp[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(BiTree root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;LChild != <span class="literal">NULL</span>)</span><br><span class="line">        inorder(root-&gt;LChild);</span><br><span class="line">    temp[i++] = root-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;RChild != <span class="literal">NULL</span>)</span><br><span class="line">        inorder(root-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ISBST</span><span class="params">(<span class="keyword">int</span> temp[], <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;k; i++)</span><br><span class="line">      <span class="keyword">if</span>(temp[i]&lt;temp[i<span class="number">-1</span>])</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task3.PNG" alt="DS"></p><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二叉树二叉链表存储，结点数据域的值为整数，且取值各不相同。</span><br><span class="line">编写代码判断该二叉排序树是否为平衡二叉排序树。</span><br><span class="line">  - 平衡二叉树，是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>通过平衡二叉树的定义可以将判断平衡二叉树的条件分为以下2个：</p><p>（1）首先是一颗二叉排序树；</p><p>（2）每个节点的左右子树的高度差至多为1；</p><p>基于以上两个条件写两个方法；</p><p>第一个条件思想和上一题一样，判断二叉排序树；</p><p>第二个条件通过递归判断每个节点的左右子树高度；</p><p>将两个条件返回值综合，就可以判断出。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deep</span><span class="params">(BiTree bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ld=<span class="number">0</span>,rd=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">    ld=Deep(bt-&gt;LChild)+<span class="number">1</span>;</span><br><span class="line">    rd=Deep(bt-&gt;RChild)+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ld &gt;= rd?ld:rd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BiTree pre=<span class="literal">NULL</span>;</span><br><span class="line"><span class="function">BOOL <span class="title">ISAVL</span><span class="params">(BiTree root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lcd=<span class="number">0</span>,rcd=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> l = ISAVL(root-&gt;LChild);</span><br><span class="line">    <span class="comment">// printf("pre: %d\n", pre-&gt;data);</span></span><br><span class="line">    lcd=Deep(root-&gt;LChild);   <span class="comment">// 左子树的深度</span></span><br><span class="line">    rcd=Deep(root-&gt;RChild);   <span class="comment">// 右子树的深度</span></span><br><span class="line">    <span class="comment">// printf("Deep(root-&gt;LChild): %d\n", Deep(root-&gt;LChild));</span></span><br><span class="line">    <span class="comment">// printf("Deep(root-&gt;RChild): %d\n", Deep(root-&gt;RChild));</span></span><br><span class="line">    <span class="comment">// printf("root: %d\n", root-&gt;data);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(lcd-rcd)&gt;<span class="number">1</span>)&#123;   <span class="comment">// 条件1:每一个节点的左子树和右子树的高度差至多等于1</span></span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(pre-&gt;data &gt; root-&gt;data)&#123;    <span class="comment">// 条件2:中序遍历的前驱节点大于后面节点的值,就不是平衡二叉树</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=root;</span><br><span class="line">    <span class="keyword">int</span> r = ISAVL(root-&gt;RChild);</span><br><span class="line">    <span class="keyword">return</span> l &amp;&amp; r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task4.PNG" alt="DS"></p><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编写代码完成：输入一棵二叉树，输出它的镜像。</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote><p>利用二叉树遍历递归的思想；</p><p>先交换左右子树；</p><p>然后分别镜像左右子树。</p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(BiTree *node1, BiTree *node2)</span></span>&#123;</span><br><span class="line">  BiTree temp;</span><br><span class="line">  temp = *node1;</span><br><span class="line">  *node1=*node2;</span><br><span class="line">  *node2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(BiTree *bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>((*bt)==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  swap(&amp;((*bt)-&gt;LChild), &amp;((*bt)-&gt;RChild));</span><br><span class="line">  Mirror(&amp;((*bt)-&gt;LChild));</span><br><span class="line"></span><br><span class="line">  Mirror(&amp;((*bt)-&gt;RChild));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task5.PNG" alt="DS"></p><hr><h1 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：一个整数和一棵二叉树（树中结点的数据值为int）；</span><br><span class="line">输出：二叉树中结点值的和为输入的的整数的所有路径。</span><br><span class="line">路径的定义：从树的根结点开始往下一直到叶子结点形成的，称为一条路径。</span><br></pre></td></tr></table></figure><h2 id="6-1-算法设计思想"><a href="#6-1-算法设计思想" class="headerlink" title="6.1 算法设计思想"></a>6.1 算法设计思想</h2><blockquote><p>用先序遍历的方式访问节点，使用栈数组ResultStack存储满足条件的路径，使用栈SeqStack存储当前路径节点。</p><p>遍历二叉树的过程：按先序遍历顺序访问每一个节点，访问每个结点时，将结点添加到SeqStack中。</p><p>如果当前结点是叶子结点，则判断当前路径是否是符合条件的路径，符合条件的路径存入到栈数组ResultStack；</p><p>如果当前结点不是叶子结点，则递归当前节点的左右子节点。</p></blockquote><h2 id="6-2-源代码"><a href="#6-2-源代码" class="headerlink" title="6.2 源代码"></a>6.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SeqStack ResultStack[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SumPath</span><span class="params">(BiTree bt, SeqStack *S, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">  BiTree p;</span><br><span class="line">  Push(S, bt);</span><br><span class="line">  <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!bt-&gt;LChild &amp;&amp; !bt-&gt;LChild)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value == bt-&gt;data)&#123;</span><br><span class="line">        ResultStack[i] = *S;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      SumPath(bt-&gt;LChild, S, value-bt-&gt;data);</span><br><span class="line">      SumPath(bt-&gt;RChild, S, value-bt-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(*S))</span><br><span class="line">      Pop(S, &amp;p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-运行情况截图"><a href="#6-3-运行情况截图" class="headerlink" title="6.3 运行情况截图"></a>6.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task6.PNG" alt="DS"></p><hr><h1 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：一个整数数组，判断该数组是否为某二叉排序树的后序遍历序列；</span><br><span class="line">输出：若是，则返回<span class="literal">true</span>，若不是，则返回<span class="literal">false</span>；</span><br><span class="line">   假设该数组中的任何两个数值都互不相同。</span><br></pre></td></tr></table></figure><h2 id="7-1-算法设计思想"><a href="#7-1-算法设计思想" class="headerlink" title="7.1 算法设计思想"></a>7.1 算法设计思想</h2><blockquote><p>后续遍历中，最后一个数字是根结点，将数组中的数字分为两部分：</p><p>第一部分是左子树的值，它的值都比根结点小；</p><p>另一部分是右子树的值，它的值都比根结点大；</p><p>后续遍历（5,7,6,9,11,10,8）的最后一个结点是8，所以在这个数组中，5,7,6都比8小时该数的左子树；而9,11,10都比8大，是该树的右子树。</p><p>我们以同样的方法来分析其左子树和右子树5,7,6，其中6将左子树分为5和7两部分；10将右子树9和11分为两部分。所以这个序列就是一个后续遍历序列。但是（7,4,5,6）就不是它的一个后续遍历序列。因为6大于7，所以也就是说7,4,5都是其右子树，但是很不幸还有4比6小，所以不可能是一个后续遍历。</p></blockquote><h2 id="7-2-源代码"><a href="#7-2-源代码" class="headerlink" title="7.2 源代码"></a>7.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">VerifySequenceOfBST</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">array</span>==<span class="literal">NULL</span> || length&lt;=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  <span class="keyword">int</span> root=<span class="built_in">array</span>[length<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;    <span class="comment">//左子树的结点小于根节点；</span></span><br><span class="line">  <span class="keyword">for</span>(;i&lt;length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[i]&gt;root)</span><br><span class="line">      <span class="keyword">break</span>;    <span class="comment">//找完了全部的左子树的序列；</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> j=i;<span class="comment">//右子树的结点大于根结点；</span></span><br><span class="line">  <span class="keyword">for</span>(;j&lt;length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[j]&lt;root)</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  BOOL left=TRUE;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">    left=VerifySequenceOfBST(<span class="built_in">array</span>,i);</span><br><span class="line">  BOOL right=TRUE;</span><br><span class="line">  <span class="keyword">if</span>(j&lt;length<span class="number">-1</span>)</span><br><span class="line">    right=VerifySequenceOfBST(<span class="built_in">array</span>+i,length-i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-运行情况截图"><a href="#7-3-运行情况截图" class="headerlink" title="7.3 运行情况截图"></a>7.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS10/practice10_task7.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训九 二叉树的应用</title>
    <link href="https://mysticalguest.github.io/2020/06/23/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B9%9D/"/>
    <id>https://mysticalguest.github.io/2020/06/23/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B9%9D/</id>
    <published>2020-06-23T00:00:00.000Z</published>
    <updated>2020-07-21T11:37:42.179Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">建二叉树二叉链表存储</span><br><span class="line">  - 扩展的先序序列（之前采用的方法）</span><br><span class="line">  此次要求：已知两个遍历序列建二叉树（先/中，后/中）</span><br><span class="line">  - 其先、中序遍历序列分别存放在两个数组pre[]和inorder[]中。</span><br><span class="line">  - 其中、后序遍历序列分别存放在两个数组inorder[]和post中。</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>两种建树的思想相同，都是分治的思想；<br>通过前序遍历，第一个元素就是树的根节点；<br>然后在重建左子树，找到左子树的根节点，重建右子树，找到右子树的根节点，递归下去；<br>中序+后续遍历重建树也是如此；<br>后续序列的最后一个元素就是树的根节点。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ElemType elem;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序+中序重建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReBuildByPreAndInOrder</span><span class="params">(<span class="keyword">char</span> *prelist, <span class="keyword">char</span> *inlist, <span class="keyword">int</span> len, BiTree *bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!prelist || !inlist || len&lt;=<span class="number">0</span> )    <span class="comment">//空树 </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 找到根结点在中序遍历中的位置 </span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(inlist[i] == prelist[<span class="number">0</span>])     </span><br><span class="line">      <span class="keyword">break</span>;           </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化根结点 </span></span><br><span class="line">  *bt = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">  <span class="keyword">if</span>(!bt) <span class="comment">// 申请失败</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  (*bt)-&gt;LChild = (*bt)-&gt;RChild = <span class="literal">NULL</span>;</span><br><span class="line">  (*bt)-&gt;elem = prelist[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重建左子树</span></span><br><span class="line">  ReBuildByPreAndInOrder(prelist+<span class="number">1</span>, inlist, i, &amp;(*bt)-&gt;LChild); </span><br><span class="line">  <span class="comment">// 重建右子树 </span></span><br><span class="line">  ReBuildByPreAndInOrder(prelist+i+<span class="number">1</span>, inlist+i+<span class="number">1</span>, len-i<span class="number">-1</span>, &amp;(*bt)-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序+后序重建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReBuildByInAndPostOrder</span><span class="params">(<span class="keyword">char</span> *inlist,<span class="keyword">char</span> *postlist, <span class="keyword">int</span> len, BiTree *bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!inlist || !postlist || len&lt;=<span class="number">0</span> )   <span class="comment">//空树 </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 找到根结点在中序遍历中的位置 </span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(inlist[i] == postlist[len<span class="number">-1</span>])      </span><br><span class="line">      <span class="keyword">break</span>;           </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化根结点 </span></span><br><span class="line">  *bt = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">  <span class="keyword">if</span>(!bt)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  (*bt)-&gt;LChild = (*bt)-&gt;RChild = <span class="literal">NULL</span>;</span><br><span class="line">  (*bt)-&gt;elem = postlist[len<span class="number">-1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重建左子树 </span></span><br><span class="line">  ReBuildByInAndPostOrder(inlist, postlist, i, &amp;(*bt)-&gt;LChild);         </span><br><span class="line">  <span class="comment">//重建右子树 </span></span><br><span class="line">  ReBuildByInAndPostOrder(inlist+i+<span class="number">1</span>, postlist+i, len-i<span class="number">-1</span>, &amp;(*bt)-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(BiTree bt,<span class="keyword">int</span> nLayer)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  PrintTree(bt-&gt;RChild,nLayer+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nLayer;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, bt-&gt;elem);</span><br><span class="line">  PrintTree(bt-&gt;LChild,nLayer+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> pre[<span class="number">7</span>]=&#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'C'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>&#125;,</span><br><span class="line">    inorder1[<span class="number">7</span>] = &#123;<span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>, <span class="string">'F'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;,</span><br><span class="line">    inorder2[<span class="number">9</span>] = &#123;<span class="string">'G'</span>, <span class="string">'D'</span>, <span class="string">'H'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'C'</span>, <span class="string">'I'</span>, <span class="string">'F'</span>&#125;,</span><br><span class="line">    post[<span class="number">9</span>] = &#123;<span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'F'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 前序+中序重建二叉树 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give the preorder and midorder traversal of a binary tree: \nPreorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, pre[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nMidorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, inorder1[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BiTree T1=<span class="literal">NULL</span>;</span><br><span class="line">  ReBuildByPreAndInOrder(pre, inorder1, <span class="number">7</span>, &amp;T1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe binary tree constructed by two traversal sequences is: \n"</span>);</span><br><span class="line">  PrintTree(T1, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* 前序+中序重建二叉树 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 中序+后序重建二叉树 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give the midorder and postorder traversal of a binary tree: \nMidorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, inorder2[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nPostorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, post[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BiTree T2=<span class="literal">NULL</span>;</span><br><span class="line">  ReBuildByInAndPostOrder(inorder2, post, <span class="number">9</span>, &amp;T2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe binary tree constructed by two traversal sequences is: \n"</span>);</span><br><span class="line">  PrintTree(T2, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* 中序+后序重建二叉树 */</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS9/practice9_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">求二叉树中值为x的节点所在的层号。</span><br><span class="line">二叉树bt采用二叉链表存储；</span><br><span class="line">设计一个算法level（bt,x）求二叉树中值为x的节点所在的层号</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>在求二叉树深度算法的基础上改进算法；<br>在含有目标节点的子树上查找，到达目标节点即结束递归</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(BiTree bt, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(bt-&gt;elem==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// printf("layer(bt-&gt;LChild, x): %d\n", layer(bt-&gt;LChild, x));</span></span><br><span class="line">    <span class="keyword">if</span>(layer(bt-&gt;LChild, x))&#123;</span><br><span class="line">      cot = layer(bt-&gt;LChild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("layer(bt-&gt;RChild, x): %d\n", layer(bt-&gt;RChild, x));</span></span><br><span class="line">    <span class="keyword">if</span>(layer(bt-&gt;RChild, x))&#123;</span><br><span class="line">      cot = layer(bt-&gt;RChild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_node_level</span><span class="params">(BiTree bt, <span class="keyword">char</span> x, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bt == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;elem == x)</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = find_node_level(bt-&gt;LChild, x, h+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> find_node_level(bt-&gt;RChild, x, h+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法3</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level_in_x</span><span class="params">(BiTree BT,<span class="keyword">char</span> x,<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (BT == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(BT-&gt;elem == x)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x in %d"</span>,level);</span><br><span class="line">  &#125;</span><br><span class="line">  level++;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"1:%d----\n"</span>, level);</span><br><span class="line">  level_in_x(BT-&gt;LChild,x,level);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"2:%d----\n"</span>, level);</span><br><span class="line">  level_in_x(BT-&gt;RChild,x,level);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"3:%d----\n"</span>, level);</span><br><span class="line">  level--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS9/practice9_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">求二叉树的宽度。</span><br><span class="line">利用二叉树层次遍历求二叉树的宽度；</span><br><span class="line">二叉树的宽度即二叉树同层结点数的最大值</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>我利用一个足够大的全局数组来记录遍历过程中的二叉树宽度；<br>利用一个变量max来记录最大宽度，即为所求；<br>求宽度的函数依然采用的是先序遍历递归的思想，加一个形参k，对应width数组下标，记录当前深度，来传给子层信息；<br>如果当前深度k的节点不为空，那么width[k]++，来记录宽度；<br>max为宽度最大值</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span>[<span class="built_in">size</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MaxWidth</span><span class="params">(BiTree T,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">width</span>[k]++;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">max</span>&lt;<span class="built_in">width</span>[k])</span><br><span class="line">    <span class="built_in">max</span>=<span class="built_in">width</span>[k];</span><br><span class="line">  MaxWidth(T-&gt;LChild, k+<span class="number">1</span>);</span><br><span class="line">  MaxWidth(T-&gt;RChild, k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS9/practice9_task3.PNG" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二叉树bt采用二叉链表存储，设计算法实现采用括号表示法输出该二叉树。</span><br><span class="line">            A</span><br><span class="line">          /   \</span><br><span class="line">        B     C</span><br><span class="line">        /     / \</span><br><span class="line">      D     E   F</span><br><span class="line">        \</span><br><span class="line">        G                        A(B(D(,G)),C(E,F))</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>把题目中的括号表示法A(B(D(,G)),C(E,F))，去掉括号变为：<br>ABDGCEF<br>这种写法不是我们熟悉的先序遍历吗！<br>所以我就在二叉树先序遍历算法的基础上改进算法；</p><blockquote><p>a.在节点的左右子树不为空时输出“（”；<br>b.当节点右子树不为空时输出“，”；<br>c.在节点的左右子树不为空时输出“）”</p></blockquote></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Brackets</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;elem);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;LChild!=<span class="literal">NULL</span>||T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"( "</span>);</span><br><span class="line">  Brackets(T-&gt;LChild);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">", "</span>, T-&gt;elem);</span><br><span class="line">  Brackets(T-&gt;RChild);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;LChild!=<span class="literal">NULL</span>||T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" )"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS9/practice9_task4.PNG" alt="DS"></p><hr><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">求二叉树的路径长度。</span><br><span class="line">二叉树二叉链表存储</span><br><span class="line">二叉树的路径长度即：二叉树中所有结点的路径长度之和。</span><br><span class="line">（结点的路径长度即：从根到结点的分支数）</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote><p>路径长度即为分支数之和；<br>根据二叉树的性质；<br>每个节点的头部都有一个分支，除了根节点；<br>所以分支数之和就是二叉树节点数-1；<br>那么采用递归的方法求得节点数，就可以求得路劲长度了</p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Node</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Node(T-&gt;LChild) + Node(T-&gt;RChild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The path length of this binary tree is: %d\n"</span>, Node(T)<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS9/practice9_task5.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客迁移</title>
    <link href="https://mysticalguest.github.io/2020/06/21/Hexo/Hexo%E8%BF%81%E7%A7%BB/"/>
    <id>https://mysticalguest.github.io/2020/06/21/Hexo/Hexo%E8%BF%81%E7%A7%BB/</id>
    <published>2020-06-21T06:28:44.351Z</published>
    <updated>2020-07-21T11:37:42.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo用户指南-博客迁移"><a href="#Hexo用户指南-博客迁移" class="headerlink" title="Hexo用户指南 - 博客迁移"></a>Hexo用户指南 - 博客迁移</h2><p>GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。</p><a id="more"></a><hr><h2 id="解决类似问题"><a href="#解决类似问题" class="headerlink" title="解决类似问题"></a>解决类似问题</h2><blockquote><p>创建Git分支将Hexo博客迁移到其它电脑<br>换了电脑如何使用hexo继续写博客</p></blockquote><p style="color: red">我整理了网上的方法并根据自己的实际情况总结出了我的解决方法</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h3><p>电脑的基础配置还是要有的，比如：</p><blockquote><p>Git客户端<br>NodeJS<br>生成SSH密钥等</p></blockquote><h3 id="2-源文件拷贝"><a href="#2-源文件拷贝" class="headerlink" title="2.源文件拷贝"></a>2.源文件拷贝</h3><p>Hexo博客系统中影响迁移的只有一部分文件和文件夹，所以只需要备份它们即可</p><div class="table-container"><table><thead><tr><th>文件（夹）</th><th>说明</th></tr></thead><tbody><tr><td>scaffolds/</td><td>博客文章的模版</td></tr><tr><td>source/</td><td>所有博客文章，以及about、tags、categories等page</td></tr><tr><td>themes/</td><td>网站的主题所在文件夹</td></tr><tr><td>.gitignore</td><td>在push时需要忽略的文件和文件夹</td></tr><tr><td>_config.yml</td><td>站点配置文件</td></tr><tr><td>package.json</td><td>依赖包的名称和版本号</td></tr></tbody></table></div><p>我们要做的就是通过各种方式备份这些文件和文件夹，比如说以下两种静态备份方式：</p><blockquote><p>1.通过U盘或移动硬盘保存<br>2.通过网盘保存</p></blockquote><h3 id="3-本地配置"><a href="#3-本地配置" class="headerlink" title="3.本地配置"></a>3.本地配置</h3><p><strong><br>  <big>3.1 创建目录</big></strong></p><p>创建一个名为<code>&quot;自己的git用户名.github.io&quot;</code>的文件夹（推荐用这个用户名以免后面遇到问题），<br><strong><br>  <big>3.2 初始化 Hexo</big></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><br><strong><br>  <big>3.3 初始化git本地仓库</big></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><br><strong><br>  <big>3.4 复制文件到指定目录</big></strong></p><p>把备份过的文件和文件夹都复制到hexo文件夹下<br>完成后hexo的目录结构应该如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.deploy_git</span><br><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">scaffolds</span><br><span class="line">scource</span><br><span class="line">themes</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml</span><br><span class="line">db.json</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure></p><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>这时候浏览器基本可以看到博客了。</p><h3 id="5-部署发布文章"><a href="#5-部署发布文章" class="headerlink" title="5.部署发布文章"></a>5.部署发布文章</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除缓存 网页正常情况下可以忽略此条命令</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成静态网页</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 开始部署</span></span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo用户指南-博客迁移&quot;&gt;&lt;a href=&quot;#Hexo用户指南-博客迁移&quot; class=&quot;headerlink&quot; title=&quot;Hexo用户指南 - 博客迁移&quot;&gt;&lt;/a&gt;Hexo用户指南 - 博客迁移&lt;/h2&gt;&lt;p&gt;GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="https://mysticalguest.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训八 数组，规律</title>
    <link href="https://mysticalguest.github.io/2020/06/21/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AB/"/>
    <id>https://mysticalguest.github.io/2020/06/21/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AB/</id>
    <published>2020-06-21T04:58:34.615Z</published>
    <updated>2020-07-21T11:37:42.191Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">荷兰国旗</span><br><span class="line">现有n个红蓝白三种不同颜色的小球，乱序排列在一起；</span><br><span class="line">请通过两两交换任意两个球，使得从左到右的球依次：红球、白球、蓝球</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>把题目理解为这样的问题：<br>一个循环，把红色球和剩余的球交换，那么红球就排序好了，就是两两交换问题；<br>另一个循环，把剩下没排序好的白球和蓝球也排序好，也是两两交换；<br>程序的时间复杂度取决于长度取决于第一个循环，O(n)</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHITE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUE 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> *q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  temp = *p;</span><br><span class="line">  *p = *q;</span><br><span class="line">  *q = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> collor)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=start, j=<span class="built_in">end</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[i]==collor)&#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[j]!=collor)&#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;<span class="built_in">array</span>[i], &amp;<span class="built_in">array</span>[j]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ball[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> i, num_red=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"There are 20 red, blue and white balls in three different colors, \</span></span><br><span class="line"><span class="string">  arranged together in disorder:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==RED)&#123;</span><br><span class="line">      num_red++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Red  "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==WHITE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"White  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==BLUE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Blue  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  sort(ball, <span class="number">0</span>, <span class="number">20</span>, RED); <span class="comment">// 把红色球排好序</span></span><br><span class="line">  sort(ball, num_red, <span class="number">20</span>, WHITE); <span class="comment">// 把白色球排好序</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nAfter sorting: \n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==RED)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Red  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==WHITE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"White  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==BLUE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Blue  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS8/practice8_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">完美洗牌算法</span><br><span class="line">有一个长度为2n的数组&#123;a1,a2,a3,…an,b1,b2,b3, …bn&#125;,</span><br><span class="line">希望“排序”后，变为&#123;a1, b1, a2, b2, a3, b3,…an, bn&#125;。</span><br><span class="line">要求：尽可能高效。能否在时间复杂度为O(n)，空间复杂度为O（1）的解法</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>依次考察每个位置的变化规律<br>a1: 0 -&gt; 不变<br>a2: 1 -&gt; 2<br>a3: 2 -&gt; 4<br>a4: 3 -&gt; 6<br>…<br>an: n-1 -&gt; 2n-2<br>b1: n -&gt; 1<br>b2: n+1 -&gt; 3<br>b3: n+2 -&gt; 5<br>…<br>bn-1: 2n-2 -&gt; 2n-3<br>bn: 2n-1 -&gt; 不变<br>可以得出下标的变化规律：<br>j=(i * 2) % (n2 -1)<br>所以将值赋给辅助数组即可</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perfect_shuffle</span><span class="params">(<span class="keyword">char</span> *a[],<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n2 = n * <span class="number">2</span>, i, j;</span><br><span class="line">  <span class="keyword">char</span> *b[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n2<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    j=(i * <span class="number">2</span>) % (n2 <span class="number">-1</span>);</span><br><span class="line">    b[j] = a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n2<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    a[i] = b[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS8/practice8_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">买票找零问题</span><br><span class="line">在一场激烈的球赛开始之前，售票工作正在紧张地进行中，每张球票为50元。</span><br><span class="line">现有2n个人排队购票，其中有n个人手持50元的钞票，</span><br><span class="line">另外的n个人手持100元的钞票，假设开始售票时，售票处没有零钱。</span><br><span class="line">要求：问这2n个人有多少种排队方式，不至于使售票处出现找不开钱的局面呢</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>找规律递推的方法；<br>要求持50元n人，100元n人，多少种排队方式，那么排在最后的一定是持100元的人，所以和持50元n人，100元n-1人的排队方式相同；<br>发现规律，持50元n-1人，100元n-1人和持50元n-1人，100元n-2人的排队方式相同；<br>所以这就可以从最小的1开始求了，然后累加到n，得到最后结果</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">arrange</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[N][N];</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="comment">// 当100元和50元人数不相等，100元0人，则只有1中解决方案</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">    <span class="built_in">array</span>[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若50元人数小于100元人数，则没有解决方案</span></span><br><span class="line">  <span class="comment">// 则二维数组的上三角的值都为0，不用初始化赋值</span></span><br><span class="line">  <span class="comment">// 开始递推，填满下三角矩阵数组</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=i; j++)</span><br><span class="line">      <span class="built_in">array</span>[i][j]=<span class="built_in">array</span>[i<span class="number">-1</span>][j]+<span class="built_in">array</span>[i][j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">array</span>[n][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS8/practice8_task3.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java中main方法参数String[] args的使用</title>
    <link href="https://mysticalguest.github.io/2020/06/21/Java/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A32/"/>
    <id>https://mysticalguest.github.io/2020/06/21/Java/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A32/</id>
    <published>2020-06-21T04:58:34.607Z</published>
    <updated>2020-07-21T11:37:42.201Z</updated>
    
    <content type="html"><![CDATA[<p align="center">  <em>Java development notes document</em></p><p><a href="https://github.com/MysticalGuest/OPP-Java" target="_blank" rel="github"><h4 align="center">Source Code</h4></a></p><!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --><a id="more"></a><hr><h2 id="Java规定"><a href="#Java规定" class="headerlink" title="Java规定"></a>Java规定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main方法参数必须为字符串数组(String [ ])，</span><br><span class="line">变量名可以随意，通常使用args即是arguments（”参数”的复数形式）的缩写。</span><br></pre></td></tr></table></figure><h2 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种写法都是一样的，都表示字符串数组<strong>args</strong>，其中<strong>args</strong>只是普通变量名，可以随意定义（前提是符合变量名规则）</p><h2 id="思考讨论"><a href="#思考讨论" class="headerlink" title="思考讨论"></a>思考讨论</h2><p><strong><br>  <big style="color:blue">1. 不按Java规定</big></strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将 String[] 改为 String</span></span><br><span class="line">    System.out.println(<span class="string">"Test!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照上面代码进行编码，那就不能被系统识别为主方法；<br>系统就会提示类似如下错误：<br><mark style="color: red"><br>Error: Main method not found in the file, please define the main method as: public static void main(String[] args)</mark></p><p><strong>  <big style="color:blue">2. 同名main方法</big></strong></p><p>如果已经有正确main方法，再有同名的main方法就是方法重载了。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 正确标准完美的main方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 方法重载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>    <big style="color:blue">3. 回归正题：参数String[] args的作用</big>  </strong></p><p>参数<code>String[] args</code>的作用就是可以在<code>main</code>方法运行前将参数传入<code>main</code>方法中。</p><p>3.1 从控制台，输入编译执行命令时传参数。例如下面代码：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)</span><br><span class="line">      System.out.println(args[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.2 但是此时<code>args[]</code>并没有赋值，我们需要从控制台命令行进行赋值，就像这样：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Compile/Java/TestMain1.png" alt="JAVA"></p><p>所以在命令行中使用<code>String[] args</code>即传入参数的使用为：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java java_file_name arg1 arg2 arg3 ...</span><br></pre></td></tr></table></figure><p>  <strong>    <big style="color:blue">4. eclipse举例</big>  </strong></p><p>在Eclipse使用<code>String[] args</code><br>4.1 </p><p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Compile/Java/TestMain2.png" alt="JAVA"></p><br>4.2 </p><p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Compile/Java/TestMain3.png" alt="JAVA"></p><br>最后点击Run运行即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
  &lt;em&gt;Java development notes document&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/OPP-Java&quot; target=&quot;_blank&quot; rel=&quot;github&quot;&gt;&lt;h4 align=&quot;center&quot;&gt;Source Code&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --&gt;
    
    </summary>
    
    
      <category term="Compile" scheme="https://mysticalguest.github.io/categories/Compile/"/>
    
    
      <category term="Java" scheme="https://mysticalguest.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
