<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longing(MysteryGuest的博客)</title>
  
  <subtitle>MysticalGuest Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-21T07:21:09.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MysticalGuest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客迁移</title>
    <link href="http://yoursite.com/2020/06/21/Hexo%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2020/06/21/Hexo%E8%BF%81%E7%A7%BB/</id>
    <published>2020-06-21T06:28:44.351Z</published>
    <updated>2020-06-21T07:21:09.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo用户指南-博客迁移"><a href="#Hexo用户指南-博客迁移" class="headerlink" title="Hexo用户指南 - 博客迁移"></a>Hexo用户指南 - 博客迁移</h2><p>GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。</p><a id="more"></a><hr><h2 id="解决类似问题"><a href="#解决类似问题" class="headerlink" title="解决类似问题"></a>解决类似问题</h2><blockquote><p>创建Git分支将Hexo博客迁移到其它电脑<br>换了电脑如何使用hexo继续写博客</p></blockquote><p><mark>我整理了网上的方法并根据自己的实际情况总结出了我的解决方法</mark></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h3><p>电脑的基础配置还是要有的，比如：</p><blockquote><p>Git客户端<br>NodeJS<br>生成SSH密钥等</p></blockquote><h3 id="2-源文件拷贝"><a href="#2-源文件拷贝" class="headerlink" title="2.源文件拷贝"></a>2.源文件拷贝</h3><p>Hexo博客系统中影响迁移的只有一部分文件和文件夹，所以只需要备份它们即可</p><table><thead><tr><th>文件（夹）</th><th>说明</th></tr></thead><tbody><tr><td>scaffolds/</td><td>博客文章的模版</td></tr><tr><td>source/</td><td>所有博客文章，以及about、tags、categories等page</td></tr><tr><td>themes/</td><td>网站的主题所在文件夹</td></tr><tr><td>.gitignore</td><td>在push时需要忽略的文件和文件夹</td></tr><tr><td>_config.yml</td><td>站点配置文件</td></tr><tr><td>package.json</td><td>依赖包的名称和版本号</td></tr></tbody></table><p>我们要做的就是通过各种方式备份这些文件和文件夹，比如说以下两种静态备份方式：</p><blockquote><p>1.通过U盘或移动硬盘保存<br>2.通过网盘保存</p></blockquote><h3 id="3-本地配置"><a href="#3-本地配置" class="headerlink" title="3.本地配置"></a>3.本地配置</h3><strong>  <big>3.1 创建目录</big></strong><p>创建一个名为<code>&quot;自己的git用户名.github.io&quot;</code>的文件夹（推荐用这个用户名以免后面遇到问题），<br><strong><br>  <big>3.2 初始化 Hexo</big><br></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><strong>  <big>3.3 初始化git本地仓库</big></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><strong>  <big>3.4 复制文件到指定目录</big></strong>把备份过的文件和文件夹都复制到hexo文件夹下完成后hexo的目录结构应该如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.deploy_git</span><br><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">scaffolds</span><br><span class="line">scource</span><br><span class="line">themes</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml</span><br><span class="line">db.json</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>这时候浏览器基本可以看到博客了。</p><h2 id="5-部署发布文章"><a href="#5-部署发布文章" class="headerlink" title="5.部署发布文章"></a>5.部署发布文章</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除缓存 网页正常情况下可以忽略此条命令</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成静态网页</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 开始部署</span></span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo用户指南-博客迁移&quot;&gt;&lt;a href=&quot;#Hexo用户指南-博客迁移&quot; class=&quot;headerlink&quot; title=&quot;Hexo用户指南 - 博客迁移&quot;&gt;&lt;/a&gt;Hexo用户指南 - 博客迁移&lt;/h2&gt;&lt;p&gt;GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训四 链表</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%9B%9B/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%9B%9B/</id>
    <published>2020-06-21T05:01:00.471Z</published>
    <updated>2020-06-21T05:00:02.278Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个单链表L，L为头指针，判断该链表内是否局部存在环？</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br><p>使用快慢指针判断单链表是否存在环。<br>使用slow、fast 2个指针，slow慢指针每次向前走1步，fast快指针每次向前走2步，<br>若存在环的话，必定存在某个时候 slow = fast 快慢指针相遇。<br>list 带头结点的单链表<br>返回值 &gt;0:存在环返回环的位置    0:不存在环<br></br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitLinkList</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">  *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  Node *r=*L, *s, *temp;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    s=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    s-&gt;data=i;</span><br><span class="line">    r-&gt;next=s;</span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;   <span class="comment">// 记住一个元素,以助后面成环</span></span><br><span class="line">      temp=r;</span><br><span class="line">    &#125;</span><br><span class="line">    r=s;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next=temp;   <span class="comment">// 成环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLoopLinkList</span><span class="params">(LinkList <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">  <span class="comment">//空指针</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//只有头结点,没有元素</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node* slow = <span class="built_in">list</span>;</span><br><span class="line">  Node* fast = <span class="built_in">list</span>;</span><br><span class="line">  <span class="keyword">int</span> loc = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fast-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="comment">//快指针 到底链表尾结点说明 没有环，此时slow 指向中间结点</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (fast-&gt;next != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//某个时刻 快慢指针相遇，说明此处存在环！</span></span><br><span class="line">    <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/b8b59ac8/66aa481f.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到单链表中倒数第k个结点。找出解决方法</span><br><span class="line">要求：尽可能高效</span><br><span class="line">例如：一个链表有6个结点，（1,2,3,4,5,6）</span><br><span class="line">这个链表的倒数第3个结点是：值为4的结点</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote></br><p>先遍历获得链表长度listlen(L)；<br>然后计算得出倒数第k个节点的正数位置，也就是listlen(L)-k+1；<br>遍历到listlen(L)-k+1的节点，然后输出<br></br></p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 求链表长度 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listlen</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">  Node *head=L;</span><br><span class="line">  <span class="keyword">while</span>(head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    len++;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;listlen(L)-k+<span class="number">1</span>; i++)&#123;</span><br><span class="line">  p=p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/067194e7/b7dd7551.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在O(1)时间删除单链表结点；</span><br><span class="line">给定单链表L及其中一个结点地址p,定义一个函数实现在O(1)时间删除该结点。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote></br><p>将节点p的下一个节点的值赋给p；<br>p的后继指向p的后继的后继；<br>然后free掉p的后继<br></br></p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitLinkList</span><span class="params">(LinkList *L, LinkList *temp)</span> </span>&#123;</span><br><span class="line">  *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  Node *r=*L, *s;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    s=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    s-&gt;data=i;</span><br><span class="line">    r-&gt;next=s;</span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;   <span class="comment">// 记住一个节点地址</span></span><br><span class="line">      *temp=r;</span><br><span class="line">    &#125;</span><br><span class="line">    r=s;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line">InitLinkList(&amp;L, &amp;p);</span><br><span class="line"></span><br><span class="line">s=p-&gt;next;</span><br><span class="line">p-&gt;data = s-&gt;data;</span><br><span class="line">p-&gt;next=s-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/f045dd67/6747c056.png" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假定用带头结点的单链表保存单词，当两个单词有相同的后缀时，则可共享相同的后缀存储空间，例如：loading和being。</span><br><span class="line">  - 设计一个高效的算法，找出str1和str2的共同后缀的起始位置。（可能有也可能没有。）</span><br><span class="line">  - 分析算法的时空效率</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote></br><p>分别获得链表str1和str2的长度；<br>移动长度较长的链表的头指针，使得两指针的起始位置相同；<br>然后同时往后移动，遇到相同地址的节点即为共同后缀的起始位置<br></br></p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">reverse</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span> || L-&gt;next-&gt;next == <span class="literal">NULL</span>)  &#123;</span><br><span class="line">    <span class="keyword">return</span> L;   <span class="comment">/*链表为空或只有一个元素则直接返回*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  Node *r, *p = L-&gt;next, *q = L-&gt;next-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(q != <span class="literal">NULL</span>)&#123;        </span><br><span class="line">    r = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    p = q;</span><br><span class="line">    q = r;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*此时q指向原始链表最后一个元素，也是逆转后的链表的表头元素*/</span></span><br><span class="line">  L-&gt;next-&gt;next = <span class="literal">NULL</span>;  <span class="comment">/*设置链表尾*/</span></span><br><span class="line">  L-&gt;next = p;           <span class="comment">/*调整链表头*/</span></span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">commonSuffix1</span><span class="params">(LinkList L1, LinkList L2)</span></span>&#123;</span><br><span class="line">  Node *p, *q;</span><br><span class="line">  <span class="keyword">int</span> len1, len2;</span><br><span class="line">  len1=listlen(L1);</span><br><span class="line">  len2=listlen(L2);</span><br><span class="line">  <span class="keyword">if</span>(lastNode(L1) != lastNode(L2))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(p=L1; len1&gt;len2; len1--)&#123;</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(q=L2; len2&gt;len1; len2--)&#123;</span><br><span class="line">      q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != q-&gt;next)&#123;</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">      q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">commonSuffix2</span><span class="params">(LinkList L1, LinkList L2)</span></span>&#123;</span><br><span class="line">  Node *p=L1, *q=L2;</span><br><span class="line">  <span class="keyword">if</span>(L1-&gt;next == <span class="literal">NULL</span> || L2-&gt;next == <span class="literal">NULL</span>)&#123;   <span class="comment">// 空，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// else if(L1-&gt;next != L2-&gt;next)&#123;   // 这里的第一个元素,是原来的最后一个元素</span></span><br><span class="line">  <span class="comment">//   return NULL;    // 不相等直接返回</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> &amp;&amp; q-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != q-&gt;next)&#123;</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">      q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/37c48316/4052ca6d.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训一 位运算，优化算法</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%80/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%80/</id>
    <published>2020-06-21T04:58:34.684Z</published>
    <updated>2020-06-17T05:01:04.051Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于一个字节（8bit)的无符号整型变量</span><br><span class="line">求其二进制表示中“1”的个数。要求算法的执行效率尽可能高。</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br><p>用户直接输入一个8位无符号整型常数，并进行用户输入的校验，<br>如果不满足条件，提示用户重新输入，直到输入正确；<br>将十进制转换为二进制；<br>持续下面循环8次：<br>将二进制数模2，结果为1，计数器加1，然后二进制数右移一位；<br>循环结束，1的个数为计数器值。<br></br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter an 8-bit unsigned integer constant:"</span>);</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">array</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, <span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(<span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">// 判断用户输入是否是8位无符号整型常量</span></span><br><span class="line">    <span class="comment">// 并判断用户输入是否为二进制</span></span><br><span class="line">    <span class="comment">// 如果长度不为8,或不是二进制数,则重新输入</span></span><br><span class="line">    <span class="keyword">while</span>(len!=<span class="number">8</span> || <span class="built_in">strspn</span>(<span class="built_in">array</span>, <span class="string">"01"</span>)!=len)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your input does not meet the conditions!\n \</span></span><br><span class="line"><span class="string">        Please enter an 8-bit unsigned integer constant as required:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, <span class="built_in">array</span>);</span><br><span class="line">        len = <span class="built_in">strlen</span>(<span class="built_in">array</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> arrayToInt = strtol(<span class="built_in">array</span>, <span class="literal">NULL</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//十进制转二进制函数的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">transfer</span>(arrayToInt)%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            num++;</span><br><span class="line">        arrayToInt=arrayToInt&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The number of \"1\" in its binary representation is: %d.\n"</span>, num);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The program will continue to run, press any key to close it."</span>);</span><br><span class="line">    getch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> binary = <span class="number">0b0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i ; i&lt;x ; i++)&#123;</span><br><span class="line">        binary++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/c7a45ebf/e2ac2ab9.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数N，N！末尾会有多少个0呢？编写算法计算给定的N！末尾有多少个0？</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote></br><p>一个数的阶乘末尾有多少0，即判断这个数除以10的余数是否为0，如果为0，则末尾是0。<br></br></p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(factorial&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(factorial%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">    numOfZero++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  factorial = factorial / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/81185c7f/37d10425.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">求N!的二进制表示中最低位的1的位置。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote></br><p>初始化计数器为0；<br>先把n!化为二进制表示的形式，再把其二进制形式模2，如果结果为0，将其二进制形式右移一位，并且计数器加1；<br>循环上面的操作，直到模2结果为1，结束循环，计数器即为最后结果。<br></br></p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  <span class="comment">// 十进制转二进制</span></span><br><span class="line">  <span class="keyword">int</span> binary=<span class="number">0b0</span>, i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;x; i++)&#123;</span><br><span class="line">    binary++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,factorial=<span class="number">1</span>, i=<span class="number">1</span>, numOfZero=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter an integer and the program will calculate its factorial:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(i ; i&lt;=n; i++)&#123;   <span class="comment">// 求阶乘</span></span><br><span class="line">    factorial *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The factorial of n is %d\n"</span>, factorial);</span><br><span class="line">  <span class="keyword">int</span> binary = convert(factorial);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;   <span class="comment">// 求位置</span></span><br><span class="line">    numOfZero++;</span><br><span class="line">    <span class="keyword">if</span>(binary%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    binary = binary&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"When representing n! In binary, \</span></span><br><span class="line"><span class="string">  the position of the lowest bit 1 is (from right to left): %d\n"</span>, numOfZero);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/505913ea/4eb98497.png" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于一个由N个整数组成的数组，设计算法（程序），求出该数组中的最大值和最小值。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote></br><p>先判断数组的前两个值，将小的赋给min，将大的赋给max；<br>循环从数组的下标2开始，将数组下标为2的值记为num，如果num小于min，则将num赋值给min，反之则不变；<br>如果num大于max，则将num赋值给max，反之则不变；<br>直到循环结束，max则为最大值，min为最小值。<br></br></p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">random</span>, num[<span class="number">20</span>], i=<span class="number">0</span>, <span class="built_in">max</span>, <span class="built_in">min</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give an array of 20 integers:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;<span class="number">20</span>; i++)&#123;    <span class="comment">// 使用随机数初始化数组</span></span><br><span class="line">    <span class="built_in">random</span> = rand()%<span class="number">100</span>;</span><br><span class="line">    num[i] = <span class="built_in">random</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d  "</span>, num[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(num[<span class="number">0</span>]&lt;num[<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="built_in">max</span>=num[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">min</span>=num[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">max</span>=num[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">min</span>=num[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  i=<span class="number">2</span>;    <span class="comment">// 从2开始比较</span></span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(num[i]&gt;<span class="built_in">max</span>)</span><br><span class="line">      <span class="built_in">max</span>=num[i];</span><br><span class="line">    <span class="keyword">if</span>(num[i]&lt;<span class="built_in">min</span>)</span><br><span class="line">      <span class="built_in">min</span>=num[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe maximum value of the array is: %d"</span>, <span class="built_in">max</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe minimum value of the array is: %d\n"</span>, <span class="built_in">min</span>);</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/0caf9c91/60d6dd17.png" alt="DS"></p><hr><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">快速找出一个数组中所有满足条件的的两个数。（条件：这两个数的和等于一个给定的值sum.）。</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote></br><p>从第1个数开始循环与后面的数相加，判断结果如果等于给定值sum就输出这两个值；<br>然后从第2个数开始循环与后面的数相加，以此循环直到把数组遍历完。<br></br></p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">100</span></span><br><span class="line">  <span class="keyword">int</span> num[<span class="number">20</span>]=&#123;<span class="number">41</span>, <span class="number">67</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">81</span>, <span class="number">27</span>, <span class="number">61</span>, <span class="number">91</span>, <span class="number">95</span>, <span class="number">42</span>, <span class="number">27</span>, <span class="number">36</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give an array of 20 integers:\n"</span>);</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>, j;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d  "</span>, num[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> add=num[i];</span><br><span class="line">    j= i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j; j&lt;<span class="number">20</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(add+num[j]==sum)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The sum of the two numbers found is 100, which are: %d and %d.\n"</span>, add, num[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/f1596086/35534bfd.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训五 栈与递归</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%94/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%94/</id>
    <published>2020-06-21T04:58:34.677Z</published>
    <updated>2020-06-17T10:33:53.673Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设算术表达式只包含“+”、“-”、“*”、“/”，正整数和括号的合法数学表达式。根据算符优先关系，</span><br><span class="line">  - 将算术表达式的中缀表示法转换为后缀表示法。</span><br><span class="line">  - 对得到的后缀表达式进行求值</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br>1.1.1 转后缀表达式：<blockquote><ul><li>从左到右扫描每一个字符。如果扫描到的字符是操作数（如a、b等），就直接输出这些操作数。</li><li>如果扫描到的字符是一个操作符，分三种情况：<br>（1）如果堆栈是空的，直接将操作符存储到堆栈中（pushCStack it）<br>（2）如果该操作符的优先级大于堆栈出口的操作符，就直接将操作符存储到堆栈中（pushCStack it）<br>（3）如果该操作符的优先级低于堆栈出口的操作符，就将堆栈出口的操作符导出（popCStack it）,直到该操作符的优先级大于堆栈顶端的操作符。将扫描到的操作符导入到堆栈中（pushCStack）</li><li>如果遇到的操作符是左括号”（”，就直接将该操作符输出到堆栈当中。<br>该操作符只有在遇到右括号“ )”的时候移除。这是一个特殊符号该特殊处理。</li><li>如果扫描到的操作符是右括号“ ”，将堆栈中的操作符导出（popCStack）到output中输出，直到遇见左括号“（”。将堆栈中的左括号移出堆栈（popCStack ）。继续扫描下一个字符。</li><li>如果输入的中缀表达式已经扫描完了，但是堆栈中仍然存在操作符的时候，我们应该讲堆栈中的操作符导出并输入到output 当中。</li></ul></blockquote><p>1.1.3 求值</p><blockquote><p>后缀表达式求值的算法是:<br>遍历后缀表达式，如果遇到运算数，那么运算数入栈<br>如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数，计算运算结果，然后将结果入栈<br>最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案</p></blockquote></br></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackSize 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 32768</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义运算符栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> elem[StackSize];</span><br><span class="line">  <span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqCStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitCStack</span><span class="params">(SeqCStack *S)</span></span>&#123;</span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushCStack</span><span class="params">(SeqCStack *S, <span class="keyword">char</span> <span class="keyword">operator</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == StackSize - <span class="number">1</span>)&#123;   <span class="comment">// 栈满</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    S-&gt;top++;</span><br><span class="line">    S-&gt;elem[S-&gt;top] = <span class="keyword">operator</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popCStack</span><span class="params">(SeqCStack *S, <span class="keyword">char</span> *e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == <span class="number">-1</span>)&#123;   <span class="comment">// 栈空</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    *e = S-&gt;elem[S-&gt;top];</span><br><span class="line">    S-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getCStackTop</span><span class="params">(SeqCStack S)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S.top == <span class="number">-1</span>)&#123;   <span class="comment">// 栈空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.elem[S.top];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(SeqCStack S)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt;= S.top)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, S.elem[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义运算数栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[StackSize];</span><br><span class="line">  <span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqNStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNStack</span><span class="params">(SeqNStack *S)</span></span>&#123;</span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushNStack</span><span class="params">(SeqNStack *S, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == StackSize - <span class="number">1</span>)&#123;   <span class="comment">// 栈满</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    S-&gt;top++;</span><br><span class="line">    S-&gt;data[S-&gt;top] = num;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popNStack</span><span class="params">(SeqNStack *S, <span class="keyword">int</span> *e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == <span class="number">-1</span>)&#123;   <span class="comment">// 栈空</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    *e = S-&gt;data[S-&gt;top];</span><br><span class="line">    S-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNStackTop</span><span class="params">(SeqNStack S)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S.top == <span class="number">-1</span>)&#123;   <span class="comment">// 栈空</span></span><br><span class="line">    <span class="keyword">return</span> INFINITY;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.data[S.top];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">compare</span><span class="params">(<span class="keyword">char</span> <span class="keyword">operator</span>, <span class="keyword">char</span> top)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(top == <span class="string">'#'</span>)   <span class="comment">// 空栈，操作符直接进栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">')'</span> &amp;&amp; top==<span class="string">'('</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'='</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(top==<span class="string">'('</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'+'</span>)    <span class="comment">// 如果操作符是'+', 无论栈顶元素是什么, '+'优先级都小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'-'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'*'</span> &amp;&amp; top==<span class="string">'+'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'*'</span> &amp;&amp; top==<span class="string">'-'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'*'</span> &amp;&amp; top==<span class="string">'*'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'*'</span> &amp;&amp; top==<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'*'</span> &amp;&amp; top==<span class="string">'('</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'/'</span> &amp;&amp; top==<span class="string">'+'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'/'</span> &amp;&amp; top==<span class="string">'-'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'/'</span> &amp;&amp; top==<span class="string">'*'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'/'</span> &amp;&amp; top==<span class="string">'('</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">'('</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">operator</span>==<span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">caculate</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> re = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">    re = left + right;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">    re = left - right;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">    re = left * right;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">    re = left / right;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SeqCStack OS, SuffixExp;</span><br><span class="line">  SeqNStack NS;</span><br><span class="line">  <span class="comment">/* 初始化运算符栈 */</span></span><br><span class="line">  InitCStack(&amp;OS);</span><br><span class="line">  <span class="comment">/* 初始化运算数栈 */</span></span><br><span class="line">  InitNStack(&amp;NS);</span><br><span class="line">  <span class="comment">/* 初始后缀表达式栈 */</span></span><br><span class="line">  InitCStack(&amp;SuffixExp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">exp</span>[] = &#123;<span class="string">'5'</span>, <span class="string">'+'</span>, <span class="string">'2'</span>, <span class="string">'*'</span>, <span class="string">'('</span>, <span class="string">'1'</span>, <span class="string">'+'</span>, <span class="string">'6'</span>, <span class="string">')'</span>, <span class="string">'-'</span>, <span class="string">'8'</span>, <span class="string">'/'</span>, <span class="string">'2'</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Infix expression is: %s\n"</span>, <span class="built_in">exp</span>);</span><br><span class="line">  <span class="keyword">char</span> suffixstr[<span class="number">50</span>], temp;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, tempNum;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">exp</span>[i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(<span class="built_in">exp</span>[i]))&#123;    <span class="comment">// 如果是数字直接进后缀表达式栈</span></span><br><span class="line">      pushCStack(&amp;SuffixExp, <span class="built_in">exp</span>[i]);</span><br><span class="line">      <span class="comment">// printf("num------%c\n", exp[i]);</span></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// printf("char------\n");</span></span><br><span class="line">      <span class="comment">// printf("compare----%c\n", compare(exp[i], getCStackTop(OS)));</span></span><br><span class="line">      <span class="keyword">switch</span>(compare(<span class="built_in">exp</span>[i], getCStackTop(OS)))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>: </span><br><span class="line">          pushCStack(&amp;OS, <span class="built_in">exp</span>[i]);</span><br><span class="line">          <span class="comment">// printf("case1 &gt;---%c\n", exp[i]);</span></span><br><span class="line">          i++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'='</span>: </span><br><span class="line">          popCStack(&amp;OS, &amp;temp);   <span class="comment">// 脱括号</span></span><br><span class="line">          <span class="comment">// printf("case2 =---%c\n", temp);</span></span><br><span class="line">          i++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">          <span class="keyword">while</span>(compare(<span class="built_in">exp</span>[i], getCStackTop(OS))==<span class="string">'&lt;'</span>)&#123;</span><br><span class="line">            <span class="comment">// printf("case3 &lt;---%c\n", exp[i]);</span></span><br><span class="line">            <span class="comment">// printf("case3 getCStackTop %c\n", getCStackTop(OS));</span></span><br><span class="line">            popCStack(&amp;OS, &amp;temp);</span><br><span class="line">            <span class="comment">// printf("case3 after getCStackTop %c\n", getCStackTop(OS));</span></span><br><span class="line">            pushCStack(&amp;SuffixExp, temp);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// if(exp[i]!=')')&#123;i++;&#125;</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 最后把栈中剩余的运算符依次弹栈打印 */</span></span><br><span class="line">  <span class="keyword">while</span>(getCStackTop(OS)!=<span class="string">'#'</span>)&#123;</span><br><span class="line">    popCStack(&amp;OS, &amp;temp);</span><br><span class="line">    pushCStack(&amp;SuffixExp, temp);</span><br><span class="line">  &#125;</span><br><span class="line">  traverse(SuffixExp);</span><br><span class="line">  <span class="keyword">for</span>(i=SuffixExp.top; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    popCStack(&amp;SuffixExp, &amp;temp);</span><br><span class="line">    suffixstr[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Infix expression to suffix expression is: %s\n"</span>, suffixstr);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    后缀表达式求值的算法是:</span></span><br><span class="line"><span class="comment">    遍历后缀表达式，</span></span><br><span class="line"><span class="comment">    如果遇到运算数，那么运算数入栈</span></span><br><span class="line"><span class="comment">    如果遇到运算符，那么弹出栈里面两个元素，先弹出的是右运算数，后弹出的是左运算数，</span></span><br><span class="line"><span class="comment">    计算运算结果，然后将结果入栈。</span></span><br><span class="line"><span class="comment">    最后遍历到后缀表达式末尾，当结果只有一个元素时，就是答案</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">char</span> *p=suffixstr;</span><br><span class="line">  <span class="keyword">while</span> (*p != <span class="string">'\0'</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*p))&#123;</span><br><span class="line">      pushNStack(&amp;NS, *p-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      popNStack(&amp;NS, &amp;tempNum);</span><br><span class="line">      <span class="keyword">int</span> rightNum = tempNum;</span><br><span class="line">      <span class="comment">// printf("rightNum:::%d\n", rightNum);</span></span><br><span class="line">      <span class="comment">// free(temp);</span></span><br><span class="line">      popNStack(&amp;NS, &amp;tempNum);</span><br><span class="line">      <span class="keyword">int</span> leftNum = tempNum;</span><br><span class="line">      <span class="comment">// free(temp);</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">int</span> result = caculate(leftNum, rightNum, *p);</span><br><span class="line">      <span class="comment">// printf("caculate result----%d\n", result);</span></span><br><span class="line">      pushNStack(&amp;NS, result);</span><br><span class="line">    &#125;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"result: %d\n"</span>, getNStackTop(NS));</span><br><span class="line"></span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/d362372f/3e134587.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设L为带头结点的单链表，实现从尾到头反向输出链表中每个结点的值。（递归思想）</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>递归语句在打印之前就可以了</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printReversely</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    printReversely(L-&gt;next);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, L-&gt;next-&gt;data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/6e75ed7c/fddd588e.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一只青蛙一次可以跳上1级台阶，也可以跳上2级。</span><br><span class="line">编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？</span><br><span class="line">  - 若条件改为：</span><br><span class="line">  一只青蛙一次可以跳上1级台阶，也可以跳上2级，也可以跳上3级，...，也可以跳上n级。</span><br><span class="line">  编写代码求青蛙跳上一个n级的台阶，总共有多少种跳法？</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2>  <!-- ></br> --><blockquote><p>Q：</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。<br>求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p>A：</p><blockquote><p>f(n) = f(n-1)+f(n-2)+…+f(1)<br>f(n-1) = f(n-2)+ f(n-3)…+f(1)<br>两式相减，得到f(n) = 2*f(n-1)</p></blockquote></br></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Jump</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//表示当前台阶数大于总台阶数，很显然这种情况不符合，走不通，记为 0</span></span><br><span class="line">  <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//表示当前台阶数正好等于总的台阶数，那么这种情况符合，记为 1</span></span><br><span class="line">  <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Jump(i + <span class="number">1</span>, n) + Jump(i + <span class="number">2</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JumpN</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*JumpN(num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/b9a9416d/3891c4a0.png" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用一个2X1的小矩形横着或竖着去覆盖更大的矩形。如下图</span><br><span class="line">  - 具体：用8个2X1小矩形横着或竖着去覆盖2X8的大矩形，覆盖方法有多少种？</span><br><span class="line">  - 编写代码求用2X1小矩形横着或竖着去覆盖2Xn的大矩形。输出总共有多少种覆盖方法</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>当n=1时，覆盖方法有1种；<br>当n=2时，覆盖方法有2种；<br>当n=3时，覆盖方法有2+1=3种；<br>当n=4时，覆盖方法有3+2=5种；<br>按照规律就转化成了斐波那契数列问题</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cover</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cover(n<span class="number">-1</span>) + Cover(n<span class="number">-2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/66053ab6/f1b36a56.png" alt="DS"></p><hr><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">借助自定义栈以非递归形式求解汉诺塔问题（n,a,b,c）；</span><br><span class="line">即将n个盘子从起始塔座a通过辅助塔座b移动到目标塔座c,</span><br><span class="line">并保证每个移动符合汉诺塔问题的要求</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote><p>利用递归的思想，用栈来处理；</br><br>比如n=3时，转化的问题是：</br><br>先要移动A塔座上面2个盘子到B塔座，这个操作进栈后续处理；</br><br>然后移动A塔座上面最后一个大盘子到C塔座，这个操作进栈后续处理；</br><br>最后再移动B塔座上最后两个盘子到C塔座；</br><br>一直访问栈，如果栈顶处理的盘子数不是1，就在把操作细分，进栈；</br><br>直到盘子数为1，移动盘子；</br><br>直到栈为空</br></p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义汉诺塔数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> A;</span><br><span class="line">  <span class="keyword">char</span> B;</span><br><span class="line">  <span class="keyword">char</span> C;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">&#125;HanoiData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  HanoiData elem[StackSize];</span><br><span class="line">  <span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack *S)</span></span>&#123;</span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(SeqStack *S, HanoiData hd)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == StackSize - <span class="number">1</span>)&#123;   <span class="comment">// 栈满</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    S-&gt;top++;</span><br><span class="line">    S-&gt;elem[S-&gt;top] = hd;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(SeqStack *S, HanoiData *e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S-&gt;top == <span class="number">-1</span>)&#123;   <span class="comment">// 栈空</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    *e = S-&gt;elem[S-&gt;top];</span><br><span class="line">    S-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HanoiData getTop(SeqStack S)&#123;</span></span><br><span class="line"><span class="comment">//   if(S.top == -1)&#123;   // 栈空</span></span><br><span class="line"><span class="comment">//     return ;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   else&#123;</span></span><br><span class="line"><span class="comment">//     return S.elem[S.top];</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move1</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> A,<span class="keyword">char</span> B,<span class="keyword">char</span> C)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c--&gt;%c\n"</span>,A,C);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    move1(n<span class="number">-1</span>,A,C,B);</span><br><span class="line">    move1(<span class="number">1</span>,A,B,C);</span><br><span class="line">    move1(n<span class="number">-1</span>,B,A,C);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  SeqStack S;</span><br><span class="line">  InitStack(&amp;S);</span><br><span class="line">  HanoiData h = &#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, n&#125;;</span><br><span class="line">  push(&amp;S,h);<span class="comment">//初始栈 </span></span><br><span class="line">  <span class="comment">// hanoi_data x;//用来保存出栈的n,A,B,C </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(S.top!=<span class="number">-1</span>)&#123;</span><br><span class="line">    pop(&amp;S, &amp;h);<span class="comment">//出栈并用x带回 </span></span><br><span class="line">    <span class="keyword">if</span>(h.n==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c--&gt;%c\n"</span>,h.A,h.C);<span class="comment">//打印出移动方案  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      HanoiData h1 = &#123;h.B, h.A, h.C, h.n<span class="number">-1</span>&#125;;</span><br><span class="line">      push(&amp;S,h1);</span><br><span class="line">      HanoiData h2 = &#123;h.A, h.B, h.C, <span class="number">1</span>&#125;;</span><br><span class="line">      push(&amp;S,h2);</span><br><span class="line">      HanoiData h3 = &#123;h.A, h.C, h.B, h.n<span class="number">-1</span>&#125;;</span><br><span class="line">      push(&amp;S,h3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/e4207f99/66f52cba.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训三 字符串，数组</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%89/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%89/</id>
    <published>2020-06-21T04:58:34.666Z</published>
    <updated>2020-06-15T02:40:45.967Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实现将一个字符串中的每个空格字符换成“%20”。</span><br><span class="line">  - 例如：输入“We are happy.”, 则输出:</span><br><span class="line">  - “We%20are%happy.”</span><br><span class="line">要求在时间复杂度O（n）,空间复杂度O（1）下完成。假设存放字符串的数组空间足够大。</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br><p>前提假设存放字符串的数组空间足够大；<br>第一次，遍历，计算出字符串长度，和替换后字符串长度；<br>i从原字符串末尾出发，j从新字符串末尾出发，遇到空格就替换为“%20”。<br></br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">"We are happy."</span>;    <span class="comment">// 假设空间足够大</span></span><br><span class="line"><span class="keyword">int</span> length=<span class="number">0</span>, blank=<span class="number">0</span>, i, j;</span><br><span class="line"><span class="keyword">while</span>(str[length]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[length]);</span><br><span class="line">  <span class="keyword">if</span>(str[length]==<span class="string">' '</span>)&#123;</span><br><span class="line">    blank++;</span><br><span class="line">  &#125;</span><br><span class="line">  length++;</span><br><span class="line">&#125;</span><br><span class="line">length += <span class="number">2</span> * blank;</span><br><span class="line"></span><br><span class="line">i=length<span class="number">-2</span>*blank;</span><br><span class="line">j=length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;i)&#123;</span><br><span class="line">  <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)&#123;</span><br><span class="line">    str[j--]=<span class="string">'0'</span>;</span><br><span class="line">    str[j--]=<span class="string">'2'</span>;</span><br><span class="line">    str[j--]=<span class="string">'%'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    str[j--]=str[i];</span><br><span class="line">  &#125;</span><br><span class="line">  i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/fc383a9f/5cc51b85.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中出现次数超过一半的数字已知数组中有一个数字其出现的次数超过了数组长度的一半，请找出这个数组。</span><br><span class="line">要求：</span><br><span class="line">  - 高效</span><br><span class="line">  - 分析时空效率</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote></br><p>一个数字出现的次数超过了数组的一半，那么将其排序后，称为有序数列，中间的元素即为所求。<br></br></p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, <span class="built_in">min</span>, temp;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">    <span class="built_in">min</span>=i;</span><br><span class="line">    <span class="keyword">for</span>(j=i; j&lt;length; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[<span class="built_in">min</span>]&gt;a[j])</span><br><span class="line">        <span class="built_in">min</span>=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">min</span>!=i)&#123;</span><br><span class="line">      temp=a[<span class="built_in">min</span>];</span><br><span class="line">      a[<span class="built_in">min</span>]=a[i];</span><br><span class="line">      a[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">array</span>[length/<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/346cd086/8a20b7b0.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知数组中的n个正数，找出其中最小的k个数。</span><br><span class="line">要求：</span><br><span class="line">  - 高效</span><br><span class="line">  - 分析时空效率</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote></br><p>先将数组从小到大排序；<br>即可顺序打印出前k个数，即为数组中最小的k个数。<br>时间复杂度为O(n)，空间复杂度为O(1)。<br></br></p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, <span class="built_in">min</span>, temp;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">    <span class="built_in">min</span>=i;</span><br><span class="line">    <span class="keyword">for</span>(j=i; j&lt;length; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[<span class="built_in">min</span>]&gt;a[j])</span><br><span class="line">        <span class="built_in">min</span>=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">min</span>!=i)&#123;</span><br><span class="line">      temp=a[<span class="built_in">min</span>];</span><br><span class="line">      a[<span class="built_in">min</span>]=a[i];</span><br><span class="line">      a[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nEnter the value k and output the smallest k number among them, k = "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The smallest %d number in the array is: \n"</span>, k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/98c295f8/feb8cc50.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训七 链表，数组</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%83/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B8%83/</id>
    <published>2020-06-21T04:58:34.657Z</published>
    <updated>2020-06-17T03:31:51.521Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断两个链表是否相交？</span><br><span class="line">  - 给定两个单链表，判断两个单链表是否相交？</span><br><span class="line">  - 假设两个单链表均没有环</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>如果链表有交点，那么他们一定有共同后缀，转化为共同后缀问题</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">commonSuffix</span><span class="params">(LinkList L1, LinkList L2)</span></span>&#123;</span><br><span class="line">  Node *p, *q;</span><br><span class="line">  <span class="keyword">int</span> len1, len2;</span><br><span class="line">  len1=listlen(L1);</span><br><span class="line">  len2=listlen(L2);</span><br><span class="line">  <span class="keyword">if</span>(lastChar(L1) != lastChar(L2))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(p=L1; len1&gt;len2; len1--)&#123;</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(q=L2; len2&gt;len1; len2--)&#123;</span><br><span class="line">      q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != q-&gt;next)&#123;</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">      q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/b2bb406e/f42817ef.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">连续子数组的最大和。</span><br><span class="line">输入一个整形数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。</span><br><span class="line">求所有子数组的和的最大值。要求时间复杂度为O（n）</span><br><span class="line">  - 例如输入数组为（1、-2、3、10、-4、7、2、-5）</span><br><span class="line">  - 和最大的子数组为（ 3、10、-4、7、2 ）</span><br><span class="line">  - 该子数组的和为18</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>将第一个元素默认最大值，往后遍历，并相加；<br/><br>如果此时和sum小于当前元素，就舍弃之前的元素；<br/><br>如果当前sum大于记录的max值，将max值改为sum；<br/><br>直到遍历结束数组所有元素</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSum</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> *s, <span class="keyword">int</span> *e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a == <span class="literal">NULL</span> || <span class="built_in">size</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//非法输入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//初始和为0</span></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">max</span> = a[i];<span class="comment">//最大值最初必为数组第一个元素</span></span><br><span class="line">  <span class="keyword">for</span>(i; i &lt; <span class="built_in">size</span>; i++)&#123;</span><br><span class="line">    sum = sum + a[i];<span class="comment">//遍历一个元素，累加一次</span></span><br><span class="line">    <span class="keyword">if</span>(sum &lt; a[i])&#123;<span class="comment">//如果加上当前元素之后的和比当前元素还小，则舍弃之前的元素，从当前元素开始累加</span></span><br><span class="line">      *s = i;</span><br><span class="line">      sum = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果加上当前元素之后的和比当前元素大</span></span><br><span class="line">    <span class="comment">//说明可以继续累加</span></span><br><span class="line">    <span class="comment">//如果当前和比最大值大，则更新最大值为当前和</span></span><br><span class="line">    <span class="comment">//否则，不做更新</span></span><br><span class="line">    <span class="keyword">if</span>(sum &gt; <span class="built_in">max</span>)&#123;</span><br><span class="line">      *e = i;</span><br><span class="line">      <span class="built_in">max</span> = sum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/cff1c01a/0775442f.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中的逆序对。</span><br><span class="line">在数组中的两个数字，如果前面的数字大于后面的数字，则这两个数字组成一个逆序对。</span><br><span class="line">  - 输入一个数组，输出逆序对、并求出这个数组中出现的逆序对的总数</span><br><span class="line">  - 例如：数组中元素&#123;7，5，6，4&#125;，一共有5个逆序对分别是（7,6）、（7,5）（7,4）、（6,4）、（5,4）</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote></br>利用归并的思想；在排序交换元素的时候就输出这两数，就是逆序对，并用计数器记录</br></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 32767</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> p,<span class="keyword">int</span> q,<span class="keyword">int</span> r)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//归并array[p...q] 与 array[q+1...r]</span></span><br><span class="line">  <span class="keyword">int</span> tempSum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> n1 = q-p+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> n2 = r-q;</span><br><span class="line">  <span class="keyword">int</span>* left = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">int</span>* right = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, l;</span><br><span class="line"></span><br><span class="line">  left = ( <span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n1+<span class="number">1</span>));</span><br><span class="line">  right = ( <span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n2+<span class="number">1</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n1; i++)</span><br><span class="line">    left[i] = <span class="built_in">array</span>[p+i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n2; j++)</span><br><span class="line">    right[j] = <span class="built_in">array</span>[q+<span class="number">1</span>+j];</span><br><span class="line"></span><br><span class="line">  left[n1] = MAX; <span class="comment">//哨兵，避免检查每一部分是否为空</span></span><br><span class="line">  right[n2] = MAX;</span><br><span class="line">  i=<span class="number">0</span>;</span><br><span class="line">  j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(k=p; k&lt;=r; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(left[i] &lt;= right[j]) &#123;</span><br><span class="line">      <span class="built_in">array</span>[k] = left[i];</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">array</span>[k]&gt;right[j])&#123;</span><br><span class="line">        l=k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(l; l&lt;n1; l++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"(%d, %d)\t"</span>, <span class="built_in">array</span>[l], right[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"(%d, %d)\t"</span>, left[i], right[j]);</span><br><span class="line">      <span class="built_in">array</span>[k] = right[j];</span><br><span class="line">      j++;</span><br><span class="line">      tempSum += n1 - i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tempSum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span> )</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(start &lt; <span class="built_in">end</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) /<span class="number">2</span>;</span><br><span class="line">    sum += mergeSort(<span class="built_in">array</span>, start, mid);</span><br><span class="line">    sum += mergeSort(<span class="built_in">array</span>, mid+<span class="number">1</span>, <span class="built_in">end</span>);</span><br><span class="line">    sum += merge(<span class="built_in">array</span>,start,mid,<span class="built_in">end</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/92924a7d/ee3c65c2.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训六 多维数组</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AD/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AD/</id>
    <published>2020-06-21T04:58:34.645Z</published>
    <updated>2020-06-17T04:20:31.085Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们把只包含因子2,3,5的数称为丑数。求从小到大的第1500个丑数。</span><br><span class="line">  -例如：6,8都是丑数，但14不是丑数，因为它包含因子7.习惯上我们把1当做丑数。</span><br><span class="line">  -编写尽可能高效的算法。提示：（可以用空间换时间）</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>准备一个数组，初始化第1个丑数的下标0，值1；</br><br>然后1X2得到2，就是第2个丑数；</br><br>然后1X3得到3，就是第3个丑数；</br><br>不能直接1X5就是第4个丑数，因为还有一个丑数2X2=4；</br><br>所以难点就是判断中间丑数，然后存储在数组中；往下循环；</br><br>然后1X5得到5，就是第5个丑数</br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_num</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">int</span> n2,<span class="keyword">int</span> n3)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">min</span>=(n1&lt;n2)?n1:n2;</span><br><span class="line">  <span class="built_in">min</span>=(<span class="built_in">min</span>&lt;n3)?<span class="built_in">min</span>:n3;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">array</span>[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> t2=<span class="number">0</span>;<span class="comment">//记录M2的下标</span></span><br><span class="line">  <span class="keyword">int</span> t3=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> t5=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">1500</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[t2]*<span class="number">2</span>&lt;=<span class="built_in">array</span>[i<span class="number">-1</span>])<span class="comment">//查找到新的M2，即乘以2后第一个大于M的数</span></span><br><span class="line">        t2++;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[t3]*<span class="number">3</span>&lt;=<span class="built_in">array</span>[i<span class="number">-1</span>])</span><br><span class="line">        t3++;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[t5]*<span class="number">5</span>&lt;=<span class="built_in">array</span>[i<span class="number">-1</span>])</span><br><span class="line">        t5++;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=min_num(<span class="built_in">array</span>[t2]*<span class="number">2</span>, <span class="built_in">array</span>[t3]*<span class="number">3</span>, <span class="built_in">array</span>[t5]*<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">array</span>[i]=<span class="built_in">min</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/3d51f071/9c464c68.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">顺时针打印矩阵</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>针对一般矩阵，先顺时针打印最外部一圈，</br><br>那么这个矩阵去掉外部一圈，内部也是一个小矩阵；</br><br>按照这样的规律，依次打印最外部一圈就可以了</br></p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatrix</span><span class="params">(<span class="keyword">int</span> (*num)[<span class="number">4</span>], <span class="keyword">int</span> col, <span class="keyword">int</span> row, <span class="keyword">int</span> layer)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> new_col = col - layer;</span><br><span class="line">  <span class="keyword">int</span> new_row = row - layer;</span><br><span class="line">  <span class="keyword">for</span>(i=layer; i&lt;new_col; i++)&#123;<span class="comment">// 从左至右打印第一行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d   "</span>, num[layer][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(new_row&gt;layer)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=layer+<span class="number">1</span>; i&lt;new_row; i++)&#123;<span class="comment">// 从上至下打印最右一列</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d   "</span>, num[i][new_row<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(new_col<span class="number">-1</span>&gt;layer &amp;&amp; new_row<span class="number">-1</span>&gt;layer)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=new_col<span class="number">-2</span>; i&gt;=layer; i--)&#123;<span class="comment">// 从右至左打印最后一行</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d   "</span>, num[new_col<span class="number">-1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(new_col<span class="number">-1</span>&gt;layer &amp;&amp; new_row<span class="number">-1</span>&gt;layer+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=new_row<span class="number">-2</span>; i&gt;layer; i--)&#123;<span class="comment">// 从下至上打印最左一列</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d   "</span>, num[i][layer]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/b147603b/9dbfb1ce.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设二维数组B[0..m-1][0..n-1]的数据在行、列方向上都按从小到大的顺序有序，</span><br><span class="line">且x在B中存在。试设计一个算法，找出x在B数组中的位置i,j。</span><br><span class="line">要求比较的次数不超过m+n</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>第一个循环（最多4次）：</br><br>将要定位的元素与每一行的最后一个元素比较，如果小于等于最后一个元素就结束循环，此时的i值就是元素的行坐标；</br><br>第二次循环（最多5次）：</br><br>将要定位的元素与每一列的所有元素比较，如果小于等于这个值，就结束循环，此时的j值就是元素的列坐标</br></p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> matrix[<span class="number">4</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;, i, j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;   <span class="comment">// 定位行坐标i</span></span><br><span class="line">  <span class="keyword">if</span>(obj &lt;= matrix[i][<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;   <span class="comment">// 定位列坐标j</span></span><br><span class="line">  <span class="keyword">if</span>(obj &lt;= matrix[i][j])</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/2f270760/89e08989.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训九 二叉树的应用</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B9%9D/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%B9%9D/</id>
    <published>2020-06-21T04:58:34.635Z</published>
    <updated>2020-06-18T13:05:31.547Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">建二叉树二叉链表存储</span><br><span class="line">  - 扩展的先序序列（之前采用的方法）</span><br><span class="line">  此次要求：已知两个遍历序列建二叉树（先/中，后/中）</span><br><span class="line">  - 其先、中序遍历序列分别存放在两个数组pre[]和inorder[]中。</span><br><span class="line">  - 其中、后序遍历序列分别存放在两个数组inorder[]和post中。</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br>两种建树的思想相同，都是分治的思想；通过前序遍历，第一个元素就是树的根节点；然后在重建左子树，找到左子树的根节点，重建右子树，找到右子树的根节点，递归下去；中序+后续遍历重建树也是如此；后续序列的最后一个元素就是树的根节点。</br></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ElemType elem;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序+中序重建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReBuildByPreAndInOrder</span><span class="params">(<span class="keyword">char</span> *prelist, <span class="keyword">char</span> *inlist, <span class="keyword">int</span> len, BiTree *bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!prelist || !inlist || len&lt;=<span class="number">0</span> )    <span class="comment">//空树 </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 找到根结点在中序遍历中的位置 </span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(inlist[i] == prelist[<span class="number">0</span>])     </span><br><span class="line">      <span class="keyword">break</span>;           </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化根结点 </span></span><br><span class="line">  *bt = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">  <span class="keyword">if</span>(!bt) <span class="comment">// 申请失败</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  (*bt)-&gt;LChild = (*bt)-&gt;RChild = <span class="literal">NULL</span>;</span><br><span class="line">  (*bt)-&gt;elem = prelist[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重建左子树</span></span><br><span class="line">  ReBuildByPreAndInOrder(prelist+<span class="number">1</span>, inlist, i, &amp;(*bt)-&gt;LChild); </span><br><span class="line">  <span class="comment">// 重建右子树 </span></span><br><span class="line">  ReBuildByPreAndInOrder(prelist+i+<span class="number">1</span>, inlist+i+<span class="number">1</span>, len-i<span class="number">-1</span>, &amp;(*bt)-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序+后序重建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReBuildByInAndPostOrder</span><span class="params">(<span class="keyword">char</span> *inlist,<span class="keyword">char</span> *postlist, <span class="keyword">int</span> len, BiTree *bt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!inlist || !postlist || len&lt;=<span class="number">0</span> )   <span class="comment">//空树 </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 找到根结点在中序遍历中的位置 </span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(inlist[i] == postlist[len<span class="number">-1</span>])      </span><br><span class="line">      <span class="keyword">break</span>;           </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化根结点 </span></span><br><span class="line">  *bt = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">  <span class="keyword">if</span>(!bt)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  (*bt)-&gt;LChild = (*bt)-&gt;RChild = <span class="literal">NULL</span>;</span><br><span class="line">  (*bt)-&gt;elem = postlist[len<span class="number">-1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重建左子树 </span></span><br><span class="line">  ReBuildByInAndPostOrder(inlist, postlist, i, &amp;(*bt)-&gt;LChild);         </span><br><span class="line">  <span class="comment">//重建右子树 </span></span><br><span class="line">  ReBuildByInAndPostOrder(inlist+i+<span class="number">1</span>, postlist+i, len-i<span class="number">-1</span>, &amp;(*bt)-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(BiTree bt,<span class="keyword">int</span> nLayer)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  PrintTree(bt-&gt;RChild,nLayer+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nLayer;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, bt-&gt;elem);</span><br><span class="line">  PrintTree(bt-&gt;LChild,nLayer+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> pre[<span class="number">7</span>]=&#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'C'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>&#125;,</span><br><span class="line">    inorder1[<span class="number">7</span>] = &#123;<span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>, <span class="string">'F'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;,</span><br><span class="line">    inorder2[<span class="number">9</span>] = &#123;<span class="string">'G'</span>, <span class="string">'D'</span>, <span class="string">'H'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'C'</span>, <span class="string">'I'</span>, <span class="string">'F'</span>&#125;,</span><br><span class="line">    post[<span class="number">9</span>] = &#123;<span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'F'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 前序+中序重建二叉树 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give the preorder and midorder traversal of a binary tree: \nPreorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, pre[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nMidorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, inorder1[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BiTree T1=<span class="literal">NULL</span>;</span><br><span class="line">  ReBuildByPreAndInOrder(pre, inorder1, <span class="number">7</span>, &amp;T1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe binary tree constructed by two traversal sequences is: \n"</span>);</span><br><span class="line">  PrintTree(T1, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* 前序+中序重建二叉树 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 中序+后序重建二叉树 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give the midorder and postorder traversal of a binary tree: \nMidorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, inorder2[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nPostorder = "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c  "</span>, post[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BiTree T2=<span class="literal">NULL</span>;</span><br><span class="line">  ReBuildByInAndPostOrder(inorder2, post, <span class="number">9</span>, &amp;T2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nThe binary tree constructed by two traversal sequences is: \n"</span>);</span><br><span class="line">  PrintTree(T2, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* 中序+后序重建二叉树 */</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/3a148bee/9c8a5d40.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">求二叉树中值为x的节点所在的层号。</span><br><span class="line">二叉树bt采用二叉链表存储；</span><br><span class="line">设计一个算法level（bt,x）求二叉树中值为x的节点所在的层号</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>在求二叉树深度算法的基础上改进算法；<br>在含有目标节点的子树上查找，到达目标节点即结束递归</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(BiTree bt, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(bt-&gt;elem==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// printf("layer(bt-&gt;LChild, x): %d\n", layer(bt-&gt;LChild, x));</span></span><br><span class="line">    <span class="keyword">if</span>(layer(bt-&gt;LChild, x))&#123;</span><br><span class="line">      cot = layer(bt-&gt;LChild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("layer(bt-&gt;RChild, x): %d\n", layer(bt-&gt;RChild, x));</span></span><br><span class="line">    <span class="keyword">if</span>(layer(bt-&gt;RChild, x))&#123;</span><br><span class="line">      cot = layer(bt-&gt;RChild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_node_level</span><span class="params">(BiTree bt, <span class="keyword">char</span> x, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bt == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;elem == x)</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = find_node_level(bt-&gt;LChild, x, h+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> find_node_level(bt-&gt;RChild, x, h+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法3</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level_in_x</span><span class="params">(BiTree BT,<span class="keyword">char</span> x,<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (BT == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(BT-&gt;elem == x)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x in %d"</span>,level);</span><br><span class="line">  &#125;</span><br><span class="line">  level++;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"1:%d----\n"</span>, level);</span><br><span class="line">  level_in_x(BT-&gt;LChild,x,level);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"2:%d----\n"</span>, level);</span><br><span class="line">  level_in_x(BT-&gt;RChild,x,level);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"3:%d----\n"</span>, level);</span><br><span class="line">  level--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/3241e9a2/fd67317a.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">求二叉树的宽度。</span><br><span class="line">利用二叉树层次遍历求二叉树的宽度；</span><br><span class="line">二叉树的宽度即二叉树同层结点数的最大值</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>我利用一个足够大的全局数组来记录遍历过程中的二叉树宽度；<br>利用一个变量max来记录最大宽度，即为所求；<br>求宽度的函数依然采用的是先序遍历递归的思想，加一个形参k，对应width数组下标，记录当前深度，来传给子层信息；<br>如果当前深度k的节点不为空，那么width[k]++，来记录宽度；<br>max为宽度最大值</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span>[<span class="built_in">size</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MaxWidth</span><span class="params">(BiTree T,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">width</span>[k]++;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">max</span>&lt;<span class="built_in">width</span>[k])</span><br><span class="line">    <span class="built_in">max</span>=<span class="built_in">width</span>[k];</span><br><span class="line">  MaxWidth(T-&gt;LChild, k+<span class="number">1</span>);</span><br><span class="line">  MaxWidth(T-&gt;RChild, k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/16126d14/a18d5f5a.png" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二叉树bt采用二叉链表存储，设计算法实现采用括号表示法输出该二叉树。</span><br><span class="line">            A</span><br><span class="line">          /   \</span><br><span class="line">        B     C</span><br><span class="line">        /     / \</span><br><span class="line">      D     E   F</span><br><span class="line">        \</span><br><span class="line">        G                        A(B(D(,G)),C(E,F))</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>把题目中的括号表示法A(B(D(,G)),C(E,F))，去掉括号变为：<br>ABDGCEF<br>这种写法不是我们熟悉的先序遍历吗！<br>所以我就在二叉树先序遍历算法的基础上改进算法；</p><blockquote><p>a.在节点的左右子树不为空时输出“（”；<br>b.当节点右子树不为空时输出“，”；<br>c.在节点的左右子树不为空时输出“）”</p></blockquote></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Brackets</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;elem);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;LChild!=<span class="literal">NULL</span>||T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"( "</span>);</span><br><span class="line">  Brackets(T-&gt;LChild);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">", "</span>, T-&gt;elem);</span><br><span class="line">  Brackets(T-&gt;RChild);</span><br><span class="line">  <span class="keyword">if</span>(T-&gt;LChild!=<span class="literal">NULL</span>||T-&gt;RChild!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" )"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/f97498ae/63cfc326.png" alt="DS"></p><hr><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">求二叉树的路径长度。</span><br><span class="line">二叉树二叉链表存储</span><br><span class="line">二叉树的路径长度即：二叉树中所有结点的路径长度之和。</span><br><span class="line">（结点的路径长度即：从根到结点的分支数）</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote><p>路径长度即为分支数之和；<br>根据二叉树的性质；<br>每个节点的头部都有一个分支，除了根节点；<br>所以分支数之和就是二叉树节点数-1；<br>那么采用递归的方法求得节点数，就可以求得路劲长度了</p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Node</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Node(T-&gt;LChild) + Node(T-&gt;RChild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The path length of this binary tree is: %d\n"</span>, Node(T)<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/a1652b7b/38dd795e.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训二 顺序表</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E4%BA%8C/</id>
    <published>2020-06-21T04:58:34.626Z</published>
    <updated>2020-06-17T10:09:59.719Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><hr><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入数字n,按顺序打印输出从1到最大的n位十进制数。比如输入3，则打印出1,2,3，一直到最大的3位数999。</span><br><span class="line">  - 要考虑若n很大，我们求最大的n位数用int 或long long 也可能会溢出；</span><br><span class="line">  - 考虑大数问题；</span><br><span class="line">  - 提示：关于大数的表示和存储：用字符数组(取值为数字型字符)来表达大数</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote></br><p>这题主要解决大数问题。我用字符串来解决大数问题。<br>那么字符串中所有字符都是数字；<br>首先动态分配字符串空间为（n+1）*char，字符串最后要有一个结束符’\0’，初始化其他位为0；<br>然后每一次为字符串表示的数字加1，再打印出来；<br>方法print()会遍历字符串，直到遇到第一个非0字符后，打印后面的字符；<br>关键方法printRecursively()，每10个数，对具体位数加1，然后进位，递归。<br></br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printRecursively</span><span class="params">(<span class="keyword">char</span> *number, <span class="keyword">int</span> n, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(index == n)&#123;</span><br><span class="line">    <span class="built_in">print</span>(number, n);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    number[index] = i + <span class="string">'0'</span>;</span><br><span class="line">    <span class="comment">// printf("NUMBER: %s\n", number);</span></span><br><span class="line">    printRecursively(number, n, index + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printToMaxOfNDigits</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">char</span> *number = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">  <span class="built_in">memset</span>(number, <span class="string">'0'</span>, (n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));    <span class="comment">// 在一段内存块中填充某个给定的值,初始化为0   </span></span><br><span class="line">  number[n] = <span class="string">'\0'</span>;</span><br><span class="line">  printRecursively(number, n, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">free</span>(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/921a6c9d/866aeb4b.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">已知一个顺序表L（整数）</span><br><span class="line">实现一个函数将调整顺序表中的数字顺序，使得所有奇数位于表L的前半部分，所有偶数位于数组的后半部分。</span><br><span class="line">  - 如果把题目改成把顺序表中的数按照大小分为两部分，负数都在非负数的前面，该怎么做？再定义一个函数？？</span><br><span class="line">  - 或者再改为：把顺序表中的数分为两部分，</span><br><span class="line">  能被3整除的数放在前面，不能被3整除的数放在后面；再定义一个函数？？</span><br><span class="line">  - 是否有更好的办法？增加代码的可扩展性。</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote></br><p>定义一个规则rule方法，根据用户输入，确定排序规则，增加代码复用性；<br>三种排序规则思想一样：<br>（1）start=0从顺序表头开始往后，end从尾开始往前，<br>start遇到偶数停止，end遇到奇数停止，交换下标为start和下标为end的元素，然后继续前进；<br>（2）start=0从顺序表头开始往后，end从尾开始往前，<br>start遇到正数停止，end遇到负数停止，交换下标为start和下标为end的元素，然后继续前进；<br>（3）start=0从顺序表头开始往后，end从尾开始往前，<br>start遇到不能被3整除的数停止，end遇到能被3整除的数停止，交换下标为start和下标为end的元素，然后继续前进。</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*宏定义*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//宏定义布尔类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOL int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;  <span class="comment">/*顺序表中存放整型元素*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  ElemType elem[MAXSIZE];</span><br><span class="line">  <span class="keyword">int</span> last;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SeqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(SeqList L)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">rule</span><span class="params">(<span class="keyword">int</span> elem, <span class="keyword">int</span> select)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortList</span><span class="params">(SeqList *L, SeqList *L1, <span class="keyword">int</span> select)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  SeqList La, Lb;</span><br><span class="line">  Lb.last=<span class="number">-1</span>;   <span class="comment">// 初始化Lb</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> select;</span><br><span class="line"></span><br><span class="line">  initList(&amp;La);</span><br><span class="line">  <span class="comment">// 给出一个顺序表La</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give a sequence table: \nLa = "</span>);</span><br><span class="line">  printList(La);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 给出下列几种排序规则:</span></span><br><span class="line"><span class="comment">    奇数在前，偶数在后;</span></span><br><span class="line"><span class="comment">    负数在前，非负数在后;</span></span><br><span class="line"><span class="comment">    能被3整除的数在前面，不能被3整除的数在后面.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nGive the following sorting rules: \</span></span><br><span class="line"><span class="string">  \n1.Odd number first, even number behind;\</span></span><br><span class="line"><span class="string">  \n2.Negative numbers first, non-negative numbers last;\</span></span><br><span class="line"><span class="string">  \n3.Numbers divisible by 3 are in the front, \</span></span><br><span class="line"><span class="string">  and numbers that are not divisible by 3 are in the back.\</span></span><br><span class="line"><span class="string">  \nPlease select the sorting rule you want and enter the rule number:"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;select);</span><br><span class="line">  <span class="keyword">while</span>(select != <span class="number">1</span> &amp;&amp; select != <span class="number">2</span> &amp;&amp; select != <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please reselect: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;select);</span><br><span class="line">  &#125;</span><br><span class="line">  sortList(&amp;La, &amp;Lb, select);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The adjusted sequence table is: \n"</span>);</span><br><span class="line">  printList(Lb);</span><br><span class="line"></span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数定义*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SeqList *L)</span></span>&#123;</span><br><span class="line">  L-&gt;last=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;MAXSIZE; i++)&#123;</span><br><span class="line">    L-&gt;elem[i]=rand()%<span class="number">100</span> - <span class="number">50</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;last=MAXSIZE<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(SeqList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=L.last; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, L.elem[i]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">")\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortList</span><span class="params">(SeqList *L, SeqList *L1, <span class="keyword">int</span> select)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>, <span class="built_in">end</span>=L-&gt;last, start=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;=L-&gt;last; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( rule(L-&gt;elem[i], select) == TRUE)&#123;    <span class="comment">// 偶数尾插法</span></span><br><span class="line">      L1-&gt;elem[<span class="built_in">end</span>] = L-&gt;elem[i];</span><br><span class="line">      <span class="built_in">end</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;   <span class="comment">// 奇数前插法</span></span><br><span class="line">      L1-&gt;elem[start] = L-&gt;elem[i];</span><br><span class="line">      start++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L1-&gt;last=L-&gt;last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">rule</span><span class="params">(<span class="keyword">int</span> elem, <span class="keyword">int</span> select)</span></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (select)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(elem%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span>(elem&gt;=<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">if</span>(elem%<span class="number">3</span>!=<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/6a147b9f/00a97374.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组，删除相邻的重复数字，结果数组中不能存在任何相邻的重复数字。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote></br><p>将数组存入顺序表；<br>遍历顺序表，将下标为i和下标i+1的元素比较如果相等，进行判断：<br>如果下标为i和下标i+2的元素相等，所有元素往前移动1位；<br>如果下标为i和下标i+2的元素不相等，所有元素往前移动2位；<br>持续上述循环，结束的标志是遍历顺序表，没有相邻相同元素就结束循环。<br></br></p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(L.last==<span class="number">0</span>)    <span class="comment">// 代表顺序表中只有一个元素</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span>(L.elem[i]==L.elem[j])&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(L.elem[i]==L.elem[j+<span class="number">1</span>])&#123;   <span class="comment">// 判断是否3数相连</span></span><br><span class="line">      <span class="keyword">for</span>(k=i; k&lt;L.last; k++)&#123;</span><br><span class="line">        L.elem[k]=L.elem[k+<span class="number">1</span>];    <span class="comment">// 所有元素前移1位</span></span><br><span class="line">      &#125;</span><br><span class="line">      L.last = L.last<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;   <span class="comment">// 不是3数相连，那就是2数相连</span></span><br><span class="line">      <span class="keyword">for</span>(k=i; k&lt;L.last<span class="number">-1</span>; k++)&#123;</span><br><span class="line">        L.elem[k]=L.elem[k+<span class="number">2</span>];    <span class="comment">// 所有元素前移2位</span></span><br><span class="line">      &#125;</span><br><span class="line">      L.last = L.last<span class="number">-2</span>;</span><br><span class="line">      <span class="keyword">if</span>(j&gt;L.last)&#123;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        j=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(j==L.last)&#123;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;L.last; k++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(L.elem[k]==L.elem[k+<span class="number">1</span>])&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">-1</span>;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  i++;</span><br><span class="line">  j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/0aa2ddb8/8a86ca5f.png" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">已知顺序表L（数组表示即可），编写一个时间复杂度O(n)，空间复杂度为O（1）的算法</span><br><span class="line">将表L中所有值为x 的元素删除。</span><br><span class="line">  - 表中元素无序。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote></br><p>遍历顺序表，将顺序表a的元素赋给顺序表b，遇到要删除的元素就跳过。<br></br></p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteList</span><span class="params">(SeqList *LA, SeqList *LB, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count=<span class="number">0</span>, i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i; i&lt;LA-&gt;last+<span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(LA-&gt;elem[i]==n)&#123;</span><br><span class="line">      count++;    <span class="comment">// 记录删除元素的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      LB-&gt;elem[j] = LA-&gt;elem[i];</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  LB-&gt;last = LA-&gt;last-count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/f102421c/fbb32453.png" alt="DS"></p><hr><hr><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将n 个整数存入顺序表L，实现将L中的整数序列循环左移p(0&lt;p&lt;n)个位置，</span><br><span class="line">即将L中的数据序列</span><br><span class="line">(x0, x1, ... , xp-1, xp, xp+1, ... , xn-1)</span><br><span class="line">变换为</span><br><span class="line">(xp, xp+1, ... , xn-1, x0, x1, ... , xp-1)</span><br><span class="line">  - 类似的实现循环右移K位；</span><br><span class="line">  - 要求：时间复杂度为O(n)。空间复杂度为S(1)。</span><br></pre></td></tr></table></figure><h2 id="5-1-算法设计思想"><a href="#5-1-算法设计思想" class="headerlink" title="5.1 算法设计思想"></a>5.1 算法设计思想</h2><blockquote></br><p>将下标0到p的元素逆置；<br>将下标p+1到n 的元素逆置；<br>最后将整个顺序表逆置得到最终结果。<br></br></p></blockquote><h2 id="5-2-源代码"><a href="#5-2-源代码" class="headerlink" title="5.2 源代码"></a>5.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SeqList L = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  <span class="keyword">char</span> direction;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give a sequence table: \n"</span>);</span><br><span class="line">  printlist(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter a positive integer n to cycle through the sequence: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  getchar();    <span class="comment">// 吃掉回车</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please select the direction of movement (L for left, R for right): "</span>);</span><br><span class="line">  <span class="keyword">while</span>(direction!=<span class="string">'R'</span> &amp;&amp; direction!=<span class="string">'L'</span>)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;direction);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span>(direction==<span class="string">'L'</span>)&#123;</span><br><span class="line">      n = n%L.last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(direction==<span class="string">'R'</span>)&#123;    <span class="comment">// 右移n格就是左移L.last-n格</span></span><br><span class="line">      n = L.last - n%L.last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Wrong input, please re-enter: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, j = n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将子表(X0,X1...,Xp-1)逆序为(Xp-1,...,X1,X0)</span></span><br><span class="line">  reverse(&amp;L, i, j);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将子表(Xp,Xp+1,...,Xn-1)逆序为(Xn-1,...,Xp+1,Xp)</span></span><br><span class="line">  i = n;</span><br><span class="line">  j = L.last<span class="number">-1</span>;</span><br><span class="line">  reverse(&amp;L, i, j);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将整张表(Xp-1,...,X1,X0,Xn-1,...,Xp+1,Xp)逆序为(Xp,Xp+1,...,Xn-1,X0,X1...,Xp-1)</span></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  j = L.last<span class="number">-1</span>;</span><br><span class="line">  reverse(&amp;L, i, j);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The sequence table after moving is: \n"</span>);</span><br><span class="line">  printlist(L);</span><br><span class="line"></span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(SeqList *L,<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">    temp = L-&gt;elem[i];</span><br><span class="line">    L-&gt;elem[i] = L-&gt;elem[j];</span><br><span class="line">    L-&gt;elem[j] = temp;</span><br><span class="line"></span><br><span class="line">    ++i;</span><br><span class="line">    --j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-运行情况截图"><a href="#5-3-运行情况截图" class="headerlink" title="5.3 运行情况截图"></a>5.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/941ed383/272f8298.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训八 数组，规律</title>
    <link href="http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AB/"/>
    <id>http://yoursite.com/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%85%AB/</id>
    <published>2020-06-21T04:58:34.615Z</published>
    <updated>2020-06-17T10:34:26.547Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em></p><p><strong>Source Code</strong>: <a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining" target="_blank">https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining</a></p><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">荷兰国旗</span><br><span class="line">现有n个红蓝白三种不同颜色的小球，乱序排列在一起；</span><br><span class="line">请通过两两交换任意两个球，使得从左到右的球依次：红球、白球、蓝球</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>把题目理解为这样的问题：</br><br>一个循环，把红色球和剩余的球交换，那么红球就排序好了，就是两两交换问题；</br><br>另一个循环，把剩下没排序好的白球和蓝球也排序好，也是两两交换；</br><br>程序的时间复杂度取决于长度取决于第一个循环，O(n)</br></p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHITE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUE 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> *q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  temp = *p;</span><br><span class="line">  *p = *q;</span><br><span class="line">  *q = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> collor)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=start, j=<span class="built_in">end</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[i]==collor)&#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">array</span>[j]!=collor)&#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;<span class="built_in">array</span>[i], &amp;<span class="built_in">array</span>[j]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ball[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> i, num_red=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"There are 20 red, blue and white balls in three different colors, \</span></span><br><span class="line"><span class="string">  arranged together in disorder:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==RED)&#123;</span><br><span class="line">      num_red++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Red  "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==WHITE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"White  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==BLUE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Blue  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  sort(ball, <span class="number">0</span>, <span class="number">20</span>, RED); <span class="comment">// 把红色球排好序</span></span><br><span class="line">  sort(ball, num_red, <span class="number">20</span>, WHITE); <span class="comment">// 把白色球排好序</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nAfter sorting: \n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==RED)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Red  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==WHITE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"White  "</span>);</span><br><span class="line">    <span class="keyword">if</span>(ball[i]==BLUE)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Blue  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/fb0f0dcf/670a60b8.png" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">完美洗牌算法</span><br><span class="line">有一个长度为2n的数组&#123;a1,a2,a3,…an,b1,b2,b3, …bn&#125;,</span><br><span class="line">希望“排序”后，变为&#123;a1, b1, a2, b2, a3, b3,…an, bn&#125;。</span><br><span class="line">要求：尽可能高效。能否在时间复杂度为O(n)，空间复杂度为O（1）的解法</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>依次考察每个位置的变化规律<br>a1: 0 -&gt; 不变<br>a2: 1 -&gt; 2<br>a3: 2 -&gt; 4<br>a4: 3 -&gt; 6<br>…<br>an: n-1 -&gt; 2n-2<br>b1: n -&gt; 1<br>b2: n+1 -&gt; 3<br>b3: n+2 -&gt; 5<br>…<br>bn-1: 2n-2 -&gt; 2n-3<br>bn: 2n-1 -&gt; 不变<br>可以得出下标的变化规律：<br>j=(i * 2) % (n2 -1)<br>所以将值赋给辅助数组即可</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perfect_shuffle</span><span class="params">(<span class="keyword">char</span> *a[],<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n2 = n * <span class="number">2</span>, i, j;</span><br><span class="line">  <span class="keyword">char</span> *b[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n2<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    j=(i * <span class="number">2</span>) % (n2 <span class="number">-1</span>);</span><br><span class="line">    b[j] = a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n2<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    a[i] = b[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/06915503/29ceccfc.png" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">买票找零问题</span><br><span class="line">在一场激烈的球赛开始之前，售票工作正在紧张地进行中，每张球票为50元。</span><br><span class="line">现有2n个人排队购票，其中有n个人手持50元的钞票，</span><br><span class="line">另外的n个人手持100元的钞票，假设开始售票时，售票处没有零钱。</span><br><span class="line">要求：问这2n个人有多少种排队方式，不至于使售票处出现找不开钱的局面呢</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>找规律递推的方法；<br>要求持50元n人，100元n人，多少种排队方式，那么排在最后的一定是持100元的人，所以和持50元n人，100元n-1人的排队方式相同；<br>发现规律，持50元n-1人，100元n-1人和持50元n-1人，100元n-2人的排队方式相同；<br>所以这就可以从最小的1开始求了，然后累加到n，得到最后结果</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">arrange</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[N][N];</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="comment">// 当100元和50元人数不相等，100元0人，则只有1中解决方案</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">    <span class="built_in">array</span>[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若50元人数小于100元人数，则没有解决方案</span></span><br><span class="line">  <span class="comment">// 则二维数组的上三角的值都为0，不用初始化赋值</span></span><br><span class="line">  <span class="comment">// 开始递推，填满下三角矩阵数组</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=i; j++)</span><br><span class="line">      <span class="built_in">array</span>[i][j]=<span class="built_in">array</span>[i<span class="number">-1</span>][j]+<span class="built_in">array</span>[i][j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">array</span>[n][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/056636a3/3a075ef3.png" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot; target=&quot;_blank&quot;&gt;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java中main方法参数String[] args的使用</title>
    <link href="http://yoursite.com/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A32/"/>
    <id>http://yoursite.com/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A32/</id>
    <published>2020-06-21T04:58:34.607Z</published>
    <updated>2020-06-18T13:06:59.291Z</updated>
    
    <content type="html"><![CDATA[<p align="center">  <em>Java development notes document</em></p><p><a href="https://github.com/MysticalGuest/OPP-Java" target="_blank" rel="github"><h4 align="center">Source Code</h4></a></p><!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --><a id="more"></a><hr><h2 id="Java规定"><a href="#Java规定" class="headerlink" title="Java规定"></a>Java规定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main方法参数必须为字符串数组(String [ ])，</span><br><span class="line">变量名可以随意，通常使用args即是arguments（”参数”的复数形式）的缩写。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种写法都是一样的，都表示字符串数组<strong>args</strong>，其中<strong>args</strong>只是普通变量名，可以随意定义（前提是符合变量名规则）</p><h2 id="思考讨论"><a href="#思考讨论" class="headerlink" title="思考讨论"></a>思考讨论</h2><strong>  <big style="color:blue">1. 不按Java规定</big></strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将 String[] 改为 String</span></span><br><span class="line">    System.out.println(<span class="string">"Test!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照上面代码进行编码，那就不能被系统识别为主方法；<br>系统就会提示类似如下错误：<br><mark style="color: red"><br>Error: Main method not found in the file, please define the main method as: public static void main(String[] args)<br></mark></p><p><strong>  <big style="color:blue">2. 同名main方法</big></strong></p><p>如果已经有正确main方法，再有同名的main方法就是方法重载了。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 正确标准完美的main方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 方法重载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>    <big style="color:blue">3. 回归正题：参数String[] args的作用</big>  </strong></p><p>参数<code>String[] args</code>的作用就是可以在<code>main</code>方法运行前将参数传入<code>main</code>方法中。</p><p>3.1 从控制台，输入编译执行命令时传参数。例如下面代码：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)</span><br><span class="line">      System.out.println(args[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.2 但是此时<code>args[]</code>并没有赋值，我们需要从控制台命令行进行赋值，就像这样：</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/e62129e4/d11cbd11.png" alt="JAVA"></p><p>所以在命令行中使用<code>String[] args</code>即传入参数的使用为：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java java_file_name arg1 arg2 arg3 ...</span><br></pre></td></tr></table></figure><p>  <strong>    <big style="color:blue">4. eclipse举例</big>  </strong></p><p>在Eclipse使用<code>String[] args</code><br>4.1 </p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/6653f34a/e078676a.png" alt="JAVA"></p>4.2 <p align="center">    <img src="http://pic.yupoo.com/mysteryguest/82e6a336/e7c07e20.png" alt="JAVA"></p>最后点击Run运行即可。]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
  &lt;em&gt;Java development notes document&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/OPP-Java&quot; target=&quot;_blank&quot; rel=&quot;github&quot;&gt;&lt;h4 align=&quot;center&quot;&gt;Source Code&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --&gt;
    
    </summary>
    
    
      <category term="Compile" scheme="http://yoursite.com/categories/Compile/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java编译原理</title>
    <link href="http://yoursite.com/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A31/"/>
    <id>http://yoursite.com/2020/06/21/Java%E7%AC%94%E8%AE%B0%E6%96%87%E6%A1%A31/</id>
    <published>2020-06-21T04:58:34.583Z</published>
    <updated>2020-06-18T13:06:35.541Z</updated>
    
    <content type="html"><![CDATA[<p align="center">  <em>Java development notes document</em></p><p><a href="https://github.com/MysticalGuest/OPP-Java" target="_blank" rel="github"><h4 align="center">Source Code</h4></a></p><!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --><a id="more"></a><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在CMD上运行java文件时出现错误：找不到或者无法加载主类的问题。</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><!-- <blockquote> -->  <strong>    <big style="color:blue">1. 首先写一个测试文件</big>  </strong><!-- </blockquote> -->  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Run successfully!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>  <big style="color:blue">2. 通过cmd编译如下</big></strong></p><p>2.1 通过命令：<br><code>javac TestDemo.java</code><br>将其编译成字节码文件。要运行一段Java源码，必须先将源码转换为class文件，class文件就是编译器编译之后供虚拟机解释执行的二进制字节码文件。</p><p>2.2 通过命令：<br><code>java TestDemo</code><br>将其运行，并打印输出结果。</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/2c46ac5c/bc54c64d.png" alt="JAVA"></p>从图中可以看出，在这种情况下编译是正常的。<p>  <strong>    <big style="color:blue">3. 那么，我们修改刚开始的代码</big>  </strong></p><p>在首行加入在<strong>java</strong>中最常见的<strong>package</strong>关键字。<br>如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CourseExercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Run successfully!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.1 通过命令：<br><code>javac TestDemo.java</code><br>将其编译成字节码文件</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/bcf0886d/43eed707.png" alt="JAVA"></p>在编译成字节码文件时，是没有问题的。也就是说，在当前文件目录下，可以成class文件。好的，继续往下进行。<p>3.2 通过命令：<br><code>java TestDemo</code><br>尝试将其运行，并打印输出结果。</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/e7ed8660/a120008e.png" alt="JAVA"></p><p>这个时候就会报错了。提示错误：找不到或无法加载主类。很明显，这个错误是由于在代码首行加入了<code>package CourseExercise;</code>造成的。</p><p>  <strong>    <big style="color:blue">4. 那么，遇到这种问题该怎么解决呢</big>  </strong></p>方法如下：</br>4.1 通过命令：<p><code>javac -d . TestDemo.java</code><br>将目标文件编译成class文件。</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/61137328/78070dbe.png" alt="JAVA"></p><blockquote>说明：</br><mark>-d</mark> ：表示生成目录，设置编译生成的class文件保存路径，路径与定义的包名和层次相关。</br><mark> . </mark> ：表示在当前目录中生成。</blockquote>4.2 通过命令：<p><code>java CourseExercise/TestDemo</code><br>或者<br><code>java CourseExercise.TestDemo</code><br>来运行程序。</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/5668fdf1/1edff92a.png" alt="JAVA"></p>4.3 通过命令：<p><code>javap -verbose TestDemo.class</code><br>将class文件中的字节码转换为字节码指令。</p><p align="center">    <img src="http://pic.yupoo.com/mysteryguest/f79d5857/211659ad.png" alt="JAVA"></p>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
  &lt;em&gt;Java development notes document&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/OPP-Java&quot; target=&quot;_blank&quot; rel=&quot;github&quot;&gt;&lt;h4 align=&quot;center&quot;&gt;Source Code&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- [**Source Code**](https://github.com/MysticalGuest/OPP-Java) --&gt;
    
    </summary>
    
    
      <category term="Compile" scheme="http://yoursite.com/categories/Compile/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Icarus主题美化</title>
    <link href="http://yoursite.com/2020/06/21/ICARUS%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <id>http://yoursite.com/2020/06/21/ICARUS%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</id>
    <published>2020-06-21T04:58:34.486Z</published>
    <updated>2020-06-18T13:59:32.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Icarus用户指南-主题美化"><a href="#Icarus用户指南-主题美化" class="headerlink" title="Icarus用户指南 - 主题美化"></a>Icarus用户指南 - 主题美化</h2><p>Icarus的主题样式编码文件为<code>themes/icarus/layout/layout.jsx</code>。<br>此文件定义了站点全局的样式设置。本文详细介绍了本主题针对文章分类的详细配置说明。</p><a id="more"></a><hr><h2 id="自定义-Icarus-主题"><a href="#自定义-Icarus-主题" class="headerlink" title="自定义 Icarus 主题"></a>自定义 Icarus 主题</h2><blockquote><p>主题默认是三列排列，第一列是个人信息，第二列是文章的简介或者内容，第三列是标签云等组件。<br>在首页的时候阅读体验也很好，但是在文章页面查看全文的时候就感觉文章内容显示有些太少。</p><p>于是打算在文章页面隐藏掉右边的侧边栏。<br>我想应该是我用的icarus主题版本是<mark>3+</mark>，网上都是<mark>2+</mark>版本的教程，没有找到对应教程。<br>于是就自己阅读源码自己解决了问题。</p><p>默认配置也基本能用了，但是有一个痛点就是，阅读模式文章宽度太短了，还是根据个人习惯做下配置。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><strong>  <big>1. 首先找到了控制侧边栏的代码文件在</big></strong><p>  <code>../themes/icarus/layout/layout.jsx</code></p><p>源码为(版本差别，大同小异)：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Component &#125; = require('inferno');</span><br><span class="line">const classname = require('hexo-component-inferno/lib/util/classname');</span><br><span class="line">const Head = require('./common/head');</span><br><span class="line">const Navbar = require('./common/navbar');</span><br><span class="line">const Widgets = require('./common/widgets');</span><br><span class="line">const Footer = require('./common/footer');</span><br><span class="line">const Scripts = require('./common/scripts');</span><br><span class="line">const Search = require('./common/search');</span><br><span class="line"></span><br><span class="line">module.exports = class extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; env, site, config, page, helper, body &#125; = this.props;</span><br><span class="line"></span><br><span class="line">        const language = page.lang || page.language || config.language;</span><br><span class="line">        const columnCount = Widgets.getColumnCount(config.widgets);</span><br><span class="line"></span><br><span class="line">        return <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;language</span> ? <span class="attr">language.substr</span>(<span class="attr">0</span>, <span class="attr">2</span>) <span class="attr">:</span> ''&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Head</span> <span class="attr">env</span>=<span class="string">&#123;env&#125;</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&#123;</span>`<span class="attr">is-</span>$&#123;<span class="attr">columnCount</span>&#125;<span class="attr">-column</span>`&#125;&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#123;classname(&#123;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">column:</span> <span class="attr">true</span>,</span></span><br><span class="line"><span class="tag">                                '<span class="attr">order-2</span>'<span class="attr">:</span> <span class="attr">true</span>,</span></span><br><span class="line"><span class="tag">                                '<span class="attr">column-main</span>'<span class="attr">:</span> <span class="attr">true</span>,</span></span><br><span class="line"><span class="tag">                                '<span class="attr">is-12</span>'<span class="attr">:</span> <span class="attr">columnCount</span> === <span class="string">1,</span></span></span><br><span class="line"><span class="tag">                                '<span class="attr">is-8-tablet</span> <span class="attr">is-8-desktop</span> <span class="attr">is-8-widescreen</span>'<span class="attr">:</span> <span class="attr">columnCount</span> === <span class="string">2,</span></span></span><br><span class="line"><span class="tag">                                '<span class="attr">is-8-tablet</span> <span class="attr">is-8-desktop</span> <span class="attr">is-6-widescreen</span>'<span class="attr">:</span> <span class="attr">columnCount</span> === <span class="string">3</span></span></span><br><span class="line"><span class="tag">                            &#125;)&#125; <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">body</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Widgets</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> <span class="attr">position</span>=<span class="string">&#123;</span>'<span class="attr">left</span>'&#125; /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Widgets</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> <span class="attr">position</span>=<span class="string">&#123;</span>'<span class="attr">right</span>'&#125; /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Scripts</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Search</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>三栏分别为：（从第<code>24</code>行开始）</p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=&#123;classname(&#123;</span><br><span class="line">      column: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'order-2'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'column-main'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'is-12'</span>: columnCount === <span class="number">1</span>,</span><br><span class="line">      <span class="string">'is-8-tablet is-8-desktop is-8-widescreen'</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">      <span class="string">'is-8-tablet is-8-desktop is-6-widescreen'</span>: columnCount === <span class="number">3</span></span><br><span class="line">  &#125;)&#125; dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: body &#125;&#125;&gt;&lt;<span class="regexp">/div&gt;  /</span><span class="regexp">/ 中</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Widgets site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; position=&#123;<span class="string">'left'</span>&#125; /&gt;  <span class="comment">// 左</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Widgets site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; position=&#123;<span class="string">'right'</span>&#125; /&gt;  <span class="comment">//右</span></span><br></pre></td></tr></table></figure></li></ul><strong>  <big>2. 那能不能逻辑改为只有主页才显示右边侧栏呢？</big></strong><p>我从源码中分析到，函数返回<code>return</code>的就是样式页面。<br>既然找到了这3栏，我可以通过改变返回值，就可以达到控制主体样式的目的。</p><p>所以加一个判断语句即可：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(page.path===<span class="string">'index.html'</span>)&#123;   <span class="comment">// index.html即主页面</span></span><br><span class="line">  <span class="comment">// 返回3栏</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 返回2栏，改变宽度即可</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p style="color:blue">上面代码只会在主页面显示3栏，后续博主我在使用的过程中发现有且只有主页面是3栏；换页、分类页等页面就会变成2栏！因为我们的代码只为主页面返回3栏！</p><p>后来在读源码后，找到了解决方法：<br>在 <code>../themes/icarus/layout/layout.jsx</code> 文件中第<code>16</code>行添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Page"</span>, page);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Page.path: "</span>, page.path);</span><br></pre></td></tr></table></figure><p>这样就可以查看页面具体信息；<br>控制台执行<code>hexo g -d</code>后，会出现以下信息；<br>由于每个<code>page</code>信息可能会很多，尤其是博客文章内容过多，就会使<code>page</code>包含的信息过多，会使控制台信息溢出；所以我只选择其中一个较短的信息展示如下：</p><p>2.1 <mark>page信息</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page:  &#123; <span class="attr">base</span>: <span class="string">'tags/Hexo/'</span>,</span><br><span class="line">  total: <span class="number">1</span>,</span><br><span class="line">  current: <span class="number">1</span>,</span><br><span class="line">  current_url: <span class="string">'tags/Hexo/'</span>,</span><br><span class="line">  posts: _Query &#123; <span class="attr">data</span>: [ [_Document], [_Document] ], <span class="attr">length</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  prev: <span class="number">0</span>,</span><br><span class="line">  prev_link: <span class="string">''</span>,</span><br><span class="line">  next: <span class="number">0</span>,</span><br><span class="line">  next_link: <span class="string">''</span>,</span><br><span class="line">  tag: <span class="string">'Hexo'</span>,</span><br><span class="line">  path: <span class="string">'tags/Hexo/index.html'</span>,</span><br><span class="line">  lang: <span class="string">'en'</span>,</span><br><span class="line">  canonical_path: <span class="string">'tags/Hexo/index.html'</span> &#125;</span><br></pre></td></tr></table></figure><p>2.2 <mark>page.path信息</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">ubuntu~<span class="regexp">/github/my</span>sticalguest.github.io$ hexo g -d</span><br><span class="line">Inferno is <span class="keyword">in</span> development mode.</span><br><span class="line">INFO  =======================================</span><br><span class="line"> ██╗ ██████╗ █████╗ ██████╗ ██╗   ██╗███████╗</span><br><span class="line"> ██║██╔════╝██╔══██╗██╔══██╗██║   ██║██╔════╝</span><br><span class="line"> ██║██║     ███████║██████╔╝██║   ██║███████╗</span><br><span class="line"> ██║██║     ██╔══██║██╔══██╗██║   ██║╚════██║</span><br><span class="line"> ██║╚██████╗██║  ██║██║  ██║╚██████╔╝███████║</span><br><span class="line"> ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝</span><br><span class="line">=============================================</span><br><span class="line">INFO  === Checking package dependencies ===</span><br><span class="line">INFO  === Checking the configuration file ===</span><br><span class="line">INFO  === Registering Hexo extensions ===</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">6.76</span> s</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">18</span>/ICARUS主题美化/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训八/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训五/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训二/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训一/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训六/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">17</span>/数据结构进阶实训七/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">16</span>/Java笔记文档<span class="number">2</span>/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">16</span>/Java笔记文档<span class="number">1</span>/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">15</span>/数据结构进阶实训三/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">15</span>/数据结构进阶实训四/</span><br><span class="line">Page.path:  <span class="number">2020</span>/<span class="number">06</span>/<span class="number">14</span>/hello-world/</span><br><span class="line">Page.path:  archives/index.html</span><br><span class="line">Page.path:  archives/page/<span class="number">2</span>/index.html</span><br><span class="line">Page.path:  archives/<span class="number">2020</span>/index.html</span><br><span class="line">Page.path:  archives/<span class="number">2020</span>/page/<span class="number">2</span>/index.html</span><br><span class="line">Page.path:  archives/<span class="number">2020</span>/<span class="number">06</span>/index.html</span><br><span class="line">Page.path:  archives/<span class="number">2020</span>/<span class="number">06</span>/page/<span class="number">2</span>/index.html</span><br><span class="line">Page.path:  categories/配置/index.html</span><br><span class="line">Page.path:  categories/Document-Compile/index.html</span><br><span class="line">Page.path:  categories/主题/index.html</span><br><span class="line">Page.path:  categories/算法/index.html</span><br><span class="line">Page.path:  index.html</span><br><span class="line">Page.path:  page/<span class="number">2</span>/index.html</span><br><span class="line">Page.path:  tags/Hexo/index.html</span><br><span class="line">Page.path:  tags/Java/index.html</span><br><span class="line">Page.path:  tags/C/index.html</span><br><span class="line">Page.path:  categories/index.html</span><br><span class="line">Page.path:  tags/index.html</span><br><span class="line">INFO  <span class="number">0</span> files generated <span class="keyword">in</span> <span class="number">3.37</span> s</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files <span class="keyword">from</span> public folder...</span><br><span class="line">INFO  Copying files <span class="keyword">from</span> extend dirs...</span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line">分支 <span class="string">'master'</span> 设置为跟踪来自 <span class="string">'git@github.com:*/*.git'</span> 的远程分支 <span class="string">'master'</span>。</span><br><span class="line">Everything up-to-date</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>从控制台打印出的信息，可以明显看出每个页面的详细<strong>路径信息</strong>；<br>所以我们想要那些页面3栏都可以；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="regexp">/\Sindex.html/</span>;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span>(page.path===<span class="string">'index.html'</span> || path.test(page.path))&#123;</span><br><span class="line"><span class="comment">// 返回3栏</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 返回2栏，改变宽度即可</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我利用<strong>正则表达式</strong>，将非博客文章页面都设为3栏显示，大家可根据自己喜好自行对想要的页面设置指定栏数。</p><hr><strong>  <big>3. 其他修改逻辑</big></strong><p><code>+</code>表示添加代码，没有标记表示代码不做修改</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从16行开始修改代码</span></span><br><span class="line">+ <span class="keyword">if</span>(page.path===<span class="string">'index.html'</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;language</span> ? <span class="attr">language.substr</span>(<span class="attr">0</span>, <span class="attr">2</span>) <span class="attr">:</span> ''&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Head</span> <span class="attr">env</span>=<span class="string">&#123;env&#125;</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> /&gt;</span></span></span><br><span class="line">      &lt;body class=&#123;`is-$&#123;columnCount&#125;-column`&#125;&gt;</span><br><span class="line">          &lt;Navbar config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">          &lt;section class="section"&gt;</span><br><span class="line">              &lt;div class="container"&gt;</span><br><span class="line">                  &lt;div class="columns"&gt;</span><br><span class="line">                      &lt;div class=&#123;classname(&#123;</span><br><span class="line">                          column: true,</span><br><span class="line">                          'order-2': true,</span><br><span class="line">                          'column-main': true,</span><br><span class="line">                          'is-12': columnCount === 1,</span><br><span class="line">                          'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2,</span><br><span class="line">                          'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3</span><br><span class="line">                      &#125;)&#125; dangerouslySetInnerHTML=&#123;&#123; __html: body &#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">                      &lt;Widgets site=&#123;site&#125; config=&#123;config&#125;</span><br><span class="line">                       helper=&#123;helper&#125; page=&#123;page&#125; position=&#123;'left'&#125; /&gt;</span><br><span class="line">                      &lt;Widgets site=&#123;site&#125; config=&#123;config&#125;</span><br><span class="line">                       helper=&#123;helper&#125; page=&#123;page&#125; position=&#123;'right'&#125; /&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">          &lt;/section&gt;</span><br><span class="line">          &lt;Footer config=&#123;config&#125; helper=&#123;helper&#125; /&gt;</span><br><span class="line">          &lt;Scripts site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">          &lt;Search config=&#123;config&#125; helper=&#123;helper&#125; /&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>;</span><br><span class="line">+ &#125;</span><br><span class="line">+ <span class="keyword">else</span>&#123;</span><br><span class="line">+ <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;language</span> ? <span class="attr">language.substr</span>(<span class="attr">0</span>, <span class="attr">2</span>) <span class="attr">:</span> ''&#125;&gt;</span></span></span><br><span class="line"><span class="xml">+     <span class="tag">&lt;<span class="name">Head</span> <span class="attr">env</span>=<span class="string">&#123;env&#125;</span> <span class="attr">site</span>=<span class="string">&#123;site&#125;</span> <span class="attr">config</span>=<span class="string">&#123;config&#125;</span> <span class="attr">helper</span>=<span class="string">&#123;helper&#125;</span> <span class="attr">page</span>=<span class="string">&#123;page&#125;</span> /&gt;</span></span></span><br><span class="line">+     &lt;body class=&#123;`is-$&#123;columnCount&#125;-column`&#125;&gt;</span><br><span class="line">+         &lt;Navbar config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">+         &lt;section class="section"&gt;</span><br><span class="line">+             &lt;div class="container"&gt;</span><br><span class="line">+                 &lt;div class="columns"&gt;</span><br><span class="line">+                     &lt;div class=&#123;classname(&#123;</span><br><span class="line">+                         column: true,</span><br><span class="line">+                         'order-2': true,</span><br><span class="line">+                         'column-main': true,</span><br><span class="line">+                         'is-12': columnCount === 1,</span><br><span class="line">+                         'is-8-tablet is-8-desktop is-10-widescreen': columnCount === 2</span><br><span class="line">+                     &#125;)&#125; dangerouslySetInnerHTML=&#123;&#123; __html: body &#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">+                     &lt;Widgets site=&#123;site&#125; config=&#123;config&#125;</span><br><span class="line">helper=&#123;helper&#125; page=&#123;page&#125; position=&#123;'left'&#125;/&gt;</span><br><span class="line">+                 &lt;/div&gt;</span><br><span class="line">+             &lt;/div&gt;</span><br><span class="line">+         &lt;/section&gt;</span><br><span class="line">+         &lt;Footer config=&#123;config&#125; helper=&#123;helper&#125; /&gt;</span><br><span class="line">+         &lt;Scripts site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">+         &lt;Search config=&#123;config&#125; helper=&#123;helper&#125; /&gt;</span><br><span class="line"><span class="xml">+     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">+ <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>;</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure><p>好啦，大工告成！</p><p>其中只有<strong>两处</strong>代码改动较大，让我们来看看吧！</p><p>我们只是修改了栏数，但每一栏的宽度没有改变，这里更关注的是文章栏的宽度。<br>具体修改代码下：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染相应栏的标签，只添加‘中’和‘左’</span></span><br><span class="line"><span class="comment">// 根据自己的喜好可以选择任意组合，‘中’和‘右’也可以</span></span><br><span class="line"><span class="comment">// 第45行</span></span><br><span class="line"><span class="string">'is-8-tablet is-8-desktop is-10-widescreen'</span>: columnCount === <span class="number">2</span></span><br></pre></td></tr></table></figure><p>即将原来的 <code>is-8-widescreen</code>修改为<code>is-10-widescreen</code>。</p><hr><strong>  <big>4. 下面详细解释一下代码</big></strong><p>icarus 可以设置资料、toc、归档等等<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Widgets/">插件</a>在文章的左侧或者右侧。也就是说，包括插件和文章在内，列数在1~3列不等：</p><p>无插件的时候，为1列；<br>插件统一在左侧或右侧时，为2列；<br>插件左、右侧都有时，为3列。<br><a href="https://bulma.io/">Bulma</a> 引擎将屏幕横向分为12份，所有元素按照自己的需求使用即可。</p><hr><p>通过 <code>layout</code>或<code>widget.jsx</code> 文件，我们可以看到，对于插件而言：</p><p>如果屏幕分为2列，则插件的宽度为 <code>is-4-widescreen</code>，也即是<code>4/12=33.33%</code>的宽度；<br>如果屏幕分为3列，则插件的宽度为 <code>is-3-widescreen</code>，也即是<code>3/12=25%</code>的宽度，两列插件占了50%宽。<br>同样的，<code>layout.jsx</code> 文件针对文章也做了宽度限制：</p><p>如果屏幕分为1列，则文章的宽度为 <code>is-12</code>，也即是<code>12/12=100%</code>的宽度；<br>如果屏幕分为2列，则文章的宽度为 <code>is-8-widescreen，也即是8/12=66.66%</code>的宽度；<br>如果屏幕分为3列，则文章的宽度为 <code>is-6-widescreen</code>，也即是<code>6/12=50%</code>的宽度。<br>那么调整插件宽度的方法也就差不多想出来啦！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Icarus用户指南-主题美化&quot;&gt;&lt;a href=&quot;#Icarus用户指南-主题美化&quot; class=&quot;headerlink&quot; title=&quot;Icarus用户指南 - 主题美化&quot;&gt;&lt;/a&gt;Icarus用户指南 - 主题美化&lt;/h2&gt;&lt;p&gt;Icarus的主题样式编码文件为&lt;code&gt;themes/icarus/layout/layout.jsx&lt;/code&gt;。&lt;br&gt;此文件定义了站点全局的样式设置。本文详细介绍了本主题针对文章分类的详细配置说明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="主题" scheme="http://yoursite.com/categories/%E4%B8%BB%E9%A2%98/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://yoursite.com/2020/06/21/hello-world/"/>
    <id>http://yoursite.com/2020/06/21/hello-world/</id>
    <published>2020-06-21T04:39:15.461Z</published>
    <updated>2020-06-21T06:26:20.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
