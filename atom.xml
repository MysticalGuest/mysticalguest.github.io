<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longing(MysteryGuest的博客)</title>
  
  <subtitle>心向星光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mysticalguest.github.io/"/>
  <updated>2020-08-27T15:38:07.128Z</updated>
  <id>https://mysticalguest.github.io/</id>
  
  <author>
    <name>MysticalGuest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot启动配置原理</title>
    <link href="https://mysticalguest.github.io/2020/08/27/Spring/SpringBootStartupConfigPrinciple/"/>
    <id>https://mysticalguest.github.io/2020/08/27/Spring/SpringBootStartupConfigPrinciple/</id>
    <published>2020-08-27T09:56:02.101Z</published>
    <updated>2020-08-27T15:38:07.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、启动配置原理"><a href="#1、启动配置原理" class="headerlink" title="1、启动配置原理"></a>1、启动配置原理</h2><h3 id="1-1-几个重要的事件回调机制"><a href="#1-1-几个重要的事件回调机制" class="headerlink" title="1.1 几个重要的事件回调机制"></a>1.1 几个重要的事件回调机制</h3><a id="more"></a><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>在主程序类中打上断点，Debug，进行研究。</p><h3 id="1-2-启动流程："><a href="#1-2-启动流程：" class="headerlink" title="1.2 启动流程："></a>1.2 启动流程：</h3><ul><li>创建SpringApplication对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringApplication.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> run(<span class="keyword">new</span> Object[]&#123;source&#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> SpringApplication(sources)).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用<code>initialize(sources);</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前是否一个web应用, 即是否导入web模块</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">// 从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer</span></span><br><span class="line">    <span class="comment">// 然后保存起来, 不着急用</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">// 从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">// 从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到ApplicationContextInitializer：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/initializer.png" alt="initializer"></p><p>找到的Listener：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/listener.png" alt="listener"></p><ul><li>运行run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      <span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">       </span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">      <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">      <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">      <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded()；</span></span><br><span class="line">       </span><br><span class="line">      <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">      <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">      <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、事件监听机制"><a href="#2、事件监听机制" class="headerlink" title="2、事件监听机制"></a>2、事件监听机制</h2><p>来实现一下1.1节中提到的4个组件；</p><h3 id="2-1-实现自定义ApplicationContextInitializer"><a href="#2-1-实现自定义ApplicationContextInitializer" class="headerlink" title="2.1 实现自定义ApplicationContextInitializer"></a>2.1 实现自定义ApplicationContextInitializer</h3><p>Ctrl+n搜索ApplicationContextInitializer，选择ApplicationContextInitializer，Ctrl+h查看SpringBoot已经实现的所有Initializer：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/ApplicationContextInitializer.PNG" alt="ApplicationContextInitializer"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloApplicationContextInitializer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> </span></span><br><span class="line"><span class="class"><span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来监听ioc容器的启动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-实现自定义SpringApplicationRunListener"><a href="#2-2-实现自定义SpringApplicationRunListener" class="headerlink" title="2. 2 实现自定义SpringApplicationRunListener"></a>2. 2 实现自定义SpringApplicationRunListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloSpringApplicationRunListener.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器, 传过来Spring应用和命令行参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听容器开始</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment configurableEnvironment)</span> </span>&#123;</span><br><span class="line">        Object o = configurableEnvironment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容器环境加载完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext, </span></span></span><br><span class="line"><span class="function"><span class="params">Throwable throwable)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上两个组件想要起作用，必须配置（META-INF/spring.factories）；在我们引入的每个Jar包里，点开其目录结构中都有META-INF文件夹，里面有个spring.factories文件；</p><p>我们就要在resources文件夹下创建META-INF/spring.factories，并写入：</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">copy Reference</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.initializr.initializer.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.initializr.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure><h3 id="2-3-实现自定义ApplicationRunner"><a href="#2-3-实现自定义ApplicationRunner" class="headerlink" title="2.3 实现自定义ApplicationRunner"></a>2.3 实现自定义ApplicationRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要放在容器中的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-实现自定义CommandLineRunner"><a href="#2-4-实现自定义CommandLineRunner" class="headerlink" title="2.4 实现自定义CommandLineRunner"></a>2.4 实现自定义CommandLineRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要放在容器中的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(strings));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行查看控制台有定义输出即可：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/custom-listener.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、启动配置原理&quot;&gt;&lt;a href=&quot;#1、启动配置原理&quot; class=&quot;headerlink&quot; title=&quot;1、启动配置原理&quot;&gt;&lt;/a&gt;1、启动配置原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-几个重要的事件回调机制&quot;&gt;&lt;a href=&quot;#1-1-几个重要的事件回调机制&quot; class=&quot;headerlink&quot; title=&quot;1.1 几个重要的事件回调机制&quot;&gt;&lt;/a&gt;1.1 几个重要的事件回调机制&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot与数据访问</title>
    <link href="https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDataAccess/"/>
    <id>https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDataAccess/</id>
    <published>2020-08-18T15:27:51.497Z</published>
    <updated>2020-08-27T15:42:10.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、整合基本JDBC与数据源"><a href="#1、整合基本JDBC与数据源" class="headerlink" title="1、整合基本JDBC与数据源"></a>1、整合基本JDBC与数据源</h2><h3 id="1-1-Spring官网查看各种场景JDBC有关的场景启动器。"><a href="#1-1-Spring官网查看各种场景JDBC有关的场景启动器。" class="headerlink" title="1.1 Spring官网查看各种场景JDBC有关的场景启动器。"></a>1.1 Spring<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">官网</a>查看各种场景JDBC有关的场景启动器。</h3><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li>默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源</li><li>数据源的相关配置都在DataSourceProperties里面</li></ul><h3 id="1-2-自动配置原理"><a href="#1-2-自动配置原理" class="headerlink" title="1.2 自动配置原理"></a>1.2 自动配置原理</h3><p><code>org.springframework.boot.autoconfigure.jdbc</code></p><ul><li>参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</li><li>SpringBoot默认可以支持以下数据源：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource</span><br><span class="line">HikariDataSource</span><br><span class="line">BasicDataSource</span><br></pre></td></tr></table></figure><ul><li>自定义数据源类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;DataSource<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">  <span class="title">name</span> </span>= &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">  Generic() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">    <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>DataSourceAutoConfiguration.class</code>中，有<code>DataSourceInitializer</code>继承自<code>ApplicationListener</code></p><p>作用：</p><ul><li><p>runSchemaScripts()；运行建表语句</p></li><li><p>runDataScripts()；运行插入数据的sql语句</p></li><li><p>默认只需要将文件命名为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="attr">默认规则：必须命名schema.sql，schema-all.sql；</span></span><br></pre></td></tr></table></figure></li><li><p>可以使用配置文件指定位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>操作数据库：自动配置了JdbcTemplate操作数据库</p></li></ul><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><p>在Maven<a href="https://mvnrepository.com/">公共库</a>中搜索Druid，找到其Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中加入配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源基本配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 与DataSourceProperties.class下的属性一一对应</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.156:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#    schema:</span></span><br><span class="line"><span class="comment">#      - classpath:department.sql</span></span><br><span class="line">    <span class="comment"># 数据源其他配置, 底部这种颜色是因为DataSourceProperties.class下没有这些属性,</span></span><br><span class="line">    <span class="comment"># 并不能绑定到数据库的配置里</span></span><br><span class="line">    <span class="comment"># 但DruidDataSource.java中有这些属性</span></span><br><span class="line">    <span class="comment"># 想要生效, 自己配置, config.DruidConfig</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>想要配置生效，导入druid数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line"><span class="keyword">new</span> StatViewServlet(), </span><br><span class="line"><span class="string">"/druid/*"</span></span><br><span class="line">        );</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">// 默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>); <span class="comment">// 排除拦截</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前写的<code>SpringinitializrApplicationTests</code>类的<code>testJDBC()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(dataSource.getClass());</span><br></pre></td></tr></table></figure><p>语句打上断点，debug测试方法，查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/druid_config.PNG" alt="druid config"></p><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><p>同样在Maven<a href="https://mvnrepository.com/">公共库</a>中搜索MyBatis Spring Boot Starter，找到其Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-MyBatis-Spring-Boot-Starter-简介"><a href="#3-1-MyBatis-Spring-Boot-Starter-简介" class="headerlink" title="3.1 MyBatis-Spring-Boot-Starter 简介"></a>3.1 MyBatis-Spring-Boot-Starter 简介</h3><p>MyBatis-Spring-Boot-Starter类似一个中间件，链接Spring Boot和MyBatis，构建基于Spring Boot的MyBatis应用程序。</p><p>MyBatis-Spring-Boot-Starter 当前版本是 2.1.3，发布于2020年6月</p><p>MyBatis-Spring-Boot-Starter是个集成包，因此对MyBatis、MyBatis-Spring和SpringBoot的jar包都存在依赖，如下所示：</p><div class="table-container"><table><thead><tr><th>MyBatis-Spring-Boot-Starter</th><th>MyBatis-Spring</th><th>Spring Boot</th><th>Java</th></tr></thead><tbody><tr><td><strong>2.1</strong></td><td>2.0 (need 2.0.2+ for enable all features)</td><td>2.1 or higher</td><td>8 or higher</td></tr><tr><td><strong>1.3</strong></td><td>1.3</td><td>1.5</td><td>6 or higher</td></tr></tbody></table></div><h3 id="3-2-分析依赖"><a href="#3-2-分析依赖" class="headerlink" title="3.2 分析依赖"></a>3.2 分析依赖</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/mybatis.png" alt="mybatis"></p><p>依赖会引入<code>spring-boot-starter-jdbc</code>，<code>mybatis</code>的jar包，<code>mybatis-spring</code>中间整合包以及<code>mybatis-spring-boot-autoconfigure</code>自动配置包。</p><h3 id="3-3-使用步骤"><a href="#3-3-使用步骤" class="headerlink" title="3.3 使用步骤"></a>3.3 使用步骤</h3><ul><li>配置数据源相关属性</li><li>给数据库建表</li><li>创建JavaBean</li><li>注解版</li></ul><h3 id="3-4-注解版"><a href="#3-4-注解版" class="headerlink" title="3.4 注解版"></a>3.4 注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DepartmentMapper.java</span></span><br><span class="line"><span class="comment">// 指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    useGeneratedKeys = true: 使用自动生成的主键</span></span><br><span class="line"><span class="comment">    keyProperty = "id": 指明主键字段, id属性式用来封装主键的</span></span><br><span class="line"><span class="comment">    插入的department后, 主键会重新封装进来, 才会有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问方式：</p><ul><li>插入：<a href="http://localhost:8088/dept?departmentName=AA">http://localhost:8088/dept?departmentName=AA</a></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/insert_department.PNG" alt="insert department"></p><ul><li>查询：<a href="http://localhost:8088/dept/1">http://localhost:8088/dept/1</a></li></ul><p>问题：自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyBatisConfig.java</span></span><br><span class="line"><span class="comment">// 由于上面的org.apache.ibatis.session.Configuration, 所以这里使用全类名</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用注解版MyBatis时, 本来数据库department表中字段是departmentName,</span></span><br><span class="line"><span class="comment">    如果将其改为department_name后, 就取不到值了, 如果不使用注解版, 可以直接在配置文件中配置驼峰命名规则,</span></span><br><span class="line"><span class="comment">    但现在只能使用配置类了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 开启驼峰命名法规则</span></span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有，当我们实体类增多，每个映射文件都需要<code>@Mapper</code>注解？可以在<strong>启动类中</strong>使用<code>MapperScan</code>批量扫描所有的Mapper接口；</p><p>点击<code>MapperScan</code>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;MapperScannerRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MapperScan</span> </span>&#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationClass() <span class="keyword">default</span> Annotation<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; markerInterface() <span class="keyword">default</span> Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sqlSessionTemplateRef</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sqlSessionFactoryRef</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends MapperFactoryBean&gt; factoryBean() <span class="keyword">default</span> MapperFactoryBean<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面可以配置<code>basePackages()</code>参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.initializr.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringinitializrApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Start..."</span>);</span><br><span class="line">    SpringApplication.run(SpringinitializrApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"Success..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-配置文件版"><a href="#3-5-配置文件版" class="headerlink" title="3.5 配置文件版"></a>3.5 配置文件版</h3><p>MyBatis代码都托管到了GitHub，去<a href="https://github.com/mybatis/mybatis-3">GitHub</a>查看配置文件写法，<a href="http://www.mybatis.org/mybatis-3/">官方文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使配置文件生效：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 指定sql映射文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>更多使用参照<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">官方文档</a></p><h2 id="4、整合SpringData的JPA模块"><a href="#4、整合SpringData的JPA模块" class="headerlink" title="4、整合SpringData的JPA模块"></a>4、整合SpringData的JPA模块</h2><h3 id="4-1-SpringData简介"><a href="#4-1-SpringData简介" class="headerlink" title="4.1 SpringData简介"></a>4.1 SpringData简介</h3><p>SpringData<a href="https://spring.io/projects/spring-data">官方文档</a></p><p>Spring Data项目的目的是为了简化构建基于Spring框架应用的数据访问技术，包括非关系数据库、Map-Reduce框架、云数据服务等等；另外一位包含对关系数据库的访问支持。</p><ul><li><p>Spring Data包含多个子项目：</p><ul><li><a href="https://github.com/spring-projects/spring-data-commons">Spring Data Commons</a></li><li><a href="https://spring.io/projects/spring-data-jdbc">Spring Data JDBC</a></li><li><a href="https://spring.io/projects/spring-data-jdbc-ext">Spring Data JDBC Ext</a></li><li><a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA</a></li><li><a href="https://github.com/spring-projects/spring-data-keyvalue">Spring Data KeyValue</a></li><li><a href="https://spring.io/projects/spring-data-ldap">Spring Data LDAP</a></li><li><a href="https://spring.io/projects/spring-data-mongodb">Spring Data MongoDB</a></li><li><a href="https://spring.io/projects/spring-data-redis">Spring Data Redis</a></li><li><a href="https://spring.io/projects/spring-data-rest">Spring Data REST</a></li><li>……</li><li><a href="https://spring.io/projects/spring-data-solr">Spring Data for Apache Solr</a></li><li><a href="https://spring.io/projects/spring-data-neo4j">Spring Data Neo4j</a></li></ul></li><li><p>Spring Data特点</p><p>SpringData为我们提供使用统一的API来对数据访问层进行操作；这主要是 Spring Data Commons项目来实现的。Spring Data Commons让我们在使用关系型或者非关系型数据访问技术时都基于Spring提供的统一标准，标准包含了CRUD(创建、获取、更新、删除)、査询、排序和分页的相关操作。</p></li><li><p>统一的Repository接口</p><ul><li><code>Repository&lt;T, ID extends Serializable&gt;</code>：统一接口</li><li><code>RevisionRepository&lt;T, ID extends Serializable, N extends Number&amp; Comparable&lt;N&gt;&gt;</code>：基于乐观锁机制</li><li><code>CrudRepository&lt;T, ID extends Serializable&gt;</code>：基本CRUD操作</li><li><code>PagingAndSortingRepository&lt;T, ID extends Serializable&gt;</code>：基本CRUD及分页</li></ul></li><li><p>提供数据访问模板类xxxTemplate</p><ul><li>如：MongoTemplate、RedisTemplate等</li></ul></li><li>JPA (Java Persistence API，Java持久层API) 与Spring Data<ul><li>JpaRepository基本功能</li><li>定义符合规范的方法命名</li><li>@Query自定义查询，定制查询SQL</li><li>Specification查询（Spring Data JPA支持JPA2.0的Criteria查询）</li></ul></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA.png" alt="JPA"></p><p>应用面向Spring Data编程，使用其提供模板。</p><h3 id="4-2-整合SpringData-JPA"><a href="#4-2-整合SpringData-JPA" class="headerlink" title="4.2 整合SpringData JPA"></a>4.2 整合SpringData JPA</h3><p>引入启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入JPA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看视图：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/starter-data-jpa.PNG" alt="starter-data-jpa"></p><ul><li>可以看出，其导入了很多Spring业务功能模块，比如AOP和事务（Spring-tx）等；</li><li>还可以看出其底层是用hibernate实现的，其中使用<code>hibernate-entitymanager</code>管理<code>hibernate-jpa-*-ap</code>，进行操作。</li></ul><p>依然需要配置数据源，用JPA操作数据库。</p><p>JPA：ORM（Object Relational Mapping）；</p><ul><li>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个Dao接口来操作实体类对应的数据表（称为Repository）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本的配置JpaProperties</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="comment"># 控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>编写controller类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        User user = userRepository.findOne(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 有自增组件</span></span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写了两个简单的方法用来做测验</p><ul><li><p>启动主程序查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-table-not-found.PNG" alt="JPA-table-not-found"></p><p>可以看出，我们的配置<code>ddl-auto: update</code>生效了，当我们第一次启动项目，数据库中没有user表时，项目会自动为我们创建的。</p><p>然后依次访问：<a href="http://localhost:8088/user/1">http://localhost:8088/user/1</a></p><p>和<a href="http://localhost:8088/user?lastName=Tom&amp;email=tom@vip.com">http://localhost:8088/user?lastName=Tom&amp;email=tom@vip.com</a></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-test.PNG" alt="JPA-test"></p><p>查看控制台：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/JPA-console.PNG" alt="JPA-console"></p><p>最后返回数据库是由数据的。</p></li></ul><p>测试成功啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、整合基本JDBC与数据源&quot;&gt;&lt;a href=&quot;#1、整合基本JDBC与数据源&quot; class=&quot;headerlink&quot; title=&quot;1、整合基本JDBC与数据源&quot;&gt;&lt;/a&gt;1、整合基本JDBC与数据源&lt;/h2&gt;&lt;h3 id=&quot;1-1-Spring官网查看各种场景JDBC有关的场景启动器。&quot;&gt;&lt;a href=&quot;#1-1-Spring官网查看各种场景JDBC有关的场景启动器。&quot; class=&quot;headerlink&quot; title=&quot;1.1 Spring官网查看各种场景JDBC有关的场景启动器。&quot;&gt;&lt;/a&gt;1.1 Spring&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter&quot;&gt;官网&lt;/a&gt;查看各种场景JDBC有关的场景启动器。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>电子商务课程复习</title>
    <link href="https://mysticalguest.github.io/2020/08/18/CSharp/CSharpReview/"/>
    <id>https://mysticalguest.github.io/2020/08/18/CSharp/CSharpReview/</id>
    <published>2020-08-18T09:44:24.536Z</published>
    <updated>2020-08-24T05:05:46.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1章-计算机、Internet与Visual-C-简介"><a href="#第1章-计算机、Internet与Visual-C-简介" class="headerlink" title="第1章 计算机、Internet与Visual C#简介"></a>第1章 计算机、Internet与Visual C#简介</h2><a id="more"></a><h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="1-1-填空题"><a href="#1-1-填空题" class="headerlink" title="1.1 填空题"></a>1.1 填空题</h4><ul><li>计算机只能直接理解其本身的<strong>机器</strong>语言，这种语言是由1和0构成的。</li><li>计算机处理数据时由一组指令控制，这组指令称为计算机<strong>程序</strong>。</li><li>本章介绍的3种语言是机器语言、<strong>汇编语言</strong>和<strong>高级语言</strong>。</li><li>将高级语言程序变成机器语言程序称为<strong>编译器</strong>。</li><li>Visual Studio是开发C#程序的<strong>集成开发环境（IDE）</strong>。</li><li>C语言是作为<strong>UNIX</strong>操作系统的开发语言而著称的。</li><li>Web服务分别用<strong>XML</strong>和<strong>SOAP</strong>在Internet上标记和发送消息。</li></ul><h4 id="2-2-判断题（更正过的）"><a href="#2-2-判断题（更正过的）" class="headerlink" title="2.2 判断题（更正过的）"></a>2.2 判断题（更正过的）</h4><ul><li>UML主要用于设计面向对象系统。</li><li>C#是面向对象语言。</li><li>C#是多个.NET语言之一（还有Visual Basic与Visual C++）。</li><li>面向对象编程（针对事情）是比过程式编程更自然的建模方式。</li><li>计算机只能直接理解其机器语言。</li><li>MSIL是公共中间格式，不管原.NET语言是什么，所有.NET程序都要编译成这种格式。</li><li>.NET框架可以移植到非Windows平台</li></ul><h2 id="第2章-Visual-C-2008-Express简介"><a href="#第2章-Visual-C-2008-Express简介" class="headerlink" title="第2章 Visual C# 2008 Express简介"></a>第2章 Visual C# 2008 Express简介</h2><h3 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="2-1-填空题"><a href="#2-1-填空题" class="headerlink" title="2.1 填空题"></a>2.1 填空题</h4><ul><li><strong>可视化编程</strong>技术可以创建GUI而不用编写任何代码。</li><li><strong>方案</strong>是一个或多个工程，一起形成Visual C#程序。</li><li><strong>自动隐藏</strong>特性在鼠标指针移到窗口区外时隐藏窗口。</li><li><strong>工具提示</strong>在鼠标指针放到图标上时显示。</li><li><strong>Solution Explorer</strong>窗口可以浏览方案文件。</li><li>加号框表示Solution Explorer中的树可以<strong>展开</strong>。</li><li>属性窗口的属性按<strong>字母顺序</strong>或<strong>类别</strong>排序</li><li>窗体的<strong>Text</strong>属性指定窗体标题栏中显示的文本。</li><li><strong>工具栏</strong>可以直观地将控件加进窗体中。</li><li>用<strong>动态帮助</strong>根据当前上下文显示相关帮助文章。</li><li><strong>TextAlign</strong>属性指定文本在卷标边界中的对齐方式。</li></ul><h4 id="2-2-判断题（更正过的）-1"><a href="#2-2-判断题（更正过的）-1" class="headerlink" title="2.2 判断题（更正过的）"></a>2.2 判断题（更正过的）</h4><ul><li>标题栏显示IDE的方式。</li><li>图钉图标切换，自动隐藏，而X框关闭窗口。</li><li>工具栏图标表示各种菜单命令。</li><li>工具箱包括表示控件的图标。</li><li>窗体有标题栏，卷标没有（但有卷标文本）。</li><li>控制属性可以用属性窗口修改。 </li><li>图形框通常显示图形。</li><li>Visual C#文件扩展名为.cs。</li><li>窗体背景颜色用BackColor属性设置。</li></ul><h2 id="第3章-C-程序简介"><a href="#第3章-C-程序简介" class="headerlink" title="第3章 C#程序简介"></a>第3章 C#程序简介</h2><p>简单程序：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.WriteLine()和console.Write()区别在于最后是否有换行。</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Welcome</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Hello world!"</span>);</span><br><span class="line">    <span class="comment">//使用formating</span></span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0&#125;\n&#123;1&#125;"</span>,<span class="string">"Welcome to"</span>, <span class="string">"C# Programming!"</span>);</span><br><span class="line">    <span class="comment">//读入加转换</span></span><br><span class="line">    Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="comment">//输出指定长度,如果需要在左侧则使用&#123;0，-20&#125;表示</span></span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0,4&#125;&#123;1,20:C&#125;"</span>, year, acc ount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="3-1-填空题"><a href="#3-1-填空题" class="headerlink" title="3.1 填空题"></a>3.1 填空题</h4><ul><li><strong>左花括号（ { ）</strong>开始方法体，<strong>右花括号（ } ）</strong>结束方法体。</li><li>每条语句以<strong>分号</strong>结束。</li><li><strong>if</strong>是决策语句。</li><li>单行注释以<strong>//</strong>开始。</li><li><strong>空行、空格</strong>和<strong>制表符</strong>称为空白符，新行符也是空白符。</li><li><strong>关键字</strong>保留给C#使用。</li><li>C#程序从<strong>Main</strong>方法开始执行。</li><li>方法<strong>Console.WriteLine()</strong>和<strong>Console.Write()</strong>在控制台窗口显示信息。</li></ul><h4 id="3-2-判断题（更正过的）"><a href="#3-2-判断题（更正过的）" class="headerlink" title="3.2 判断题（更正过的）"></a>3.2 判断题（更正过的）</h4><ul><li>注释不在程序执行时导致操作，而是建档程序和改进其可读性。</li><li>C#是大小写相关的，所以number和NuMbEr是不同变量。</li><li>求余运算符（%）也可以在C#中处理非整数算子。</li><li>*、/和%同一优先级，而+和-低一级。</li></ul><h2 id="第4章-类与对象简介"><a href="#第4章-类与对象简介" class="headerlink" title="第4章 类与对象简介"></a>第4章 类与对象简介</h2><p>Main是个特殊方法，在程序执行时自动调用，但大多数方法并不自动调用。</p><p>习惯上，方法名从大写字母开始，后续单词首字母大写。</p><p>get和set方法的使用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GradeBook</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">string</span> courseName;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GradeBook</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    CourseName = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 之后直接使用CourseName获取到其变量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> CourseName</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> courseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">    courseName = <span class="keyword">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*更好的get和set方法：</span></span><br><span class="line"><span class="comment">  *public string CourseName&#123;get; set;&#125;</span></span><br><span class="line"><span class="comment">  *称为：自实现属性</span></span><br><span class="line"><span class="comment">  *直接写出来，声明+实现一起出现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Hello\n&#123;0&#125;"</span>, CourseName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GradeBookTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    GradeBook myGradeBook = <span class="keyword">new</span> GradeBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让Main方法执行程序的关键部分是static关键字，表示这个Main方法是静态方法，调用是不必先创建这个类的对象。</p><p>可以在需要时声明新的类类型，因此C#称为可扩展语言。</p><h3 id="关于using指令"><a href="#关于using指令" class="headerlink" title="关于using指令"></a>关于using指令</h3><p>注意上面的程序，这个指令告诉编译器程序使用System名字空间中的类，如Console类。默认情况下，GradeBook类和GradeBookTest类在相同名字空间，一个类使用同一名字空间的另一个类，不需要using指令。</p><p>没有显式放进一个名字空间的类隐式放进全局名字空口。</p><p>实际上也可以不用using指令，使用类的<strong>完全限定类名</strong>，包括完全名字空间和类名，System.Console.WriteLine();</p><h3 id="GradeBook类带实例变量与属性"><a href="#GradeBook类带实例变量与属性" class="headerlink" title="GradeBook类带实例变量与属性"></a>GradeBook类带实例变量与属性</h3><p>GradeBook类的每个实例包含每个实例变量的一个副本。</p><h3 id="访问修饰符public与private"><a href="#访问修饰符public与private" class="headerlink" title="访问修饰符public与private"></a>访问修饰符public与private</h3><p>用private声明的变量与方法只能在声明这个方法的类中访问。</p><p>用private声明的实例变量称为信息隐藏。在GradeBook类中，属性CourseName操纵实例变量courseName。</p><h3 id="设置与读取专用实例变量、属性"><a href="#设置与读取专用实例变量、属性" class="headerlink" title="设置与读取专用实例变量、属性"></a>设置与读取专用实例变量、属性</h3><p><strong>属性（Property）</strong> 是类（class）、结构（structure）和接口（interface）的命名（named）成员。类或结构中的成员变量或方法称为 <strong>域（Field）</strong>。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用 <strong>访问器（accessors）</strong> 让私有域的值可被读写或操作。</p><p>尽管可以定义get和set方法，但C#<strong>属性</strong>更方便。</p><p>上面程序GradeBook类中的CourseName就是属性。属性声明可以有get访问函数、set访问函数或两者皆有。</p><p>定义属性后，可以在代码中像变量一样使用。可以用赋值运算符对属性赋值，其执行属性set函数代码。</p><h3 id="get和set访问方法"><a href="#get和set访问方法" class="headerlink" title="get和set访问方法"></a>get和set访问方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = gradeBook.CourseName;</span><br></pre></td></tr></table></figure><p>用户不能直接操纵实例变量courseName，因为它是专用的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradeBook.CourseBook = <span class="string">"OS"</span>;</span><br></pre></td></tr></table></figure><p>这时文本“OS”传入隐式参数value，执行set访问方法。注意value在set访问方法中隐式声明和初始化，在set方法体中声明局部变量value会发生编译错误。set方法完成任务后不返回任何数据。</p><p>声明顺序不做要求。</p><p>在公用属性中，get方法可以是公用的，set方法可以是专用的。</p><h3 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h3><p>C#语言的类型分为两类——值类型与引用类型。C#的简单类型都是值类型。值类型的变量（如int）只包含这个类型的值。例如：<code>int count = 7</code>表示：int类型的变量count，只能包含像7这样的整数。</p><p>引用类型的变量（也称为引用）包含存储变量所引用数据的内存地址。这个变量在程序中称为引用一个对象。即引用类型（GradeBook）的变量（gradeBook）包含该类型对象的引用（内存地址）。</p><p>引用类型实例变量默认初始化为null。string是个引用类型实例变量。</p><p>值为null的字符串变量不是空串。空串表示””或string.Empty。null表示引用的不是对象。空串是不含字符的string对象。</p><h3 id="用构造函数初始化对象"><a href="#用构造函数初始化对象" class="headerlink" title="用构造函数初始化对象"></a>用构造函数初始化对象</h3><p>默认情况下，编译器在没有显式提供构造函数的类中提供一个没有变元的默认构造方法，因此任何类都有函数。默认构造方法不修改实例变量的默认值。如果声明类的任何构造函数，则C#不对这个类创建默认构造函数。</p><p>构造函数名必须与类名相同。与方法不同，构造函数不指定返回类型（连void也没有）。</p><h3 id="浮点数与decimal类型"><a href="#浮点数与decimal类型" class="headerlink" title="浮点数与decimal类型"></a>浮点数与decimal类型</h3><p>float、double和decimal可以在内存中存储实数。float和double类型称为浮点类型，它们与decimal的主要区别在于：decimal变量精确存储有限范围的实数，而浮点数只存储实数的近似值，但取值范围大得多。</p><div class="table-container"><table><thead><tr><th>简单类型</th><th></th><th>有效位</th><th></th><th></th></tr></thead><tbody><tr><td>float</td><td>单精度浮点数</td><td>7</td><td></td><td></td></tr><tr><td>double</td><td>双精度浮点数</td><td>15~16</td><td></td><td>精度是float的2倍</td></tr><tr><td>decimal</td><td></td><td>28~29</td><td>7.33M或7.33m</td><td>需要double变量2倍内存</td></tr></tbody></table></div><p>整数直接赋值给上面3种类型，隐式转换成这些类型。</p><p>格式项{0:C}将数据格式化为金额值：$3.3</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/format.PNG" alt=""></p><h3 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="4-1-填空题"><a href="#4-1-填空题" class="headerlink" title="4.1 填空题"></a>4.1 填空题</h4><ul><li>房子的蓝图就像对象的类。</li><li>运算符new创建关键字右边所指定的对象。</li><li>默认情况下，没有显式在名字空间中声明的类隐式放在全局名字空间。</li><li>类的每个对象维护属性复制时，表示属性的字段也称为实例变量。</li><li>Convert方法ToDecimal返回decimal值。</li><li>Console方法ReadLine读取字符，直到遇到新行符，然后用string返回这些字符（不包含新行符）。</li><li>对于自实现属性，编译器自动生成专用实例变量及其get与set方法。</li></ul><h4 id="4-2-判断题"><a href="#4-2-判断题" class="headerlink" title="4.2 判断题"></a>4.2 判断题</h4><ul><li>方法和属性体用左右花括号定界。</li><li>实例变量默认初始化，局部变量不是。</li><li>源代码中的实数值称为浮点数直接输，默认类型为float。</li></ul><h2 id="第5章-控制语句：第一部分"><a href="#第5章-控制语句：第一部分" class="headerlink" title="第5章 控制语句：第一部分"></a>第5章 控制语句：第一部分</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>解决问题的过程（procedure）称为算法（algorithm），包括：</p><ul><li>执行的操作（action）</li><li>执行的操作的顺序（order）</li></ul><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>伪代码是人为的非正式语言，帮助程序员开发算法。</p><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><p>程序中的语句按编写的顺序一条一条地执行，称为顺序执行。</p><p>指定下一个执行的语句不是紧邻其后的语句，这称为控制转移。</p><p>结构化编程更清晰、更易调试与修改并且不容易出错。</p><p>研究表明，所有程序都可以只用三种控制结构，即顺序结构、选择结构和重复结构。</p><p><strong>顺序结构</strong>是C#内置的，除非另外指定，计算机总是按编写的顺序一条一条地执行。</p><p><strong>选择结构</strong>有三种，称为选择语句。</p><p>if语句称为单选择语句，if…else语句称为双选择语句，switch语句称为多选择语句。</p><p>C#提供四种重复结构，称为重复语句（也称为迭代语句或循环），重复语句有while、do…while、for与foreach。</p><p><strong>控制语句小结</strong>：C#只有三种控制语句，分别是顺序结构、选择结构（三种）和重复语句（四种）。</p><p>C#提供条件运算符（? :），可以代替if…else语句。是C#中唯一的三元运算符（ternary operator），操作数和条件运算符一起形成条件表达式（conditional expression）。</p><p><strong>垂悬else问题</strong>：C#编译器总是将else与最接近的if相关联，除非用花括号指定。（就近原则）</p><p>放在花括号中的一组语句称为<strong>块</strong>。</p><p><strong>简单类型间的显式和隐式转换</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> average;</span><br><span class="line"><span class="keyword">int</span> total,gradeCounter;</span><br><span class="line">average = (<span class="keyword">double</span>)total / gradeCounter;</span><br></pre></td></tr></table></figure><p>这里使用double类型转换符称为显式转换，这是的计算式浮点数除以整数，要保证操作数的数据类型一致，C#将int操作数提升为double（提升操作，也称为隐式转换）。</p><p><strong>C#支持复合赋值运算符</strong></p><p>分别为：+=，-=，*=，/=和%=</p><p><strong>也支持自增自减</strong>，前置和后置</p><p>C#也是强类型语言，即要求所有变量都具有类型。</p><h3 id="课后习题-4"><a href="#课后习题-4" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="5-1-填空题"><a href="#5-1-填空题" class="headerlink" title="5.1 填空题"></a>5.1 填空题</h4><ul><li>将一组指令重复特定次数称为<strong>计数器控制或确定</strong>重复。</li><li>事先不知道一组指令的重复次数，可以用标记（记号，标志或哑元）值终止重复。</li></ul><h4 id="5-2-判断题"><a href="#5-2-判断题" class="headerlink" title="5.2 判断题"></a>5.2 判断题</h4><ul><li>指定计算机程序执行语句的顺序称为程序控制。</li></ul><h2 id="第6章-控制语句：第二部分"><a href="#第6章-控制语句：第二部分" class="headerlink" title="第6章 控制语句：第二部分"></a>第6章 控制语句：第二部分</h2><p><strong>for循环语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> counter = <span class="number">1</span>; counter &lt;= <span class="number">10</span>; counter++, total += counter )</span><br><span class="line">&#123;</span><br><span class="line">  statement/empty statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch多选择语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(grade / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    ++aCount;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    ++bCount;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break语句</p><p>continue语句在循环结构中执行时跳过该结构体的其余语句，进入下一轮循环。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>有&amp;&amp;（条件与）、||（条件或）、&amp;（布尔逻辑与）、|（布尔逻辑或）、^（布尔逻辑异或）和!（逻辑非）。</p><p>只有逻辑非是一元运算符。</p><p>短路求值：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gender == <span class="string">'F'</span>) &amp;&amp; (++age &gt;= <span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>将在gender不等于“F”时立即停止（整个表达式为假）。</p><p>布尔逻辑（&amp;和|）不进行短路求值，所以如果用布尔表达式++age&gt;=会执行，age值会发生改变。</p><h3 id="课后习题-5"><a href="#课后习题-5" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="6-1-填空题"><a href="#6-1-填空题" class="headerlink" title="6.1 填空题"></a>6.1 填空题</h4><ul><li>通常，for语句用于计数器控制循环，while语句用于标记控制循环。</li></ul><h4 id="6-2-判断题"><a href="#6-2-判断题" class="headerlink" title="6.2 判断题"></a>6.2 判断题</h4><ul><li>switch选择结构的每个case中可以使用break语句退出当前case结构，也可以使用return语句。</li></ul><h2 id="第7章-方法详述"><a href="#第7章-方法详述" class="headerlink" title="第7章 方法详述"></a>第7章 方法详述</h2><p>分治法（divide and conquer）：经验表明，要开发和维护大程序，最好的办法是从更容易管理的小块和小组件开始。</p><h3 id="C-代码包装"><a href="#C-代码包装" class="headerlink" title="C#代码包装"></a>C#代码包装</h3><p>代码包装的三种常见途径是方法、类和名字空间。</p><p>方法（函数、过程）可以将程序模块化，用户定义方法。分治，复用。</p><h3 id="静态方法，静态变量和Math类"><a href="#静态方法，静态变量和Math类" class="headerlink" title="静态方法，静态变量和Math类"></a>静态方法，静态变量和Math类</h3><p>所有Math方法都是静态的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine( Math.Sqrt( a + b * c ) )</span><br></pre></td></tr></table></figure><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/Math.PNG" alt="Math"></p><p><strong>静态常量</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.PI</span><br><span class="line">Math.E</span><br></pre></td></tr></table></figure><p>这些变量在Math类中声明，修饰符为public与const。任何用关键字const声明的变量都是常量，声明之后不能改变数值。</p><p>前面提到，属性的变量也称为实例变量，类的每个对象在内存中有这个变量的不同实例。但静态变量，类的每个对象在内存中没有这个变量的不同实例。类的对象包含静态变量时，这个类的所有对象共享静态变量的同一备份。</p><p><strong>为什么Main方法声明为static？</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span> args[]</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main方法声明为static是执行环境可以调用Main方法而不必创建类的实例。</p><p>string args[]可以省略，public也可以省略，void也可替换为int</p><p><strong>用字符串接合组装字符串</strong></p><p>C#中生成string对象时可以用运算符+（或复合赋值运算符+=）将小字符串组装成大字符串。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> result = <span class="number">9.35000</span>;</span><br><span class="line">Console.WriteLine(<span class="string">"Maximum is: "</span> + result);</span><br></pre></td></tr></table></figure><p>控制台输出为：Maximum is: 9.35</p><p>布尔值也会隐式转换成string。</p><h3 id="关于方法的声明与使用"><a href="#关于方法的声明与使用" class="headerlink" title="关于方法的声明与使用"></a>关于方法的声明与使用</h3><p>可以用三种方式调用方法。</p><h3 id="方法调用堆栈云激活记录"><a href="#方法调用堆栈云激活记录" class="headerlink" title="方法调用堆栈云激活记录"></a>方法调用堆栈云激活记录</h3><p>堆栈是后进先出（LIFO）数据结构。</p><p>程序调用方法是，被调的方法要知道如何放回调用者，因此把调用者的返回地址压入程序执行堆栈（也称方法调用堆栈）。</p><p>程序执行堆栈还包含程序执行期间每个方法调用使用的局部变量。这个数据存放成程序执行堆栈的一部分，称为方法调用的激活记录( activation record)或堆栈帧( stack frame)。进行方法调用时，这个方法调用的激活记录压进程序执行堆栈。方法返回调用者时，这个方法调用的激活记录出栈，程序不再知道这些局部变量。如果局部变量保存对象引用，是具有该对象引用的程序中唯一变量，则包含这个局部变量的激活记录出栈时，程序不能再访问这个对象，最终会在“内存回收”时从内存中删除。<br>当然，计算机的内存量有限,因此只能用一定量的内存存储程序执行堆栈中的激活记录。如果发生的方法调用太多，程序执行堆栈无法存储其激活记录,则会发生堆栈溢出错误。</p><h3 id="变元提升与类型转换"><a href="#变元提升与类型转换" class="headerlink" title="变元提升与类型转换"></a>变元提升与类型转换</h3><p>方法调用的另一个重要特性是变元提升——隐式地将变元值变成方法参数所需要的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine( Math.Sqrt( <span class="number">4</span> ) );</span><br></pre></td></tr></table></figure><p>虽然Sqrt方法要求double变元，但也可以使用整型值，打印数值2.0。方法声明的参数表使C#将int值4转换成double值4.0，然后传入Sqrt方法。</p><p>隐式转换要求满足升级规则，否则必须显式转换。</p><p>所有简单类型都可以隐式转换为object类型。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/Implicit.PNG" alt="Implicit"></p><h3 id="NET框架类库"><a href="#NET框架类库" class="headerlink" title=".NET框架类库"></a>.NET框架类库</h3><p>许多预定义类组成相关类的名字空间。名字空间组成.NET框架类库（即FCL）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br></pre></td></tr></table></figure><p>程序可以使用System名字空间的类名，不必用完全限定名。</p><p>C#的一个强大之处是FCL的名字空间中有许多类。</p><p align="center">  <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/FCL_namespace.PNG">  <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/FCL_namespace_next.PNG" alt="FCL"></p><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><p>可以用随机数生成器<strong>对象</strong>产生随机byte、int与double值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Random randomNumbers = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">// Next方法产生值：0&lt;=randomValue&lt;=+2147483646</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next();</span><br><span class="line"><span class="comment">// 返回0、1、2、3、4、5。变元6称为比例因子，表示Next要产生的数值的个数</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next( <span class="number">6</span> );</span><br><span class="line"><span class="comment">// 返回1、2、3、4、5、6</span></span><br><span class="line"><span class="keyword">int</span> randomValue = <span class="number">1</span> + randomNumber.Next( <span class="number">6</span> );</span><br><span class="line"><span class="comment">// 返回1、2、3、4、5、6</span></span><br><span class="line"><span class="keyword">int</span> randomValue = randomNumber.Next( <span class="number">1</span>, <span class="number">7</span> );</span><br></pre></td></tr></table></figure><p>Next返回的值实际上是伪随机数——通过复杂数学计算产生的数值序列。用当前时间作为种子。</p><h3 id="比例缩放与移动随机数"><a href="#比例缩放与移动随机数" class="headerlink" title="比例缩放与移动随机数"></a>比例缩放与移动随机数</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回<span class="number">2</span>、<span class="number">5</span>、<span class="number">8</span>、<span class="number">11</span>、<span class="number">14</span></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">2</span> + <span class="number">3</span> * randomNumber.Next( <span class="number">5</span> )</span><br></pre></td></tr></table></figure><h3 id="随机数可重复性与测试-调试"><a href="#随机数可重复性与测试-调试" class="headerlink" title="随机数可重复性与测试/调试"></a>随机数可重复性与测试/调试</h3><p>要保证运行和调试是随机数一致</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random randomNumbers = <span class="keyword">new</span> Random( seedValue );</span><br></pre></td></tr></table></figure><p>seedValue变元（int类型）提供随机数计算的种子。如果每次使用相同的seedValue，则Random对象产生相同的随机数列。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Status &#123; CONTINUE, WON, LOST &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> DiceNames</span><br><span class="line">&#123;</span><br><span class="line">  SNAKE_EYES = <span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line">  TREY = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明作用域"><a href="#声明作用域" class="headerlink" title="声明作用域"></a>声明作用域</h3><ul><li><p>参数声明的作用域是声明所在的方法体。</p></li><li><p>局部变量声明的作用域从声明点开始，到声明所在块结束为此。</p></li><li><p>for语句首部初始化部分出现的局部变量声明的作用域是for语句体和首部的其他表达式。</p></li><li><p>类的方法、属性、字段的作用域是整个类体。这就使类的非静态方法与属性可以使用类的任何方法、属性、字段，不管声明顺序如何。同样，<strong>静态属性与方法可以使用类的任何静态成员</strong>。</p></li></ul><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>一个类中可以声明同名方法，只要其参数集不同（参数个数、类型和顺序），称为方法重载。</p><p><strong>区别重载方法</strong></p><p>编译器根据签名区别重载方法，签名是方法名和参数个数、类型与顺序地组合。</p><p><strong>重载方法的返回类型</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Square</span>(<span class="params"> <span class="keyword">int</span> x </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Square</span>(<span class="params"> <span class="keyword">int</span> y </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y * y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面2个方法<strong>签名相同</strong>，返回值类型不同，会产生编译错误。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">Factorial</span>(<span class="params"> <span class="keyword">long</span> number </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// base case</span></span><br><span class="line">  <span class="keyword">if</span>(number &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> number * Factorial( number <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值与按引用传递变元"><a href="#按值与按引用传递变元" class="headerlink" title="按值与按引用传递变元"></a>按值与按引用传递变元</h3><p>参数声明中使用关键字ref可以按引用将变量传递给方法——被调方法可以修改调用者的原变量。ref关键字用于调用方法中已经初始化的变量。</p><p>在参数前面加上关键字out可以建立输出参数，告诉编译器这个变元按引用传入被调方法，被调方法对调用者的原变量赋值。如果方法中没有在每个执行路径上对输出参数赋值，则编译器报错。</p><p>一个方法只能通过return语句向调用者返回一个值，但指定多个输出参数（ref或out）可以返回多个值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReferenceAndOutParameters</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">5</span>; <span class="comment">// initialize y to 5</span></span><br><span class="line">  <span class="keyword">int</span> z; <span class="comment">// declare z, but does not initilize it</span></span><br><span class="line">  </span><br><span class="line">  SquareRef(<span class="keyword">ref</span> y);</span><br><span class="line">  SquareOut(<span class="keyword">out</span> z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SquareRef</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x = x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SquareOut</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="课后习题-6"><a href="#课后习题-6" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="7-1-填空题"><a href="#7-1-填空题" class="headerlink" title="7.1 填空题"></a>7.1 填空题</h4><ul><li>数据只能从堆栈<strong>顶</strong>增加和取出。</li><li>将控制从被调方法返回调用者的三种方法是：<strong>return</strong>，<strong>return expression</strong>或<strong>方法右花括号处</strong></li><li>程序执行堆栈包含程序执行期间每次调用方法时局部变量的内存。这个数据存放在程序执行堆栈中，称为方法调用的<strong>活动记录</strong>或<strong>堆栈顶</strong>。</li></ul><h2 id="第8章-数组"><a href="#第8章-数组" class="headerlink" title="第8章 数组"></a>第8章 数组</h2><p>前面说过，类型可以分为两类——值类型和引用类型。数组是引用类型。</p><p>我们通常意义上的数组实际上是内存中数组实例的引用。</p><p>数组的元素可以是值类型或引用类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span>;</span><br><span class="line">b=<span class="number">6</span>;</span><br><span class="line"><span class="comment">// 索引应为非负整数或整型表达式</span></span><br><span class="line">c[a + b] +=<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 将元素c[11]加2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组的Length属性确定数组长度</span></span><br><span class="line"><span class="comment">// 注意数组的Length属性不能改变，因为它没有set方法</span></span><br><span class="line">c.Length</span><br></pre></td></tr></table></figure><p>数组索引值应为int、uint、long、ulong类型或可以隐式升级为这些类型的值。</p><p><strong>声明与创建数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>[] array2;</span><br><span class="line">array2 = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">12</span>];</span><br><span class="line"><span class="comment">// 每个元素接收默认值, 数组简单类型元素为0, 布尔元素为false, 引用为null</span></span><br></pre></td></tr></table></figure><p><strong>改变数组长度</strong></p><p>虽然数组是定长实体，但可以用静态Array方法Resize改变数组长度。这个方法创建指定长度的新数组，将原数组内容复制到新数组，并<strong>将收到的变量设置为引用新数组的第一个</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">Array.Resize( <span class="keyword">ref</span> array3, <span class="number">10</span> );</span><br></pre></td></tr></table></figure><p>如果新数组比旧数组小，则后面的内容被截尾。</p><p><strong>使用数组初始化器</strong></p><p>逗号分隔的表达式清单（称为初始化清单），放在花括号中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array4 = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br></pre></td></tr></table></figure><p>编译器遇到包括初始化清单的数组声明时，首先计算清单中的初始化器个数，确定数组长度，然后在“幕后”建立相应的new操作。</p><p>声明常量全部用大写字母。</p><p><strong>用数组元素作为计数器</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RollDie</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"> <span class="keyword">string</span>[] args </span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Random randomNumbers = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">int</span>[] frequency = <span class="keyword">new</span> <span class="keyword">int</span>[ <span class="number">7</span> ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> roll = <span class="number">1</span>; roll &lt;= <span class="number">6000</span>; roll++)</span><br><span class="line">      ++frequency[ randomNumber.Next(<span class="number">1</span>, <span class="number">7</span>) ];</span><br><span class="line">    </span><br><span class="line">    Console.writeLine(<span class="string">"&#123;0&#125;&#123;1, 10&#125;"</span>, <span class="string">"Face"</span>, <span class="string">"Frequency"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> face = <span class="number">1</span>; face &lt; frequency.Length; face++)</span><br><span class="line">      Console.writeLine(<span class="string">"&#123;0, 4&#125;&#123;1, 10&#125;"</span>, face, frequency[face]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Face Frequency</span><br><span class="line">   1       956</span><br><span class="line">   2       981</span><br><span class="line">   3      1001</span><br><span class="line">   4      1030</span><br><span class="line">   5      1035</span><br><span class="line">   6       997</span><br></pre></td></tr></table></figure><p><strong>foreach语句</strong></p><p>foreach语句只能访问数组元素，不能修改元素。否则编译错误。</p><p><strong>隐式类型局部变量</strong></p><p>C#提供了隐式类型局部变量特性，是编译器可以根据变量初始化值类型推出局部变量的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">7</span>; <span class="comment">// 编译器推出变量x类型为int，因为编译器认为7之类的整数是int类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">-123.45</span>; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">var</span> array5 = <span class="keyword">new</span>[] (<span class="number">32</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">18</span>, <span class="number">95</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure><p><strong>将数组与数组元素传入方法</strong></p><p>指定不带方括号的数组名。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyArray</span>(<span class="params"><span class="keyword">double</span>[] a</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法调用语句</span></span><br><span class="line"><span class="keyword">double</span>[] array6 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">24</span>];</span><br><span class="line">ModifyArray( array6 );</span><br><span class="line"><span class="comment">// 接收double数组的引用, a与array6是相同对象</span></span><br></pre></td></tr></table></figure><p><strong>按值与按引用传递数组</strong></p><p>C#中“存储”数组之类对象的变量并不实际存储对象本身，而是存储对象的引用（即存储对象的计算机内存地址）。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>二维的多维数组也称为数值表，把信息放在行和列中。</p><p>c#支持两种二维数组——矩形数组和齿状数组。</p><p><strong>矩形数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[ , ] array7 = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>编译器在每行的初始化器个数不同时产生一个错误，因为矩形数组的每一行要长度相同。</p><p><strong>齿状数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jagged = &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数组jagged本身是三个元素的数组，各引用一个int值的一维数组。</p><p>注意矩形数组与齿状数组的数组生成表达式差别。jagged数组后面是两组方括号，表示这是个int数组的数组。在数组初始化器中，C#要求用new关键字创建每一行的数组对象。</p><p><strong>用数组生成表达式创建二维数组</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[,] array8;</span><br><span class="line">array8 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 3行4列</span></span><br><span class="line"><span class="comment">// 齿状数组不能如此</span></span><br><span class="line"><span class="keyword">int</span>[][] array9 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>]; <span class="comment">// error</span></span><br><span class="line"><span class="comment">// 而是</span></span><br><span class="line"><span class="keyword">int</span>[][] a;</span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][]; <span class="comment">// 2行</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><strong>游长变元表（Variable-length argument lists）</strong></p><p>可以创建接收任意个变元的方法。</p><p>一维数组型变元前面加上关键字params在方法参数表中，表示这个方法接收任意个变元，类型为数组<strong>元素</strong>类型。params修饰符的这个用法只能在参数表最后一个项目中出现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Average</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">double</span>[] numbers</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> total = <span class="number">0.0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">double</span> d <span class="keyword">in</span> numbers)</span><br><span class="line">    total += d;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> total / numbers.Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> d1 = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">double</span> d2 = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">double</span> d3 = <span class="number">10.0</span>;</span><br><span class="line">  </span><br><span class="line">  Console.WriteLine( Average(d1, d2) ); <span class="comment">// 15.0</span></span><br><span class="line">  Console.WriteLine( Average(d1, d2, d3) ); <span class="comment">// 20.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用命令行变元</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArgTest</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span>(args.Length == <span class="number">0</span>)</span><br><span class="line">      Console.WriteLine(<span class="string">"The number of arg is 0!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">var</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        Console.WriteLine(arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ArgTest.exe 1 2 3</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="课后习题-7"><a href="#课后习题-7" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="8-1-填空题"><a href="#8-1-填空题" class="headerlink" title="8.1 填空题"></a>8.1 填空题</h4><ul><li>清单与数值表可以存放在<strong>数组</strong>中。</li><li>命令行变元存放在<strong>strings数组，通常称args</strong>中。</li></ul><h2 id="第9章-LINQ与泛型集合简介"><a href="#第9章-LINQ与泛型集合简介" class="headerlink" title="第9章 LINQ与泛型集合简介"></a>第9章 LINQ与泛型集合简介</h2><p>一组预包装数据结构——.NET框架集合类。</p><p>LINQ（language Integrated Query，语言集成查询表达式）。利用LINQ可以编写与SQL查询相识的查询表达式，从各种数据源，不限于数据库，还有数组和list驱动信息，选择符合一组条件的元素，称为筛选。</p><p>声明式编程：LINQ指定的不是读取结果所要的<strong>步骤</strong>，而是所选元素要满足的<strong>条件</strong>。</p><p>指定式编程：指定执行任务所有的步骤，面向对象是指示式编程的子集。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">LINQWithArray</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] values = &#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> filtered = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">where</span> <span class="keyword">value</span> &gt; <span class="number">4</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>;</span><br><span class="line">    </span><br><span class="line">    Display(filtered); <span class="comment">// 9 5 7 8 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sorted = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">orderby</span> <span class="keyword">value</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>;</span><br><span class="line">    </span><br><span class="line">    Display(sorted); <span class="comment">// 0 1 2 3 4 5 7 8 9</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sortedAndfiltered = </span><br><span class="line">      <span class="keyword">from</span> <span class="keyword">value</span> <span class="keyword">in</span> values</span><br><span class="line">      <span class="keyword">where</span> <span class="keyword">value</span> &gt; <span class="number">4</span></span><br><span class="line">      <span class="keyword">orderby</span> <span class="keyword">value</span></span><br><span class="line">      <span class="comment">// orderby value desending 都是降序</span></span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">value</span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    Display(sortedAndfiltered); <span class="comment">// 9 8 7 5 5</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// IEnumerable&lt;int&gt;是个接口，描述的对象可迭代</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; results</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> element <span class="keyword">in</span> results)</span><br><span class="line">      Console.WriteLine(<span class="string">" &#123;0&#125;"</span>, element);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用泛型方法显示LINQ查询结果</strong></p><p>泛型方法，指定一个类型参数表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Display&lt;T&gt;(IEnumerable&lt;T&gt; results)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">foreach</span>(T element <span class="keyword">in</span> results)</span><br><span class="line">    Console.WriteLine(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Employee[] employees;</span><br><span class="line"><span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">Display(employees);</span><br><span class="line">Display(array);</span><br></pre></td></tr></table></figure><p>T是类型变元的占位符。调用泛型方法时，编译器根据调用中的变元指定每个类型表示的类型。</p><p>T可以在参数表和方法体中多次出现，也可以作为返回值。</p><h3 id="集合简介"><a href="#集合简介" class="headerlink" title="集合简介"></a>集合简介</h3><p>.NET框架类库提供了几个类（称为集合），可以存储相关对象集合。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/List.PNG" alt="List"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collection.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListCollection</span></span><br><span class="line">&#123;</span><br><span class="line">  List&lt;<span class="keyword">string</span>&gt; items = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"red"</span>);</span><br><span class="line">  items.Insert(<span class="number">0</span>, <span class="string">"yellow"</span>); <span class="comment">// yellow, red</span></span><br><span class="line">  items.Add(<span class="string">"yellow"</span>); <span class="comment">// yellow, red, yellow</span></span><br><span class="line">  items.Remove(<span class="string">"yellow"</span>); <span class="comment">// red, yellow</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用LINQ查询泛型集合"><a href="#用LINQ查询泛型集合" class="headerlink" title="用LINQ查询泛型集合"></a>用LINQ查询泛型集合</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Collection.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LINQListCollection</span></span><br><span class="line">&#123;</span><br><span class="line">  List&lt;<span class="keyword">string</span>&gt; items = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"aQua"</span>);</span><br><span class="line">  items.Add(<span class="string">"RusT"</span>);</span><br><span class="line">  items.Add(<span class="string">"yElLow"</span>);</span><br><span class="line">  items.Add(<span class="string">"rEd"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// List&lt;string&gt; items = new List&lt;string&gt;&#123;"aQua", "RusT", "yElLow", "rEd"&#125;;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> startWithR = </span><br><span class="line">    <span class="keyword">from</span> item <span class="keyword">in</span> items</span><br><span class="line">    <span class="keyword">let</span> uppercasedString = item.ToUpper()</span><br><span class="line">    <span class="keyword">where</span> uppercasedString.StartsWith(<span class="string">"R"</span>)</span><br><span class="line">    <span class="keyword">orderby</span> uppercasedString</span><br><span class="line">    <span class="keyword">select</span> uppercasedString;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> startWithR)</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125; "</span>, item); <span class="comment">// RED RUST</span></span><br><span class="line">  </span><br><span class="line">  items.Add(<span class="string">"rUby"</span>);</span><br><span class="line">  items.Add(<span class="string">"SaFfRon"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> startWithR)</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125; "</span>, item); <span class="comment">// RED RUBY RUST </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>查询只创建一次，但对结果迭代得到两个不同的列表。这里演示了LINQ的延迟执行——查询<strong>只在访问结果时才执行</strong>，而不是在定义查询时执行。一次创建，多次执行，数据改变，返回结果。</p></blockquote><h3 id="课后习题-8"><a href="#课后习题-8" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="9-1-填空题"><a href="#9-1-填空题" class="headerlink" title="9.1 填空题"></a>9.1 填空题</h4><ul><li>集合类专门用于存储对象组和提供组织、存储与读取对象的方法。</li></ul><h2 id="第10章-再论类与对象"><a href="#第10章-再论类与对象" class="headerlink" title="第10章 再论类与对象"></a>第10章 再论类与对象</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>.Format(<span class="string">"&#123;0:D2&#125;:&#123;1:D2&#125;:&#123;2:D2&#125;"</span>, hour, minute, second);</span><br></pre></td></tr></table></figure><p>Format()返回格式化字符串，而不是在控制台显示。</p><h3 id="用this引用访问当前对象成员"><a href="#用this引用访问当前对象成员" class="headerlink" title="用this引用访问当前对象成员"></a>用this引用访问当前对象成员</h3><p>每个对象都可以用关键字this引用自己。调用特点对象的非静态方法时，方法体隐式用关键字this引用这个对象的实例变量和其他成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleTime</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hour;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleTime</span>(<span class="params"><span class="keyword">int</span> hour</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">this</span>.hour = hour;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">BuildString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">this</span>.ToString();</span><br><span class="line">    ToString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    reutrn <span class="keyword">string</span>.Format(<span class="string">"0:D2"</span>, <span class="keyword">this</span>.hour);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h3><p>类可以用关键字this定义属性式的类成员，称为索引器，可以像数组一样用索引访问元素清单。索引器的好处是可以定义整数索引和非整数索引。</p><p>索引器在类中像属性一样定义，用关键字this定义，不能用static修饰。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">string</span>[] names = &#123;<span class="string">"length"</span>, <span class="string">"width"</span>, <span class="string">"height"</span>&#125;;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span>[] dimensions = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">3</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Box</span>(<span class="params"><span class="keyword">double</span> length, <span class="keyword">double</span> width, <span class="keyword">double</span> heght</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    dimensions[<span class="number">0</span>] = length;</span><br><span class="line">    dimensions[<span class="number">1</span>] = width;</span><br><span class="line">    dimensions[<span class="number">2</span>] = height;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> <span class="keyword">this</span>[<span class="keyword">int</span> index]</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( (index&lt;<span class="number">0</span>) || (index&gt;=dimensions.Length) )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> dimensions[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( (index&gt;=<span class="number">0</span>) || (index&lt;dimensions.Length) )</span><br><span class="line">        dimensions[index] = vlaue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> <span class="keyword">this</span>[<span class="keyword">string</span> name]</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i]))</span><br><span class="line">        ++i;</span><br><span class="line">      <span class="keyword">return</span> (i == naems.Length) ? <span class="number">-1</span> : dimensions[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>((i&lt;names.Length) &amp;&amp; (name.ToLower()!=names[i]))</span><br><span class="line">        ++i;</span><br><span class="line">      <span class="keyword">if</span>(i != names.Length)</span><br><span class="line">        dimensions[i] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BoxTest.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoxTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Box box = <span class="keyword">new</span> Box(<span class="number">30</span>, <span class="number">30</span> ,<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// box[0] 30</span></span><br><span class="line">    <span class="comment">// box[1] 30</span></span><br><span class="line">    <span class="comment">// box[2] 30</span></span><br><span class="line">    box[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">    box[<span class="string">"width"</span>]=<span class="number">20</span>;</span><br><span class="line">    <span class="comment">// box[0] 10</span></span><br><span class="line">    <span class="comment">// box[1] 20</span></span><br><span class="line">    <span class="comment">// box[2] 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引器可以重载。</p><h3 id="重载构造函数"><a href="#重载构造函数" class="headerlink" title="重载构造函数"></a>重载构造函数</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Time</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hour;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> minute;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"></span>) : <span class="title">this</span>(<span class="params"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"><span class="keyword">int</span> h</span>) : <span class="title">this</span>(<span class="params">h, <span class="number">0</span>, <span class="number">0</span></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"><span class="keyword">int</span> h, <span class="keyword">int</span> m</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    SetTime(h ,m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params">Time time</span>) : <span class="title">this</span>(<span class="params">time.Hour, time.Minute</span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SetTime</span>(<span class="params"><span class="keyword">int</span> h, <span class="keyword">int</span> m</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Hour = h;</span><br><span class="line">    Minute = m;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> Hour</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个类外不能使用set方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">      hour = ((<span class="keyword">value</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="keyword">value</span>&lt;<span class="number">24</span>) ? <span class="keyword">value</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> Minute</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的this引用用法称为构造函数初始化器，易维护。</p><h3 id="默认与无参数构造函数"><a href="#默认与无参数构造函数" class="headerlink" title="默认与无参数构造函数"></a>默认与无参数构造函数</h3><p>注意上面Time无参构造函数，显式初始化Time对象，为每个参数传递三个参数0。如果省略无参构造函数，则无法用表达式<code>new Time()</code>创建对象，会发生编译错误。</p><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>类可以引用其他类的对象，作为成员。这个功能称为合成，也称为“有”（has-a）关系。</p><p>Employee类中引用其他对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> Date birthDate;</span><br><span class="line">  <span class="keyword">private</span> Date hireDate;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存回收与析构函数"><a href="#内存回收与析构函数" class="headerlink" title="内存回收与析构函数"></a>内存回收与析构函数</h3><p>Garbage Collection and Destructors</p><p>如果管理资源的对象失去所有引用，而还没有显式释放资源，则程序不能再访问和释放这个资源。这就产生了资源泄露。</p><p>公共语言运行环境（CLR）进行自动内存管理，用内存回收单元（Garbage Collection）释放对象不再需要的内存，其他对象可以使用这个内存。</p><p>对象失去所有引用时，成为可析构对象。每个对象有个特殊成员，称为析构函数。</p><p>析构函数由内存回收单元调用，在内存回收单元释放对象内存之前用于进行对象的终止整理工作。</p><h3 id="静态类成员"><a href="#静态类成员" class="headerlink" title="静态类成员"></a>静态类成员</h3><p>static Class Members</p><p>某些情况下，类的所有对象要共享某个变量的一个副本。这时就要使用静态变量。静态变量表示类信息，类的所有对象共享同一数据。静态变量的作用域是类体。</p><ul><li>类的公用静态成员访问方法：<strong>类名</strong>和点号运算符<code>Math.PI</code>；</li><li>类的专用静态成员只能通过类的方法和属性访问。</li></ul><p>如果没有Employee类的对象，则成员count任然可以引用，弹药通过静态属性Count，如<code>Employee.Count</code>C#的字符串对象创建后不能修改。</p><p>声明为静态的方法不能直接访问非静态类成员，因为即使类对象不存在，也可以调用静态方法。静态方法也不能使用this引用，this引用要引用特定类对象。</p><h3 id="只读实例变量"><a href="#只读实例变量" class="headerlink" title="只读实例变量"></a>只读实例变量</h3><p>readonly Instance Variables</p><p>C#提供了readonly关键字，可以指定对象的实例变量不能修改，想修改会发生错误。</p><p>构造函数可以多次对readonly实例变量赋值。</p><p>声明为const的成员要在编译时赋值，常量成员的值不能在编译时确定要用readonly关键字声明。如果构造函数不初始化readonly声明的成员，则编译器产生一个警告。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Increment</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> INCREMENT;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Increment</span>(<span class="params"><span class="keyword">int</span> incrementValue</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    INCREMENT = incrementValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="软件复用性"><a href="#软件复用性" class="headerlink" title="软件复用性"></a>软件复用性</h3><p>Software Reusability</p><p>类库，快速程序开发（RAD），FCL，CLR</p><h3 id="数据抽象与封装"><a href="#数据抽象与封装" class="headerlink" title="数据抽象与封装"></a>数据抽象与封装</h3><p>Data Abstraction and Encapsulation</p><p>信息隐藏：类通常对类的客户隐藏其实现细节。</p><p>数据抽象：描述类的功能而不管其实现细节。</p><p>int、double与char类的类型，还有队列都是抽象数据类型（ADT）。抽象数据类型（ADT）实际上包含两个概念，即数据表达和该数据允许的操作。</p><h3 id="internal-Access"><a href="#internal-Access" class="headerlink" title="internal Access"></a>internal Access</h3><p>目前为止我们所定义的类，只能用两个访问修饰符声明：public与internal。顶级类。C#支持嵌套类——定义在其他类中的类。除了public与internal，类还可以声明为private或protected。如果类声明没有访问修饰符，默认internal访问。声明为internal的方法。实例变量和其他成员可以让同一汇编中的所有代码访问，而其他汇编中的代码则不行。同一汇编中，internal相当于public。</p><h3 id="Class-View-and-Object-Browser"><a href="#Class-View-and-Object-Browser" class="headerlink" title="Class View and Object Browser"></a>Class View and Object Browser</h3><p>使用Class View窗口</p><p>使用Object Browser</p><h3 id="对象初始化器"><a href="#对象初始化器" class="headerlink" title="对象初始化器"></a>对象初始化器</h3><p>Object Initializers</p><p>创建对象并在同一语句中将其属性初始化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ObjectInitialzerTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Time aTime = <span class="keyword">new</span> Time&#123;Hour=<span class="number">14</span>, Minutre=<span class="number">145</span>, Second=<span class="number">12</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    Time anotherTime = <span class="keyword">new</span> Time&#123;Minute=<span class="number">45</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理delegate"><a href="#代理delegate" class="headerlink" title="代理delegate"></a>代理delegate</h3><p>代理对象保存一个方法的引用。代理可以把方法看成数据，通过代理可以将方法赋值给一个变量，将这个方法与其他方法相互传递。</p><p>代理类型只是描述一组具有特定参数和特定返回类型的方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Delegates</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 委托一个接收int并返回布尔值的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ,<span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建NumberPredicate委托类型的实例</span></span><br><span class="line">    NumberPredicate evenPredicate = IsEven;</span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; evenNumbers = FilterArray(numbers, evenPredicate);</span><br><span class="line">    <span class="comment">// evenNumber: 2 4 6 8 10</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; oddNumbers = FilterArray(numbers, IsOdd);</span><br><span class="line">    <span class="comment">// oddNumber: 1 3 5 7 9</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> list&lt;<span class="keyword">int</span>&gt; <span class="title">FilterArray</span>(<span class="params"><span class="keyword">int</span>[] intArray, NumberPredicate predicate</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      List&lt;<span class="keyword">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">int</span> item <span class="keyword">in</span> inArray)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate(item))</span><br><span class="line">          result.Add(item);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsEven</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">return</span> (number%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsOdd</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">return</span> (number%<span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>由于IsEven方法的签名与NumberPredicate代理的签名匹配</strong>，因此可以用NumberPredicate类型的变量引用IsEven方法。</p><h3 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h3><p>lambda表达式首先是个参数表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Lambda</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ,<span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    NumberPredicate evenPredicate = number =&gt; (number%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    evenPredicate(<span class="number">4</span>); <span class="comment">// True</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; evenNumbers = FilterArray(numbers, evenPredicate);</span><br><span class="line">    <span class="comment">// evenNumber: 2 4 6 8 10</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; oddNumbers = FilterArray(numbers, (<span class="keyword">int</span> number) =&gt; (number%<span class="number">2</span> == <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// evenNumber: 1 3 5 7 9</span></span><br><span class="line">    </span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; numberOver5 = FilterArray(numbers, number =&gt; &#123;<span class="keyword">return</span> number&gt;<span class="number">5</span>; &#125; );</span><br><span class="line">    <span class="comment">// 6 7 8 9 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> list&lt;<span class="keyword">int</span>&gt; <span class="title">FilterArray</span>(<span class="params"><span class="keyword">int</span>[] intArray, NumberPredicate predicate</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      List&lt;<span class="keyword">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="keyword">int</span> item <span class="keyword">in</span> inArray)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate(item))</span><br><span class="line">          result.Add(item);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数表后面是lambda运算符（=&gt;，读作go to）和一个表示函数体的表达式。</p><p>没有指定返回类型，返回类型可以从返回值或代理的返回值推定。</p><p>同样，lambda表达式定义的方法要与代理类型定义的方法有相同签名。</p><h3 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h3><p>Anonymous Types可以创建简单类，用于存储数据，不必编写类定义。</p><p>匿名类型的属性都是公用和不可变的。匿名类型是只读的，创建对象之后不能修改属性值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Lambda</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">bool</span> <span class="title">NumberPredicate</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> bob1 = <span class="keyword">new</span> &#123;Name = <span class="string">"Bob Smith"</span>, Age = <span class="number">37</span>&#125;;</span><br><span class="line">    bob.ToString(); <span class="comment">// &#123;Name = Bob Smith, Age = 37&#125;</span></span><br><span class="line">    <span class="keyword">var</span> bob2 = <span class="keyword">new</span> &#123;Name = <span class="string">"Bob Smith"</span>, Age = <span class="number">37</span>&#125;;</span><br><span class="line">    bob1.Equals(bob2); <span class="comment">// True</span></span><br><span class="line">    <span class="comment">// 两者属性值相同，声明顺序相同</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LINQ中的匿名类型</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = </span><br><span class="line">  <span class="keyword">from</span> e <span class="keyword">in</span> employees</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">new</span> &#123;e.FirstName, Last = e.LastName&#125;;</span><br></pre></td></tr></table></figure><h3 id="课后习题-9"><a href="#课后习题-9" class="headerlink" title="课后习题"></a>课后习题</h3><h4 id="10-1-填空题"><a href="#10-1-填空题" class="headerlink" title="10.1 填空题"></a>10.1 填空题</h4><ul><li><strong>最低权限原则</strong>要求代码只能分配完成指定任务所需的访问量。</li><li>编译器将类库工程监理在所谓<strong>动态链接库</strong>的汇编中。</li></ul><h4 id="10-2-判断题"><a href="#10-2-判断题" class="headerlink" title="10.2 判断题"></a>10.2 判断题</h4><ul><li>lambda表达式必须返回一个值。</li></ul><h2 id="第11章-面向对象编程：继承"><a href="#第11章-面向对象编程：继承" class="headerlink" title="第11章 面向对象编程：继承"></a>第11章 面向对象编程：继承</h2><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>Base Classes and Derived Classes</p><p>继承形成了树状层次结构。</p><p>并非每个类关系都是继承关系。“有”关系，类的成员是其他类对象的引用。</p><h3 id="protected成员"><a href="#protected成员" class="headerlink" title="protected成员"></a>protected成员</h3><p>protected介于公用与专用之间，基类的protected成员可以让基类成员和派生类成员访问。所有非专用基类成员在派生类中保持原访问修饰符。</p><h3 id="基类和派生类的关系"><a href="#基类和派生类的关系" class="headerlink" title="基类和派生类的关系"></a>基类和派生类的关系</h3><p>C#中除object以外的每个类都扩展现有类。object是唯一没有基类的类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommissionEmployee类显式扩展（继承自）object类（FCL中的System.Object）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommissionEmployee</span> : <span class="title">object</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数不继承，但隐式调用object类的构造函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseCommissionEmployee</span> : <span class="title">CommissionEmployee</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">decimal</span> baseSalary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构造函数初始化器和关键字base调用基类构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BaseCommissionEmployee</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">decimal</span> sales, <span class="keyword">decimal</span> salary</span>): <span class="title">base</span>(<span class="params">name, sales</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    BaseSalary = salary;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">decimal</span> BaseSalary&#123;<span class="keyword">get</span>; <span class="keyword">set</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">decimal</span> <span class="title">Earnings</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字virtual与abstract表示派生类中可以覆盖基类方法。</p><p>使用父类private实例变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseCommissionEmployee</span> : <span class="title">CommissionEmployee</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">decimal</span> <span class="title">Earnings</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseSalary + <span class="keyword">base</span>.Earnings();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h3><p>Constructors in Derived Classes</p><p>派生类构造函数在执行自己的任务之前要显示（通过base引用和构造函数初始化器）或隐式（调用基类默认构造函数或无参构造函数）调用直接基类的构造函数。链中最后一个调用的构造函数总是object类的构造函数。</p><h3 id="继承和软件工程"><a href="#继承和软件工程" class="headerlink" title="继承和软件工程"></a>继承和软件工程</h3><p>Software Engineering with Inheritance</p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/object.PNG" alt="object"></p><h2 id="第12章-多态、接口与运算符重载"><a href="#第12章-多态、接口与运算符重载" class="headerlink" title="第12章 多态、接口与运算符重载"></a>第12章 多态、接口与运算符重载</h2><h3 id="多态举例"><a href="#多态举例" class="headerlink" title="多态举例"></a>多态举例</h3><p>程序通过基类变量调用方法时，发生多态——执行时，根据引用对象的类型调用这个方法的正确派生类版本。</p><p>程序通过向下转换技术显式将基类引用转换为派生类类型，程序可以调用基类中没有的派生类方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PolymorphismTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    BaseCommissionEmployee baseCommissionEmployee = <span class="keyword">new</span> BaseCommissionEmployee(<span class="string">"Bob"</span>, <span class="number">5000</span>, <span class="number">300</span>);</span><br><span class="line">    </span><br><span class="line">    CommissionEmployee commissionEmployee = baseCommissionEmployee;</span><br><span class="line">    </span><br><span class="line">    CommissionEmployee.ToString();</span><br><span class="line">    CommissionEmployee.Earnings();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类与方法"><a href="#抽象类与方法" class="headerlink" title="抽象类与方法"></a>抽象类与方法</h3><p>定义不实例化为任何对象的类，抽象类。抽象基类。</p><p>抽象类用关键字abstract声明。抽象类通常包含一个或几个抽象方法。</p><p>抽象属性声明形式如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> property</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数和静态方法不能声明为abstract。派生类不能覆盖静态方法。</p><p>不能实例化抽象基类的对象，但可以用抽象基类声明变量，保存这些抽象类派生的任何具体类的对象引用。程序通常用这种变量多态操纵派生类对象。可以用抽象基类名调用抽象基类中声明的静态方法。</p><p>as运算符进行向下转换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> employee = currentEmployee <span class="keyword">as</span> BaseCommissionEmployee;</span><br></pre></td></tr></table></figure><h3 id="sealed方法与类"><a href="#sealed方法与类" class="headerlink" title="sealed方法与类"></a>sealed方法与类</h3><p>基类中声明为sealed的方法不能在派生类中覆盖，声明为static和private的方法隐含sealed，因为派生类中不能覆盖（但派生类可以声明与基类中专用方法同名的新方法）。同时声明override与sealed的派生方法可以覆盖基类方法。</p><p>声明为sealed的类不能作为基类（不能扩展）。</p><h3 id="创建与使用接口"><a href="#创建与使用接口" class="headerlink" title="创建与使用接口"></a>创建与使用接口</h3><p>Creating and Using Interfaces</p><p>接口定义和标准化人与系统交互的方式。</p><p>软件对象也是通过接口通信。</p><p>所有接口成员隐式声明为public与abstract。</p><p>每个接口可以扩展一个或多个其他接口。</p><p>实现这个接口的具体类要声明接口中指定了签名的每个接口成员。实现接口而不实现其所有成员的类是个抽象类，要声明为abstract，每个未实现的接口成员要包含一个abstract声明。</p><p>和公用抽象类一样，接口通常为公用类型，因此通常在单独文件中声明，文件名与接口名相同，文件扩展名为.cs。</p><p><strong>声明接口IPayable</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IPayable.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建Invoice类</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Invoice.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Invoice</span> : <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改Employee类，实现IPayable接口</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Employee.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">IPayable</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">decimal</span> <span class="title">GetPaymentAmount</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.NET框架类库公共接口</strong></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/interface.PNG" alt=""></p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/interface_next.PNG" alt="interface"></p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>使运算符适用于类对象，这个过程称为运算符重载。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComplexNumber.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComplexNumber</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> Real &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> Imaginary &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ComplexNumber</span>(<span class="params"><span class="keyword">double</span> a, <span class="keyword">double</span> b</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Real = a;</span><br><span class="line">    Imaginary = b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>.Format( <span class="string">"&#123;0&#125; &#123;1&#125; &#123;2&#125;i"</span>,</span><br><span class="line">                        Real, (Imaginary &lt; <span class="number">0</span> ? <span class="string">"-"</span>:<span class="string">"+"</span>), Math.Abs(Imaginary))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ComplexNumber <span class="keyword">operator</span> +(ComplexNumber x, ComplexNumber y)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">reutrn new <span class="title">ComplexNumber</span>(<span class="params">x.Real+y.Real, x.Imaginary+y.Imaginary</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OperatorOverloading.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComplexTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ComplexNumber x, y;</span><br><span class="line">    x = <span class="keyword">new</span> ComplexNumber(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    y = <span class="keyword">new</span> ComplexNumber(<span class="number">4</span>, <span class="number">-2</span>);</span><br><span class="line">    </span><br><span class="line">    x+y; <span class="comment">// (2+4i)+(4-2i)=(6+2i)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第13章-异常处理"><a href="#第13章-异常处理" class="headerlink" title="第13章 异常处理"></a>第13章 异常处理</h2><p>异常就是程序执行期间发生的问题。</p><p>异常处理使应用程序能够解决异常。异常处理可实现清晰，健壮和更多容错的程序。</p><h3 id="异常处理概述"><a href="#异常处理概述" class="headerlink" title="异常处理概述"></a>异常处理概述</h3><p>Exception Handling Overview</p><p>程序员可以决定处理任何异常——所有异常，某种类型的所有异常或相关类型的所有异常。</p><h3 id="例子：除数为0不用异常处理"><a href="#例子：除数为0不用异常处理" class="headerlink" title="例子：除数为0不用异常处理"></a>例子：除数为0不用异常处理</h3><p>其他信息（称为堆栈跟踪）显示异常名称和导致异常的执行路径。</p><p>堆栈跟踪中的每一行“ at”都表示发生异常时正在执行的特定方法中的一行代码。该信息说明异常的起源，以及达到该点之前进行了哪些方法调用。</p><p>当Convert方法ToInt32接收到不代表有效整数的字符串时，将发生<code>FormatException</code>。即使发生异常并且已打印堆栈跟踪，程序也可能继续执行。在这种情况下，应用程序可能会产生错误的结果。</p><h3 id="使用异常处理"><a href="#使用异常处理" class="headerlink" title="使用异常处理"></a>使用异常处理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DivideByZeroTest.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DivideByZeroTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DivideByZeroTestForm</span> : <span class="title">Form</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DivideByZeroTestForm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从用户那里获得2个整数</span></span><br><span class="line">    <span class="comment">// 将分子除以分母</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">divideButton_click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      outputLabel.Text = <span class="string">""</span>; <span class="comment">// 清除标签OutputLabel</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">int</span> numerator = Convert.ToInt32( numeratorTextBox.Text );</span><br><span class="line">        <span class="keyword">int</span> denominator = Convert.ToInt32( denominatorTextBox.Text );</span><br><span class="line">        <span class="keyword">int</span> result = numerator / denominator;</span><br><span class="line">        outputLabel.Text = result.ToString();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(FormatException)</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBox.Show( <span class="string">"You must enter two integers."</span>,</span><br><span class="line">                          <span class="string">"Invalid Number Format"</span>, MessageBoxButtons.OK,</span><br><span class="line">                          MessageBoxIcon.Error );                                   </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> ( DivideByZeroException divideByZeroExceptionParameter )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBox.Show( divideByZeroExceptionParameter.Message,</span><br><span class="line">                          <span class="string">"Attempted to Divide by Zero"</span>, MessageBoxButtons.OK,</span><br><span class="line">                          MessageBoxIcon.Error );                                  </span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/divide.PNG" alt="DivideByZeroTest.cs"></p><p>另一种有效的方法：</p><p><code>Int32.TryParse</code>方法将字符串转换为int值。该方法需要两个参数-一个是要解析的字符串，另一个是要将转换后的值存储在其中的变量。如果成功解析了字符串，则该方法返回true。如果无法转换字符串，则将值0分配给第二个参数。</p><p><strong>Enclosing Code in a try Block（用try块界定代码）</strong></p><p>try块包含可能引发异常的代码以及发生异常时被跳过的代码。</p><p>catch块至多只能有一个参数。</p><p><strong>Catching Exceptions（捕获异常）</strong></p><p>当try块中发生异常时，相应的catch块将捕获该异常并进行处理。一个try块之后必须至少有一个catch块。catch块指定一个异常参数，该参数表示catch块可以处理的异常。catch块也可以不指定异常类型或标识符，这种catch块（称为通用catch子句），捕获所有异常类型。</p><p><strong>未捕获异常</strong></p><p>未捕获的异常（或未处理的异常）是没有匹配的catch块的异常。</p><p><strong>Termination Model of Exception Handling（异常处理的终止模型）</strong></p><p>当程序或CLR中调用的方法检测到问题时，该方法或CLR会引发异常。发生异常的点称为抛出点。如果try块中发生异常，则try块立即终止，程序控制将立即转移到后面第一个异常参数类型与所有抛出类型匹配的catch块中。处理异常后，程序控制在最后一个catch块之后恢复。这称为异常处理的终止模型</p><h3 id="NET-Exception层次"><a href="#NET-Exception层次" class="headerlink" title=".NET Exception层次"></a>.NET Exception层次</h3><p>C#中的异常处理机制只能抛出和捕获Exception类（命名空间System）及其派生类的对象。</p><p>其他.NET语言（如C++）引发的异常可以通过常规catch子句捕获。</p><p><strong>SystemException类</strong></p><p>Exception类是.NET异常类层次结构的基类。从Exception派生的一个最重要的类是SystemException。CLR产生SystemException，可以在程序执行期间的任何时候发生。</p><p>如果程序尝试访问超出范围的数组索引，则CLR会引发IndexOutOfRangeException类型的异常。尝试使用空引用会导致NullReferenceException。</p><p>catch块可以使用基类类型来捕获相关异常的层次结构。指定异常类型参数的catch块可以捕获所有异常。仅当基类和所有派生类的处理行为相同时，此技术才有意义。</p><p><strong>确定方法抛出什么异常（Determining Which Exceptions a Method Throws）</strong></p><h3 id="finally块"><a href="#finally块" class="headerlink" title="finally块"></a>finally块</h3><p>程序经常动态地请求和释放资源。操作系统通常会阻止多个程序处理文件。因此，该程序应关闭文件（即释放资源），以便其他程序可以使用它。如果未关闭文件，则会发生资源泄漏。</p><p>处理资源时经常会发生异常。无论程序是否遇到异常，该程序都应在不再需要该文件时将其关闭。<strong>C#提供了finally块，无论是否发生异常，该块都可以保证执行</strong>。<br>这使得finally块非常适合从相应的try块中释放资源。</p><p>try块中的局部变量无法在相应的finally块中访问，因此必须在try块之前声明必须在两者中访问的变量。</p><p><strong>using语句</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(ExampleObject e = <span class="keyword">new</span> ExampleObject())</span><br><span class="line">&#123;</span><br><span class="line">  e.SomeMethod&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简化取得资源、在try块中使用资源和在相应finally中释放资源的代码。文件处理程序，保证文件不再使用时正确关闭。</p><p>using语句代码等效于</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ExampleObject e = <span class="keyword">new</span> ExampleObject();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    e.SomeMethod();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( e != <span class="literal">null</span> )</span><br><span class="line">      ( ( IDisposable ) e ).Dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Exception Properties</strong></p><p>类Exception的属性用于制定错误消息，指示捕获到的异常。属性Message存储与Exception对象关联的错误消息。属性StackTrace包含一个表示方法调用堆栈的字符串</p><p>发生异常时，程序员可能会使用其他错误消息或指示新的异常类型。原始异常对象存储在InnerException属性中。</p><p><strong>类异常提供其他属性：</strong></p><ul><li>HelpLink指定描述问题的帮助文件的位置。</li><li>Source指定引起异常的应用程序或对象的名称。</li><li>TargetSite指定异常发生的方法。</li></ul><p>最近调用的方法出现在堆栈的顶部。第一种方法（Main）出现在底部。</p><p>StackTrace表示抛出点处方法调用堆栈的状态。内部异常信息包括内部异常堆栈跟踪。</p><h3 id="用户定义异常类（User-Defined-Exception-Classes）"><a href="#用户定义异常类（User-Defined-Exception-Classes）" class="headerlink" title="用户定义异常类（User-Defined Exception Classes）"></a>用户定义异常类（User-Defined Exception Classes）</h3><p>用户定义的异常类应直接或间接从名称空间System的Exception类派生。</p><p>用户定义的异常应定义三个构造函数：</p><ul><li>无参数构造函数</li><li>接收字符串参数的构造函数（错误消息）</li><li>接收字符串参数和Exception参数的构造函数（错误消息和内部异常对象）</li></ul><h2 id="第14章-图形用户界面概念：第一部分"><a href="#第14章-图形用户界面概念：第一部分" class="headerlink" title="第14章 图形用户界面概念：第一部分"></a>第14章 图形用户界面概念：第一部分</h2><p>图形用户界面（GUI）允许用户在视觉上与程序进行交互。</p><p>GUI控件是可以在屏幕上显示信息或使用户能够与应用程序交互的对象。</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/CSharp/controller.PNG" alt="controller"></p><h3 id="Windows-Forms"><a href="#Windows-Forms" class="headerlink" title="Windows Forms"></a>Windows Forms</h3><p>Form是出现在计算机桌面上的图形元素； 它可以是对话框，窗口或MDI窗口。组件是实现IComponent接口的类的实例，该接口定义了组件必须实现的行为，例如如何加载组件。诸如按钮或标签的控件在运行时具有图形表示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第1章-计算机、Internet与Visual-C-简介&quot;&gt;&lt;a href=&quot;#第1章-计算机、Internet与Visual-C-简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 计算机、Internet与Visual C#简介&quot;&gt;&lt;/a&gt;第1章 计算机、Internet与Visual C#简介&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Review" scheme="https://mysticalguest.github.io/categories/Review/"/>
    
    
      <category term="C#" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Docker</title>
    <link href="https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDocker/"/>
    <id>https://mysticalguest.github.io/2020/08/18/Spring/SpringBootDocker/</id>
    <published>2020-08-18T01:10:32.096Z</published>
    <updated>2020-08-19T10:12:26.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Docker简介"><a href="#1、Docker简介" class="headerlink" title="1、Docker简介"></a>1、Docker简介</h2><p>类似于虚拟机技术，但不是一个虚拟机，却实现了虚拟机技术里的资源隔离，性能远远高于虚拟机。<br><a id="more"></a></p><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>如图，将用一个实例来讲述Docker的来源：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/docker-story.png" alt="Docker"></p><p>用户A使用的电脑是Windows原生系统，需要自己安装驱动和软件等，但如果用户B也使用同样方法，就也得自己再装一遍，其他人也一样，过于麻烦。</p><p>那么就有了Windows镜像系统，用户A把系统装好后，包括安装好的驱动和软件等，打包成镜像，其他用户也就有了。</p><p>Docker就类似于这种镜像机制。</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><ul><li>docker主机(Host)：安装了d ocker程序的机器（Docker直接安装在操作系统之上）</li><li>docker客户端(Client)：连接docker主机进行操作</li><li>docker仓库(Registry)：用来保存各种打包好的软件镜像；公共、私人仓库</li><li>docker镜像(Images)：软件打包好的镜像；放在docker仓库中</li><li>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</li></ul><p>使用Docker的步骤：</p><ul><li>安装Docker</li><li>去Docker仓库找到这个软件对应的镜像</li><li>使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</li><li>对容器的启动停止就是对软件的启动停止</li></ul><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h3 id="3-1-安装linux虚拟机"><a href="#3-1-安装linux虚拟机" class="headerlink" title="3.1 安装linux虚拟机"></a>3.1 安装linux虚拟机</h3><ul><li>VMWare、VirtualBox</li><li>创建新虚拟机或打开已创建的虚拟机，这里选择CentOS</li></ul><h3 id="3-2-在linux虚拟机上安装docker，步骤"><a href="#3-2-在linux虚拟机上安装docker，步骤" class="headerlink" title="3.2 在linux虚拟机上安装docker，步骤"></a>3.2 在linux虚拟机上安装docker，步骤</h3><ul><li>检查内核版本，必须是3.10及以上</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uname -r</span></span><br></pre></td></tr></table></figure><ul><li>不是3.10及以上的，使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum update</span></span><br></pre></td></tr></table></figure><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><ul><li>添加软件源（设置yum源）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><ul><li>可以查看所有仓库中所有docker版本，并选择特定版本安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure><ul><li>安装docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-18.03.1.ce</span></span></span><br></pre></td></tr></table></figure><ul><li>启动docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br></pre></td></tr></table></figure><ul><li>验证安装是否成功（有client和service两部分表示docker安装启动都成功了）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br></pre></td></tr></table></figure><ul><li>停止docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop docker</span></span><br></pre></td></tr></table></figure><ul><li>开机启动docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><ul><li><p>更换docker的镜像源</p><ul><li><p>修改或创建daemon.json文件：<code>vi /etc/docker/daemon.json</code>将以下配置写入到文件中，保存并退出（不会操作的百度下vi命令吧）：</p></li><li><p>Docker中国官方镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中科大镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>网易163镜像加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阿里云跟daocloud镜像加速需要注册账号，阿里云<a href="https://www.aliyun.com/">官网</a>，登录之后选择控制台，找到<strong>容器镜像服务</strong>，在镜像加速器下有个加速地址，复制添加上即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://xxxxxxxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启docker：<code>systemctl restart docker</code></p></li></ul></li></ul><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="4-1-镜像操作"><a href="#4-1-镜像操作" class="headerlink" title="4.1 镜像操作"></a>4.1 镜像操作</h3><div class="table-container"><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table></div><p>Docker Hub<a href="https://hub.docker.com/">仓库</a></p><h3 id="4-2-容器操作"><a href="#4-2-容器操作" class="headerlink" title="4.2 容器操作"></a>4.2 容器操作</h3><p>软件镜像（例：QQ安装程序）——运行镜像——产生一个容器（正在运行的软件，运行的QQ）</p><p>步骤：</p><ul><li>搜索镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search tomcat</span><br></pre></td></tr></table></figure><ul><li>拉取镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull tomcat</span></span><br></pre></td></tr></table></figure><ul><li>根据镜像启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// --name给容器起名</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mytomcat -d tomcat:latest</span></span><br></pre></td></tr></table></figure><ul><li>查看运行中的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure><ul><li>停止运行中的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop &lt;容器的id&gt;/&lt;容器的name&gt;</span></span><br></pre></td></tr></table></figure><ul><li>查看所有的容器（包括运行中和已停止的）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure><ul><li>启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start &lt;容器id&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除一个容器（注意和删除镜像的区别）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm 容器id</span></span><br></pre></td></tr></table></figure><ul><li>启动一个做了端口映射的tomcat（可以不用起名），一个镜像可以做</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8888:8080 tomcat</span></span><br></pre></td></tr></table></figure><blockquote><p>-d：后台运行<br>-p：将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p></blockquote><ul><li>查看容器的日志</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs &lt;container-name&gt;/&lt;container-id&gt;</span></span><br></pre></td></tr></table></figure><p>更多命令，可以参考每一个镜像的<a href="https://docs.docker.com/engine/reference/commandline/docker/">文档</a></p><h2 id="5、安装MySQL示例"><a href="#5、安装MySQL示例" class="headerlink" title="5、安装MySQL示例"></a>5、安装MySQL示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br></pre></td></tr></table></figure><ul><li>错误的启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql01 -d mysql</span></span><br></pre></td></tr></table></figure><p>用<code>docker ps</code>观察到，mysql退出了；为什么呢？使用<code>docker logs &lt;mysql的id&gt;</code>，得到错误日志：三个参数必须指定一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and </span><br><span class="line">MYSQL_RANDOM_ROOT_PASSWORD</span><br></pre></td></tr></table></figure><ul><li>正确的启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure><ul><li>还应做端口映射</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure><ul><li>几个其他的高级操作</li></ul><p>-v：把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</p><p>改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw </span></span><br><span class="line">-d mysql:tag</span><br></pre></td></tr></table></figure><p>不用配置文件，指定mysql的一些配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character</span></span><br><span class="line">-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Docker简介&quot;&gt;&lt;a href=&quot;#1、Docker简介&quot; class=&quot;headerlink&quot; title=&quot;1、Docker简介&quot;&gt;&lt;/a&gt;1、Docker简介&lt;/h2&gt;&lt;p&gt;类似于虚拟机技术，但不是一个虚拟机，却实现了虚拟机技术里的资源隔离，性能远远高于虚拟机。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Servlet</title>
    <link href="https://mysticalguest.github.io/2020/08/16/Spring/SpringBootServlet/"/>
    <id>https://mysticalguest.github.io/2020/08/16/Spring/SpringBootServlet/</id>
    <published>2020-08-16T04:18:39.084Z</published>
    <updated>2020-08-27T15:47:01.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置嵌入式Servlet容器"><a href="#1、配置嵌入式Servlet容器" class="headerlink" title="1、配置嵌入式Servlet容器"></a>1、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><a id="more"></a><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/tomcat-pom.png" alt="tomcat"></p><p>问题？</p><h3 id="1-1-如何定制和修改Servlet容器的相关配置；"><a href="#1-1-如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1.1 如何定制和修改Servlet容器的相关配置；"></a>1.1 如何定制和修改Servlet容器的相关配置；</h3><ul><li>修改和server有关的配置（ServerProperties{也是EmbeddedServletContainerCustomizer}）；</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8088</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure><ul><li>编写一个<code>EmbeddedServletContainerCustomizer</code>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-注册Servlet三大组件（Servlet、Filter、Listener）"><a href="#1-2-注册Servlet三大组件（Servlet、Filter、Listener）" class="headerlink" title="1.2 注册Servlet三大组件（Servlet、Filter、Listener）"></a>1.2 注册Servlet三大组件（Servlet、Filter、Listener）</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><ul><li>ServletRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line"><span class="keyword">new</span> CustomServlet(),</span><br><span class="line"><span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FilterRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> CustomFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletListenerRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ServletListenerRegistrationBean&lt;CustomListener&gt; registrationBean = </span><br><span class="line"><span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> CustomListener());</span><br><span class="line">  <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(</span><br><span class="line">  name = &#123;<span class="string">"dispatcherServletRegistration"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(</span><br><span class="line">  value = &#123;DispatcherServlet<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">  <span class="title">name</span> </span>= &#123;<span class="string">"dispatcherServlet"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet </span></span></span><br><span class="line"><span class="function"><span class="params">dispatcherServlet)</span> </span>&#123;</span><br><span class="line">  ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">dispatcherServlet, </span><br><span class="line"><span class="keyword">new</span> String[]&#123;<span class="keyword">this</span>.serverProperties.getServletMapping()&#125;</span><br><span class="line">);</span><br><span class="line">  <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">  <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">  registration.setName(<span class="string">"dispatcherServlet"</span>);</span><br><span class="line">  registration.setLoadOnStartup(<span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">    registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、SpringBoot能不能支持其他的Servlet容器？"><a href="#2、SpringBoot能不能支持其他的Servlet容器？" class="headerlink" title="2、SpringBoot能不能支持其他的Servlet容器？"></a>2、SpringBoot能不能支持其他的Servlet容器？</h2><p>在之前写定制嵌入式的Servlet容器相关的规则配置类的时候</p><p>在<code>ServletConfig.class</code>中用的<code>ConfigurableEmbeddedServletContainer</code>声明的变量，选中，点击Ctrl+h，会在右侧显示它的继承树：</p><p>可配置的嵌入式容器工程</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/other-servlet.PNG" alt="other servlet"></p><h2 id="3、替换为其他嵌入式Servlet容器"><a href="#3、替换为其他嵌入式Servlet容器" class="headerlink" title="3、替换为其他嵌入式Servlet容器"></a>3、替换为其他嵌入式Servlet容器</h2><p>默认支持：</p><h3 id="3-1-Tomcat（默认使用）"><a href="#3-1-Tomcat（默认使用）" class="headerlink" title="3.1 Tomcat（默认使用）"></a>3.1 Tomcat（默认使用）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Jetty（长链接，例如聊天）"><a href="#3-2-Jetty（长链接，例如聊天）" class="headerlink" title="3.2 Jetty（长链接，例如聊天）"></a>3.2 Jetty（长链接，例如聊天）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入除Tomcat外的其他Servlet: jetty --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Undertow（不支持JSP）"><a href="#3-3-Undertow（不支持JSP）" class="headerlink" title="3.3 Undertow（不支持JSP）"></a>3.3 Undertow（不支持JSP）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入除Tomcat外的其他Servlet: undertow --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-嵌入式Servlet容器自动配置原理"><a href="#3-4-嵌入式Servlet容器自动配置原理" class="headerlink" title="3.4 嵌入式Servlet容器自动配置原理"></a>3.4 嵌入式Servlet容器自动配置原理</h3><p>在自动配置包里的<code>EmbeddedServletContainerAutoConfiguration.class</code>：嵌入式的Servlet容器自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(-<span class="number">2147483648</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">// 导入<span class="title">BeanPostProcessorsRegistrar</span></span>; 给容器中导入一些组件</span><br><span class="line"><span class="comment">// 导入了EmbeddedServletContainerCustomizerBeanPostProcessor</span></span><br><span class="line"><span class="comment">// 后置处理器: bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Undertow</span>.<span class="title">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">      <span class="title">value</span> </span>= &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">      <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedUndertow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Server</span>.<span class="title">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">      <span class="title">value</span> </span>= &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">      <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedJetty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="comment">// 判断当前是否引入了Tomcat依赖</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">  // 判断当前容器没有用户自己定义EmbeddedServletContainerFactory: 嵌入式的Servlet容器工厂</span><br><span class="line">  <span class="comment">// 作用: 创建嵌入式的Servlet容器</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">      value = &#123;EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">      <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedTomcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取嵌入式的Servlet容器</span></span><br><span class="line">    <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(ServletContextInitializer... var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/EmbeddedServletContainerFactory.PNG" alt="EmbeddedServletContainerFactory"></p><ul><li>EmbeddedServletContainer（嵌入式的Servlet容器）</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/EmbeddedServletContainer.PNG" alt="EmbeddedServletContainer"></p><ul><li>以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个Tomcat</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    <span class="comment">// 配置Tomcat的基本环镜</span></span><br><span class="line">    File baseDir = </span><br><span class="line"><span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory : <span class="keyword">this</span>.createTempDir(<span class="string">"tomcat"</span>);</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    <span class="keyword">this</span>.customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.configureEngine(tomcat.getEngine());</span><br><span class="line">    Iterator var5 = <span class="keyword">this</span>.additionalTomcatConnectors.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">        Connector additionalConnector = (Connector)var5.next();</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    <span class="comment">// 将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们对嵌入式容器的配置修改是怎么生效？</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="attr">ServerProperties</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line">EmbeddedServletContainerCustomizer()</span><br></pre></td></tr></table></figure><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><ul><li>容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化之前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">BeansException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer)bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.getCustomizers().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值</span></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        EmbeddedServletContainerCustomizer customizer = </span><br><span class="line">(EmbeddedServletContainerCustomizer)var2.next();</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从容器中获取所有这葛类型的组件: EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">// 定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            <span class="keyword">this</span>.customizers = </span><br><span class="line"><span class="keyword">new</span> ArrayList(</span><br><span class="line"><span class="keyword">this</span>.beanFactory.getBeansOfType(</span><br><span class="line">EmbeddedServletContainerCustomizer<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>, <span class="title">false</span>).<span class="title">values</span>()</span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line">            Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">            <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServerProperties也是定制器，步骤：<ul><li>SpringBoot根据导入的依赖情况，给容器中添加相应的嵌入式容器工厂，EmbeddedServletContainerFactory[TomcatEmbeddedServletContainerFactory]</li><li>容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；只要是嵌入式的Servlet容器工厂，后置处理器就工作；</li><li>后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</li></ul></li></ul><h2 id="4、嵌入式Servlet容器启动原理"><a href="#4、嵌入式Servlet容器启动原理" class="headerlink" title="4、嵌入式Servlet容器启动原理"></a>4、嵌入式Servlet容器启动原理</h2><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat？</p><p>获取嵌入式的Servlet容器工厂：</p><ul><li>SpringBoot应用启动运行run方法</li><li>refreshContext(context)；SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></li><li>refresh(context)，<strong>刷新刚才创建好的ioc容器；</strong>查看<code>AbstractApplicationContext.class</code>源码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">    <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">      <span class="keyword">this</span>.initApplicationEventMulticaster();</span><br><span class="line">      <span class="keyword">this</span>.onRefresh();</span><br><span class="line">      <span class="keyword">this</span>.registerListeners();</span><br><span class="line">      <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeansException var9) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.warn(</span><br><span class="line"><span class="string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> </span><br><span class="line">+ var9);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">      <span class="keyword">this</span>.cancelRefresh(var9);</span><br><span class="line">      <span class="keyword">throw</span> var9;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>onRefresh()，web的ioc容器重写了onRefresh方法</p></li><li><p>webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p></li><li>获取嵌入式的Servlet容器工厂：**</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure><p>从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><ul><li><strong>使用容器工厂获取嵌入式的Servlet容器</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.embeddedServletContainer = </span><br><span class="line">containerFactory.getEmbeddedServletContainer(getSelfInitializer());</span><br></pre></td></tr></table></figure><ul><li>嵌入式的Servlet容器创建对象并启动Servlet容器；</li></ul><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>IOC容器启动创建嵌入式的Servlet容器</strong></p><h2 id="5、使用外置的Servlet容器"><a href="#5、使用外置的Servlet容器" class="headerlink" title="5、使用外置的Servlet容器"></a>5、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>优点：简单、便携；</p><p>缺点：默认不支持JSP、优化定制比较复杂（使用定制器{ServerProperties、自定义EmbeddedServletContainerCustomizer}，自己编写嵌入式Servlet容器的创建工厂{EmbeddedServletContainerFactory}）；</p><p>外置的Servlet容器：外面安装Tomcat—-应用war包的方式打包；</p><h3 id="5-1-创建JSPweb项目教程："><a href="#5-1-创建JSPweb项目教程：" class="headerlink" title="5.1 创建JSPweb项目教程："></a>5.1 创建JSPweb项目教程：</h3><ul><li>使用Spring Initializr新建项目：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jspweb.PNG" alt="jsp web"></p><ul><li>剩下都是Next，得到项目结构：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jsp-project-structure.PNG" alt="Structure"></p><ul><li>生成webapp文件夹（可手动创建，也可用以下方法）：</li></ul><p>点击编译器右上的Project Structure按钮—&gt;Modules—&gt;项目展开—&gt;Web—&gt;Web Resource Directories</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webapp.png" alt="webapp"></p><p>双击Web Resource Directory下的路径，弹出对话框：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webapp-dialog.PNG" alt="webapp dialog"></p><p>点击OK，然后在弹出对话框点Yes即可；</p><ul><li>部署描述图生成XML文件：</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/deployment-webxml.png" alt="web.xml"></p><p>将默认的路径<code>...\WEB-INF\web.xml</code>改为<code>...\src\main\webapp\WEB-INF\web.xml</code>，点击OK即可，最后Apply—&gt;OK</p><p>如何启动？</p><ul><li>服务器整合进IDEA</li></ul><p>编译器上方Edit Configurations…</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/tomcat.png" alt="tomcat"></p><p>添加本地Tomcat配置即可：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/mytomcat.PNG" alt="tomcat"></p><p>配置完后添加部署项目：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/deployment-tomcat-project.png" alt="deploy"></p><p>出现对话框，选择第二个暴露的就行</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/select-artifacts-to-deploy.PNG" alt="select artifacts to deploy"></p><p>最后Apply—&gt;OK。运行Tomcat即可</p><h3 id="5-2-步骤"><a href="#5-2-步骤" class="headerlink" title="5.2 步骤"></a>5.2 步骤</h3><ul><li>必须创建一个war项目；（利用IDEA创建好目录结构）</li><li>将嵌入式的Tomcat指定为provided；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入SpringBoot应用的主程序</span></span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringBootWebJspApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动服务器就可以使用。</li></ul><h3 id="5-3-原理"><a href="#5-3-原理" class="headerlink" title="5.3 原理"></a>5.3 原理</h3><ul><li><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p></li><li><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>{SpringBootServletInitializer}，启动ioc容器；</p></li></ul><p>servlet3.0（规范文档）</p><h3 id="5-4-查看8-2-4-Shared-libraries-runtimes-pluggability条内容："><a href="#5-4-查看8-2-4-Shared-libraries-runtimes-pluggability条内容：" class="headerlink" title="5.4 查看8.2.4 Shared libraries / runtimes pluggability条内容："></a>5.4 查看<code>8.2.4 Shared libraries / runtimes pluggability</code>条内容：</h3><p>规则：</p><ul><li>服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例；</li><li>ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</li><li>还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类</li></ul><h3 id="5-5-流程"><a href="#5-5-流程" class="headerlink" title="5.5 流程"></a>5.5 流程</h3><ul><li><p>启动Tomcat</p></li><li><p>org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p></li><li><p>SpringServletContainerInitializer将<code>@HandlesTypes(WebApplicationInitializer.class)</code>标注的所有这个类型的类都传入到onStartup方法的Set<Class<?>&gt;；为这些WebApplicationInitializer类型的类创建实例；</p></li><li><p>每一个WebApplicationInitializer都调用自己的onStartup；</p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/WebApplicationInitializer.PNG" alt="WebApplicationInitializer"></p><ul><li>相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</li><li>SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringBootServletInitializer.class</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、创建SpringApplicationBuilder</span></span><br><span class="line">  SpringApplicationBuilder builder = <span class="keyword">this</span>.createSpringApplicationBuilder();</span><br><span class="line">  StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">  environment.initPropertySources(servletContext, (ServletConfig)<span class="keyword">null</span>);</span><br><span class="line">  builder.environment(environment);</span><br><span class="line">  builder.main(<span class="keyword">this</span>.getClass());</span><br><span class="line">  ApplicationContext parent = <span class="keyword">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">  <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">    servletContext.setAttribute(</span><br><span class="line">WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, </span><br><span class="line">(Object)<span class="keyword">null</span></span><br><span class="line">    );</span><br><span class="line">    builder.initializers(</span><br><span class="line"><span class="keyword">new</span> ApplicationContextInitializer[]&#123;</span><br><span class="line"><span class="keyword">new</span> ParentContextApplicationContextInitializer(parent)</span><br><span class="line">&#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  builder.initializers(</span><br><span class="line"><span class="keyword">new</span> ApplicationContextInitializer[]&#123;</span><br><span class="line"><span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext)</span><br><span class="line">              &#125;</span><br><span class="line">  );</span><br><span class="line">  builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">  builder = <span class="keyword">this</span>.configure(builder);</span><br><span class="line">  <span class="comment">// 使用builder创建一个Spring应用</span></span><br><span class="line">  SpringApplication application = builder.build();</span><br><span class="line">  <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; </span><br><span class="line">AnnotationUtils.findAnnotation(<span class="keyword">this</span>.getClass(), Configuration<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">    application.getSources().add(<span class="keyword">this</span>.getClass());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Assert.state(</span><br><span class="line">!application.getSources().isEmpty(), </span><br><span class="line"><span class="string">"No SpringApplication sources have been defined. </span></span><br><span class="line"><span class="string">Either override the configure method or add an @Configuration annotation"</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">    application.getSources().add(ErrorPageFilterConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//启动Spring应用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring的应用就启动并且创建IOC容器</li></ul><p>查看上面run方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">  stopWatch.start();</span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line">  SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">  listeners.starting();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">    ConfigurableEnvironment environment = </span><br><span class="line"><span class="keyword">this</span>.prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">    Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line">    context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">    <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">    <span class="keyword">this</span>.prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">    <span class="comment">//刷新IOC容器</span></span><br><span class="line">    <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">    <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">    listeners.finished(context, (Throwable)<span class="keyword">null</span>);</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(</span><br><span class="line"><span class="keyword">this</span>.getApplicationLog(), </span><br><span class="line">stopWatch</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleRunFailure(context, listeners, (FailureAnalyzers)analyzers, var9);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动Servlet容器，再启动SpringBoot应用</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、配置嵌入式Servlet容器&quot;&gt;&lt;a href=&quot;#1、配置嵌入式Servlet容器&quot; class=&quot;headerlink&quot; title=&quot;1、配置嵌入式Servlet容器&quot;&gt;&lt;/a&gt;1、配置嵌入式Servlet容器&lt;/h2&gt;&lt;p&gt;SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot错误机制</title>
    <link href="https://mysticalguest.github.io/2020/08/15/Spring/SpringBootError/"/>
    <id>https://mysticalguest.github.io/2020/08/15/Spring/SpringBootError/</id>
    <published>2020-08-15T13:55:49.569Z</published>
    <updated>2020-08-27T15:48:47.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、错误处理机制"><a href="#1、错误处理机制" class="headerlink" title="1、错误处理机制"></a>1、错误处理机制</h2><h3 id="1-1-SpringBoot默认的错误处理机制"><a href="#1-1-SpringBoot默认的错误处理机制" class="headerlink" title="1.1 SpringBoot默认的错误处理机制"></a>1.1 SpringBoot默认的错误处理机制</h3><a id="more"></a><p>默认效果：</p><ul><li>浏览器，返回一个默认的错误页面</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/error-page.PNG" alt="error page"></p><p>浏览器发送请求的请求头：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/chrome-header.png" alt="chrome header"></p><ul><li>如果是其他客户端，默认响应一个json数据</li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/json-error.PNG" alt="json"></p><p>客户端的请求头：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/postman-header.PNG" alt="postman header"></p><h3 id="1-2-原理："><a href="#1-2-原理：" class="headerlink" title="1.2 原理："></a>1.2 原理：</h3><ul><li><p>可以参照<code>ErrorMvcAutoConfiguration</code>；错误处理的自动配置；查看这个类的源码</p></li><li><p>这个配置类给容器中添加了以下组件：</p><ul><li><code>DefaultErrorAttributes</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 帮我们在页面共享信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">  errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">  addStatus(errorAttributes, requestAttributes);</span><br><span class="line">  addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">  addPath(errorAttributes, requestAttributes);</span><br><span class="line">  <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>BasicErrorController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">  HttpStatus status = getStatus(request);</span><br><span class="line">  Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">  request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">  response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">              <span class="comment">// 去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">  ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">  <span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 产生json数据，其他客户端来到这个方法处理</span></span><br><span class="line">  <span class="meta">@RequestMapping</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">  Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">  isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">  HttpStatus status = getStatus(request);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>ErrorPageCustomizer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorProperties</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String path = <span class="string">"/error"</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>DefaultErrorViewResolver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">  <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">    modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">  String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">  TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">    .getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">  <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line">  <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-步骤"><a href="#1-3-步骤" class="headerlink" title="1.3 步骤"></a>1.3 步骤</h3><p>一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><ul><li>响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、如何定制错误响应："><a href="#2、如何定制错误响应：" class="headerlink" title="2、如何定制错误响应："></a>2、如何定制错误响应：</h2><h3 id="2-1-如何定制错误的页面"><a href="#2-1-如何定制错误的页面" class="headerlink" title="2.1 如何定制错误的页面"></a>2.1 如何定制错误的页面</h3><ul><li>有模板引擎的情况下；</li></ul><p>error/状态码; 将错误页面命名为<code>错误状态码.html</code>放在模板引擎文件夹里面的error文件夹下，发生此状态码的错误就会来到  对应的页面；</p><p>我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>页面能获取的信息；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">timestamp：时间戳</span></span><br><span class="line"><span class="attr">status：状态码</span></span><br><span class="line"><span class="attr">error：错误提示</span></span><br><span class="line"><span class="attr">exception：异常对象</span></span><br><span class="line"><span class="attr">message：异常消息</span></span><br><span class="line"><span class="attr">errors：JSR303数据校验的错误都在这里</span></span><br></pre></td></tr></table></figure><ul><li>没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</li><li>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面</li></ul><h3 id="2-2-如何定制错误的json数据"><a href="#2-2-如何定制错误的json数据" class="headerlink" title="2.2 如何定制错误的json数据"></a>2.2 如何定制错误的json数据</h3><ul><li>自定义异常处理&amp;返回定制json数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要出现异常，SpringMVC就会调用这个方法，把异常对象传进来</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"user not exist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上方法没有自适应效果，浏览器和客户端返回都是JSON数据</p><p>我们可以看到源码中，<code>BasicErrorController</code>类是用来处理自适应的</p><ul><li>转发到/error进行自适应响应效果处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * AbstractErrorController.class中</span></span><br><span class="line"><span class="comment">         * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">         .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"user not exist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="comment">// 转发到/error</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将我们的定制数据携带出去；</p><p>出现错误以后，会来到/error请求，会被<code>BasicErrorController.class</code>处理，响应出去可以获取的数据是由<code>getErrorAttributes</code>得到的（是<code>AbstractErrorController.class</code>（ErrorController）规定的方法）；</p><ul><li>完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</li><li>页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</li><li>自定义：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"> <span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">         Map&lt;String, Object&gt; map = </span><br><span class="line"><span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">         map.put(<span class="string">"company"</span>, <span class="string">"MysteryGuest"</span>);</span><br><span class="line">         <span class="keyword">return</span> map;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容</p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/myexception.PNG" alt="custom exception"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、错误处理机制&quot;&gt;&lt;a href=&quot;#1、错误处理机制&quot; class=&quot;headerlink&quot; title=&quot;1、错误处理机制&quot;&gt;&lt;/a&gt;1、错误处理机制&lt;/h2&gt;&lt;h3 id=&quot;1-1-SpringBoot默认的错误处理机制&quot;&gt;&lt;a href=&quot;#1-1-SpringBoot默认的错误处理机制&quot; class=&quot;headerlink&quot; title=&quot;1.1 SpringBoot默认的错误处理机制&quot;&gt;&lt;/a&gt;1.1 SpringBoot默认的错误处理机制&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot应用</title>
    <link href="https://mysticalguest.github.io/2020/08/14/Spring/SpringBootCRUD/"/>
    <id>https://mysticalguest.github.io/2020/08/14/Spring/SpringBootCRUD/</id>
    <published>2020-08-14T02:51:27.737Z</published>
    <updated>2020-08-27T15:51:13.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、RestfulCRUD"><a href="#1、RestfulCRUD" class="headerlink" title="1、RestfulCRUD"></a>1、RestfulCRUD</h2><h3 id="1-1-默认访问首页"><a href="#1-1-默认访问首页" class="headerlink" title="1.1 默认访问首页"></a>1.1 默认访问首页</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-国际化"><a href="#1-2-国际化" class="headerlink" title="1.2 国际化"></a>1.2 国际化</h3><ul><li>编写国际化配置文件；</li><li>使用ResourceBundleMessageSource管理国际化资源文件</li><li>在页面使用fmt:message（JSP）取出国际化内容</li></ul><p>Spring Boot都自动配置好了，唯一要做的就是编写国际化配置文件了</p><p><strong>步骤</strong></p><ul><li>编写国际化配置文件，抽取页面需要显示的国际化消息</li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/globalization.PNG" alt="globalization"></p><ul><li>SpringBoot自动配置好了管理国际化资源文件的组件；</li></ul><p>Ctrl+N搜索<code>MessageSourceAutoConfiguration</code>类，查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">    value = &#123;MessageSource<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">search</span> </span>= SearchStrategy.CURRENT</span><br><span class="line">)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(-<span class="number">2147483648</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(&#123;MessageSourceAutoConfiguration.ResourceBundleCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span></span></span><br><span class="line"><span class="class">@<span class="title">ConfigurationProperties</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.messages"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> String basename = <span class="string">"messages"</span>; <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">// 设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">            messageSource.setBasenames(</span><br><span class="line">StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)</span><br><span class="line">)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">        messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>去页面获取国际化的值；</li></ul><p>Thymeleaf官方<a href="https://www.thymeleaf.org/documentation.html">文档</a>查看message</p><p>主配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置国际化资源路径</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/login</span></span><br><span class="line"><span class="comment">#设置国际化编码格式</span></span><br><span class="line"><span class="meta">spring.messages.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><p>HTML文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#&#123;login.rememberme&#125;]]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.signin&#125;"</span>&gt;</span></span><br><span class="line">  Sign in</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">  name = &#123;<span class="string">"locale"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == </span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的就是根据请求头带来的区域信息获取Locale进行国际化</p><ul><li>点击链接切换国际化</li></ul><p>自定义组件<code>MyLocaleResolver</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">// 是否携带语言信息</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">       HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">       Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后个组件添加进容器，在配置文件<code>SpringMVCConfig</code>类文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区域信息解析器组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-登录"><a href="#1-3-登录" class="headerlink" title="1.3 登录"></a>1.3 登录</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><ul><li>禁用模板引擎的缓存</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><ul><li><p>页面修改完成以后ctrl+F9：重新编译；</p></li><li><p>登陆错误消息的显示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-拦截器进行登陆检查"><a href="#1-4-拦截器进行登陆检查" class="headerlink" title="1.4 拦截器进行登陆检查"></a>1.4 拦截器进行登陆检查</h3><p>拦截器组件类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = httpServletRequest.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            httpServletRequest.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            httpServletRequest.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(</span><br><span class="line">httpServletRequest, </span><br><span class="line">httpServletResponse</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       Object o, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">                                              HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">                                              Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">  WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//                super.addInterceptors(registry);</span></span><br><span class="line">      <span class="comment">// "/**"表示任意多层路径下的任意请求</span></span><br><span class="line">      <span class="comment">// 静态资源；  *.css , *.js</span></span><br><span class="line">      <span class="comment">// SpringBoot已经做好了静态资源映射</span></span><br><span class="line">      registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">"/index.html"</span>, <span class="string">"/"</span>, <span class="string">"/login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、CRUD-员工列表"><a href="#2、CRUD-员工列表" class="headerlink" title="2、CRUD-员工列表"></a>2、CRUD-员工列表</h2><h3 id="2-1-RestfulCRUD：CRUD满足Rest风格；"><a href="#2-1-RestfulCRUD：CRUD满足Rest风格；" class="headerlink" title="2.1 RestfulCRUD：CRUD满足Rest风格；"></a>2.1 RestfulCRUD：CRUD满足Rest风格；</h3><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><div class="table-container"><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—-GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—-POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—-PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—-DELETE</td></tr></tbody></table></div><h3 id="2-2-thymeleaf公共页面元素抽取"><a href="#2-2-thymeleaf公共页面元素抽取" class="headerlink" title="2.2 thymeleaf公共页面元素抽取"></a>2.2 thymeleaf公共页面元素抽取</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><p>页面示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他页面使用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-引入片段的时候传入参数："><a href="#2-3-引入片段的时候传入参数：" class="headerlink" title="2.3 引入片段的时候传入参数："></a>2.3 引入片段的时候传入参数：</h3><p>父页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='main.html')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sidebar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:href</span>=<span class="string">"@&#123;main.html&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">fill</span>=<span class="string">"none"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke</span>=<span class="string">"currentColor"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">s</span></span></span><br><span class="line"><span class="tag">               <span class="attr">troke-linecap</span>=<span class="string">"round"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">          Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-添加操作"><a href="#2-4-添加操作" class="headerlink" title="2.4 添加操作"></a>2.4 添加操作</h3><p>添加页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;addEmployee&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name@163.com"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 提交的是部门的id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept: $&#123;departments&#125;"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"2020/01/01"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—-Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="2-5-修改操作"><a href="#2-5-修改操作" class="headerlink" title="2.5 修改操作"></a>2.5 修改操作</h3><p>修改添加二合一表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要区分员工修改还是添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"$&#123;employee!=null&#125;?@&#123;updateEmployee&#125;:@&#123;addEmployee&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 发送put请求修改原数据 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- th:if="$&#123;employee!=null&#125;"修改页面采用put方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee.id&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.lastName&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name@163.com"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.email&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender&#125;==1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender&#125;==0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 提交的是部门的id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;dept.id == employee.department.id&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept: $&#123;departments&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"2020/01/01"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;#dates.format(employee.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;employee!=null&#125;?'修改':'添加'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-删除操作"><a href="#2-6-删除操作" class="headerlink" title="2.6 删除操作"></a>2.6 删除操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-success"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;addEmployeePage&#125;"</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-sm"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp: $&#123;employees&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/employee/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;form th:action="@&#123;/employee/&#125;+$&#123;emp.id&#125;" method="post"&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--   &lt;input type="hidden" name="_method" value="delete"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--   &lt;button type="submit" class="btn btn-sm btn-danger"&gt;删除&lt;/button&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;/form&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- th:attr自定义标签属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/employee/&#125;+$&#123;emp.id&#125;"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span></span><br><span class="line">              删除</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将表单放在里面，每个删除按钮就会有个表单，放在外面简洁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"deleteEmpForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、RestfulCRUD&quot;&gt;&lt;a href=&quot;#1、RestfulCRUD&quot; class=&quot;headerlink&quot; title=&quot;1、RestfulCRUD&quot;&gt;&lt;/a&gt;1、RestfulCRUD&lt;/h2&gt;&lt;h3 id=&quot;1-1-默认访问首页&quot;&gt;&lt;a href=&quot;#1-1-默认访问首页&quot; class=&quot;headerlink&quot; title=&quot;1.1 默认访问首页&quot;&gt;&lt;/a&gt;1.1 默认访问首页&lt;/h3&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Web开发</title>
    <link href="https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/"/>
    <id>https://mysticalguest.github.io/2020/08/09/Spring/SpringBootWeb/</id>
    <published>2020-08-09T07:17:01.661Z</published>
    <updated>2020-08-27T15:54:35.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、使用Spring-Boot："><a href="#1、使用Spring-Boot：" class="headerlink" title="1、使用Spring Boot："></a>1、使用Spring Boot：</h2><ul><li>创建Spring Boot应用，选中我们需要的模块</li><li>Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</li><li>自己编写业务代码</li></ul><a id="more"></a><p>回顾自动配置原理</p><p>这个场景Spring Boot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？等等</p><ul><li>xxxxAutoConfiguration：帮我们给容器中自动配置组件</li><li>xxxxProperties：配置类来封装配置文件的内容</li></ul><h2 id="2、Spring-Boot对静态资源的映射规则"><a href="#2、Spring-Boot对静态资源的映射规则" class="headerlink" title="2、Spring Boot对静态资源的映射规则"></a>2、Spring Boot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.resources"</span>,</span><br><span class="line">    ignoreUnknownFields = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 可以设置和静态资源有关的参数，比如缓存时间</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-依赖的方式"><a href="#2-1-依赖的方式" class="headerlink" title="2.1 依赖的方式"></a>2.1 依赖的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(</span><br><span class="line"><span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(</span><br><span class="line"><span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;</span><br><span class="line">).setCachePeriod(cachePeriod)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(</span><br><span class="line"><span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations()</span><br><span class="line">).setCachePeriod(cachePeriod)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源</p><p>webjars：以jar包的方式引入静态资源</p></li></ul><p>webjars<a href="https://www.webjars.org/">官网</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/webjars-jquery.PNG" alt="webjars-jquery"></p><p>访问方式：<a href="http://localhost:8088/webjars/jquery/3.5.1/jquery.js">http://localhost:8088/webjars/jquery/3.5.1/jquery.js</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jquery-webjars --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-“-”访问当前项目的任何资源（静态资源的文件夹）"><a href="#2-2-“-”访问当前项目的任何资源（静态资源的文件夹）" class="headerlink" title="2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）"></a>2.2 “/**”访问当前项目的任何资源（静态资源的文件夹）</h3><p>继续读<code>addResourceHandlers</code>方法，如果处理不了，就去静态<code>staticPathPattern</code>路径去找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER;</span><br><span class="line">    <span class="keyword">this</span>.dispatchTraceRequest = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.dispatchOptionsRequest = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.ignoreDefaultModelOnRedirect = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.logResolvedException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.mediaTypes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    <span class="keyword">this</span>.staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">    <span class="keyword">this</span>.async = <span class="keyword">new</span> WebMvcProperties.Async();</span><br><span class="line">    <span class="keyword">this</span>.servlet = <span class="keyword">new</span> WebMvcProperties.Servlet();</span><br><span class="line">    <span class="keyword">this</span>.view = <span class="keyword">new</span> WebMvcProperties.View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>它添加了个位置<code>addResourceLocations</code>，这个里面的<code>resourceProperties</code>有个<code>getStaticLocations()</code>方法，点进去，有个常量<code>RESOURCE_LOCATIONS</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        RESOURCE_LOCATIONS = <span class="keyword">new</span> String[CLASSPATH_RESOURCE_LOCATIONS.length + </span><br><span class="line">SERVLET_RESOURCE_LOCATIONS.length];</span><br><span class="line">        System.arraycopy(SERVLET_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, <span class="number">0</span>, </span><br><span class="line">SERVLET_RESOURCE_LOCATIONS.length);</span><br><span class="line">        System.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, <span class="number">0</span>, RESOURCE_LOCATIONS, </span><br><span class="line">SERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就找到了以下文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;; <span class="comment">// 当前项目的根路径</span></span><br><span class="line"><span class="comment">// 和</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;</span><br><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>src/mian/java</code>和<code>src/main/resources</code>都是类路径</p><p>如果要访问<code>localhost:8088/*.js</code>资源，没有人为处理，那么会自动去上面这些路径，静态资源文件夹里找这些文件</p></blockquote><p>访问方式：<a href="http://localhost:8088/asserts/img/childhood_dreams.jpg">http://localhost:8088/asserts/img/childhood_dreams.jpg</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/static.PNG" alt="static"></p><h3 id="2-3-欢迎页设置，静态资源文件夹下的所有index-html页面"><a href="#2-3-欢迎页设置，静态资源文件夹下的所有index-html页面" class="headerlink" title="2.3 欢迎页设置，静态资源文件夹下的所有index.html页面"></a>2.3 欢迎页设置，静态资源文件夹下的所有index.html页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping welcomePageHandlerMapping</span><br><span class="line">(ResourceProperties resourceProperties) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping(</span><br><span class="line">resourceProperties.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customizeResourceHandlerRegistration</span><span class="params">(ResourceHandlerRegistration registration)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.resourceHandlerRegistrationCustomizer != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer.customize(registration);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring最顶层的组件，保存每个请求谁来处理</p><p>点进<code>getWelcomePage()</code>方法</p><p><code>this.mvcProperties.getStaticPathPattern()</code>还被谁映射，点进去看源码就是<code>/**</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] var1 = <span class="keyword">this</span>.getStaticWelcomePageLocations();</span><br><span class="line">  <span class="keyword">int</span> var2 = var1.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">    String location = var1[var3];</span><br><span class="line">    Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(location);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">        resource.getURL();</span><br><span class="line">        <span class="keyword">return</span> resource;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要遍历，说明欢迎页还挺多的</p><p>点进<code>getStaticWelcomePageLocations()</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] getStaticWelcomePageLocations() &#123;</span><br><span class="line">  String[] result = <span class="keyword">new</span> String[<span class="keyword">this</span>.staticLocations.length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; ++i) &#123;</span><br><span class="line">    String location = <span class="keyword">this</span>.staticLocations[i];</span><br><span class="line">    <span class="keyword">if</span> (!location.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      location = location + <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[i] = location + <span class="string">"index.html"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还是这个<code>staticLocations</code>静态文件夹</p><p>静态文件夹路径都拼接上<code>index.html</code></p></blockquote><p>访问方式：<a href="http://localhost:8088/">http://localhost:8088/</a>    就会找index页面</p><h3 id="2-4-网站图标"><a href="#2-4-网站图标" class="headerlink" title="2.4 网站图标"></a>2.4 网站图标</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcAutoConfiguration.class文件</span></span><br><span class="line"><span class="comment">// 配置喜欢的图标</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  value = &#123;<span class="string">"spring.mvc.favicon.enabled"</span>&#125;,</span><br><span class="line">  matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">    mapping.setOrder(-<span class="number">2147483647</span>);</span><br><span class="line">    mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, </span><br><span class="line"><span class="keyword">this</span>.faviconRequestHandler()));</span><br><span class="line">    <span class="keyword">return</span> mapping;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">    requestHandler.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">    <span class="keyword">return</span> requestHandler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有的<code>**/favicon.ico</code>都是在静态文件夹下找</p></blockquote><h3 id="2-5-自定义路径"><a href="#2-5-自定义路径" class="headerlink" title="2.5 自定义路径"></a>2.5 自定义路径</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/hello/,classpath:initializr/</span></span><br></pre></td></tr></table></figure><p>多路径用都好隔开，一旦启用自定义路径，那么默认的静态资源路径就不能使用了</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/template-engine.png" alt="template-engine"></p><p>Spring Boot推荐的Thymeleaf：语法更简单，功能更强大</p><h3 id="3-1-引入Thymeleaf，引入starter："><a href="#3-1-引入Thymeleaf，引入starter：" class="headerlink" title="3.1 引入Thymeleaf，引入starter："></a>3.1 引入Thymeleaf，引入starter：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看引入的库，发现引入的2.1.6版本的，太低了</p><p>Thymeleaf的<a href="https://github.com/thymeleaf/thymeleaf/releases">版本发布</a></p><p>Spring官网<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/howto-spring-mvc.html#howto-use-thymeleaf-3">Thymeleaf 3的使用</a></p><p>切换版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf主程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf布局支持程序 Thymeleaf3要求layout2以上版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Thymeleaf2和layout1适配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties里面的会属性覆盖Spring Boot默认的版本号</p><p>thymeleaf-layout-dialect的<a href="https://github.com/ultraq/thymeleaf-layout-dialect/releases">版本发布</a></p><h3 id="3-2-Thymeleaf使用及语法"><a href="#3-2-Thymeleaf使用及语法" class="headerlink" title="3.2 Thymeleaf使用及语法"></a>3.2 Thymeleaf使用及语法</h3><p>还是在<code>spring-boot-autoconfigure</code>自动配置包里：添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(</span><br><span class="line">  name = &#123;<span class="string">"org.thymeleaf.templatemode.TemplateMode"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thymeleaf3Configuration</span> </span>&#123;</span><br><span class="line">  Thymeleaf3Configuration() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">  <span class="title">static</span> <span class="title">class</span> <span class="title">Thymeleaf3ViewResolverConfiguration</span> <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class"><span class="title">AbstractThymeleafViewResolverConfiguration</span> </span>&#123;</span><br><span class="line">    Thymeleaf3ViewResolverConfiguration</span><br><span class="line">(ThymeleafProperties properties, SpringTemplateEngine templateEngine) &#123;</span><br><span class="line">      <span class="keyword">super</span>(properties, templateEngine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> configureTemplateEngine</span><br><span class="line">(ThymeleafViewResolver resolver, SpringTemplateEngine templateEngine) &#123;</span><br><span class="line">      Method setTemplateEngine;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        setTemplateEngine = ReflectionUtils.findMethod(</span><br><span class="line">resolver.getClass(), </span><br><span class="line"><span class="string">"setTemplateEngine"</span>, </span><br><span class="line"><span class="keyword">new</span> Class[]&#123;Class.forName(</span><br><span class="line"><span class="string">"org.thymeleaf.ITemplateEngine"</span>, </span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line">resolver.getClass().getClassLoader()</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var5);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ReflectionUtils.invokeMethod(setTemplateEngine, resolver, <span class="keyword">new</span> Object[]&#123;templateEngine&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">    name = &#123;<span class="string">"defaultTemplateResolver"</span>&#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTemplateResolverConfiguration</span> <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class"><span class="title">AbstractTemplateResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DefaultTemplateResolverConfiguration(ThymeleafProperties properties, </span><br><span class="line">  ApplicationContext applicationContext) &#123;</span><br><span class="line">      <span class="keyword">super</span>(properties, applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringResourceTemplateResolver <span class="title">defaultTemplateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      SpringResourceTemplateResolver resolver = <span class="keyword">super</span>.defaultTemplateResolver();</span><br><span class="line">      Method setCheckExistence = ReflectionUtils.findMethod(</span><br><span class="line">resolver.getClass(), </span><br><span class="line"><span class="string">"setCheckExistence"</span>, </span><br><span class="line"><span class="keyword">new</span> Class[]&#123;Boolean.TYPE&#125;</span><br><span class="line">);</span><br><span class="line">      ReflectionUtils.invokeMethod(</span><br><span class="line">setCheckExistence, </span><br><span class="line">resolver, </span><br><span class="line"><span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>.getProperties().isCheckTemplate()&#125;</span><br><span class="line">);</span><br><span class="line">      <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们引入的是3+版本，所以只有3+版本生效；</p><p>配置了哪些属性？在文件<code>ThymeleafProperties</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">"HTML5"</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">    <span class="keyword">private</span> MimeType contentType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cache;</span><br><span class="line">    <span class="keyword">private</span> Integer templateResolverOrder;</span><br><span class="line">    <span class="keyword">private</span> String[] viewNames;</span><br><span class="line">    <span class="keyword">private</span> String[] excludedViewNames;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在<code>classpath:/templates/</code>，Thymeleaf就能自动渲染</p><p>Thymeleaf语法还是参照<a href="https://www.thymeleaf.org/">官方网</a>的<a href="https://www.thymeleaf.org/documentation.html">官方文档</a></p><h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><ul><li>导入Thymeleaf的名称空间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用Thymeleaf语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;text&#125;"</span>&gt;</span>这里是div信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-语法规则"><a href="#3-4-语法规则" class="headerlink" title="3.4 语法规则"></a>3.4 语法规则</h3><p><code>th:text</code>：改变当前元素里面的文本内容；</p><p><strong>th</strong>：任意html属性；替换原生属性的值，例：th:class覆盖class</p><div class="table-container"><table><thead><tr><th style="text-align:center">Feature</th><th style="text-align:center">Detail</th><th style="text-align:center">Attribute</th></tr></thead><tbody><tr><td style="text-align:center">Fragment inclusion</td><td style="text-align:center">片段包含：jsp:include</td><td style="text-align:center">th:insert<br/>th:replace</td></tr><tr><td style="text-align:center">Fragment iteration</td><td style="text-align:center">遍历：c:forEach</td><td style="text-align:center">th:each</td></tr><tr><td style="text-align:center">Conditional evaluation</td><td style="text-align:center">条件判断：c:if</td><td style="text-align:center">th:if<br/>th:unless<br/>th:switch<br/>th:case</td></tr><tr><td style="text-align:center">Local variable definition</td><td style="text-align:center">声明变量：c:set</td><td style="text-align:center">th:object<br/>th:with</td></tr><tr><td style="text-align:center">General attribute modification</td><td style="text-align:center">任意属性修改支持prepend, append</td><td style="text-align:center">th:attr<br/>th:attrprepend<br/>th:attrappend</td></tr><tr><td style="text-align:center">Specific attribute modification</td><td style="text-align:center">修改制定属性默认值</td><td style="text-align:center">th:value<br/>th:href<br/>th:src<br/>…</td></tr><tr><td style="text-align:center">Text (tag body modification)</td><td style="text-align:center">修改标签体内容</td><td style="text-align:center">th:text(转义特殊字符)<br/>th:utext(不转义特殊字符)</td></tr><tr><td style="text-align:center">Fragment specification</td><td style="text-align:center">声明片段</td><td style="text-align:center">th:fragment</td></tr><tr><td style="text-align:center">Fragment removal</td><td style="text-align:center"></td><td style="text-align:center">th:remove</td></tr></tbody></table></div><h3 id="3-5-表达式"><a href="#3-5-表达式" class="headerlink" title="3.5 表达式"></a>3.5 表达式</h3><ul><li><p>Simple expressions: (表达式语法)</p><ul><li>Variable Expressions: ${…}: 获取变量值; OGNL;</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">1)</span> <span class="string">获取对象的属性、调用方法</span></span><br><span class="line"> <span class="meta">2)</span> <span class="string">使用内置的基本对象</span></span><br><span class="line"><span class="comment">   #ctx : the context object.</span></span><br><span class="line"><span class="comment">   #vars: the context variables.</span></span><br><span class="line"><span class="comment">   #locale : the context locale.</span></span><br><span class="line"><span class="comment">   #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">   #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">   #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">   #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line"> </span><br><span class="line">   <span class="meta">$&#123;session.foo&#125;</span> <span class="string">// Retrieves the session atttribute 'foo'</span></span><br><span class="line"><span class="comment">   # 附录都有演示</span></span><br><span class="line"> <span class="meta">3)</span> <span class="string">内置的一些工具对象</span></span><br><span class="line"><span class="comment">   #execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">   #messages : methods for obtaining externalized messages inside variables expressions, </span></span><br><span class="line"><span class="comment"># in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">   #uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">   #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">   #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">   #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">   #numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">   #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">   #objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">   #bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">   #arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">   #lists : methods for lists.</span></span><br><span class="line"><span class="comment">   #sets : methods for sets.</span></span><br><span class="line"><span class="comment">   #maps : methods for maps.</span></span><br><span class="line"><span class="comment">   #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">   #ids : methods for dealing with id attributes that might be repeated </span></span><br><span class="line"><span class="comment"># (for example, as a result of an iteration).</span></span><br></pre></td></tr></table></figure><ul><li>Selection Variable Expressions: *{…}: 选择表达式, 和${}在功能上是一样的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">补充: 配合th:object="$&#123;session.user&#125;"进行使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Message Expressions: #{…}: 获取国际化内容</li><li>Link URL Expressions: @{…}: 定义URL</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#123;/order/process(execId=$&#123;execId&#125;,execType='FAST')&#125;</span><br></pre></td></tr></table></figure><ul><li>Fragment Expressions: ~{…}: 片段引用表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 插入片段文档</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Literals(字面量)</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,…</span></span><br><span class="line"><span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line"><span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line"><span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br></pre></td></tr></table></figure><ul><li>Text operations:(文本操作)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line"><span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br></pre></td></tr></table></figure><ul><li>Arithmetic operations:(数学运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line"><span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br></pre></td></tr></table></figure><ul><li>Boolean operations:(布尔运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br></pre></td></tr></table></figure><ul><li>Comparisons and equality:(比较运算)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line"><span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br></pre></td></tr></table></figure><ul><li>Conditional operators:(条件运算, 也支持3元运算符)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line"><span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line"><span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br></pre></td></tr></table></figure><ul><li>Special tokens:(特殊符号)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p>可以参阅官方文档<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-developing-web-applications.html">Developing web applications</a></p><h3 id="4-1-Spring-Boot为Spring-MVC提供了自动配置，可与大多数应用程序完美配合。"><a href="#4-1-Spring-Boot为Spring-MVC提供了自动配置，可与大多数应用程序完美配合。" class="headerlink" title="4.1 Spring Boot为Spring MVC提供了自动配置，可与大多数应用程序完美配合。"></a>4.1 Spring Boot为Spring MVC提供了自动配置，可与大多数应用程序完美配合。</h3><p>自动配置会在Spring的默认设置之上添加以下功能：</p><ul><li><p>包含<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver Bean</code>。</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（就是View对象），视图对象决定如何渲染（转发？重定向？等））</li><li><code>ContentNegotiatingViewResolver</code>：组合所有的视图解析器的</li><li><p>如何定制：我们可以自己给容器中添加一个视图解析器，自动将其组合进来</p></li><li><p>Ctrl+N输入<code>DispatchServlet.class</code>在它的<code>doDispatch</code>方法前面设置断点，Debug运行，浏览器访问页面，查看控制台。看DispatchServlet里用到的视图解析器是什么？得到如图：</p></li></ul><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/viewResolver.png" alt="viewResolver"></p></li><li><p>支持提供静态资源，包括对WebJars的支持（请参见下文）。</p></li><li><p>自动注册<code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> bean。</p><ul><li><code>Converter</code>：转换器，类型转换使用。例如前端文本转后台Integer</li><li><code>Formatter</code>：格式化器，2020.08.13===Date</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件中配置日期格式化的规则</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  prefix = <span class="string">"spring.mvc"</span>,</span><br><span class="line">  name = &#123;<span class="string">"date-format"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat()); <span class="comment">// 日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自己添加的格式化器，我们只需要放在容器中即可</li></ul></li><li><p>支持<code>HttpMessageConverters</code>（请参见下文）。</p><ul><li>HttpMessageConverter：SpringMVC中用来转换HTTP请求和响应的；例：User对象以JSON形式写出</li><li><code>HttpMessageConverters</code>是从容器中确定的，获取所有的HttpMessageConverter</li><li>自己给容器中添加HttpMessageConverter，只需将自己的组件注册在容器中（@Bean, @Component）</li></ul></li><li><p>自动注册<code>MessageCodesResolver</code>（请参见下文）。</p><ul><li>定义错误代码生成规则（例：JSR303校验时）</li></ul></li><li><p>静态<code>index.html</code>支持。</p></li><li><p>自定义<code>Favicon</code>支持（请参阅下文）。</p></li><li><p>自动使用<code>ConfigurableWebBindingInitializer</code> bean（请参见下文）。</p><ul><li>我们可以配置一个<code>ConfigurableWebBindingInitializer</code>来替换默认的；（添加到容器中）</li><li>初始化<code>WebDataBinder</code>（web数据绑定器）；</li><li>web数据绑定器的功能：请求数据=====绑定到JavaBean中</li></ul></li></ul><p><code>org.springframework.boot.autoconfigure.web</code>：web的所有自动配置场景。</p><p>如果您想保留Spring Boot MVC功能，而只想添加其他MVC配置（拦截器，格式化程序，视图控制器等），则可以添加自己的类型为<code>WebMvcConfigurerAdapter</code>的<code>@Configuration</code>类，但无需<code>@EnableWebMvc</code>。如果希望提供<code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>或<code>ExceptionHandlerExceptionResolver</code>的自定义实例，则可以声明一个提供此类组件的<code>WebMvcRegistrationsAdapter</code>实例。</p><p>如果要完全控制Spring MVC，则可以添加用<code>@EnableWebMvc</code>注释的自己的<code>@Configuration</code>。</p><h3 id="4-2-扩展SpringMVC"><a href="#4-2-扩展SpringMVC" class="headerlink" title="4.2 扩展SpringMVC"></a>4.2 扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要实现以上Spring配置文件的内容，编写一个配置类（@Configuration），是<code>WebMvcConfigurerAdapter</code>类型；不能标注<code>@EnableWebMvc</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /addViewController 请求来到 thymeleaf</span></span><br><span class="line">        registry.addViewController(<span class="string">"/addViewController"</span>).setViewName(<span class="string">"thymeleaf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><p>原理：</p><ul><li>WebMvcAutoConfiguration是SpringMVC的自动配置类</li><li>在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进其父类<code>DelegatingWebMvcConfiguration</code>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelegatingWebMvcConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动装配, 从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired</span>(</span><br><span class="line">        required = <span class="keyword">false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">            <span class="comment">// 一个参考实现; 将所有的WebMvcConfigurer相关配置都来一起调用;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebMvcConfigurerComposite</code>类中的一个实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">  Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">    WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">    delegate.addViewControllers(registry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>容器中所有的WebMvcConfigurer都会一起起作用（包括我们自己写的）；</li><li>我们的配置类也会被调用；<ul><li>效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</li></ul></li></ul><h3 id="4-3-全面接管SpringMVC"><a href="#4-3-全面接管SpringMVC" class="headerlink" title="4.3 全面接管SpringMVC"></a>4.3 全面接管SpringMVC</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了（静态资源也不能访问了）</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><p>原理：为什么@EnableWebMvc自动配置就失效了？</p><ul><li>@EnableWebMvc的核心</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看<code>DelegatingWebMvcConfiguration</code>类的源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在找到<code>WebMvcAutoConfiguration</code>类，查看签名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurerAdapter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, </span></span><br><span class="line"><span class="class"><span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ConditionalOnMissingBean()</code>：容器中没有这个组件的时候，这个自动配置类才生效</p><ul><li>@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</li><li>导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能。</li></ul><h2 id="5、如何修改Spring-Boot的默认配置"><a href="#5、如何修改Spring-Boot的默认配置" class="headerlink" title="5、如何修改Spring Boot的默认配置"></a>5、如何修改Spring Boot的默认配置</h2><p>模式：</p><ul><li>Spring Boot在自动配置很多组件时，先看容器中有没有用户自己配置的（@Bean, @Component）,如果有就用用户配置的，如果没有才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</li><li>在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li><li>在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、使用Spring-Boot：&quot;&gt;&lt;a href=&quot;#1、使用Spring-Boot：&quot; class=&quot;headerlink&quot; title=&quot;1、使用Spring Boot：&quot;&gt;&lt;/a&gt;1、使用Spring Boot：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建Spring Boot应用，选中我们需要的模块&lt;/li&gt;
&lt;li&gt;Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来&lt;/li&gt;
&lt;li&gt;自己编写业务代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与日志</title>
    <link href="https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/"/>
    <id>https://mysticalguest.github.io/2020/08/08/Spring/SpringBootLog/</id>
    <published>2020-08-08T14:52:19.278Z</published>
    <updated>2020-08-27T15:55:46.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>故事：有一个开发人员，开发一个大型系统；</p><a id="more"></a><blockquote><p>遇到重要数据，喜欢<code>System.out.println(&quot;&quot;)</code>，将关键数据打印在控制台</p><p>去掉？写在一个文件？方便？</p><p>框架来记录系统的一些运行时信息，日志框架：first.jar</p><p>高大上的几个功能？异步模式？自动规定？等等？：second.jar</p><p>将以前的框架卸下来？换上新的框架，更新修改之前相关API：third.jar</p><p>JDBC—-数据库驱动：</p><ul><li>写了一个统一的接口层：暂时叫做日志门面（日志的一个抽象层）：fourth.jar</li><li>给项目中导入具体的日志实现就行了，我们之前的日志框架都是实现的抽象层</li></ul></blockquote><h2 id="2、市面上的日志框架"><a href="#2、市面上的日志框架" class="headerlink" title="2、市面上的日志框架"></a>2、市面上的日志框架</h2><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…</p><h3 id="2-1-下表行间无任何对应关系"><a href="#2-1-下表行间无任何对应关系" class="headerlink" title="2.1 下表行间无任何对应关系"></a>2.1 下表行间无任何对应关系</h3><div class="table-container"><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL( Jakarta Commons Logging)</td><td>Log4j</td></tr><tr><td>SLF4j( Simple Logging Facade for Java)</td><td>JUL( java. util.logging)</td></tr><tr><td>jboss-logging</td><td>Log4j2</td></tr><tr><td></td><td>Logback</td></tr></tbody></table></div><p>左边选一个门面（抽象层）、右边选一个实现</p><p>选哪个呢？排除法</p><h3 id="2-2-日志门面：slf4j"><a href="#2-2-日志门面：slf4j" class="headerlink" title="2.2 日志门面：slf4j"></a>2.2 日志门面：slf4j</h3><p>Jboss-logging：普通程序员用不了</p><p>JCL：最后一次更新是在2014年，廉颇老矣，尚能饭否？</p><p>剩下slf4j理所应当</p><h3 id="2-3-日志实现：logback"><a href="#2-3-日志实现：logback" class="headerlink" title="2.3 日志实现：logback"></a>2.3 日志实现：logback</h3><p>log4j、logback和slf4j都是一个人写的，适配性好，log4j不错但有性能问题，但升级消耗太大，就重写了logback</p><p>所有log4j没有logback先进，JUL是Java自带的，怕日志市场被占，比较简略</p><p>log4j2是借log4j之名，由Apache公司重新做的框架，设计地非常好，由于太好还没适配</p><h3 id="2-4-Spring-Boot怎么做的呢？"><a href="#2-4-Spring-Boot怎么做的呢？" class="headerlink" title="2.4 Spring Boot怎么做的呢？"></a>2.4 Spring Boot怎么做的呢？</h3><p>Spring框架默认是用JCL日志框架</p><p>Spring Boot选用slf4j和logback</p><h2 id="3、slf4j的使用"><a href="#3、slf4j的使用" class="headerlink" title="3、slf4j的使用"></a>3、slf4j的使用</h2><p>如何在系统中使用slf4j？<a href="http://www.slf4j.org/">官方文档</a></p><ul><li><p>以后开发的时候，日志记录方法得调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法</p></li><li><p>参见用户手册<a href="http://www.slf4j.org/manual.html">SLF4J user manual</a>给系统中导入slf4j的jar和logback的实现jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然默认用的是logback的实现，如果想要其他实现也可以，毕竟slf4j是抽象层，实现用什么都行</p></blockquote><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/SLF4J-user-manual.png" alt="Spring Boot"></p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><ul><li><p>如果系统中只导入了slf4j，我们要进行日志记录，就会返回空值，因为没有任何实现</p></li><li><p>正确用法：我的应用程序面向slf4j编程，调用它的方法进行日志记录，在程序中也导入日志实现，虽然调用slf4j接口，但logback会实现，记录到文件或控制台</p></li><li><p>如果slf4j要绑定log4j，log4j出现比较早，没想到要适配slf4j，所以两者绑定要有一个适配层（slf4j实现的），适配层相当于上面实现了slf4j的具体方法，而在方法里面要进行真正日志记录的时候，又调了log4j的API，要用log4j还要导入适配层即可<br>JUL同理</p></li><li><p>slf4j也有简单日志实现也能用，或者slf4j没有什么操作的实现包，也是输出空值</p></li><li><p>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p></li><li>slf4j只提供抽象层，用哪个实现就写那个的配置文件</li></ul><h2 id="4、遗留问题"><a href="#4、遗留问题" class="headerlink" title="4、遗留问题"></a>4、遗留问题</h2><p>开发某个系统时：使用{slf4j+logback}，依赖Spring框架（commons-logging），依赖Hibernate框架（Jboss-logging），依赖MyBatis框架等等可能一大堆</p><p>出现什么问题，系统中日志杂交？</p><p>现在就要做同一日志记录，即使是别的框架和我一起使用slf4j进行输出？</p><p>进入<a href="http://www.slf4j.org/">slf4j官方文档</a>的<a href="http://www.slf4j.org/legacy.html">legacy APIs</a></p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/legacy.png" alt="Spring Boot"></p><p>统一slf4j，使用其他包替换原有日志框架，替换的意思就是，例如要把原框架里面对Commons-logging的依赖排除掉</p><p>但如果我现在用的Spring框架缺少Commons-logging就运行不起来了，Spring底层记录日志就需要Commons-logging，那怎么办呢？就用jcl-over-slf4j.jar替换这个包，Spring要用的类这个替换包例还是有的，就不会报错了</p><p>但新的包实现怎么办呢？新的包调入slf4j，二slf4j又调到真正的实现中，其他框架不同日志框架同理替换</p><p>其他组合方式也是如此</p><p>如何让系统中所有的日志都同一到slf4j：</p><ul><li>将系统中其他日志框架先排除去；</li><li>用中间包来替换原有的日志框架</li><li>我们导入slf4j其他的实现</li></ul><h2 id="5、Spring-Boot日志关系"><a href="#5、Spring-Boot日志关系" class="headerlink" title="5、Spring Boot日志关系"></a>5、Spring Boot日志关系</h2><p>每个启动器（场景）都要依赖的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot使用它来做日志功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖图示：</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/slf4j-uml.png" alt="Spring Boot"></p><p>总结：</p><ul><li><p>Spring Boot底层也是使用slf4j+logback的方式进行日志记录</p></li><li><p>Spring Boot也是把其他的日志都替换成了slf4j</p></li><li><p>中间替换包，以<code>jcl-over-slf4j.jar</code>为例：</p><p>在项目的依赖包中找到其对应jar包：（中间转换包）</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/jcl-over-slf4j.PNG" alt="Spring Boot"></p></li><li><p>从图中看出，虽然包名用的Apache的，但实现却是使用的<code>SLF4JLogFactory()</code>的日志工厂</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = </span><br><span class="line"><span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉！</p><p>Spring框架用的是commons-logging：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">      &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;exclusion&gt;</span><br><span class="line">  &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>Spring Boot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，我们唯一需要做的是，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉。</p><h2 id="6、日志使用"><a href="#6、日志使用" class="headerlink" title="6、日志使用"></a>6、日志使用</h2><h3 id="6-1-默认配置"><a href="#6-1-默认配置" class="headerlink" title="6.1 默认配置"></a>6.1 默认配置</h3><p>当我们初始化项目运行后，自己没有配置日志，但控制台是由输出信息的</p><p>Spring Boot默认帮我们配置好了日志，直接使用就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoggerFactory是记录器工厂，记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志的级别</span></span><br><span class="line"><span class="comment">     * 由低到高：trace&lt;debug&lt;info&lt;waring&lt;error</span></span><br><span class="line"><span class="comment">     * 可以调整输出的日志级别</span></span><br><span class="line"><span class="comment">     * 只打印高级别即以后（更高级别）的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.trace(<span class="string">"这是跟踪轨迹日志...trace..."</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是调试日志...debug"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Boot默认使用的是info级别的，输出info级别即以后的内容</span></span><br><span class="line"><span class="comment">     * 没有指定级别的就用Spring Boot默认规定的级别（root级别）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.info(<span class="string">"这是信息日志...info..."</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是警告信息...warning..."</span>);</span><br><span class="line">    logger.error(<span class="string">"这是错误信息日志，异常捕获...error..."</span>);</span><br><span class="line">    <span class="comment">// 也可以通过配置文件修改级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志的输出格式</p><ul><li>%d：表示时间</li><li>%thread：表示线程名</li><li>%-5level：级别从左显示5个字符宽度</li><li>%logger{50}：表示logger名字最长50个字符，否则按照句点分割</li><li>%msg：日志消息</li><li>%n：换行</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># trace及以后的级别生效</span></span><br><span class="line"><span class="meta">logging.level.com.initializr</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成springboot日志文件</span></span><br><span class="line"><span class="comment"># 可以用决定路径</span></span><br><span class="line"><span class="comment"># 如果不指定路径，就在当前项目下生成</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用logging.path可以不使用logging.file，使用spring.log默认文件</span></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建文件夹，并生成日志文件</span></span><br><span class="line"><span class="comment">#logging.path=/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; === [%thread] === %-5level %logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure><h3 id="6-2-自定义日志、指定配置"><a href="#6-2-自定义日志、指定配置" class="headerlink" title="6.2 自定义日志、指定配置"></a>6.2 自定义日志、指定配置</h3><p>可从<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-logging.html">官方文档-日志</a>参见第26.5条Custom log configuration</p><p>给类路径下放上每个日志框架自己的配置文件即可，Spring Boot就不使用默认配置了</p><div class="table-container"><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table></div><p><code>logback.xml</code>：直接就被日志框架识别了</p><p><code>logback-spring.xml</code>：日志框架就不直接加载日志的配置项，由Spring Boot解析日志配置，可以使用Spring Boot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev, staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以指定某段配置只在某个环境下生效</p><p>否则就会报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Logback configuration error detected: </span><br><span class="line">ERROR <span class="keyword">in</span> ch.qos.logback.core.joran.spi.Interpreter@<span class="number">23</span>:<span class="number">39</span> - </span><br><span class="line">no applicable action <span class="keyword">for</span> [<span class="type">springProfile</span>]...</span><br></pre></td></tr></table></figure><p>使用<code>logback-spring.xml</code>配置文件时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制台打印 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、切换日志框架"><a href="#7、切换日志框架" class="headerlink" title="7、切换日志框架"></a>7、切换日志框架</h2><h3 id="7-1-现在我们想用log4j实现"><a href="#7-1-现在我们想用log4j实现" class="headerlink" title="7.1 现在我们想用log4j实现"></a>7.1 现在我们想用log4j实现</h3><p>根据之前的原理，就要除去有关log4j的转换包，用原始包；还要导出logback的jar包</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-logback.png" alt="Spring Boot"></p><p>IDEA-&gt;在<code>pom.xml</code>文件中鼠标右键-&gt;Diagrams-&gt;Show Dependencies-&gt;选择要除去的jar包-&gt;鼠标右键-&gt;Exclude</p><p>其他的JCL和JCL有的框架还要用，所有转换包要留着</p><p>但log4j-over-slf4j.jar要去掉，这是个替换包，里面的log4j都用处slf4j了，但现在我们要用log4j了，而不是替换，所以也将其排除</p><p>最终：</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/excluded.PNG" alt="Spring Boot"></p><p>面向slf4j编程，用log4j实现</p><p>导入一个适配层的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看其源码，自动导入了log4j的框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以按照slf4j的日志适配图，进行相关的切换</p><p>得到最终的pom.xml文件配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-切换至log4j2"><a href="#7-2-切换至log4j2" class="headerlink" title="7.2 切换至log4j2"></a>7.2 切换至log4j2</h3><p>参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">官方文档</a>表13.3. Spring Boot technical starters</p><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/exclude-starter-logging.png" alt="Spring Boot"></p><p>按照之前的操作将<code>spring-boot-start-logging.jar</code>除去</p><p>在pom.xml文件中导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、日志框架&quot;&gt;&lt;a href=&quot;#1、日志框架&quot; class=&quot;headerlink&quot; title=&quot;1、日志框架&quot;&gt;&lt;/a&gt;1、日志框架&lt;/h2&gt;&lt;p&gt;故事：有一个开发人员，开发一个大型系统；&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot配置</title>
    <link href="https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/"/>
    <id>https://mysticalguest.github.io/2020/08/07/Spring/SpringBootConfig/</id>
    <published>2020-08-07T11:29:02.683Z</published>
    <updated>2020-08-27T15:59:47.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><p>Spring Boot使用一个全局配置文件，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><a id="more"></a><p>配置文件的作用：修改Spring Boot自动配置的默认值（Spring Boot在底层都给我们自动配置好）</p><p>YAML(YAML Ain’t a Markup Language)</p><ul><li>YAML 不是一种标记语言的递归缩写</li><li>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</li></ul><p>标记语言</p><ul><li>以前的配置文件，大多都使用XML文件</li><li>YAML以数据为中心，比JSON，XML等更适合做配置文件</li></ul><p>例子</p><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p><code>key:(空格)value</code>表示一对键值对</p><p>以<strong>空格</strong>的缩进来控制层级关系，只要是做对齐的一列数据，都是统一层级的</p><p>属性和值也是大小写敏感</p><h3 id="2-2-值的写法"><a href="#2-2-值的写法" class="headerlink" title="2.2 值的写法"></a>2.2 值的写法</h3><h4 id="字面量：普通值（数字，字符串，布尔）"><a href="#字面量：普通值（数字，字符串，布尔）" class="headerlink" title="字面量：普通值（数字，字符串，布尔）"></a>字面量：普通值（数字，字符串，布尔）</h4><p><code>key: value</code>字面直接来写</p><p>字符串默认不用加上单引号或双引号</p><ul><li><p>双引号：不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思</p><p>name: “Hello \n World”，输出：Hello 换行 World</p></li><li><p>单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>name: ‘Hello \n World’，输出：Hello \n World</p></li></ul><h4 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h4><p><code>key: value</code>在下一行来写对象的属性和值的关系，注意缩进</p><p>对象还是<code>key: value</code>的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">(name:</span> <span class="string">Tom,age</span> <span class="number">20</span><span class="string">)</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h4><p>用<code>- value</code>表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,</span> <span class="string">dog,</span> <span class="string">pig]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置文件值注入"><a href="#2-3-配置文件值注入" class="headerlink" title="2.3 配置文件值注入"></a>2.3 配置文件值注入</h3><p>配置文件<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">MysteryGuest</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1999</span><span class="string">/01/09</span></span><br><span class="line">  <span class="attr">map:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">China</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hubei</span></span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">niuniu</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><code>@ConfigurationProperties</code>的方式</li></ul><p><code>javaBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个数组中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>: 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person": 配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后就有自动提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>@Value</code>的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另一种方式，Spring的底层注解</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似以前</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="name" value="MysteryGuest"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean&gt;标签相当于<span class="doctag">@Compoent</span></span></span><br><span class="line"><span class="comment">     * &lt;property&gt;标签中的value相当于<span class="doctag">@Value</span></span></span><br><span class="line"><span class="comment">     * value的参数可以是字面量、$&#123;key&#125;从环境变量或配置文件获取值、#&#123;SpEL&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Value获取值和-ConfigurationProperties获取值比较"><a href="#2-4-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2.4 @Value获取值和@ConfigurationProperties获取值比较"></a>2.4 @Value获取值和@ConfigurationProperties获取值比较</h3><div class="table-container"><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个一个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL（例：#{}）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装（例：Map）</td><td>支持</td><td>不支持</td></tr></tbody></table></div><p>属性名匹配规则（Relaxed binding，松散绑定）</p><ul><li><p>person.firstName：使用标准方式</p></li><li><p>person.first-name：大写用-</p></li><li><p>person.first_name：大写用_</p></li><li><p>PERSON_FIRST_NAEM：</p><p>推荐系统属性使用这种写法</p></li></ul><p>配置文件（yml和properties）都能获取值</p><p>如果说我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用<code>@value</code></p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用<code>@ConfigurationProperties</code></p><h3 id="2-5-配置文件注入值校验"><a href="#2-5-配置文件注入值校验" class="headerlink" title="2.5 配置文件注入值校验"></a>2.5 配置文件注入值校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// JSR303数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span> <span class="comment">// @value不支持</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter() and setter()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、-PropertySource和-ImportResource"><a href="#3、-PropertySource和-ImportResource" class="headerlink" title="3、@PropertySource和@ImportResource"></a>3、@PropertySource和@ImportResource</h2><p><code>@PropertySource</code>用来加载指定的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>@ImportResource</code>导入Spring的配置文件，让配置文件里面的内容生效</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别</p><p>想让Spring的配置文件生效，加载进来，<code>@ImportResource</code>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-1-Spring-Boot推荐给容器中添加组件的方式"><a href="#3-1-Spring-Boot推荐给容器中添加组件的方式" class="headerlink" title="3.1 Spring Boot推荐给容器中添加组件的方式"></a>3.1 Spring Boot推荐给容器中添加组件的方式</h3><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.initializr.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Bean既可以标记在类上，也可以作为元注解</p><p><strong>推荐使用全注解的方式</strong></p><ul><li>配置类———-Spring配置文件</li><li>使用@Bean给容器中添加组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>指明当前类是一个配置类，就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以前在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="4-1-随机数"><a href="#4-1-随机数" class="headerlink" title="4.1 随机数"></a>4.1 随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.uuid&#125;  $&#123;random.<span class="keyword">int</span>&#125;  $&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;  $&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"><a href="#4-2-占位符获取之前配置的值，如果之前没有配置值，可以使用默认值" class="headerlink" title="4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值"></a>4.2 占位符获取之前配置的值，如果之前没有配置值，可以使用默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.name=MysticalGuest$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.birth=<span class="number">1999</span>/<span class="number">01</span>/<span class="number">09</span></span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=v2</span><br><span class="line">person.list=[a, b, c]</span><br><span class="line">person.pet.name=$&#123;person.hello:hello&#125;$&#123;person.name&#125;<span class="string">'s dog</span></span><br><span class="line"><span class="string"># 如果文件中没有定义person.hello，那么取后面的hello值</span></span><br><span class="line"><span class="string">person.pet.age=6</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><h3 id="5-1-多Profile文件"><a href="#5-1-多Profile文件" class="headerlink" title="5.1 多Profile文件"></a>5.1 多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p><p>默认使用application.properties/yml的配置</p><h3 id="5-2-yml支持多文档块方式"><a href="#5-2-yml支持多文档块方式" class="headerlink" title="5.2 yml支持多文档块方式"></a>5.2 yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3-激活指定profile"><a href="#5-3-激活指定profile" class="headerlink" title="5.3 激活指定profile"></a>5.3 激活指定profile</h3><ul><li>指定激活开发环境配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li><p>编辑运行配置参数</p><p><code>--spring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/profile.png" alt="Spring Boot"></p><ul><li><p>命令行</p><p>打包后运行项目，切换端口，配置传入命令行参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.profiles.active=dev</span><br></pre></td></tr></table></figure></li><li><p>虚拟机参数</p><p><code>-Dspring.profiles.active=dev</code></p></li></ul><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/vm.png" alt="Spring Boot"></p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot启动会扫描以下位置的<code>application.properties</code>或者<code>application.yml</code>文件作为 Spring Boot的默认配置文件</p><ul><li><p>file: ./config/       file为当前项目目录</p></li><li><p>file: ./</p></li><li><p>classpath: /config/</p></li><li><p>classpath: /</p></li><li><p>以上是按照<strong>优先级从高到低</strong>的顺序，所有位置的文件都会被加载，<strong>高优先</strong><br><strong>级配置</strong>内容会<strong>覆盖低优先级配置</strong>内容；Spring Boot会从这4个位置全部加载主配置文件，<strong>互补配置</strong></p></li><li><p>我们也可以通过配置<code>spring.config.location</code>来改变默认配置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置，指定配置文件和默认加载的主配置文件</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-spring</span>.config.location=D:/application.properties</span><br></pre></td></tr></table></figure><p>  以便运维的时候修改某些配置</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p>Spring Boot支持多种外部配置方式，也可以从以下位置加载配置，优先级从高到底，高优先级的配置覆盖第优先级的配置，所有的配置会形成互补配置</p><p>这些方式优先级如下，可以参阅<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-external-config.html">官方文档</a></p><ol><li><strong>命令行参数</strong></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar -<span class="literal">-server</span>.port=<span class="number">8089</span> -<span class="literal">-server</span>.context<span class="literal">-path</span>=/initcmd</span><br></pre></td></tr></table></figure><ol><li><p>来自 java: comp/env的JNDI属性</p></li><li><p>Java系统属性( System getProperties() )</p></li><li><p>操作系统环境变量</p></li><li><p>RandomValuePropertySource配置的Random.*属性值</p></li><li><p><strong>jar包外部的application-{profile}.properties或application.yml（带spring.profile）配置文件</strong></p><blockquote><p>由jar包外向jar包内进行寻找，优先加载带profile</p></blockquote></li><li><p><strong>jar包内部的application-{profile}-properties或application.yml（spring profile)配置文件</strong></p></li><li><p><strong>jar包外部的application.properties或applcation.yml（不带spring.profile）配置文件</strong></p></li><li><p><strong>jar包内部的application.properties或application.yml（不带spring.profile）配置文件</strong></p></li><li><p>@Configuration注解类上的@PropertySource</p></li><li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p></li></ol><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置依据<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/common-application-properties.html">官方文档</a></p><ul><li><p>Spring Boot启动的时候加载主配置类，开启了自动配置功能<code>@EnableAuto Configuratio</code></p></li><li><p>@EnableAutoConfiguration作用</p><ul><li>利用<code>EnableAutoConfigurationlmportSelector</code>给容器中导入一些组件?<br>可以查看<code>selectImports()</code>方法的内容</li><li>List<String> configurations = getCandidateConfigurations(annotation Metadata, attributes)获取候选的配置</li><li>SpringFactorfesLoader.loadFactoryNames()<br>扫描所有jar包类路径下 META-INF/ spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoconfiguration.class类（类名）对应的值，然后把他们添加在器中</li><li>将类路径下 META-INF/spring.factories里面配置的所有 EnableAutoConfiguration的值加入到了容器中</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line"><span class="attr">...</span></span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br></pre></td></tr></table></figure><p> 每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中，用他们来做自动配置</p><ul><li>每一个自动配置类进行自动配置功能</li></ul><h2 id="8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理"><a href="#8-1-以HttpEncodingAutoConfiguration为例解释自动配置原理" class="headerlink" title="8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理"></a>8.1 以HttpEncodingAutoConfiguration为例解释自动配置原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(</span>&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 已经和Spring Boot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">    <span class="comment">// 只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@Configuration</code>表示这是一个配置类，和之前编写的配置文件一样，也可以给容器中添加组件</p></li><li><p><code>@EnableConfigurationProperties</code>启用指定类ConfigurationProperties功能，将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中，就可以用了</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着，配置文件能配置什么可以参照某个功能对应的这个属性类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</code>从配置文件中获取指定的值和bean的属性进行绑定</p></blockquote><ul><li><p><code>@ConditionalOnWebApplication</code>是Spring底层@Conditional注解，根据不同条件，如果满足指定的条件，整个配置类里面的配置就会生效；</p><p>这个注解是判断当前应用是否是web应用，如果是，当前配置类生效</p></li><li><p><code>@ConditionalOnClass</code>判断当前项目有没有指定类CharacterEncodingFilter.class</p></li><li><p><code>CharacterEncodingFilter.class</code>是SpringMVC中进行乱码解决的过滤器，以前都是配置在web.xml中的</p></li><li><p><code>@ConditionalOnProperty</code>判断配置文件中是否存在某个配置spring.http.encoding.enabled，如果不存在，判断也是成立的</p><p>即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的</p></li></ul><p>一句话解释这个配置类，根据当前不同的条件，决定这个配置类是否生效？</p><p>一旦这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的</p><h3 id="8-2-Spring-Boot精髓"><a href="#8-2-Spring-Boot精髓" class="headerlink" title="8.2 Spring Boot精髓"></a>8.2 Spring Boot精髓</h3><ul><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有Spring Boot默认写好的自动配置类</li><li>我们再来看这个自动配置类中到底配置了哪些组件（只要有我们要用的组件，我们就不需要再来配置了，否则，自己配置添加，不满意也可以改）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值</li></ul><p><code>xxxAutoConfiguration</code>：自动配置类，给容器中添加组件</p><p><code>xxxproperties</code>：封装配置文件中相关属性</p><h3 id="8-3-细节"><a href="#8-3-细节" class="headerlink" title="8.3 细节"></a>8.3 细节</h3><p>在HttpEncodingAutoConfiguration配置里中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">// 给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">    CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">    filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">    filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法上也有一个注解，判断容器中是否配置了这个组件，如果没有则生效，进行配置</p></blockquote><ul><li><p><code>@Conditional</code>派生注解</p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置文件里面的所有内容才生效</p></li></ul><div class="table-container"><table><thead><tr><th>Conditional扩属注解</th><th>作用(判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>Conditionalon NotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table></div><blockquote><p>虽然自动配置类很多，但大多都需要一定条件才会生效</p><p>之前解析过程中，虽然加载了很多自动配置类，但不是所有的都生效</p></blockquote><ul><li>现在重要的是我们怎么知道哪些配置类生效了</li></ul><p>我们可以启用debug属性</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启Spring的debug，默认false</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>运行后观察控制台输出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO<span class="literal">-CONFIGURATION</span> REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required <span class="class"><span class="keyword">class</span> </span></span><br><span class="line"><span class="class">'<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>';</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">unwanted</span> <span class="title">class</span> (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">      - @<span class="title">ConditionalOnWebApplication</span> (<span class="title">required</span>) <span class="title">found</span> <span class="title">StandardServletEnvironment</span> </span></span><br><span class="line"><span class="class">(<span class="title">OnWebApplicationCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Negative</span> <span class="title">matches</span>:</span></span><br><span class="line"><span class="class">-----------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">ActiveMQAutoConfiguration</span>:</span></span><br><span class="line"><span class="class">      <span class="title">Did</span> <span class="title">not</span> <span class="title">match</span>:</span></span><br><span class="line"><span class="class">         - @<span class="title">ConditionalOnClass</span> <span class="title">did</span> <span class="title">not</span> <span class="title">find</span> <span class="title">required</span> </span></span><br><span class="line"><span class="class"><span class="title">classes</span> '<span class="title">javax</span>.<span class="title">jms</span>.<span class="title">ConnectionFactory</span>', </span></span><br><span class="line"><span class="class">'<span class="title">org</span>.<span class="title">apache</span>.<span class="title">activemq</span>.<span class="title">ActiveMQConnectionFactory</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">   ...</span></span><br><span class="line"><span class="class"><span class="title">Unconditional</span> <span class="title">classes</span>:</span></span><br><span class="line"><span class="class">----------------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">boot</span>.<span class="title">autoconfigure</span>.<span class="title">context</span>.<span class="title">ConfigurationPropertiesAutoConfiguration</span></span></span><br><span class="line"><span class="class">    ...</span></span><br></pre></td></tr></table></figure><ul><li>Positive matches：自动配置类启用的<br>Negative matches：没有启动，没有匹配成功的自动配置类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;#1、配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、配置文件&quot;&gt;&lt;/a&gt;1、配置文件&lt;/h2&gt;&lt;h3 id=&quot;1-1-文件类型&quot;&gt;&lt;a href=&quot;#1-1-文件类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 文件类型&quot;&gt;&lt;/a&gt;1.1 文件类型&lt;/h3&gt;&lt;p&gt;Spring Boot使用一个全局配置文件，配置文件名是固定的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门，源码解析</title>
    <link href="https://mysticalguest.github.io/2020/08/07/Spring/SpringBootStart/"/>
    <id>https://mysticalguest.github.io/2020/08/07/Spring/SpringBootStart/</id>
    <published>2020-08-07T01:38:45.171Z</published>
    <updated>2020-08-27T16:01:31.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Spring-Boot简介"><a href="#1、Spring-Boot简介" class="headerlink" title="1、Spring Boot简介"></a>1、Spring Boot简介</h2><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><a id="more"></a><p>J2EE开发的一站式解决方案</p><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，<a href="https://martinfowler.com/">Martin Fowler</a>微服务<a href="https://martinfowler.com/microservices/">论文</a></p><p>微服务：架构风格（服务微化）</p><p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元</p><p>一个应用应该是一组小型服务：可以通过HTTP的方式进行互通</p><p>单体应用</p><p>环境约束（我的开发环境）：</p><ul><li>JDK8：java version “1.8.0_131”</li><li>Maven3.x：Apache Maven 3.6.3</li><li>IntelliJ IDEA2019.2</li><li>SpringBoot 1.5.9.RELEASE</li></ul><h2 id="3、Spring-Boot-HelloWorld"><a href="#3、Spring-Boot-HelloWorld" class="headerlink" title="3、Spring Boot HelloWorld"></a>3、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送请求，服务器接收请求并处理，响应”Hello World”字符串</p><h3 id="3-1-创建一个Maven工程"><a href="#3-1-创建一个Maven工程" class="headerlink" title="3.1 创建一个Maven工程"></a>3.1 创建一个Maven工程</h3><h3 id="3-2-导入依赖Spring-Boot相关的依赖"><a href="#3-2-导入依赖Spring-Boot相关的依赖" class="headerlink" title="3.2 导入依赖Spring Boot相关的依赖"></a>3.2 导入依赖Spring Boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-编写一个主程序"><a href="#3-3-编写一个主程序" class="headerlink" title="3.3 编写一个主程序"></a>3.3 编写一个主程序</h3><p>启动Spring Boot应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"Hello %s!"</span>, name);</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写相关的Controller、Service层"><a href="#3-4-编写相关的Controller、Service层" class="headerlink" title="3.4 编写相关的Controller、Service层"></a>3.4 编写相关的Controller、Service层</h3><h3 id="3-5-运行主程序测试"><a href="#3-5-运行主程序测试" class="headerlink" title="3.5 运行主程序测试"></a>3.5 运行主程序测试</h3><h3 id="3-6-简化部署"><a href="#3-6-简化部署" class="headerlink" title="3.6 简化部署"></a>3.6 简化部署</h3><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/getting-started-first-application.html#getting-started-first-application-executable-jar">Spring官方部署文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件可以将应用打包成一个可执行的jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要运行该应用程序，请使用java -jar命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> java <span class="literal">-jar</span> target/myproject<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::  (v1.5.9.RELEASE)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">....... . . . (log output here)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">........ Started Example in 2.536 seconds (JVM running for 2.864)</span></span><br></pre></td></tr></table></figure><h2 id="4、Hello-World探究"><a href="#4、Hello-World探究" class="headerlink" title="4、Hello World探究"></a>4、Hello World探究</h2><h3 id="4-1-POM文件"><a href="#4-1-POM文件" class="headerlink" title="4.1 POM文件"></a>4.1 POM文件</h3><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ctrl+鼠标左键查看底层源码，上面这个父项目还依赖于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现真正管理Spring Boot应用里面的所有依赖版本</p><p>Spring Boot的版本仲裁中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Dependency versions --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.14.5<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">maven-war-plugin.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">maven-war-plugin.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">versions-maven-plugin.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">versions-maven-plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以后我们导入依赖默认是不需要写版本（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h3 id="4-2-导入的依赖"><a href="#4-2-导入的依赖" class="headerlink" title="4.2 导入的依赖"></a>4.2 导入的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-<strong>web</strong></p><ul><li>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件</li><li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter">更多启动器</a></li><li>Spring Boot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</li></ul><h3 id="4-3-主程序类，主入口类"><a href="#4-3-主程序类，主入口类" class="headerlink" title="4.3 主程序类，主入口类"></a>4.3 主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这个类的main方法来启动Spring Boot应用</p><p>点击这个注解（annotation）查看源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"exclude"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"excludeName"</span></span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">// spring boot定义的注解</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot的配置类，标注在某个类上，表示这是一个Spring Boot的配置类</p><p>点击这个注解（annotation）查看源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// spring定义的注解</span></span><br></pre></td></tr></table></figure><blockquote><p>配置类上来标注这个注解</p><p>配置类—-配置文件：配置类也是容器中的一个组件：<code>@Commponent</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br></pre></td></tr></table></figure><blockquote><p>开启自动配置功能</p><p>以前我们需要配置的东西，Spring Boot帮我们自动配置，这个注解告诉Spring Boot开启自动配置功能，这样自动配置才能生效</p></blockquote><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br></pre></td></tr></table></figure><blockquote><p>自动配置包</p></blockquote><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>Spring的底层注解<code>@import</code>，给容器中导入一个组件</p><p>导入的组件由<code>Registrar.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// metadata是注解的原信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry </span></span></span><br><span class="line"><span class="function"><span class="params">registry)</span> </span>&#123;</span><br><span class="line">        AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(</span><br><span class="line">metadata)).getPackageName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>将主配置类（<code>@SpringBootApplication</code>标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</strong></p></blockquote><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/Registrar.PNG" alt="Spring Boot"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>给容器中导入组件，这是导入那些组件的选择器</p><p>点击这个注解（annotation）查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationImportSelector</span> <span class="keyword">extends</span> <span class="title">AutoConfigurationImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnableAutoConfigurationImportSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().equals(</span><br><span class="line">EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">        ) ? (<span class="title">Boolean</span>)<span class="title">this</span>.<span class="title">getEnvironment</span>().<span class="title">getProperty</span>(</span></span><br><span class="line">"spring.boot.enableautoconfiguration", Boolean.class, true</span><br><span class="line">        ) : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再查看其父类的源码</p><p>里面有一个<code>selectImports</code>方法，将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中</p><p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）：就是给容器中这个场景所需要的所有组件，并配置好这些组件</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Spring/AutoConfiguration.PNG" alt="Spring Boot"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作</p><p><code>selectImports</code>会调用该类里的<code>getCandidateConfigurations</code>方法</p><p><code>getCandidateConfigurations</code>又调用了<code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)</code></p><p>Spring Boot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作</p><p>以前我们需要自己配置的东西，自动配置类帮我们</p><p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-1.5.9.RELEASE.jar</code></p><h2 id="5、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#5、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="5、使用Spring Initializer快速创建Spring Boot项目"></a>5、使用Spring Initializer快速创建Spring Boot项目</h2><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块，向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目：</p><ul><li><p>主程序已经生成好了，我们只需要添加自己的逻辑即可</p></li><li><p>resources文件夹中的目录结构</p><ul><li>static：保存所有的静态资源：js, css, images</li><li>templates：保存所以的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面），可以使用官方推荐模板引擎（Freemarker, Thymeleaf）</li><li>application.properties：Spring Boot应用的配置文件，虽然Spring Boot有默认配置，但我们可以修改一些默认配置</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Spring-Boot简介&quot;&gt;&lt;a href=&quot;#1、Spring-Boot简介&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Boot简介&quot;&gt;&lt;/a&gt;1、Spring Boot简介&lt;/h2&gt;&lt;p&gt;简化Spring应用开发的一个框架&lt;/p&gt;
&lt;p&gt;整个Spring技术栈的一个大整合&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://mysticalguest.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://mysticalguest.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>处理机调度与进程死锁</title>
    <link href="https://mysticalguest.github.io/2020/07/17/OS/DispatchandDeadlock/"/>
    <id>https://mysticalguest.github.io/2020/07/17/OS/DispatchandDeadlock/</id>
    <published>2020-07-17T10:00:00.000Z</published>
    <updated>2020-07-21T11:37:42.207Z</updated>
    
    <content type="html"><![CDATA[<p>处理机调度与进程死锁笔记整理</p><a id="more"></a><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><h2 id="1-调度类型"><a href="#1-调度类型" class="headerlink" title="1 调度类型"></a>1 调度类型</h2><p><img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/Course/OS/DispatchDeadlock/DispatchType.PNG" alt=""></p><h3 id="1-1-三类调度"><a href="#1-1-三类调度" class="headerlink" title="1.1 三类调度"></a>1.1 三类调度</h3><ul><li><p>长程调度——作业调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>决定哪个作业可以进入系统</p></li><li><p>中程调度——内存调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>决定将哪个（些）进程调入内存</p><p>​        <i class="fa fa-paper-plane" aria-hidden="true"></i>  换入：取决于管理系统并发度的需求；</p><p>​        <i class="fa fa-paper-plane" aria-hidden="true"></i>  换出：进程的存储需求。</p></li><li><p>短程调度——进程调度</p></li></ul><p>决定哪个进程将获得CPU</p><ul><li>长程调度程序执行频率较低；</li><li>中程调度程序执行频率稍高；</li><li>短程调度程序执行频率最高。</li></ul><h3 id="1-2-调度的时机和策略"><a href="#1-2-调度的时机和策略" class="headerlink" title="1.2 调度的时机和策略"></a>1.2 调度的时机和策略</h3><ul><li><p>何时调度？</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>有任务终止时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>处理器的空闲时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>终端用户登录时</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>有更紧急任务到达时</p></li><li><p>调度哪个？</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>先来先服务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>优先级</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>实时性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>服务时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>I/O需求</p></li></ul><h3 id="1-3-调度算法的评价准则"><a href="#1-3-调度算法的评价准则" class="headerlink" title="1.3 调度算法的评价准则"></a>1.3 调度算法的评价准则</h3><h4 id="1-3-1-面向用户，与性能相关"><a href="#1-3-1-面向用户，与性能相关" class="headerlink" title="1.3.1 面向用户，与性能相关"></a>1.3.1 面向用户，与性能相关</h4><ul><li><p>周转时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>从提交到完成之间的时间间隔</p></li><li><p>响应时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>从提交到开始接收响应之间的时间间隔</p></li><li><p>截止期限</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程完成的最后期限</p></li></ul><h4 id="1-3-2-面向用户，与性能无关"><a href="#1-3-2-面向用户，与性能无关" class="headerlink" title="1.3.2 面向用户，与性能无关"></a>1.3.2 面向用户，与性能无关</h4><ul><li><p>可预测性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>希望提供给用户的服务能够随着时间的流逝展现给用户一贯相同的特性，而与系统执行的其他工作无关。</p></li></ul><h4 id="1-3-3-面向系统，与性能相关"><a href="#1-3-3-面向系统，与性能相关" class="headerlink" title="1.3.3 面向系统，与性能相关"></a>1.3.3 面向系统，与性能相关</h4><ul><li><p>吞吐量</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>单位时间内完成的进程数目</p></li><li><p>处理器利用率</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>处理器处于忙的状态的时间百分比</p></li></ul><h4 id="1-3-4-面向系统，与性能无关"><a href="#1-3-4-面向系统，与性能无关" class="headerlink" title="1.3.4 面向系统，与性能无关"></a>1.3.4 面向系统，与性能无关</h4><ul><li><p>公平性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程被公平对待</p></li><li><p>强制优先级</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>进程被指定优先级，调度策略优先选择高优先级进程</p></li><li><p>平衡资源</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>保持系统中所有资源处于繁忙状态，较少适用紧缺资源的进程应该受到照顾</p></li></ul><h3 id="1-4-调度模式"><a href="#1-4-调度模式" class="headerlink" title="1.4 调度模式"></a>1.4 调度模式</h3><ul><li>抢占（剥夺）——对有实时性或响应时间要求的任务，必须采用抢占式调度</li><li>非抢占（非剥夺）——对没有响应时间要求的任务，可采用非抢占式调度</li></ul><h3 id="1-5-优先级的使用"><a href="#1-5-优先级的使用" class="headerlink" title="1.5 优先级的使用"></a>1.5 优先级的使用</h3><ul><li><p>每个进程被指定一个优先级，调度程序总是选择具有较高优先级的进程。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>纯粹的优先级调度方案可能会导致第优先级进程长时间处于饥饿状态</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>一个进程的优先级可随着它的时间或执行历史而变化</p></li></ul><h2 id="2-调度算法"><a href="#2-调度算法" class="headerlink" title="2 调度算法"></a>2 调度算法</h2><h3 id="2-1-几种常用调度算法的比较"><a href="#2-1-几种常用调度算法的比较" class="headerlink" title="2.1 几种常用调度算法的比较"></a>2.1 几种常用调度算法的比较</h3><div class="table-container"><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">FCFS(先来先服务)</th><th style="text-align:center">RR(轮转)</th><th style="text-align:center">SPN(最短进程优先)</th><th style="text-align:center">SRT(最短剩余时间)</th><th style="text-align:center">HRRN(最高响应比优先)</th><th style="text-align:center">优先级高者优先</th><th style="text-align:center">反馈法多队里</th></tr></thead><tbody><tr><td style="text-align:center">选择依据</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><script type="math/tex">max((w+s)/s)</script></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">调度方式</td><td style="text-align:center">非抢占式</td><td style="text-align:center">抢占式（按时间片）</td><td style="text-align:center">非抢占式</td><td style="text-align:center">抢占式（进程到达时）</td><td style="text-align:center">非抢占式</td><td style="text-align:center"></td><td style="text-align:center">抢占式（时间片）</td></tr><tr><td style="text-align:center">响应时间</td><td style="text-align:center">可能很高</td><td style="text-align:center">对于短进程提供良好的响应时间</td><td style="text-align:center"></td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center"></td><td style="text-align:center">不突出</td></tr><tr><td style="text-align:center">开销</td><td style="text-align:center">最小</td><td style="text-align:center">低</td><td style="text-align:center">可能高</td><td style="text-align:center">可能高</td><td style="text-align:center">可能高</td><td style="text-align:center"></td><td style="text-align:center">可能高</td></tr><tr><td style="text-align:center">对进程的作用</td><td style="text-align:center">不利于短作业（进程）和I/O繁忙作业</td><td style="text-align:center">公平对待</td><td style="text-align:center">不利于长作业（进程）</td><td style="text-align:center">不利于长作业（进程）</td><td style="text-align:center">较好均衡个</td><td style="text-align:center"></td><td style="text-align:center">偏爱I/O繁忙型进程</td></tr><tr><td style="text-align:center">“饥饿”问题</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td><td style="text-align:center">无</td><td style="text-align:center"></td><td style="text-align:center">可能</td></tr></tbody></table></div><h3 id="2-2-补充"><a href="#2-2-补充" class="headerlink" title="2.2 补充"></a>2.2 补充</h3><h4 id="2-2-1-HRRN"><a href="#2-2-1-HRRN" class="headerlink" title="2.2.1 HRRN"></a>2.2.1 HRRN</h4><ul><li><p>公式：<script type="math/tex">R=(w+s)/s</script>，其中：</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>R：响应比</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>w：等待处理器的时间</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>预计的服务时间</p></li></ul><h4 id="2-2-2-优先级高者优先"><a href="#2-2-2-优先级高者优先" class="headerlink" title="2.2.2 优先级高者优先"></a>2.2.2 优先级高者优先</h4><ul><li>约定：数小代表优先级高</li></ul><h4 id="2-2-3-传统的UNIX调度"><a href="#2-2-3-传统的UNIX调度" class="headerlink" title="2.2.3 传统的UNIX调度"></a>2.2.3 传统的UNIX调度</h4><ul><li><p>多级反馈</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>每个优先级队列中使用轮转方法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>使用1秒抢占方式</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>每秒都会重新计算每个进程的优先级</p></li></ul><h3 id="2-3-线程调度"><a href="#2-3-线程调度" class="headerlink" title="2.3 线程调度"></a>2.3 线程调度</h3><ul><li><p>负载分配</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统维护一个就绪线程的全局队列，每个处理器只要空闲就从队列中选择一个线程。</p></li><li><p>组调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>一组相关的线程基于一对一的原则，同时调度到一组处理器上运行。</p></li><li><p>专用处理器调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>组调度的一种极端形式，在一个应用程序执行期间，把一组处理器专门分配给这个应用程序。</p></li><li><p>动态调度</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>某些应用程序允许动态地改变进程中线程数目，需要动态调度。操作系统负责分配处理器给作业，作业自行调度。</p></li></ul><h2 id="3-多机系统与实时系统调度"><a href="#3-多机系统与实时系统调度" class="headerlink" title="3 多机系统与实时系统调度"></a>3 多机系统与实时系统调度</h2><h3 id="3-1实时调度"><a href="#3-1实时调度" class="headerlink" title="3.1实时调度"></a>3.1实时调度</h3><ul><li><p>实时计算</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统的正确性不仅取决于计算的逻辑结果，还依赖于产生结果的时间。</p></li><li><p>实时任务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>硬实时任务、软实时任务</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>周期性任务、非周期性任务</p></li><li><p>实时系统应用的例子</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>目前：实验控制、过程控制、机器人、空中交通管制、电信、军事指挥与控制系统。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>下一代：自动驾驶汽车、具有弹性关节的机器人控制器、智能化生产中系统查找、空间站和海底勘探。</p></li></ul><h3 id="3-2-实时操作系统的特点"><a href="#3-2-实时操作系统的特点" class="headerlink" title="3.2 实时操作系统的特点"></a>3.2 实时操作系统的特点</h3><ul><li><p>可确定性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>按照固定的、预先确定的时间或时间间隔执行操作。</p></li><li><p>可响应性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>为中断提供服务时间。</p></li><li><p>用户控制</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>允许用户细粒度地控制任务优先级，指定一些特性等。</p></li><li><p>可靠性</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>性能的损失或降低可能产生灾难性的后果。</p></li><li><p>故障弱化操作</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>系统在故障时尽可能多地保存其性能和数据的能力。</p></li></ul><h3 id="3-3-实时系统调度的特征"><a href="#3-3-实时系统调度的特征" class="headerlink" title="3.3 实时系统调度的特征"></a>3.3 实时系统调度的特征</h3><ul><li>快速的进程或线程切换。</li><li>体积小（只具备最小限度的功能）。</li><li>迅速响应外部中断的能力。</li><li>通过诸多信号量、信号和时间之类的进程间通信工具，实现多任务处理。</li><li>使用特殊的顺序文件，可以快速存储数据。</li><li>基于优先级的抢占式调度。</li><li>最小化禁止中断的时间间隔。</li><li>用于使任务延迟一段固定的时间或暂停/恢复任务的原语。</li><li>特别的警报和超时设定。</li></ul><h3 id="3-4-实时系统调度算法"><a href="#3-4-实时系统调度算法" class="headerlink" title="3.4 实时系统调度算法"></a>3.4 实时系统调度算法</h3><ul><li><p>静态表法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>执行关于可行调度的静态分析。分析的结果是一个调度，它用于确定在运行时一个任务何时必须开始执行。</p></li><li><p>静态优先级抢占法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>执行一个静态分析，但是没有制定调度，通过给任务制定优先级，使用传统的基于优先级的抢占式调度。</p></li><li><p>基于动态规划调度法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>在运行时动态地确定可行性，可行性分析的结果是一个调度或规划，可用于确定何时分派这个任务。</p></li><li><p>动态尽力调度法</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>不执行可行性分析。系统试图满足所有的最后期限，并终止任何已经开始运行但错过最后期限的进程。</p></li></ul><h3 id="3-5-截止时间调度"><a href="#3-5-截止时间调度" class="headerlink" title="3.5 截止时间调度"></a>3.5 截止时间调度</h3><ul><li><p>实时应用程序通常并不关注绝对速度，它关注的是在最有价值的时间完成（或启动）任务。</p></li><li><p>截止时间调度：最早最后截止时间优先。</p></li><li><p>最后期限</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>开始截止时间：任务必须开始的时间。</p><p><i class="fa fa-angle-double-right" aria-hidden="true"></i>完成截止时间：任务必须完成的时间。</p></li></ul><h3 id="3-6-优先级反转"><a href="#3-6-优先级反转" class="headerlink" title="3.6 优先级反转"></a>3.6 优先级反转</h3><ul><li>在任何优先级调度方案中，系统应该不停地执行具有最高优先级的任务。当系统内的环境迫使一个较高优先级的任务去等待一个较低优先级的任务时，优先级反转就会发生。</li><li>优先级：<script type="math/tex">T_1>T_2>T_3</script>，高优先级的<script type="math/tex">T_1</script>被低优先级的<script type="math/tex">T_2</script>占先。</li><li>解决方案：优先级继承。</li></ul><h1 id="进程死锁"><a href="#进程死锁" class="headerlink" title="进程死锁"></a>进程死锁</h1><h2 id="1-死锁存在的条件"><a href="#1-死锁存在的条件" class="headerlink" title="1 死锁存在的条件"></a>1 死锁存在的条件</h2><ul><li>互斥</li><li>无抢占</li><li>保持并等待</li><li>循环等待</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理机调度与进程死锁笔记整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十三 图的应用</title>
    <link href="https://mysticalguest.github.io/2020/07/11/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%89/"/>
    <id>https://mysticalguest.github.io/2020/07/11/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%89/</id>
    <published>2020-07-11T12:23:50.860Z</published>
    <updated>2020-07-21T11:37:42.199Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><p><a href="http://c.biancheng.net/">C语言中文网</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断给定的图G是否是连通图。若连通，则输出该生成树。若不连通，则输出其所有的连通子图（生成森林）</span><br><span class="line">  - 图G分别采用邻接矩阵或邻接表存储表示</span><br><span class="line">  - 实现在该两种存储表示方法下的上述操作</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p>深度优先搜索算法的改进。</p><p>如果一次深度优先搜索没有把所有顶点遍历完，即visited数组有false值，那么就可以证明图不是连通的。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge</span><span class="params">(MGraph G, <span class="keyword">bool</span> *b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The spanning tree or forest of this graph is: "</span>);</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DFS( G, <span class="number">0</span>);    <span class="comment">//从任意一点遍历，这里从下标为0的点开始</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">1</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      DFS( G, v);</span><br><span class="line">      *b = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" | "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">JudgeAdjList</span><span class="params">(ALGraph *g, <span class="keyword">bool</span> *b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The spanning tree or forest of this graph is: "</span>);</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERtEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DFSAdjList(g, <span class="number">0</span>, visited);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" | "</span>);</span><br><span class="line">      DFSAdjList(g, i, visited);</span><br><span class="line">      *b = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无向图G（不带权值）采用邻接表结构，试设计一个算法，求图G中从顶点u到顶点v的最短路径。</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>运用Dijkstra(迪杰斯特拉)算法的思想。</p><p>visit[]：这个数组用来标记结点的访问与否，如果该结点被访问，则为1，如果该结点还没有访问，则为0；</p><p>distance[]：这个数组用来记录当前从v到各个顶点的最短路径长度，算法的核心思想就是通过不断修改这个表实现。</p><p>先遍历直达源顶点的所有顶点，距离记为1，置visit[]已访问；</p><p>后面遍历所有其他未访问的顶点，更新distance[]数组。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    实例</span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  0     2</span><br><span class="line"> &#x2F; \   </span><br><span class="line">3   4</span><br><span class="line">程序将以此图作为输入</span><br></pre></td></tr></table></figure><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(ALGraph G, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;<span class="comment">//求 s 到 t 的最短路径</span></span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> visit[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">int</span> distance[MAX_VERTEX_NUM];        <span class="comment">//从 s 到各点的距离</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    distance[i]=INFINITY;</span><br><span class="line">    visit[i]=<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  distance[s]=<span class="number">0</span>;</span><br><span class="line">  visit[s]=<span class="number">1</span>;</span><br><span class="line">  ArcNode *p=G.vertices[s].firstarc;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(p)&#123;   <span class="comment">//先把距离源点距离最近的顶点都遍历完</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[p-&gt;adjvex])&#123;</span><br><span class="line">      distance[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">      visit[p-&gt;adjvex]=<span class="number">1</span>;        <span class="comment">//当前顶点已访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;      <span class="comment">//再求其他顶点</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[G.vertices[i].data])&#123;</span><br><span class="line">      p=G.vertices[i].firstarc;   <span class="comment">//未访问的节点</span></span><br><span class="line">      <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(distance[p-&gt;adjvex]&lt;INFINITY)&#123;</span><br><span class="line">          distance[G.vertices[i].data]=distance[p-&gt;adjvex]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无向图G（不带权值）采用邻接表表示，试设计一个算法，输出从顶点Vi到顶点Vj的所有简单路径。</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>利用递归算法，从起始点出发，分别递归遍历它的所有顶点，将遍历过的顶点访问数组置false，并将节点记录进path数组，当遇到目标加点将path数组中顶点全部输出，即为简单路径。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    实例</span><br><span class="line">     0</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  1     2</span><br><span class="line">   \   &#x2F;</span><br><span class="line">     3</span><br><span class="line">程序将以此图作为输入</span><br></pre></td></tr></table></figure><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> path[MAX_VERTEX_NUM];</span><br><span class="line">path[<span class="number">0</span>]=start;     <span class="comment">//记录源点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findAllSimplePath</span><span class="params">(ALGraph G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> path[], <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  ArcNode *p;</span><br><span class="line">  <span class="keyword">int</span> j, n;</span><br><span class="line">  visited[start]=<span class="number">1</span>;  <span class="comment">// 记录已近访问过这个顶点</span></span><br><span class="line">  p=G.vertices[start].firstarc;</span><br><span class="line">  <span class="keyword">while</span> (p)&#123;</span><br><span class="line">    n=p-&gt;adjvex;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="built_in">end</span>)&#123;   <span class="comment">//找到一个路径</span></span><br><span class="line">      path[i+<span class="number">1</span>] = <span class="built_in">end</span>;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-3d"</span>, path[j]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!visited[n])&#123;   <span class="comment">//改点未被遍历</span></span><br><span class="line">      path[i+<span class="number">1</span>]=n;<span class="comment">//存入路径</span></span><br><span class="line">      findAllSimplePath(G, n, <span class="built_in">end</span>, path, i+<span class="number">1</span>); <span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task3.PNG" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图G采用邻接表表示，试设计一个算法，求无向连通图G中距离顶点v最远的一个顶点。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>同题目2的算法思想，既然用Dijkstra算法求出了所有一个点到其他所有顶点的路径，那么取distance数组中的最大值即为最远顶点。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(ALGraph G, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> visit[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">int</span> distance[MAX_VERTEX_NUM];        <span class="comment">//从 s 到各点的距离</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    distance[i]=INFINITY;</span><br><span class="line">    visit[i]=<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  distance[s]=<span class="number">0</span>;</span><br><span class="line">  visit[s]=<span class="number">1</span>;</span><br><span class="line">  ArcNode *p=G.vertices[s].firstarc;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(p)&#123;   <span class="comment">//先把距离源点距离最近的顶点都遍历完</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[p-&gt;adjvex])&#123;</span><br><span class="line">      distance[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">      visit[p-&gt;adjvex]=<span class="number">1</span>;        <span class="comment">//当前顶点已访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.vexnum; i++)&#123;      <span class="comment">//再求其他顶点</span></span><br><span class="line">    <span class="keyword">if</span>(!visit[G.vertices[i].data])&#123;</span><br><span class="line">      p=G.vertices[i].firstarc;   <span class="comment">//未访问的节点</span></span><br><span class="line">      <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(distance[p-&gt;adjvex]&lt;INFINITY)&#123;</span><br><span class="line">          distance[G.vertices[i].data]=distance[p-&gt;adjvex]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">0</span>;    <span class="comment">//最远顶点的位置</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(distance[<span class="built_in">max</span>]&lt;distance[i])</span><br><span class="line">      <span class="built_in">max</span>=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS13/practice13_task4.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/&quot;&gt;C语言中文网&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十二 图的存储结构</title>
    <link href="https://mysticalguest.github.io/2020/07/07/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%BA%8C/"/>
    <id>https://mysticalguest.github.io/2020/07/07/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%BA%8C/</id>
    <published>2020-07-07T09:01:10.649Z</published>
    <updated>2020-07-21T11:37:42.193Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><hr><a id="more"></a><hr><h1 id="1-图的定义"><a href="#1-图的定义" class="headerlink" title="1.图的定义"></a>1.图的定义</h1><blockquote><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V, E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p></blockquote><p>对于图的定义，需要注意的几个地方：</p><ul><li>线性表中把数据元素叫元素，树中将数据元素叫结点，图中将数据元素称之为顶点（Vertex）。</li><li>线性表中可以没有数据元素，称之为空表。树中可以没有结点，叫做空树。但在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调顶点集合V有穷非空。</li><li>线性表中，相邻的元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li></ul><h2 id="1-1-各种图定义"><a href="#1-1-各种图定义" class="headerlink" title="1.1 各种图定义"></a>1.1 各种图定义</h2><ul><li>无向边：若顶点<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>之间的边没有方向，则称这条边为无向边（Edge），用无序偶对<script type="math/tex">(v_i, v_j)</script>来表示。</li><li>无向图：图中任意两顶点之间的边都是无向边。</li><li>有向图：若从顶点<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>之间的边有方向，则称这条边为有向边（Edge），也称为弧（Arc）。用有序偶<script type="math/tex"><v_1, v_j></script>来表示，<script type="math/tex">v_i</script>称为弧尾（Tail），<script type="math/tex">v_j</script>称为弧头（Head）。</li><li>有向图：图中任意两个顶点之间的边都是有向边。</li><li>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。即不存在自环和重复边。</li><li>无向完全图：在无向图中，如果任意两顶点之间都存在边。含有n个顶点的无向完全图有<script type="math/tex">\frac{n*(n-1)}{2}</script>条边。</li><li>有向完全图：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧。含有n个顶点的有向完全图有<script type="math/tex">n*(n-1)</script>条边。</li><li>有很少条边或弧的图称为稀疏图反之称之为稠密图。</li><li>有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做权（Weight）。这种带权的图通常称为网（Network）。</li><li>假设有两个图<script type="math/tex">G=(V, \{E\})</script>和<script type="math/tex">G^`=(V^`, \{E^`\})</script>，如果<script type="math/tex">V^`\subseteq V</script>且<script type="math/tex">E^`\subseteq E</script>，则称<script type="math/tex">G^`</script>为<script type="math/tex">G</script>的子图（Subgraph）。</li></ul><h2 id="1-2-连通图相关术语"><a href="#1-2-连通图相关术语" class="headerlink" title="1.2 连通图相关术语"></a>1.2 连通图相关术语</h2><blockquote><p>在无向图G中，如果从顶点<script type="math/tex">v</script>到顶点<script type="math/tex">v^`</script>有路径，则称<script type="math/tex">v</script>和<script type="math/tex">v^`</script>是连通的。如果对于图中任意两个顶点<script type="math/tex">v_i、v_j \in E</script>，<script type="math/tex">v_i</script>和<script type="math/tex">v_j</script>都是连通的，则称G是连通图（Connected Graph）。</p></blockquote><ul><li><p>无向图中的极大连通子图称为连通分量。</p></li><li><p>在有向图G中，如果对于每一对<script type="math/tex">v_i、v_j \in V、v_i\ne v_j</script>，从<script type="math/tex">v_i</script>到<script type="math/tex">v_j</script>和从<script type="math/tex">v_j</script>到<script type="math/tex">v_i</script>都存在路径，则称G是强连通图。有向图中的极大强连通子图称做有向图的强连通分量。</p></li><li>一个连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边。</li><li>如果一个有向图恰有一个顶点的入度为0，其余顶点的入度均为1，则是一棵有向树。</li><li>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。</li></ul><h1 id="2-图的存储结构"><a href="#2-图的存储结构" class="headerlink" title="2.图的存储结构"></a>2.图的存储结构</h1><p>图的存储方式一般有两类，用边的集合方式有邻接矩阵，用链式方式有邻接链表、十字链表、邻接多重表、边集数组等。</p><h2 id="2-1-邻接矩阵"><a href="#2-1-邻接矩阵" class="headerlink" title="2.1 邻接矩阵"></a>2.1 邻接矩阵</h2><p>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;           <span class="comment">/* 顶点类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;              <span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100                 <span class="comment">/* 最大顶点树，应由用户定义 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 65535             <span class="comment">/* 用65535来代表无穷大 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  VertexType vexs[MAXVEX];         <span class="comment">/* 顶点表 */</span></span><br><span class="line">  EdgeType arc[MAXVEX][MAXVEX];    <span class="comment">/* 邻接矩阵，可看作表 */</span></span><br><span class="line">  <span class="keyword">int</span> numVertexes, numEdges;       <span class="comment">/* 图中当前的顶点数和边数 */</span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure><p>无向网图的创建代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 建立无向图的邻接矩阵表示 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMGraph</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数： \n"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);     <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)                 <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(&amp;G-&gt;vexs[i]);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;G-&gt;numVertexes; j++)</span><br><span class="line">      G-&gt;arc[i][j] = INFINITY;                      <span class="comment">/* 邻接矩阵初始化 */</span></span><br><span class="line">  <span class="keyword">for</span>(k = <span class="number">0</span>; k&lt;G-&gt;numEdges; k++)&#123;                   <span class="comment">/* 读入numEdges条边，建立邻接矩阵 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入边(vi, vj)上的下标i，下标j和权w: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                    <span class="comment">/* 输入边（vi, vj）上的权w */</span></span><br><span class="line">    G-&gt;arc[i][j]=w;</span><br><span class="line">    G-&gt;arc[j][i]=G-&gt;arc[i][j];                      <span class="comment">/* 因为是无向图，矩阵对称 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以得到，n个顶点和e条边的无向网图的创建，时间复杂度为<script type="math/tex">O(n+n^2+e)</script>，其中对邻接矩阵Garc的初始化耗费了<script type="math/tex">O(n^2)</script>的时间。</p><h2 id="2-2-邻接表"><a href="#2-2-邻接表" class="headerlink" title="2.2 邻接表"></a>2.2 邻接表</h2><p>数组与链表相结合的存储方法称为邻接表（Adjacency List）。图中顶点用一个一维数组存储，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;          <span class="comment">/* 顶点类型由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;             <span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span>          <span class="comment">/* 边表结点 */</span></span><br><span class="line">  <span class="keyword">int</span> adjvex;                     <span class="comment">/* 邻接点域，存储该顶点对应的下标 */</span></span><br><span class="line">  EdgeType weight;                <span class="comment">/* 用于存储权值，对于非网图可以不需要 */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span>          <span class="comment">/* 链域，指向下一个邻接点 */</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>&#123;</span>        <span class="comment">/* 顶点表节点 */</span></span><br><span class="line">  VertexType data;                <span class="comment">/* 顶点域 */</span></span><br><span class="line">  EdgeNode *firstedge;            <span class="comment">/* 边表头指针 */</span></span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  AdjList adjList;</span><br><span class="line">  <span class="keyword">int</span> numVertexes, numEdges;      <span class="comment">/* 图中当前顶点数和边数 */</span></span><br><span class="line">&#125;GraphAdjList;</span><br></pre></td></tr></table></figure><p>无向图的邻接表创建代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 建立图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateALGraph</span><span class="params">(GraphAdjList *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  EdgeNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数： \n"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;numVertexes; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(&amp;G-&gt;adjList[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;adjList[i].firstedge=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;numEdges; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入边(vi, vj)上的顶点序号：\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;next=G-&gt;adjList[i].firstedge;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;adjList[i].firstedge=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;next=G-&gt;adjList[j].firstedge;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;adjList[j].firstedge=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用头插法来建立两顶点间关系，对于n个顶点e条边来说，很容易得出算法的时间复杂度是<script type="math/tex">O(n+e)</script>。</p><h2 id="2-3-图的基本操作"><a href="#2-3-图的基本操作" class="headerlink" title="2.3 图的基本操作"></a>2.3 图的基本操作</h2><ul><li>为实现遍历必须设置访问标志数组，以防止走回路或未访问到。</li><li>图的遍历规律有两种：深度优先遍历DFS和广度优先遍历BFS。可用邻接矩阵和邻接表实现。</li><li>DFS算法是以递归技术为支持，BFS算法是以队列技术为支持。</li></ul><h2 id="2-4-图的应用"><a href="#2-4-图的应用" class="headerlink" title="2.4 图的应用"></a>2.4 图的应用</h2><p>图的遍历算法是图应用的重要基础。<br>求解生成树、最小生成树、连通分量、拓扑排序、关键路径、单源最短路径及所有顶点之间的最短路径的重要算法应用。</p><h1 id="3-建立图的邻接矩阵存储"><a href="#3-建立图的邻接矩阵存储" class="headerlink" title="3.建立图的邻接矩阵存储"></a>3.建立图的邻接矩阵存储</h1><h2 id="3-1-有向图，无向图，有向网，无向网"><a href="#3-1-有向图，无向图，有向网，无向网" class="headerlink" title="3.1 有向图，无向图，有向网，无向网"></a>3.1 有向图，无向图，有向网，无向网</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERtEX_NUM 20                   <span class="comment">//顶点的最大个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRType int                          <span class="comment">//表示顶点之间的关系的变量类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InfoType char                       <span class="comment">//存储弧或者边额外信息的指针变量类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VertexType int                      <span class="comment">//图中顶点的数据类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;DG=<span class="number">1</span>,DN=<span class="number">2</span>,UDG=<span class="number">3</span>,UDN=<span class="number">4</span>&#125;GraphKind;       <span class="comment">//枚举图的 4 种类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VRType adj;                         <span class="comment">//对于无权图，用 1 或 0 表示是否相邻；对于带权图，直接为权值。</span></span><br><span class="line">    InfoType *info;                     <span class="comment">//弧或边额外含有的信息指针</span></span><br><span class="line">&#125;ArcCell, AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VertexType vexs[MAX_VERtEX_NUM];        <span class="comment">//存储图中顶点数据</span></span><br><span class="line">    AdjMatrix arcs;                         <span class="comment">//二维数组，记录顶点之间的关系</span></span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;                      <span class="comment">//记录图的顶点数和弧（边）数</span></span><br><span class="line">    GraphKind kind;                         <span class="comment">//记录图的种类</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据顶点本身数据，判断出顶点在二维数组中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph * G,VertexType v)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//遍历一维数组，找到变量v</span></span><br><span class="line">  <span class="keyword">for</span> (; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (G-&gt;vexs[i]==v) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果找不到，输出提示语句，返回-1</span></span><br><span class="line">  <span class="keyword">if</span> (i&gt;G-&gt;vexnum) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"no such vertex.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造有向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDG</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="comment">//输入图含有的顶点数和弧的个数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="comment">//依次输入顶点本身的数据</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//初始化二维矩阵，全部归0，指针指向NULL</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">        G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在二维数组中添加弧的数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="comment">//输入弧头和弧尾</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter arc head and arc tail: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">    <span class="comment">//确定顶点位置</span></span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="comment">//排除错误数据</span></span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将正确的弧的数据加入二维数组</span></span><br><span class="line">    G-&gt;arcs[n][m].adj=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造无向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDN</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">        G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the subscript i and j on the side (vi, vj):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1,&amp;v2);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=<span class="number">1</span>;</span><br><span class="line">    G-&gt;arcs[m][n].adj=<span class="number">1</span>;      <span class="comment">//无向图的二阶矩阵沿主对角线对称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造有向网，和有向图不同的是二阶矩阵中存储的是权值。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(MGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">      G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">      G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v1,&amp;v2,&amp;w);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造无向网。和无向图唯一的区别就是二阶矩阵中存储的是权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDN</span><span class="params">(MGraph* G)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;(G-&gt;vexnum),&amp;(G-&gt;arcnum));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(G-&gt;vexs[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++) &#123;</span><br><span class="line">      G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">      G-&gt;arcs[i][j].info=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G-&gt;arcnum; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v1,v2,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the two vertices of the edge and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v1,&amp;v2,&amp;w);</span><br><span class="line">    <span class="keyword">int</span> m=LocateVex(G, v1);</span><br><span class="line">    <span class="keyword">int</span> n=LocateVex(G, v2);</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">-1</span> ||n==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"no this vertex\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;arcs[n][m].adj=w;</span><br><span class="line">    G-&gt;arcs[m][n].adj=w;      <span class="comment">//矩阵对称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-邻接矩阵的深度和广度优先搜索"><a href="#4-邻接矩阵的深度和广度优先搜索" class="headerlink" title="4.邻接矩阵的深度和广度优先搜索"></a>4.邻接矩阵的深度和广度优先搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">写出上述建立图的深度和广度优先搜索序列。</span><br><span class="line">         示例</span><br><span class="line">          v1</span><br><span class="line">        /    \</span><br><span class="line">       v2     v3</span><br><span class="line">      /  \   /</span><br><span class="line">    v4 -- v5</span><br><span class="line">程序运行将以这个图作为输入。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>深度优先搜索</p><p>深度优先搜索的过程类似于树的先序遍历</p><p>所谓深度优先搜索，是从图中的一个顶点出发，每次遍历当前访问顶点的临界点，一直到访问的顶点没有未被访问过的临界点为止。然后采用依次回退的方式，查看来的路上每一个顶点是否有其它未被访问的临界点。访问完成后，判断图中的顶点是否已经全部遍历完成，如果没有，以未访问的顶点为起始点，重复上述过程。</p><p>深度优先搜索是一个不断<a href="http://c.biancheng.net/view/3400.html">回溯</a>的过程。</p><p>广度优先搜索</p><p>广度优先搜索类似于树的层次遍历</p><p>从图中的某一顶点出发，遍历每一个顶点时，依次遍历其所有的邻接点，然后再从这些邻接点出发，同样依次访问它们的邻接点。按照此过程，直到图中所有被访问过的顶点的邻接点都被访问到。</p><p>最后还需要做的操作就是查看图中是否存在尚未被访问的顶点，若有，则以该顶点为起始点，重复上述遍历的过程。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;<span class="literal">false</span>,<span class="literal">true</span>&#125;<span class="keyword">bool</span>;               <span class="comment">//定义bool型常量</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAX_VERtEX_NUM];               <span class="comment">//设置全局数组，记录标记顶点是否被访问过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span>                       <span class="comment">//广度优先搜索的实现需要借助队列</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FirstAdjVex</span><span class="params">(MGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  <span class="comment">//查找与数组下标为v的顶点之间有边的顶点，返回它在数组中的下标</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( G.arcs[v][i].adj )&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NextAdjVex</span><span class="params">(MGraph G,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">  <span class="comment">//从前一个访问位置w的下一个位置开始，查找之间有边的顶点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = w+<span class="number">1</span>; i&lt;G.vexnum; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(G.arcs[v][i].adj)&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visitVex</span><span class="params">(MGraph G, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,G.vexs[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(MGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  visited[v] = <span class="literal">true</span>;<span class="comment">//标记为true</span></span><br><span class="line">  visitVex( G,  v); <span class="comment">//访问第v 个顶点</span></span><br><span class="line">  <span class="comment">//从该顶点的第一个边开始，一直到最后一个边，对处于边另一端的顶点调用DFS函数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> w = FirstAdjVex(G,v); w&gt;=<span class="number">0</span>; w = NextAdjVex(G,v,w))&#123;</span><br><span class="line">    <span class="comment">//如果该顶点的标记位false，证明未被访问，调用深度优先搜索函数</span></span><br><span class="line">    <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">      DFS(G,w);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(MGraph G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对于每个标记为false的顶点调用深度优先搜索函数</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="comment">//如果该顶点的标记位为false，则调用深度优先搜索函数</span></span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      DFS( G, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 队列操作 */</span></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue ** Q)</span></span>&#123;</span><br><span class="line">  (*Q)=(Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">  (*Q)-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顶点元素v进队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Queue **Q,VertexType v)</span></span>&#123;</span><br><span class="line">  Queue * element=(Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">  element-&gt;data=v;</span><br><span class="line">  element-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  Queue * temp=(*Q);</span><br><span class="line">  <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    temp=temp-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  temp-&gt;next=element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头元素出队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(Queue **Q,<span class="keyword">int</span> *u)</span></span>&#123;</span><br><span class="line">  (*u)=(*Q)-&gt;next-&gt;data;</span><br><span class="line">  (*Q)-&gt;next=(*Q)-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Q-&gt;next==<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(MGraph G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="comment">//将用做标记的visit数组初始化为false</span></span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; ++v)&#123;</span><br><span class="line">    visited[v] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对于每个标记为false的顶点调用深度优先搜索函数</span></span><br><span class="line">  Queue * Q;</span><br><span class="line">  InitQueue(&amp;Q);</span><br><span class="line">  <span class="keyword">for</span>( v = <span class="number">0</span>; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">      visited[v]=<span class="literal">true</span>;</span><br><span class="line">      visitVex(G, v);</span><br><span class="line">      EnQueue(&amp;Q, G.vexs[v]);</span><br><span class="line">      <span class="keyword">while</span> (!QueueEmpty(Q)) &#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        DeQueue(&amp;Q, &amp;u);</span><br><span class="line">        u=LocateVex(&amp;G, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w=FirstAdjVex(G, u); w&gt;=<span class="number">0</span>; w=NextAdjVex(G, u, w)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">            visited[w]=<span class="literal">true</span>;</span><br><span class="line">            visitVex(G, w);</span><br><span class="line">            EnQueue(&amp;Q, G.vexs[w]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p>以下演示的是图采用邻接矩阵存储结构的有向图和无向图的建立。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS12/practice12_task1.PNG" alt="DS"></p><hr><h1 id="5-建立图的邻接表存储"><a href="#5-建立图的邻接表存储" class="headerlink" title="5.建立图的邻接表存储"></a>5.建立图的邻接表存储</h1><h2 id="5-1-有向图，无向图，有向网，无向网"><a href="#5-1-有向图，无向图，有向网，无向网" class="headerlink" title="5.1 有向图，无向图，有向网，无向网"></a>5.1 有向图，无向图，有向网，无向网</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_VERTEX_NUM 20<span class="comment">//最大顶点个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  VertexType int<span class="comment">//顶点数据的类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  InfoType int<span class="comment">//图中弧或者边包含的信息的类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;DG=<span class="number">1</span>,DN=<span class="number">2</span>,UDG=<span class="number">3</span>,UDN=<span class="number">4</span>&#125;GraphKind;       <span class="comment">//枚举图的 4 种类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;<span class="literal">false</span>,<span class="literal">true</span>&#125;<span class="keyword">bool</span>;               <span class="comment">//定义bool型常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> adjvex;<span class="comment">//邻接点在数组中的位置下标</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span><span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">  <span class="keyword">int</span> weight;  <span class="comment">//权值</span></span><br><span class="line">  InfoType * info;<span class="comment">//信息域</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">  VertexType data;<span class="comment">//顶点的数据域</span></span><br><span class="line">  ArcNode * firstarc;<span class="comment">//指向邻接点的指针</span></span><br><span class="line">&#125;VNode, AdjList[MAX_VERTEX_NUM];<span class="comment">//存储各链表头结点的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  AdjList vertices;<span class="comment">//图中顶点的数组</span></span><br><span class="line">  <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//记录图中顶点数和边或弧数</span></span><br><span class="line">  GraphKind kind;<span class="comment">//记录图的种类</span></span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立有向图图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDGALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the vertex number on the edge (vi, vj): "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立无向图图的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateDNALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the vertex number on the edge (vi, vj): "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[j].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[j].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立有向网的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDGALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立无向网的邻接表结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDNALGraph</span><span class="params">(ALGraph *G)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">  ArcNode *e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the number of vertices and edges: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);  <span class="comment">/* 输入顶点数和边数 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter all vertices: "</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;               <span class="comment">/* 读入顶点信息，建立顶点表 */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G-&gt;vertices[i].data);                  <span class="comment">/* 输入顶点信息 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;                <span class="comment">/* 将边表置为空表 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)&#123;                  <span class="comment">/* 建立边表 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the arc head, arc tail and the weight of this edge: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;w);                       <span class="comment">/* 输入边(vi, vj)上的顶点序号 */</span></span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=j;                                 <span class="comment">/* 邻接序号为j */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    <span class="comment">/* 头插法 */</span></span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[i].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[i].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">    </span><br><span class="line">    e=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));      <span class="comment">/* 向内存申请空间 */</span><span class="comment">/* 生成边表结点 */</span></span><br><span class="line">    e-&gt;adjvex=i;                                 <span class="comment">/* 邻接序号为i */</span></span><br><span class="line">    e-&gt;weight=w;</span><br><span class="line">    e-&gt;nextarc=G-&gt;vertices[j].firstarc;             <span class="comment">/* 将e指针指向当前顶点指向的结点 */</span></span><br><span class="line">    G-&gt;vertices[j].firstarc=e;                   <span class="comment">/* 将当前顶点的指针指向e */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-邻接表的广度和深度优先搜索"><a href="#6-邻接表的广度和深度优先搜索" class="headerlink" title="6.邻接表的广度和深度优先搜索"></a>6.邻接表的广度和深度优先搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">写出上述建立图的深度和广度优先搜索序列。</span><br><span class="line">         示例</span><br><span class="line">          v0</span><br><span class="line">        /    \</span><br><span class="line">       v1 --  v2</span><br><span class="line">程序运行将以这个图作为输入。</span><br></pre></td></tr></table></figure><h2 id="6-1-源代码"><a href="#6-1-源代码" class="headerlink" title="6.1 源代码"></a>6.1 源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(ALGraph *g,<span class="keyword">int</span> i,<span class="keyword">int</span> *visited)</span></span>&#123;</span><br><span class="line">  ArcNode *p;</span><br><span class="line">  visited[i]=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[i].data);</span><br><span class="line">  p=g-&gt;vertices[i].firstarc;</span><br><span class="line">  <span class="keyword">while</span>( p )&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[p-&gt;adjvex])&#123;</span><br><span class="line">      DFS(g,p-&gt;adjvex,visited);</span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;nextarc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraDFS</span><span class="params">(ALGraph *g)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      DFS(g,i,visited);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraBFS</span><span class="params">(ALGraph *g)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line">  Queue *q;</span><br><span class="line">  <span class="keyword">int</span> visited[MAX_VERTEX_NUM];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g-&gt;vexnum; i++)&#123;</span><br><span class="line">    visited[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  InitQueue(&amp;q);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[i].data);</span><br><span class="line">      visited[i]=<span class="number">1</span>;</span><br><span class="line">      EnQueue(&amp;q, i);</span><br><span class="line">      <span class="keyword">while</span>(!QueueEmpty(q))&#123;</span><br><span class="line">        DeQueue(&amp;q,&amp;i);</span><br><span class="line">        ArcNode *p = g-&gt;vertices[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span>( p )&#123;</span><br><span class="line">          <span class="keyword">if</span>(!visited[p-&gt;adjvex])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,g-&gt;vertices[p-&gt;adjvex].data);</span><br><span class="line">            visited[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">            EnQueue(&amp;q,p-&gt;adjvex);</span><br><span class="line">          &#125;</span><br><span class="line">          p=p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-运行截图"><a href="#6-2-运行截图" class="headerlink" title="6.2 运行截图"></a>6.2 运行截图</h2><p>以下演示的是图采用邻接表存储结构的无向图和有向网的建立。</p><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS12/practice12_task2.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构进阶实训十一 树</title>
    <link href="https://mysticalguest.github.io/2020/07/04/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%80/"/>
    <id>https://mysticalguest.github.io/2020/07/04/DS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%AE%AD%E5%8D%81%E4%B8%80/</id>
    <published>2020-07-04T12:39:12.883Z</published>
    <updated>2020-08-27T16:03:33.949Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <em>Data structure advanced training course notes and algorithm exercises</em>    </br>    <em>数据结构进阶实训课程笔记和算法练习</em></p><p><a href="https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining"><strong>Source Code</strong></a></p><p><a href="http://c.biancheng.net/">C语言中文网</a></p><hr><a id="more"></a><hr><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建立树的孩子兄弟表示法存储</span><br></pre></td></tr></table></figure><h2 id="1-1-算法设计思想"><a href="#1-1-算法设计思想" class="headerlink" title="1.1 算法设计思想"></a>1.1 算法设计思想</h2><blockquote><p><strong>孩子兄弟表示法：</strong>任意一棵树，它的节点的第一个孩子如果存在就是唯一的，它的右兄弟存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟</p><p>给定一颗树，可以找到唯一的一颗二叉树与之对应，因此，可以用一颗二叉树来表示一颗树的结构。如图：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">              A                                                                  A</span><br><span class="line">                                                                              &#x2F;</span><br><span class="line">​       &#x2F;      |     \                                                    B</span><br><span class="line">                                                                     &#x2F;        \</span><br><span class="line">​    B        C       D                                           E          C</span><br><span class="line">                                                                     \            \</span><br><span class="line">  &#x2F;    \               |                                             F           D</span><br><span class="line">                                                                                  &#x2F;</span><br><span class="line">E       F             G                                                       G</span><br><span class="line">                                                                              &#x2F;</span><br><span class="line">​                  &#x2F;    |    \                                              H</span><br><span class="line">                                                                              \</span><br><span class="line">​                H     I       J                                               I</span><br><span class="line">                                                                                  \</span><br><span class="line">​                                                                                    J</span><br></pre></td></tr></table></figure><blockquote><p>和二叉树建树的方法相同，递归的思想，先建立左子树，左子树建立完（即遇到结束标志字符’#’），退层建立右子树。</p><p>所以按照将树转化为二叉树，然后输入先序序列来建这棵树。</p></blockquote><h2 id="1-2-源代码"><a href="#1-2-源代码" class="headerlink" title="1.2 源代码"></a>1.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg. ABE#F##C#DGH#I#J#####</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatCSTree</span><span class="params">(CSTree *t)</span></span>&#123;</span><br><span class="line">  ElemType ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">'#'</span>) &#123;</span><br><span class="line">    (*t)=<span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    (*t)=(CSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">    (*t)-&gt;data=ch;</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;firstchild));</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;nextsibling));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-运行情况截图"><a href="#1-3-运行情况截图" class="headerlink" title="1.3 运行情况截图"></a>1.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task1.PNG" alt="DS"></p><hr><hr><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在树的孩子兄弟表示法下，求取树T的高度。</span><br></pre></td></tr></table></figure><h2 id="2-1-算法设计思想"><a href="#2-1-算法设计思想" class="headerlink" title="2.1 算法设计思想"></a>2.1 算法设计思想</h2><blockquote><p>既然我们可以将树转化为孩子兄弟表示法，这种方法用二叉链表的形式实现，那么我们考虑用求二叉树深度的方法来求树的深度。</p><p>区别在于，孩子兄弟表示法中每个节点的右子树是这个节点的兄弟，在原树中并不占深度，所以只需修改算法的求右子树高度的部分即可。</p></blockquote><h2 id="2-2-源代码"><a href="#2-2-源代码" class="headerlink" title="2.2 源代码"></a>2.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg. ABE#F##C#DGH#I#J#####</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = depth(t-&gt;firstchild)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> nd = depth(t-&gt;nextsibling);</span><br><span class="line">    <span class="keyword">return</span> fd&gt;nd? fd:nd;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-运行情况截图"><a href="#2-3-运行情况截图" class="headerlink" title="2.3 运行情况截图"></a>2.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task2.PNG" alt="DS"></p><hr><hr><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树采用孩子兄弟表示法存储。</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">fch</td><td style="text-align:center">data</td><td style="text-align:center">nsib</td><td style="text-align:center">level</td></tr></tbody></table></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">编写算法，将树中所有结点层次值置入每个结点的level域，并要求由根开始逐层输出树中的各条边；</span><br><span class="line">边的输出格式为（ki,kj）</span><br><span class="line">        示例</span><br><span class="line">         A           转化为                A</span><br><span class="line">      &#x2F;  |  \      孩子兄弟表示           &#x2F;</span><br><span class="line">     B   C   D                        B</span><br><span class="line">    &#x2F; \  |                          &#x2F;   \</span><br><span class="line">   E   F G                         E      C</span><br><span class="line">                                    \    &#x2F;  \</span><br><span class="line">                                     F  G    D</span><br></pre></td></tr></table></figure><h2 id="3-1-算法设计思想"><a href="#3-1-算法设计思想" class="headerlink" title="3.1 算法设计思想"></a>3.1 算法设计思想</h2><blockquote><p>要输出树中各边，存在边，即两节点在树中是父子关系</p><p>在孩子兄弟表示法中，就是与这个节点的左孩子节点，和左孩子节点的所有右孩子节点有边，</p><p>所以一个递归打印当前节点和左孩子构成的边，另一个递归打印当前节点与其左孩子的所有右孩子节点所构成的边。</p></blockquote><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">  <span class="keyword">int</span> level;</span><br><span class="line">&#125;CSNode, *CSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg. ABE#F##CG##D###</span></span><br><span class="line">CSTree T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(CSTree t, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;data==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;firstchild, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;firstchild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;nextsibling, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;nextsibling, x);</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatCSTree</span><span class="params">(CSTree *t)</span></span>&#123;</span><br><span class="line">  ElemType ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">'#'</span>) &#123;</span><br><span class="line">    (*t)=<span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    (*t)=(CSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">    (*t)-&gt;data=ch;</span><br><span class="line">    (*t)-&gt;level=layer(T, ch);</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;firstchild));</span><br><span class="line">    CreatCSTree(&amp;((*t)-&gt;nextsibling));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">borderNextSibling</span><span class="params">(CSTree t, CSTree nt)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c%c, "</span>, t-&gt;data, nt-&gt;data);</span><br><span class="line">  <span class="keyword">if</span>(nt-&gt;nextsibling)</span><br><span class="line">    borderNextSibling(t, nt-&gt;nextsibling);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">border</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;firstchild)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c%c, "</span>, t-&gt;data, t-&gt;firstchild-&gt;data);</span><br><span class="line">      <span class="keyword">if</span>(t-&gt;firstchild-&gt;nextsibling)</span><br><span class="line">        borderNextSibling(t, t-&gt;firstchild-&gt;nextsibling);</span><br><span class="line">    &#125;</span><br><span class="line">    border(t-&gt;firstchild);</span><br><span class="line">    border(t-&gt;nextsibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-运行情况截图"><a href="#3-3-运行情况截图" class="headerlink" title="3.3 运行情况截图"></a>3.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task3.PNG" alt="DS"></p><hr><hr><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">已知树采用孩子兄弟表示法表示试编写算法按如下的凹入方式打印树。</span><br><span class="line">        示例</span><br><span class="line">         A                     A</span><br><span class="line">      /  |  \                   B</span><br><span class="line">     B   C   D                   E  </span><br><span class="line">    / \  |                       F</span><br><span class="line">   E   F G                      C</span><br><span class="line">                                 G</span><br><span class="line">                                D</span><br><span class="line">利用树的先序遍历完成；</span><br><span class="line">细化访问visit（）操作：先打空格，在输出结点；打印输出的空格数目和结点所在的层次号有关。</span><br></pre></td></tr></table></figure><h2 id="4-1-算法设计思想"><a href="#4-1-算法设计思想" class="headerlink" title="4.1 算法设计思想"></a>4.1 算法设计思想</h2><blockquote><p>首先不考虑前面的每个元素前面的空格，得到打印序列是ABEFCGD，发现这是孩子兄弟表示法的前序遍历结果，然后利用上面第二题的算法获得每个元素的层号，然后打印空格，就可以实现凹入方式打印这棵树了。</p></blockquote><h2 id="4-2-源代码"><a href="#4-2-源代码" class="headerlink" title="4.2 源代码"></a>4.2 源代码</h2>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CSTree T;  <span class="comment">// 全局变量</span></span><br><span class="line"><span class="comment">// eg. ABE#F##CG##D###</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">layer</span><span class="params">(CSTree t, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;data==x)&#123;</span><br><span class="line">    cot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> cot;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;firstchild, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;firstchild, x)+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(layer(t-&gt;nextsibling, x))&#123;</span><br><span class="line">      cot = layer(t-&gt;nextsibling, x);</span><br><span class="line">      <span class="keyword">return</span> cot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(CSTree t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(t)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;layer(T, t-&gt;data); i++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, t-&gt;data);</span><br><span class="line">    visit(t-&gt;firstchild);</span><br><span class="line">    visit(t-&gt;nextsibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-运行情况截图"><a href="#4-3-运行情况截图" class="headerlink" title="4.3 运行情况截图"></a>4.3 运行情况截图</h2><p align="center">    <img src="https://gitee.com/mysteryguest/ObjectStorage/raw/master/DataStructure/DS11/practice11_task4.PNG" alt="DS"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;
    &lt;em&gt;Data structure advanced training course notes and algorithm exercises&lt;/em&gt;
    &lt;/br&gt;
    &lt;em&gt;数据结构进阶实训课程笔记和算法练习&lt;/em&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/MysticalGuest/DataStructure/tree/master/AdvancedJuniorTraining&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/&quot;&gt;C语言中文网&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://mysticalguest.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C" scheme="https://mysticalguest.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>高级操作系统</title>
    <link href="https://mysticalguest.github.io/2020/07/01/OS/OS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://mysticalguest.github.io/2020/07/01/OS/OS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-01T13:56:54.676Z</published>
    <updated>2020-07-21T11:37:42.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>文件系统</em></strong></p><p>课堂笔记</p><a id="more"></a><h1 id="1-文件与文件系统"><a href="#1-文件与文件系统" class="headerlink" title="1.文件与文件系统"></a>1.文件与文件系统</h1><p><strong>文件</strong>：具有符号名的一组相关元素的集合。</p><p>通常，文件由<strong>记录</strong>组成，记录用于描述对象的属性，记录又可包含若干个<em>数据项</em>。</p><p><strong>文件系统</strong>是OS中管理文件的子系统，它实现文件的<strong>存储、检索、更新、共享和保护</strong>等，并为用户提供方便有效的文件使用和操作方法。</p><h2 id="1-1-文件系统的功能"><a href="#1-1-文件系统的功能" class="headerlink" title="1.1 文件系统的功能"></a>1.1 文件系统的功能</h2><ul><li><p>文件的按名存取</p></li><li><p>文件目录建立和维护</p></li></ul><p>实现逻辑文件到物理文件的转换</p><p>文件存储空间的分配和管理</p><p>提供合适的文件存取方法</p><p>实现文件的共享、保护和保密</p><p>提供一组可供用户使用的文件操作</p><h2 id="1-2-文件系统的优点"><a href="#1-2-文件系统的优点" class="headerlink" title="1.2 文件系统的优点"></a>1.2 文件系统的优点</h2><p><strong>使用方便</strong>：由于文件系统实现了案名存取，因而用户无需关心文件存放的物理位置<br><strong>数据安全</strong>：文件系统可以提供各种保护措施，防止用户对文件有意或无意的破坏<br><strong>接口统一</strong>：用户可以使用统一的接口来操作各种介质上的文件</p><h2 id="1-3-文件系统的分层结构"><a href="#1-3-文件系统的分层结构" class="headerlink" title="1.3 文件系统的分层结构"></a>1.3 文件系统的分层结构</h2><ul><li><p>文件管理—实现文件的逻辑结构，为用户提供各种文件系统调用，及种文件系统调用，及文件访问权限的设置等工作；</p></li><li><p>目录管理—负责查找文件描述符，进而找到需要访问的文件，及进行访问权限检查等工作;</p></li><li><p>外存映射管理—将文件的逻辑地址转换成磁盘的物理地址，即由逻辑块号找到柱面号、磁道号和扇区号，具体的数据传输操作由设备管理实现。</p></li></ul><h2 id="1-4-文件的存取"><a href="#1-4-文件的存取" class="headerlink" title="1.4 文件的存取"></a>1.4 文件的存取</h2><p>存取方法是操作系统为用户程序提供的使用文件的技术和手段。</p><p>存取方法（决定和影响着文件的物理结构）</p><p>​    -顺序存取：若当前存取的记录是Ri，则下次必存取Ri+1</p><p>​    -直接（随机）存取</p><p>​    -索引存取</p><p>​    -按（键）值存取</p><h2 id="1-5-文件的操作"><a href="#1-5-文件的操作" class="headerlink" title="1.5 文件的操作"></a>1.5 文件的操作</h2><p>对记录的操作：检索、插入、删除、修改</p><p>对文件的操作：创建文件、删除文件、打开文件、关闭文件、读文件、写文件</p><h1 id="2-文件目录与文件检索"><a href="#2-文件目录与文件检索" class="headerlink" title="2 文件目录与文件检索"></a>2 文件目录与文件检索</h1><ul><li><p>通过文件目录实现文件的“按名存取”；</p></li><li><p>文件系统基本功能之一是负责文件目录的建立、维护和检索。</p></li><li><p>存放管理文件所需信息的数据结构即<code>文件目录</code>，一个文件的文件目录即其<code>目录项</code>又称<code>文件控制块FCB</code>（File Control Block）：</p><p>-文件和文件控制块是一一对应的；</p><p>-FCB通常包括：文件名、用户名、类型、文件结构、建立日期、存取权限、物理地址等</p></li></ul><h2 id="2-1-文件目录与目录项"><a href="#2-1-文件目录与目录项" class="headerlink" title="2.1 文件目录与目录项"></a>2.1 文件目录与目录项</h2><p><strong>目录文件</strong>：把FCB集中起来，组成文件，保存于外存，这个文件称作目录文件</p><p><strong>文件检索</strong>：给定一个文件名，查找相应的目录文件找到该文件所对应的目录项</p><h3 id="2-1-1-单级目录"><a href="#2-1-1-单级目录" class="headerlink" title="2.1.1 单级目录"></a>2.1.1 单级目录</h3><p>整个系统只有一张目录表，所有文件均登记在该表中，每个文件占有一项。</p><p>目录表存放在存储设备的固定地方，系统启动时调用内存。</p><p>单级目录的优点是非常简单，但：</p><p>​    -不允许重名</p><p>​    -查找速度慢</p><h3 id="2-1-2-二级目录"><a href="#2-1-2-二级目录" class="headerlink" title="2.1.2 二级目录"></a>2.1.2 二级目录</h3><ul><li><p>系统设置唯一一个主文件目录MFD（Master File Directiry）。</p></li><li><p>每个用户设立一个用户文件目录UFD（User）。UFD由该用户所有文件的FCB构成。</p></li><li><p>每个UFD在MFD中占有一个目录项，其中包括用户名和指向该用户文件的指针。</p></li><li><p>优点：</p></li></ul><p>​    -提高了查找速度<br>​    -解决了重名问题</p><h3 id="2-1-3-多级目录"><a href="#2-1-3-多级目录" class="headerlink" title="2.1.3 多级目录"></a>2.1.3 多级目录</h3><ul><li>树形目录结构，最高层是根目录，最低层是数据文件，其他是目录文件。</li></ul><h3 id="2-1-4-层级目录结构"><a href="#2-1-4-层级目录结构" class="headerlink" title="2.1.4 层级目录结构"></a>2.1.4 层级目录结构</h3><ul><li><p>每一级目录即可以包含下一级目录(即目录文件的目录项)，也可以包含具体文件(即具体文件的目录项)，形成层次关系。</p></li><li><p>多级目录结构采用树形结构，是一棵倒向有根树，树根是根目录；从根向下，每个树枝是一个子目录；而树叶是文件。</p></li><li><p>树型多级目录优点：组织灵活、便于命名、检索高效。</p></li></ul><h3 id="2-1-5-UNIX-Linux目录项"><a href="#2-1-5-UNIX-Linux目录项" class="headerlink" title="2.1.5 UNIX/Linux目录项"></a>2.1.5 UNIX/Linux目录项</h3><p>文件名            inode节点号<br>14字节            2字节<br>0号目录项和索引节点</p><p>思考：UNIX使用i-node的好处是什么?</p><p>➢因为按文件名检索目录文件时，只用到了文件名。当找到该文件名时，才需要它的其它描述信息。所以在把存放该目录文件的盘块从外存调入内存进行比较时，应使一个盘块中包含尽量多的文件名，以<code>减少访问磁盘次数，加快文件检索速度</code>。</p><p>例:设物理块大小为512B,某目录下有128个文件。</p><ul><li><p>原来的FCB占64B，则每物理块能容纳<script type="math/tex">512/64=8</script>个FCB，则该目录文件需占<script type="math/tex">128/8= 16</script>块，查找一个文件的平均访盘次数为:<script type="math/tex">(1+16) /2= 8.5</script>次。</p></li><li><p>采用i-node后:文件名部分有16B，i-node部 分有64B，每物理块能容纳<script type="math/tex">512/16=32</script>个文件名部分或<script type="math/tex">512/64=8</script>个i-node，则该目录的文件名部分需占<script type="math/tex">128/32=4</script>块，i-node部分需占<script type="math/tex">128/8=16</script>块。查找一个文件的平均访盘次数为:<script type="math/tex">(1+4)/2+1=3.5</script>次。</p></li></ul><h1 id="3-文件逻辑结构与数据存储"><a href="#3-文件逻辑结构与数据存储" class="headerlink" title="3 文件逻辑结构与数据存储"></a>3 文件逻辑结构与数据存储</h1><ul><li><p>文件的逻辑结构：用户所看到的文件结构</p><p>-记录式文件，文件由若干记录所构成</p><p>-流式文件，文件由若干字符（字节）序列构成</p></li><li><p>文件的物理结构：文件在外存的存放形式</p><p>-顺序文件:逻辑文件中的信息顺序地存放在相邻的物理块中</p><p>-链接文件:文件中的信息不是顺序排列的，它们可以存放在不相邻的物理块中，通过指针连接成链表索引文件:为每一文件建立一个索引表，用以实现逻辑记录和物理块号之间的映射</p></li></ul><h2 id="3-1-文件结构与文件存储"><a href="#3-1-文件结构与文件存储" class="headerlink" title="3.1 文件结构与文件存储"></a>3.1 文件结构与文件存储</h2><p>物理块是存储介质上连续信息所组成的一个区域。</p><p>块是主存储器和辅助存储设备信息交换的物理单位，每次交换一块或整块数。</p><p>决定块的大小要考虑到用户使用方式、数据传输效率和存储设备类型等多种因素。</p><p>不同类型的存储介质，块的大小常常各不相同；同一类型的存储介质，块的大小也可以不同。</p><p>间隙是块之间不记录用户代码信息的空闲区城。</p><h2 id="3-2-文件的逻辑结构"><a href="#3-2-文件的逻辑结构" class="headerlink" title="3.2 文件的逻辑结构"></a>3.2 文件的逻辑结构</h2><p>文件的逻辑结构是用户所见的信息组织方式。</p><p>文件的逻辑结构分为：流式文件，记录式文件。</p><p>流式文件指文件内的数据不再组成记录，只是依次的一串信息(字节)集合。</p><p>流式文件常按字节数来读取所需信息，也可用插入特殊字符作为分界。</p><p>记录式文件由逻辑记录组成，逻辑记录具有特定的逻辑含意。</p><h2 id="3-3-记录组块和分解"><a href="#3-3-记录组块和分解" class="headerlink" title="3.3 记录组块和分解"></a>3.3 记录组块和分解</h2><p>逻辑记录和块的关系：</p><ul><li><p>逻辑记录是按信息的逻辑含义所划分的单位，块是存储介质上连续的存储区域。</p></li><li><p>逻辑记录存放到文件存储器上时，一个记录可能占用一块或多块，也可能多个存放到一个物理块中。</p></li></ul><p>记录组块—将多个记录置于一个存储块中。</p><p>记录分解—从存储块中分解出逻辑记录。</p><p>块因子—一个存储块中包含多少个记录。</p><h2 id="3-4-记录组块"><a href="#3-4-记录组块" class="headerlink" title="3.4 记录组块"></a>3.4 记录组块</h2><h3 id="3-4-1-需考虑的问题："><a href="#3-4-1-需考虑的问题：" class="headerlink" title="3.4.1 需考虑的问题："></a>3.4.1 需考虑的问题：</h3><ul><li>块的长度是固定的还是可变的?</li></ul><p>​    -大多数系统中，块的固定长度的的。</p><ul><li>与记录的平均大小相比，块的相对大小是多少？</li></ul><p>​    -综合考虑顺序访问的频率和访问的局部性潜能，倾向于用大的块，以减少I/O传送时间。</p><h3 id="3-4-2-记录组块的方法"><a href="#3-4-2-记录组块的方法" class="headerlink" title="3.4.2 记录组块的方法"></a>3.4.2 记录组块的方法</h3><p>固定组块</p><p>可变长度跨越式组块</p><p>可变长度非跨越式组块</p><h1 id="4-文件存储器管理"><a href="#4-文件存储器管理" class="headerlink" title="4.文件存储器管理"></a>4.文件存储器管理</h1><h2 id="4-1-空闲盘块管理"><a href="#4-1-空闲盘块管理" class="headerlink" title="4.1 空闲盘块管理"></a>4.1 空闲盘块管理</h2><p>-》磁盘分配表</p><p>-》常用的空闲空间管理技术</p><p>​    -位示图</p><p>​    -空闲块列表</p><p>​    -空闲区链表</p><p>​    -空闲块索引</p><p>-》文件卷</p><p>​    -一组在辅助存储上可寻址的扇区的集合，操作系统或应用程序用卷来存储数据。一个卷中的扇区在物理上并不需要是连续的，只需要对操作系统或应用程序来讲是连续的。一个卷可能是更小的卷合并或组合后的结果。</p><h2 id="4-2文件存储空间管理"><a href="#4-2文件存储空间管理" class="headerlink" title="4.2文件存储空间管理"></a>4.2文件存储空间管理</h2><h3 id="4-2-1-预分配与动态分配"><a href="#4-2-1-预分配与动态分配" class="headerlink" title="4.2.1 预分配与动态分配"></a>4.2.1 预分配与动态分配</h3><ul><li>预分配策略要求在发出创建文件的请求时，声明该文件的最大大小。</li></ul><p>​    -若不能可靠地估计文件可能的最大大小，通常会多估计一些，以避免分配的空间不够。—浪费</p><ul><li>动态分配只有在需要时才给文件分配空间。</li></ul><p>​    -当创建一个新文件时，是否一次性地分配所需要的最大空间？</p><ul><li>预分配与动态分配</li></ul><p>​    -在分配时，采用什么分配策略?</p><p>​        a.可变大小的连续分区(类似分区式)</p><p>​        b.大小相等但不连续的块(类似页式)</p><p>​        c.采用什么数据结构记录分配给文件的空间?—文件分配表</p><h3 id="4-2-2-分配策略"><a href="#4-2-2-分配策略" class="headerlink" title="4.2.2 分配策略"></a>4.2.2 分配策略</h3><ul><li>文件分配时，需要综合考虑单个文件的效率和整个系统的效率</li></ul><p>​    -连续空间可以提高磁盘访问性能；</p><p>​    -使用可变大小的分区，可以减少由于超额分配而产生的未使用存储空间的派费；</p><p>​    -使用固定大小的分区可以简化空间的再分配；</p><p>​    -数目较多的小分区会增加用于管理分配信息表的大小。</p><ul><li>综合考虑的两种选择:</li></ul><p>​    -可变大小的连续分区</p><p>​        a.大小可变避免了浪費，文件分配表比较小</p><p>​        b.空间很难再次利用</p><p>​    -大小相等但不连续的块</p><p>​        a.小的固定分区提供了更多的灵活性</p><p>​        b.可能需要较大的文件分配表或更复杂的结构</p><h1 id="5-文件的物理结构"><a href="#5-文件的物理结构" class="headerlink" title="5.文件的物理结构"></a>5.文件的物理结构</h1><p>文件的物理结构是指文件在物理存储空间中存放(分配)的形式，亦称为文件的物理组织。</p><p>文件的物理结构涉及：块的划分、记录的排列索引的组织、信息的搜索，其优劣直接影响文件系统的性能。</p><p>文件的物理结构：顺序文件、链式文件、索引文件、直接文件</p><h2 id="5-1-顺序文件（连续文件）"><a href="#5-1-顺序文件（连续文件）" class="headerlink" title="5.1 顺序文件（连续文件）"></a>5.1 顺序文件（连续文件）</h2><ul><li><p>将一个文件存放到文件存储器连续的物理块中，便形成了顺序文件。</p></li><li><p>顺序文件中逻辑记录和物理记录顺序完全一致。通常记录按次序被读出或修改。</p></li><li><p>顺序文件的优点/缺点：读写高效/改变大小困难，磁盘碎片问题。File Allocation Table</p></li></ul><h2 id="5-2-链式文件（串联文件）"><a href="#5-2-链式文件（串联文件）" class="headerlink" title="5.2 链式文件（串联文件）"></a>5.2 链式文件（串联文件）</h2><ul><li><p>链式文件通过链指针将存放文件内容的各物理块联系起来</p></li><li><p>连接结构的优/缺点：文件读写效率低/易于扩展，不存在磁盘碎片问题</p></li></ul><h2 id="5-3-直接文件（哈希文件）"><a href="#5-3-直接文件（哈希文件）" class="headerlink" title="5.3 直接文件（哈希文件）"></a>5.3 直接文件（哈希文件）</h2><ul><li><p>通过hash函数在记录的关键字与其存储地址之间建立关系，据此实现存取即称为直接文件。</p></li><li><p>文件控制块</p></li></ul><h2 id="5-4-索引文件（链式文件的高效实现，现在几乎都采用）"><a href="#5-4-索引文件（链式文件的高效实现，现在几乎都采用）" class="headerlink" title="5.4 索引文件（链式文件的高效实现，现在几乎都采用）"></a>5.4 索引文件（链式文件的高效实现，现在几乎都采用）</h2><p>索引结构是实现非连续存储的另一种方法，适用于数据记录保存有随机存取存储设备上的文件。</p><p>使用索引表，其中登记了存放文件的物理块。</p><p>如果块长4KB (即索引块和数据块长4K)，每个指针(盘块号) 4B，则采用这种索引分配时，允许的文件最大尺寸是多少?</p><p>直接地址: <script type="math/tex">10 * 4KB= 40KB</script></p><p>一级索引: <script type="math/tex">4KB * (4KB/4B) = 4MB</script></p><p>二级索引: <script type="math/tex">4KB * (4KB/4B)^2= 4GB</script></p><p>三级索引: <script type="math/tex">4KB * (4KB/4B)^3 = 4TB</script></p><p>合计大小: <script type="math/tex">40KB+4MB+4GB+4TB</script></p><h1 id="6-文件共享与保护"><a href="#6-文件共享与保护" class="headerlink" title="6.文件共享与保护"></a>6.文件共享与保护</h1><ul><li>访问权限</li></ul><p>​    -无</p><p>​    -知道</p><p>​    -执行</p><p>​    -读</p><p>​    -追加</p><p>​    -更新</p><p>​    -改变保护</p><p>​    -删除</p><ul><li>同时访问</li></ul><p>​    -加锁</p><p>​    -互斥和死锁问题</p><h2 id="6-1-文件共享"><a href="#6-1-文件共享" class="headerlink" title="6.1 文件共享"></a>6.1 文件共享</h2><h3 id="6-1-1-基于目录指针实现文件共享"><a href="#6-1-1-基于目录指针实现文件共享" class="headerlink" title="6.1.1 基于目录指针实现文件共享"></a>6.1.1 基于目录指针实现文件共享</h3><p>允许一个文件可以有多个父目录，即有多个属于不同用户的目录，同时指向同一个文件，即可实现文件共享(但这会破坏树的特性一多个父节点! )</p><h3 id="6-1-2-利用索引节点"><a href="#6-1-2-利用索引节点" class="headerlink" title="6.1.2 利用索引节点"></a>6.1.2 利用索引节点</h3><p>利用索引结点，存放文件的物理地址、文件属性和文件共享与保护相关信息，而不同用户在其文件目录中设置共性文件的别名及指向相应索引结点的指针。</p><h3 id="6-1-3-利用符号链实现共享"><a href="#6-1-3-利用符号链实现共享" class="headerlink" title="6.1.3 利用符号链实现共享"></a>6.1.3 利用符号链实现共享</h3><p>由操作系统为被共享文件的创建一个LINK类型的文件(即该共享文件的路径名，称为符号链)，用户通过在自己的文件目录中包含指向该符号链文件的方法实现文件共享。</p><h2 id="6-2-文件保护"><a href="#6-2-文件保护" class="headerlink" title="6.2 文件保护"></a>6.2 文件保护</h2><p>利用符号链实现共享的优缺点</p><p>优点：只有文件主才拥有指向其索引结点的指针，而其他共享用户则只有该文件的路径名，因此不会因文件主删除一个共享 文件后留下悬空指针的问题。共享者通过符号链访问一个已被删除的共享文件将会访问失败时，则删除符号链。</p><p>缺点：用户访问共享文件时，系统是根据给定的文件路径名逐个分量(名)去查找目录，直至找到该文件的索引结点。因此，可能要多次读盘，开销大。此外，要为每个共享用户建立一条符号链，而由于链本身实际上是一个文件，也要为它分配索引结点，这也要耗费磁盘空间。</p><ul><li>文件保护用于防止文件被破坏。包括两个方面:</li></ul><p>​    一是防止系统崩溃所造成的文件破坏;</p><p>​    二是防止文件主和其他用户有意或无意的非法操作所造成的文件不安全性。</p><ul><li>防止系统崩溃造成文件破坏的方法:</li></ul><p>​    ➢定时转储</p><p>​    ➢多副本</p><ul><li><p>防止非法操作的方法:基本思想是建立三元组: (用户、 对象、存取权限)—访问控制</p></li><li><p>访问矩阵</p></li></ul><p>​    -主体</p><p>​    -对象</p><ul><li>访问权限</li></ul><h2 id="6-3-UNIX文件保护"><a href="#6-3-UNIX文件保护" class="headerlink" title="6.3 UNIX文件保护"></a>6.3 UNIX文件保护</h2><ul><li><p>UNIX/Linux把用户分为3类：文件主、同组用户、其他用户</p></li><li><p>定义3种存取权限：可读r、可写w、可执行x。文件属性共有10位：</p></li></ul><p>​      <code>-rwxrwxrwx</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;文件系统&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;课堂笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>高级操作系统</title>
    <link href="https://mysticalguest.github.io/2020/06/30/OS/DistributedSystem/"/>
    <id>https://mysticalguest.github.io/2020/06/30/OS/DistributedSystem/</id>
    <published>2020-06-30T01:56:43.838Z</published>
    <updated>2020-07-21T11:37:42.210Z</updated>
    
    <content type="html"><![CDATA[<p><strong>课程目标</strong></p><p>1、了解高级系统相关内容（主要包括网络OS与分布式系统的概念、特点、应用额体系结构与软硬件组成等）；</p><p>2、掌握单机操作系统设计实现原理（特别是常见的操作系统习题、试题的了理解和解答方法）。</p><a id="more"></a><h1 id="1-Distributed-Systems"><a href="#1-Distributed-Systems" class="headerlink" title="1 Distributed Systems"></a>1 Distributed Systems</h1><h2 id="1-1-Definition"><a href="#1-1-Definition" class="headerlink" title="1.1 Definition"></a>1.1 Definition</h2><p>一个分布式系统是：独立计算机的集合，对用户而言，它们看起来像是一个统一的系统。</p><ul><li>尚不存在一致性的定义，普遍接受的定义是：</li><li>分布式系统是若干台独立计算机的一种联合体，对用户而言，这个联合体就是一台单独的计算机。</li><li>在这个定义中，前半句说明是对计算机硬件的要求，后半句是对计算机软件的要求，这两项都是对分布式系统的基本的要求。</li></ul><p>另一个角度：</p><ul><li>分布式系统是这样一个系统，它运行在不具有共享内存的多台计算机上，但在用户眼里它却像是一台计算机。</li><li>实质思想：用户不必去关心系统中的多台计算机的存在。</li><li>尽管目前不存在完全满足该条件的系统，但已经有一些原型出现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Machine A               Machine B             Machine C</span><br><span class="line">----------              ----------            ----------</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|       Distributed  Application     分布式应用程序       |</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|       Middleware  Service             中间件服务       |</span><br><span class="line">|        |              |        |            |        |</span><br><span class="line">|Local OS|              |Local OS|            |Local OS|</span><br><span class="line">----------              ----------            ----------</span><br><span class="line">    |                       |                     |</span><br><span class="line">-----------------------------------------------------------Network</span><br></pre></td></tr></table></figure><blockquote><p><em>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。</em></p></blockquote><p>组织为中间件的分布式系统。<br>请注意，中间件层覆盖了多台计算机。</p><h2 id="1-2-分布式系统的特点"><a href="#1-2-分布式系统的特点" class="headerlink" title="1.2 分布式系统的特点"></a>1.2 分布式系统的特点</h2><h3 id="1-2-1-资源共享-Resource-Sharing"><a href="#1-2-1-资源共享-Resource-Sharing" class="headerlink" title="1.2.1 资源共享 Resource Sharing"></a>1.2.1 资源共享 Resource Sharing</h3><ul><li><strong>硬件资源共享</strong>：专用设备共享 =》 处理资源共享 =》 负载共享与负载均衡</li><li><strong>信息资源共享</strong>：如：电子商务应用共享同一数据对象，协同工作组共享同一数据空间</li><li><strong>软件资源共享</strong>：软件开发组共享同一开发工具，同一类应用任务调用同一处理软件</li><li><strong>资源异构、分布</strong> =》 资源<strong>命名</strong>方案、分布资源<strong>管理</strong>模型、策略与机制是要解决的重点</li><li><strong>互联网络环境</strong> =》 计算机资源共享和多媒体信息资源共享成为研究和开发的热点</li></ul><h3 id="1-2-2-透明性-Transparency"><a href="#1-2-2-透明性-Transparency" class="headerlink" title="1.2.2 透明性 Transparency"></a>1.2.2 透明性 Transparency</h3><ul><li>透明性的基本概念和内容</li></ul><p>机器边界、网络细节和系统状态对用户和应用程序员呈不可见性。多计算机环境 =》 单机环境。例如用户不必知道数据存在何处，进程在何处运行。</p><ul><li>优点</li></ul><p>软件易于研制；资源变动，软件影响小；</p><p>易于实现资源冗余；有利于资源操作移动</p><ul><li>实现难点</li></ul><p>大多数分布计算机系统固有的异构性增加了透明性实现的难度。</p><p>硬件异构性：指令系统不同、数据表示不同。系统配置不同</p><p>软件异构性：操作系统不同、网络协议不同</p><p>局部自治性限制全局透明性</p><div class="table-container"><table><thead><tr><th style="text-align:center">Transparency</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Access 访问</td><td style="text-align:center">隐藏数据表示形式和资源访问方式的差异</td></tr><tr><td style="text-align:center">Location</td><td style="text-align:center">隐藏资源所在的位置</td></tr><tr><td style="text-align:center">Migration 转移</td><td style="text-align:center">隐藏资源可能会移动到另一个位置</td></tr><tr><td style="text-align:center">Relocation 重定位</td><td style="text-align:center">隐藏资源在使用中可能会移动到另一个位置</td></tr><tr><td style="text-align:center">Replication 复写</td><td style="text-align:center">隐瞒资源可以通过多个副本进行部署和分发</td></tr><tr><td style="text-align:center">Concurrency</td><td style="text-align:center">隐瞒资源可能会由几个竞争用户共享</td></tr><tr><td style="text-align:center">Failure</td><td style="text-align:center">隐藏资源的故障和恢复</td></tr><tr><td style="text-align:center">Persistence</td><td style="text-align:center">隐藏（软件）资源是在内存中还是在磁盘上</td></tr></tbody></table></div><p>分布式系统透明性的不同形式。</p><h2 id="1-3-开放性-Openess"><a href="#1-3-开放性-Openess" class="headerlink" title="1.3 开放性 Openess"></a>1.3 开放性 Openess</h2><ul><li>是指系统以各种方式进行<strong>扩展的能力</strong>。核心是要求不同厂家的系统（软硬件）具有<strong>互操作性</strong>（Interoperability）和<strong>可移植性</strong>（Portability）</li></ul><p><strong>互操作性</strong>：不同厂家的系统可有效地相互交换信息</p><p><strong>可移植性</strong>：在较大范围的平台上运行同一软件的功能</p><p><strong>UNIX</strong>是一个优秀的开放式软件系统：开放式结构、源代码可用、硬件无关性；<strong>TCP/IP</strong>协议是另一个开放式系统的例子</p><ul><li>标准化是实现开放性的基本保证</li></ul><p><strong>标准</strong>是已被广泛接受的一种特定实现方法或功能集（接口）。</p><p><strong>开房</strong>放概念是一种思想、设计观点、系统特征。因此，标准并不意味着是最好的、并不总是绝对需要的（尤其是在早期）、不是一成不变的。</p><p>国际标准化组织<strong>ISO</strong>。</p><h2 id="1-4-延展性-Scalability"><a href="#1-4-延展性-Scalability" class="headerlink" title="1.4 延展性 Scalability"></a>1.4 延展性 Scalability</h2><p><strong>延展性的制约：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">Concept</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">Centralized services 集中服务</td><td style="text-align:center">一台适用于所有用户的服务器</td></tr><tr><td style="text-align:center">Centralized data 集中数据</td><td style="text-align:center">一本在线电话簿</td></tr><tr><td style="text-align:center">Centralized algorithms 集中式算法</td><td style="text-align:center">根据完整信息进行路由</td></tr></tbody></table></div><p>Scaling Techniques</p><h2 id="1-5-容错性-Fault-Tolerance"><a href="#1-5-容错性-Fault-Tolerance" class="headerlink" title="1.5 容错性 Fault Tolerance"></a>1.5 容错性 Fault Tolerance</h2><p><strong>基本概念</strong>  系统部分失效是能继续发挥作用的能力。如某个网络节点故障而不影响网络系统正常行为。</p><p>分布计算系统的<strong>资源多重性</strong>为实现容错创造条件：<strong>硬件资源冗余、数据多副本、动态切换</strong>。</p><p>系统容错是提高系统<strong>可靠性</strong>的重要途径。可靠性描述了系统成功运行的寿命特性。</p><p>容错性是分布计算应用的强烈需求：国防应用系统，电子商务应用的电子支付系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;课程目标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、了解高级系统相关内容（主要包括网络OS与分布式系统的概念、特点、应用额体系结构与软硬件组成等）；&lt;/p&gt;
&lt;p&gt;2、掌握单机操作系统设计实现原理（特别是常见的操作系统习题、试题的了理解和解答方法）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程" scheme="https://mysticalguest.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="OS" scheme="https://mysticalguest.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript入门</title>
    <link href="https://mysticalguest.github.io/2020/06/30/ts/TypeScript/"/>
    <id>https://mysticalguest.github.io/2020/06/30/ts/TypeScript/</id>
    <published>2020-06-30T00:41:29.115Z</published>
    <updated>2020-07-21T11:37:42.208Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>TypeScript教程</em></strong></p><p><a href="https://www.tslang.cn/">TypeScript官网</a></p><a id="more"></a><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><h2 id="1-1-NPM安装"><a href="#1-1-NPM安装" class="headerlink" title="1.1 NPM安装"></a>1.1 NPM安装</h2><ul><li>在项目中打开终端，执行下面命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm install <span class="literal">-g</span> typescript</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.runoob.com/typescript/ts-install.html">菜鸟教程</a></li></ul><h2 id="1-2-测试"><a href="#1-2-测试" class="headerlink" title="1.2 测试"></a>1.2 测试</h2><p>安装完成后我们可以使用 <code>tsc</code> 命令来执行 TypeScript 的相关代码，以下是查看版本号：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tsc <span class="literal">-v</span></span><br><span class="line">Version <span class="number">3.9</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="1-3-Hello-World"><a href="#1-3-Hello-World" class="headerlink" title="1.3 Hello World"></a>1.3 Hello World</h2><ul><li>然后我们新建一个 <code>test.ts</code> 的文件，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message:string = <span class="string">"Hello World"</span> </span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br></pre></td></tr></table></figure><p><code>.ts</code> 为 TypeScript 代码文件的扩展名。</p><ul><li>然后执行以下命令将 TypeScript 转换为 JavaScript 代码：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tsc test.ts</span><br></pre></td></tr></table></figure><ul><li>这时候再当前目录下（与 test.ts 同一目录）就会生成一个 test.js 文件，代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><ul><li>使用 node 命令来执行 test.js 文件：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> node test.js</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;TypeScript教程&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tslang.cn/&quot;&gt;TypeScript官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://mysticalguest.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TypeScript" scheme="https://mysticalguest.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue整合Axios</title>
    <link href="https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Axios/"/>
    <id>https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Axios/</id>
    <published>2020-06-29T02:07:00.310Z</published>
    <updated>2020-07-21T11:37:42.212Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Vue整合Axios，封装API</em></strong></p><p><a href="https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">Axios官方API</a></p><a id="more"></a><h1 id="1-安装axios"><a href="#1-安装axios" class="headerlink" title="1.安装axios"></a>1.安装axios</h1><ul><li>npm管理：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm i axios <span class="literal">-S</span></span><br></pre></td></tr></table></figure><ul><li>CDN：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-封装axios"><a href="#2-封装axios" class="headerlink" title="2.封装axios"></a>2.封装axios</h1><p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御cSRF等。所以官方也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步<a href="https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">Axios官方API</a>。</p><h2 id="2-2-引入"><a href="#2-2-引入" class="headerlink" title="2.2 引入"></a>2.2 引入</h2><p>在项目的<code>src</code>目录中，新建一个<code>request</code>文件夹，然后在里面新建一个<code>http.js</code>；新建一个apis文件夹，然后在里面新建一个<code>api.js</code>文件。<code>http.js</code>文件用来封装我们的<code>axios</code>，<code>api.js</code>用来统一管理我们的接口。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-lone-blocks */</span></span><br><span class="line"><span class="comment">// axios package</span></span><br><span class="line"><span class="comment">// 引入axios，并加到原型链中</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">Vue.prototype.$store = store;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'/'</span> <span class="comment">// 关键代码</span></span><br></pre></td></tr></table></figure><h2 id="2-3-设置请求时间"><a href="#2-3-设置请求时间" class="headerlink" title="2.3 设置请求时间"></a>2.3 设置请求时间</h2><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认的请求超时时间。超过了10s，告知用户当前请求超时，请刷新等。</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-post请求头设置"><a href="#2-4-post请求头设置" class="headerlink" title="2.4 post请求头设置"></a>2.4 post请求头设置</h2><p>post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为<code>application/x-www-form-urlencoded;charset=UTF-8</code></p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br></pre></td></tr></table></figure><h2 id="2-5-请求拦截器"><a href="#2-5-请求拦截器" class="headerlink" title="2.5 请求拦截器"></a>2.5 请求拦截器</h2><p>在发送请求前可以进行一个请求的拦截，为什么要拦截呢？拦截请求是用来做什么的呢？</p><p>比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span> <span class="comment">//@ 等价于/src这个目录</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==============================</span></span><br><span class="line"><span class="comment">    拦截器</span></span><br><span class="line"><span class="comment">  ============================== */</span></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断vuex中是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">    <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求拦截器config'</span> + config.headers.Authorization);</span><br><span class="line">    <span class="keyword">const</span> token = store.state.token;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'store.state'</span> + store.state);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'token:'</span> + token);</span><br><span class="line">    token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">    <span class="comment">// if (token) &#123;</span></span><br><span class="line">    <span class="comment">//   config.headers.Authorization = token;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error:'</span> + error);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><code>token</code>：一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在<code>main.js</code>中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。</p><p>那么每个请求都携带token，那么如果一个页面不需要用户登录就可以访问的怎么办呢？其实，前端的请求可以携带token，但是后台可以选择不接收的。</p></blockquote><h2 id="2-6-响应拦截器"><a href="#2-6-响应拦截器" class="headerlink" title="2.6 响应拦截器"></a>2.6 响应拦截器</h2><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 请求成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">    <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器'</span> + response.status);</span><br><span class="line">    <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应拦截器'</span> + response.status);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">  <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span></span><br><span class="line">  <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">  <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器error::'</span> + error);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应拦截器码: '</span> + error.response.status);</span><br><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">      <span class="comment">// 401: 未登录</span></span><br><span class="line">      <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">      <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'响应拦截器error::401'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'401::'</span> + router);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'401::'</span> + router.currentRoute.fullPath);</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/login'</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 403 token过期</span></span><br><span class="line">        <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">        <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">        <span class="comment">// 跳转登录页面</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">        <span class="comment">// 清除token</span></span><br><span class="line">        localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">        store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          router.replace(&#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            query: &#123;</span><br><span class="line">              redirect: router.currentRoute.fullPath</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/login'</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。</p><p>例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p></blockquote><h2 id="2-7-封装get方法和post方法"><a href="#2-7-封装get方法和post方法" class="headerlink" title="2.7 封装get方法和post方法"></a>2.7 封装get方法和post方法</h2><p>常用的ajax请求方法有get、post、put等方法，axios对应的也有很多类似的方法。为了简化代码，还是要对其进行一个简单的封装。下面主要封装两个方法：get和post。</p><ul><li>get方法</li></ul><p>通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数。</p><p>http.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==============================</span></span><br><span class="line"><span class="comment">    封装get方法和post方法</span></span><br><span class="line"><span class="comment">  ============================== */</span></span><br><span class="line"><span class="comment">// const Domain = "http://255.255.255.0:8000";  // 定义根域名</span></span><br><span class="line"><span class="keyword">const</span> Domain = <span class="string">''</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// url 判断是测试环境 就要拿 测试环境的域名， 正式环境的就要用 正式域名</span></span><br><span class="line">    <span class="keyword">const</span> url = Domain + action;</span><br><span class="line">    axios.get(url, &#123;</span><br><span class="line">      params: params</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res.data);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>post方法</li></ul><p>原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行<strong>序列化</strong>的操作，所以我们可以通过<code>node</code>的<code>qs</code>模块来序列化我们的参数。这个很重要，如果没有<strong>序列化</strong>操作，后台是拿不到提交的数据的。</p><p>可以通过<code>import QS from &#39;qs&#39;</code>引入qs模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Domain + action;</span><br><span class="line">    axios.post(url, params)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err.data)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>axios.get()</code>方法和<code>axios.post()</code>在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p></blockquote><p>封装完成啦！</p><h1 id="3-接口统一管理"><a href="#3-接口统一管理" class="headerlink" title="3.接口统一管理"></a>3.接口统一管理</h1><p>整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。文件中存放所有的api接口。</p><ul><li>在<code>api.js</code>中引入封装的get和post方法。</li></ul><p>api.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * api接口统一管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span>, post &#125; from '@/request/http'</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  postData(action, params)&#123;</span><br><span class="line">    <span class="keyword">return</span> post(action, params)</span><br><span class="line">  &#125;,</span><br><span class="line">  getData(action, params)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(action, params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在组件中使用：</li></ul><p>任意vue文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;#&quot;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Vue from &#39;vue&#39;;</span><br><span class="line">  import api from &#39;@&#x2F;api&#x2F;api.js&#39;;</span><br><span class="line">  Vue.prototype.$api &#x3D; api;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;#&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value1:&#39;&#39;,</span><br><span class="line">        value2:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      functiondemo(arg)&#123;</span><br><span class="line">        &#x2F;&#x2F; 序列化数据</span><br><span class="line">        let param &#x3D; new URLSearchParams();</span><br><span class="line">       </span><br><span class="line">        param.append(&quot;key1&quot;, this.value1);</span><br><span class="line">        param.append(&quot;key2&quot;, this.value2);</span><br><span class="line">        </span><br><span class="line">        this.$api.postData(&#39;&#x2F;url&#39;, param)</span><br><span class="line">        .then(response &#x3D;&gt; &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其他的api接口，就在<code>api.js</code>中继续往下面扩展就可以了！</p><p>并为每个接口写好注释！</p></blockquote><p>api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在<code>api.js</code>中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就会很麻烦。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Vue整合Axios，封装API&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html&quot;&gt;Axios官方API&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Axios" scheme="https://mysticalguest.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue整合Element-UI</title>
    <link href="https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Element-UI/"/>
    <id>https://mysticalguest.github.io/2020/06/29/Vue/Vue%E5%BC%95%E5%85%A5Element-UI/</id>
    <published>2020-06-29T01:43:32.825Z</published>
    <updated>2020-07-21T11:37:42.220Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>安装Element-UI</em></strong></p><p><a href="https://element.eleme.cn/">Element-UI官方中文网</a></p><a id="more"></a><h2 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1 安装命令"></a>1 安装命令</h2><ul><li>在项目中打开终端，执行下面命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> cnpm i element<span class="literal">-ui</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure><ul><li>CDN</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://element.eleme.cn/#/zh-CN/component/installation">官方教程</a></li></ul><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2 引入"></a>2 引入</h2><p>在项目的<code>src/mian.js</code>中引用element-ui：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="comment">// 引入Element-UI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>上述配置完成就可以使用Element-UI了，直接在组件中使用EL标签即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;安装Element-UI&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://element.eleme.cn/&quot;&gt;Element-UI官方中文网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://mysticalguest.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Element-UI" scheme="https://mysticalguest.github.io/tags/Element-UI/"/>
    
  </entry>
  
</feed>
